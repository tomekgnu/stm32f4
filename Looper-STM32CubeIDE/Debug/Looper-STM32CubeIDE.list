
Looper-STM32CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000188cc  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001f2c  08018a7c  08018a7c  00028a7c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801a9a8  0801a9a8  00030358  2**0
                  CONTENTS
  4 .ARM          00000008  0801a9a8  0801a9a8  0002a9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801a9b0  0801a9b0  00030358  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801a9b0  0801a9b0  0002a9b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801a9b4  0801a9b4  0002a9b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000358  20000000  0801a9b8  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00030358  2**0
                  CONTENTS
 10 .bss          00002ed0  20000358  20000358  00030358  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20003228  20003228  00030358  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00030358  2**0
                  CONTENTS, READONLY
 13 .debug_info   0003ade2  00000000  00000000  00030388  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00008dc4  00000000  00000000  0006b16a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00002d30  00000000  00000000  00073f30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000029e0  00000000  00000000  00076c60  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00033eff  00000000  00000000  00079640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0003c7e1  00000000  00000000  000ad53f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010474f  00000000  00000000  000e9d20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001ee46f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000c54c  00000000  00000000  001ee4c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000358 	.word	0x20000358
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08018a64 	.word	0x08018a64

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000035c 	.word	0x2000035c
 80001ec:	08018a64 	.word	0x08018a64

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	; 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__aeabi_d2uiz>:
 8000a3c:	004a      	lsls	r2, r1, #1
 8000a3e:	d211      	bcs.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a40:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a44:	d211      	bcs.n	8000a6a <__aeabi_d2uiz+0x2e>
 8000a46:	d50d      	bpl.n	8000a64 <__aeabi_d2uiz+0x28>
 8000a48:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a4c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a50:	d40e      	bmi.n	8000a70 <__aeabi_d2uiz+0x34>
 8000a52:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a56:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a5a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a6e:	d102      	bne.n	8000a76 <__aeabi_d2uiz+0x3a>
 8000a70:	f04f 30ff 	mov.w	r0, #4294967295
 8000a74:	4770      	bx	lr
 8000a76:	f04f 0000 	mov.w	r0, #0
 8000a7a:	4770      	bx	lr

08000a7c <__aeabi_d2f>:
 8000a7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a84:	bf24      	itt	cs
 8000a86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a8e:	d90d      	bls.n	8000aac <__aeabi_d2f+0x30>
 8000a90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aa0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000aa4:	bf08      	it	eq
 8000aa6:	f020 0001 	biceq.w	r0, r0, #1
 8000aaa:	4770      	bx	lr
 8000aac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ab0:	d121      	bne.n	8000af6 <__aeabi_d2f+0x7a>
 8000ab2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000ab6:	bfbc      	itt	lt
 8000ab8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	4770      	bxlt	lr
 8000abe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ac2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ac6:	f1c2 0218 	rsb	r2, r2, #24
 8000aca:	f1c2 0c20 	rsb	ip, r2, #32
 8000ace:	fa10 f30c 	lsls.w	r3, r0, ip
 8000ad2:	fa20 f002 	lsr.w	r0, r0, r2
 8000ad6:	bf18      	it	ne
 8000ad8:	f040 0001 	orrne.w	r0, r0, #1
 8000adc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ae4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ae8:	ea40 000c 	orr.w	r0, r0, ip
 8000aec:	fa23 f302 	lsr.w	r3, r3, r2
 8000af0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000af4:	e7cc      	b.n	8000a90 <__aeabi_d2f+0x14>
 8000af6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000afa:	d107      	bne.n	8000b0c <__aeabi_d2f+0x90>
 8000afc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b00:	bf1e      	ittt	ne
 8000b02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b0a:	4770      	bxne	lr
 8000b0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_uldivmod>:
 8000b1c:	b953      	cbnz	r3, 8000b34 <__aeabi_uldivmod+0x18>
 8000b1e:	b94a      	cbnz	r2, 8000b34 <__aeabi_uldivmod+0x18>
 8000b20:	2900      	cmp	r1, #0
 8000b22:	bf08      	it	eq
 8000b24:	2800      	cmpeq	r0, #0
 8000b26:	bf1c      	itt	ne
 8000b28:	f04f 31ff 	movne.w	r1, #4294967295
 8000b2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000b30:	f000 b974 	b.w	8000e1c <__aeabi_idiv0>
 8000b34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b3c:	f000 f806 	bl	8000b4c <__udivmoddi4>
 8000b40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b48:	b004      	add	sp, #16
 8000b4a:	4770      	bx	lr

08000b4c <__udivmoddi4>:
 8000b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b50:	9d08      	ldr	r5, [sp, #32]
 8000b52:	4604      	mov	r4, r0
 8000b54:	468e      	mov	lr, r1
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d14d      	bne.n	8000bf6 <__udivmoddi4+0xaa>
 8000b5a:	428a      	cmp	r2, r1
 8000b5c:	4694      	mov	ip, r2
 8000b5e:	d969      	bls.n	8000c34 <__udivmoddi4+0xe8>
 8000b60:	fab2 f282 	clz	r2, r2
 8000b64:	b152      	cbz	r2, 8000b7c <__udivmoddi4+0x30>
 8000b66:	fa01 f302 	lsl.w	r3, r1, r2
 8000b6a:	f1c2 0120 	rsb	r1, r2, #32
 8000b6e:	fa20 f101 	lsr.w	r1, r0, r1
 8000b72:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b76:	ea41 0e03 	orr.w	lr, r1, r3
 8000b7a:	4094      	lsls	r4, r2
 8000b7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000b80:	0c21      	lsrs	r1, r4, #16
 8000b82:	fbbe f6f8 	udiv	r6, lr, r8
 8000b86:	fa1f f78c 	uxth.w	r7, ip
 8000b8a:	fb08 e316 	mls	r3, r8, r6, lr
 8000b8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000b92:	fb06 f107 	mul.w	r1, r6, r7
 8000b96:	4299      	cmp	r1, r3
 8000b98:	d90a      	bls.n	8000bb0 <__udivmoddi4+0x64>
 8000b9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000b9e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ba2:	f080 811f 	bcs.w	8000de4 <__udivmoddi4+0x298>
 8000ba6:	4299      	cmp	r1, r3
 8000ba8:	f240 811c 	bls.w	8000de4 <__udivmoddi4+0x298>
 8000bac:	3e02      	subs	r6, #2
 8000bae:	4463      	add	r3, ip
 8000bb0:	1a5b      	subs	r3, r3, r1
 8000bb2:	b2a4      	uxth	r4, r4
 8000bb4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bb8:	fb08 3310 	mls	r3, r8, r0, r3
 8000bbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bc0:	fb00 f707 	mul.w	r7, r0, r7
 8000bc4:	42a7      	cmp	r7, r4
 8000bc6:	d90a      	bls.n	8000bde <__udivmoddi4+0x92>
 8000bc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bcc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bd0:	f080 810a 	bcs.w	8000de8 <__udivmoddi4+0x29c>
 8000bd4:	42a7      	cmp	r7, r4
 8000bd6:	f240 8107 	bls.w	8000de8 <__udivmoddi4+0x29c>
 8000bda:	4464      	add	r4, ip
 8000bdc:	3802      	subs	r0, #2
 8000bde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000be2:	1be4      	subs	r4, r4, r7
 8000be4:	2600      	movs	r6, #0
 8000be6:	b11d      	cbz	r5, 8000bf0 <__udivmoddi4+0xa4>
 8000be8:	40d4      	lsrs	r4, r2
 8000bea:	2300      	movs	r3, #0
 8000bec:	e9c5 4300 	strd	r4, r3, [r5]
 8000bf0:	4631      	mov	r1, r6
 8000bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bf6:	428b      	cmp	r3, r1
 8000bf8:	d909      	bls.n	8000c0e <__udivmoddi4+0xc2>
 8000bfa:	2d00      	cmp	r5, #0
 8000bfc:	f000 80ef 	beq.w	8000dde <__udivmoddi4+0x292>
 8000c00:	2600      	movs	r6, #0
 8000c02:	e9c5 0100 	strd	r0, r1, [r5]
 8000c06:	4630      	mov	r0, r6
 8000c08:	4631      	mov	r1, r6
 8000c0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c0e:	fab3 f683 	clz	r6, r3
 8000c12:	2e00      	cmp	r6, #0
 8000c14:	d14a      	bne.n	8000cac <__udivmoddi4+0x160>
 8000c16:	428b      	cmp	r3, r1
 8000c18:	d302      	bcc.n	8000c20 <__udivmoddi4+0xd4>
 8000c1a:	4282      	cmp	r2, r0
 8000c1c:	f200 80f9 	bhi.w	8000e12 <__udivmoddi4+0x2c6>
 8000c20:	1a84      	subs	r4, r0, r2
 8000c22:	eb61 0303 	sbc.w	r3, r1, r3
 8000c26:	2001      	movs	r0, #1
 8000c28:	469e      	mov	lr, r3
 8000c2a:	2d00      	cmp	r5, #0
 8000c2c:	d0e0      	beq.n	8000bf0 <__udivmoddi4+0xa4>
 8000c2e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c32:	e7dd      	b.n	8000bf0 <__udivmoddi4+0xa4>
 8000c34:	b902      	cbnz	r2, 8000c38 <__udivmoddi4+0xec>
 8000c36:	deff      	udf	#255	; 0xff
 8000c38:	fab2 f282 	clz	r2, r2
 8000c3c:	2a00      	cmp	r2, #0
 8000c3e:	f040 8092 	bne.w	8000d66 <__udivmoddi4+0x21a>
 8000c42:	eba1 010c 	sub.w	r1, r1, ip
 8000c46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c4a:	fa1f fe8c 	uxth.w	lr, ip
 8000c4e:	2601      	movs	r6, #1
 8000c50:	0c20      	lsrs	r0, r4, #16
 8000c52:	fbb1 f3f7 	udiv	r3, r1, r7
 8000c56:	fb07 1113 	mls	r1, r7, r3, r1
 8000c5a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c5e:	fb0e f003 	mul.w	r0, lr, r3
 8000c62:	4288      	cmp	r0, r1
 8000c64:	d908      	bls.n	8000c78 <__udivmoddi4+0x12c>
 8000c66:	eb1c 0101 	adds.w	r1, ip, r1
 8000c6a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c6e:	d202      	bcs.n	8000c76 <__udivmoddi4+0x12a>
 8000c70:	4288      	cmp	r0, r1
 8000c72:	f200 80cb 	bhi.w	8000e0c <__udivmoddi4+0x2c0>
 8000c76:	4643      	mov	r3, r8
 8000c78:	1a09      	subs	r1, r1, r0
 8000c7a:	b2a4      	uxth	r4, r4
 8000c7c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000c80:	fb07 1110 	mls	r1, r7, r0, r1
 8000c84:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000c88:	fb0e fe00 	mul.w	lr, lr, r0
 8000c8c:	45a6      	cmp	lr, r4
 8000c8e:	d908      	bls.n	8000ca2 <__udivmoddi4+0x156>
 8000c90:	eb1c 0404 	adds.w	r4, ip, r4
 8000c94:	f100 31ff 	add.w	r1, r0, #4294967295
 8000c98:	d202      	bcs.n	8000ca0 <__udivmoddi4+0x154>
 8000c9a:	45a6      	cmp	lr, r4
 8000c9c:	f200 80bb 	bhi.w	8000e16 <__udivmoddi4+0x2ca>
 8000ca0:	4608      	mov	r0, r1
 8000ca2:	eba4 040e 	sub.w	r4, r4, lr
 8000ca6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000caa:	e79c      	b.n	8000be6 <__udivmoddi4+0x9a>
 8000cac:	f1c6 0720 	rsb	r7, r6, #32
 8000cb0:	40b3      	lsls	r3, r6
 8000cb2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000cb6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000cba:	fa20 f407 	lsr.w	r4, r0, r7
 8000cbe:	fa01 f306 	lsl.w	r3, r1, r6
 8000cc2:	431c      	orrs	r4, r3
 8000cc4:	40f9      	lsrs	r1, r7
 8000cc6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000cca:	fa00 f306 	lsl.w	r3, r0, r6
 8000cce:	fbb1 f8f9 	udiv	r8, r1, r9
 8000cd2:	0c20      	lsrs	r0, r4, #16
 8000cd4:	fa1f fe8c 	uxth.w	lr, ip
 8000cd8:	fb09 1118 	mls	r1, r9, r8, r1
 8000cdc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000ce0:	fb08 f00e 	mul.w	r0, r8, lr
 8000ce4:	4288      	cmp	r0, r1
 8000ce6:	fa02 f206 	lsl.w	r2, r2, r6
 8000cea:	d90b      	bls.n	8000d04 <__udivmoddi4+0x1b8>
 8000cec:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000cf4:	f080 8088 	bcs.w	8000e08 <__udivmoddi4+0x2bc>
 8000cf8:	4288      	cmp	r0, r1
 8000cfa:	f240 8085 	bls.w	8000e08 <__udivmoddi4+0x2bc>
 8000cfe:	f1a8 0802 	sub.w	r8, r8, #2
 8000d02:	4461      	add	r1, ip
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d0c:	fb09 1110 	mls	r1, r9, r0, r1
 8000d10:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d18:	458e      	cmp	lr, r1
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x1e2>
 8000d1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000d20:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d24:	d26c      	bcs.n	8000e00 <__udivmoddi4+0x2b4>
 8000d26:	458e      	cmp	lr, r1
 8000d28:	d96a      	bls.n	8000e00 <__udivmoddi4+0x2b4>
 8000d2a:	3802      	subs	r0, #2
 8000d2c:	4461      	add	r1, ip
 8000d2e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d32:	fba0 9402 	umull	r9, r4, r0, r2
 8000d36:	eba1 010e 	sub.w	r1, r1, lr
 8000d3a:	42a1      	cmp	r1, r4
 8000d3c:	46c8      	mov	r8, r9
 8000d3e:	46a6      	mov	lr, r4
 8000d40:	d356      	bcc.n	8000df0 <__udivmoddi4+0x2a4>
 8000d42:	d053      	beq.n	8000dec <__udivmoddi4+0x2a0>
 8000d44:	b15d      	cbz	r5, 8000d5e <__udivmoddi4+0x212>
 8000d46:	ebb3 0208 	subs.w	r2, r3, r8
 8000d4a:	eb61 010e 	sbc.w	r1, r1, lr
 8000d4e:	fa01 f707 	lsl.w	r7, r1, r7
 8000d52:	fa22 f306 	lsr.w	r3, r2, r6
 8000d56:	40f1      	lsrs	r1, r6
 8000d58:	431f      	orrs	r7, r3
 8000d5a:	e9c5 7100 	strd	r7, r1, [r5]
 8000d5e:	2600      	movs	r6, #0
 8000d60:	4631      	mov	r1, r6
 8000d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d66:	f1c2 0320 	rsb	r3, r2, #32
 8000d6a:	40d8      	lsrs	r0, r3
 8000d6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d70:	fa21 f303 	lsr.w	r3, r1, r3
 8000d74:	4091      	lsls	r1, r2
 8000d76:	4301      	orrs	r1, r0
 8000d78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d7c:	fa1f fe8c 	uxth.w	lr, ip
 8000d80:	fbb3 f0f7 	udiv	r0, r3, r7
 8000d84:	fb07 3610 	mls	r6, r7, r0, r3
 8000d88:	0c0b      	lsrs	r3, r1, #16
 8000d8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000d8e:	fb00 f60e 	mul.w	r6, r0, lr
 8000d92:	429e      	cmp	r6, r3
 8000d94:	fa04 f402 	lsl.w	r4, r4, r2
 8000d98:	d908      	bls.n	8000dac <__udivmoddi4+0x260>
 8000d9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000da2:	d22f      	bcs.n	8000e04 <__udivmoddi4+0x2b8>
 8000da4:	429e      	cmp	r6, r3
 8000da6:	d92d      	bls.n	8000e04 <__udivmoddi4+0x2b8>
 8000da8:	3802      	subs	r0, #2
 8000daa:	4463      	add	r3, ip
 8000dac:	1b9b      	subs	r3, r3, r6
 8000dae:	b289      	uxth	r1, r1
 8000db0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000db4:	fb07 3316 	mls	r3, r7, r6, r3
 8000db8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dbc:	fb06 f30e 	mul.w	r3, r6, lr
 8000dc0:	428b      	cmp	r3, r1
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x28a>
 8000dc4:	eb1c 0101 	adds.w	r1, ip, r1
 8000dc8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000dcc:	d216      	bcs.n	8000dfc <__udivmoddi4+0x2b0>
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d914      	bls.n	8000dfc <__udivmoddi4+0x2b0>
 8000dd2:	3e02      	subs	r6, #2
 8000dd4:	4461      	add	r1, ip
 8000dd6:	1ac9      	subs	r1, r1, r3
 8000dd8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ddc:	e738      	b.n	8000c50 <__udivmoddi4+0x104>
 8000dde:	462e      	mov	r6, r5
 8000de0:	4628      	mov	r0, r5
 8000de2:	e705      	b.n	8000bf0 <__udivmoddi4+0xa4>
 8000de4:	4606      	mov	r6, r0
 8000de6:	e6e3      	b.n	8000bb0 <__udivmoddi4+0x64>
 8000de8:	4618      	mov	r0, r3
 8000dea:	e6f8      	b.n	8000bde <__udivmoddi4+0x92>
 8000dec:	454b      	cmp	r3, r9
 8000dee:	d2a9      	bcs.n	8000d44 <__udivmoddi4+0x1f8>
 8000df0:	ebb9 0802 	subs.w	r8, r9, r2
 8000df4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000df8:	3801      	subs	r0, #1
 8000dfa:	e7a3      	b.n	8000d44 <__udivmoddi4+0x1f8>
 8000dfc:	4646      	mov	r6, r8
 8000dfe:	e7ea      	b.n	8000dd6 <__udivmoddi4+0x28a>
 8000e00:	4620      	mov	r0, r4
 8000e02:	e794      	b.n	8000d2e <__udivmoddi4+0x1e2>
 8000e04:	4640      	mov	r0, r8
 8000e06:	e7d1      	b.n	8000dac <__udivmoddi4+0x260>
 8000e08:	46d0      	mov	r8, sl
 8000e0a:	e77b      	b.n	8000d04 <__udivmoddi4+0x1b8>
 8000e0c:	3b02      	subs	r3, #2
 8000e0e:	4461      	add	r1, ip
 8000e10:	e732      	b.n	8000c78 <__udivmoddi4+0x12c>
 8000e12:	4630      	mov	r0, r6
 8000e14:	e709      	b.n	8000c2a <__udivmoddi4+0xde>
 8000e16:	4464      	add	r4, ip
 8000e18:	3802      	subs	r0, #2
 8000e1a:	e742      	b.n	8000ca2 <__udivmoddi4+0x156>

08000e1c <__aeabi_idiv0>:
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop

08000e20 <SRAM_resetReader>:
static void incrementWriter(int size);
static void SRAM_resetReader();
static void SRAM_resetWriter();


static void SRAM_resetReader(){
 8000e20:	b480      	push	{r7}
 8000e22:	af00      	add	r7, sp, #0
	currentReader.currentByte.value = 0;
 8000e24:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <SRAM_resetReader+0x28>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	601a      	str	r2, [r3, #0]
	currentReader.currentPage.value = 0;
 8000e2a:	4b07      	ldr	r3, [pc, #28]	; (8000e48 <SRAM_resetReader+0x28>)
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	605a      	str	r2, [r3, #4]
	currentReader.totalBytes.value = 0;
 8000e30:	4b05      	ldr	r3, [pc, #20]	; (8000e48 <SRAM_resetReader+0x28>)
 8000e32:	2200      	movs	r2, #0
 8000e34:	609a      	str	r2, [r3, #8]
	currentSRAM = 0;
 8000e36:	4b05      	ldr	r3, [pc, #20]	; (8000e4c <SRAM_resetReader+0x2c>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	701a      	strb	r2, [r3, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e44:	4770      	bx	lr
 8000e46:	bf00      	nop
 8000e48:	20000378 	.word	0x20000378
 8000e4c:	20000374 	.word	0x20000374

08000e50 <SRAM_resetWriter>:

static void SRAM_resetWriter(){
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0
	currentWriter.currentByte.value = 0;
 8000e54:	4b08      	ldr	r3, [pc, #32]	; (8000e78 <SRAM_resetWriter+0x28>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	601a      	str	r2, [r3, #0]
	currentWriter.currentPage.value = 0;
 8000e5a:	4b07      	ldr	r3, [pc, #28]	; (8000e78 <SRAM_resetWriter+0x28>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	605a      	str	r2, [r3, #4]
	currentWriter.totalBytes.value = 0;
 8000e60:	4b05      	ldr	r3, [pc, #20]	; (8000e78 <SRAM_resetWriter+0x28>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	609a      	str	r2, [r3, #8]
	currentSRAM = 0;
 8000e66:	4b05      	ldr	r3, [pc, #20]	; (8000e7c <SRAM_resetWriter+0x2c>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	701a      	strb	r2, [r3, #0]
}
 8000e6c:	bf00      	nop
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	20000388 	.word	0x20000388
 8000e7c:	20000374 	.word	0x20000374

08000e80 <SRAM_readerPosition>:

uint32_t SRAM_writerPosition(){
	return currentWriter.totalBytes.value;
}

uint32_t SRAM_readerPosition(){
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
	return currentReader.totalBytes.value;
 8000e84:	4b03      	ldr	r3, [pc, #12]	; (8000e94 <SRAM_readerPosition+0x14>)
 8000e86:	689b      	ldr	r3, [r3, #8]
}
 8000e88:	4618      	mov	r0, r3
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e90:	4770      	bx	lr
 8000e92:	bf00      	nop
 8000e94:	20000378 	.word	0x20000378

08000e98 <SRAM_seekRead>:

void SRAM_seekRead(unsigned int size,unsigned int whence){
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
 8000ea0:	6039      	str	r1, [r7, #0]
	switch(whence){
 8000ea2:	683b      	ldr	r3, [r7, #0]
 8000ea4:	2b02      	cmp	r3, #2
 8000ea6:	d010      	beq.n	8000eca <SRAM_seekRead+0x32>
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	2b02      	cmp	r3, #2
 8000eac:	d81b      	bhi.n	8000ee6 <SRAM_seekRead+0x4e>
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d003      	beq.n	8000ebc <SRAM_seekRead+0x24>
 8000eb4:	683b      	ldr	r3, [r7, #0]
 8000eb6:	2b01      	cmp	r3, #1
 8000eb8:	d00c      	beq.n	8000ed4 <SRAM_seekRead+0x3c>
		case SRAM_CUR: incrementReader(size);
					   break;
		case SRAM_END: SRAM_resetReader();
					   incrementReader(SRAMTotalSize - size);
					   break;
		default:	   break;
 8000eba:	e014      	b.n	8000ee6 <SRAM_seekRead+0x4e>
		case SRAM_SET: SRAM_resetReader();
 8000ebc:	f7ff ffb0 	bl	8000e20 <SRAM_resetReader>
					   incrementReader(size);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f000 f840 	bl	8000f48 <incrementReader>
					   break;
 8000ec8:	e00e      	b.n	8000ee8 <SRAM_seekRead+0x50>
		case SRAM_CUR: incrementReader(size);
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	4618      	mov	r0, r3
 8000ece:	f000 f83b 	bl	8000f48 <incrementReader>
					   break;
 8000ed2:	e009      	b.n	8000ee8 <SRAM_seekRead+0x50>
		case SRAM_END: SRAM_resetReader();
 8000ed4:	f7ff ffa4 	bl	8000e20 <SRAM_resetReader>
					   incrementReader(SRAMTotalSize - size);
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f000 f832 	bl	8000f48 <incrementReader>
					   break;
 8000ee4:	e000      	b.n	8000ee8 <SRAM_seekRead+0x50>
		default:	   break;
 8000ee6:	bf00      	nop

	}

}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}

08000ef0 <SRAM_seekWrite>:

void SRAM_seekWrite(unsigned int size,unsigned int whence){
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
	switch(whence){
 8000efa:	683b      	ldr	r3, [r7, #0]
 8000efc:	2b02      	cmp	r3, #2
 8000efe:	d010      	beq.n	8000f22 <SRAM_seekWrite+0x32>
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	2b02      	cmp	r3, #2
 8000f04:	d81b      	bhi.n	8000f3e <SRAM_seekWrite+0x4e>
 8000f06:	683b      	ldr	r3, [r7, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d003      	beq.n	8000f14 <SRAM_seekWrite+0x24>
 8000f0c:	683b      	ldr	r3, [r7, #0]
 8000f0e:	2b01      	cmp	r3, #1
 8000f10:	d00c      	beq.n	8000f2c <SRAM_seekWrite+0x3c>
		case SRAM_CUR: incrementWriter(size);
					   break;
		case SRAM_END: SRAM_resetWriter();
					   incrementWriter(SRAMTotalSize - size);
					   break;
		default:	   break;
 8000f12:	e014      	b.n	8000f3e <SRAM_seekWrite+0x4e>
		case SRAM_SET: SRAM_resetWriter();
 8000f14:	f7ff ff9c 	bl	8000e50 <SRAM_resetWriter>
					   incrementWriter(size);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f000 f84a 	bl	8000fb4 <incrementWriter>
					   break;
 8000f20:	e00e      	b.n	8000f40 <SRAM_seekWrite+0x50>
		case SRAM_CUR: incrementWriter(size);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	4618      	mov	r0, r3
 8000f26:	f000 f845 	bl	8000fb4 <incrementWriter>
					   break;
 8000f2a:	e009      	b.n	8000f40 <SRAM_seekWrite+0x50>
		case SRAM_END: SRAM_resetWriter();
 8000f2c:	f7ff ff90 	bl	8000e50 <SRAM_resetWriter>
					   incrementWriter(SRAMTotalSize - size);
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	f5c3 1380 	rsb	r3, r3, #1048576	; 0x100000
 8000f36:	4618      	mov	r0, r3
 8000f38:	f000 f83c 	bl	8000fb4 <incrementWriter>
					   break;
 8000f3c:	e000      	b.n	8000f40 <SRAM_seekWrite+0x50>
		default:	   break;
 8000f3e:	bf00      	nop

	}

}
 8000f40:	bf00      	nop
 8000f42:	3708      	adds	r7, #8
 8000f44:	46bd      	mov	sp, r7
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <incrementReader>:

uint32_t SRAM_read(){
	return currentReader.totalBytes.value;
}

static void incrementReader(int size){
 8000f48:	b480      	push	{r7}
 8000f4a:	b083      	sub	sp, #12
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
	currentReader.totalBytes.value += size;
 8000f50:	4b16      	ldr	r3, [pc, #88]	; (8000fac <incrementReader+0x64>)
 8000f52:	689a      	ldr	r2, [r3, #8]
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	4413      	add	r3, r2
 8000f58:	4a14      	ldr	r2, [pc, #80]	; (8000fac <incrementReader+0x64>)
 8000f5a:	6093      	str	r3, [r2, #8]
	if(currentReader.totalBytes.value >= SRAMTotalSize)
 8000f5c:	4b13      	ldr	r3, [pc, #76]	; (8000fac <incrementReader+0x64>)
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000f64:	d305      	bcc.n	8000f72 <incrementReader+0x2a>
		currentReader.totalBytes.value %= SRAMTotalSize;
 8000f66:	4b11      	ldr	r3, [pc, #68]	; (8000fac <incrementReader+0x64>)
 8000f68:	689b      	ldr	r3, [r3, #8]
 8000f6a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000f6e:	4a0f      	ldr	r2, [pc, #60]	; (8000fac <incrementReader+0x64>)
 8000f70:	6093      	str	r3, [r2, #8]
	currentReader.currentByte.value = currentReader.totalBytes.value % SRAMChipSize;
 8000f72:	4b0e      	ldr	r3, [pc, #56]	; (8000fac <incrementReader+0x64>)
 8000f74:	689b      	ldr	r3, [r3, #8]
 8000f76:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8000f7a:	4a0c      	ldr	r2, [pc, #48]	; (8000fac <incrementReader+0x64>)
 8000f7c:	6013      	str	r3, [r2, #0]
	currentReader.currentPage.value = (currentReader.totalBytes.value / SRAMPageSize) % SRAMPageCount;
 8000f7e:	4b0b      	ldr	r3, [pc, #44]	; (8000fac <incrementReader+0x64>)
 8000f80:	689b      	ldr	r3, [r3, #8]
 8000f82:	095b      	lsrs	r3, r3, #5
 8000f84:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000f88:	4a08      	ldr	r2, [pc, #32]	; (8000fac <incrementReader+0x64>)
 8000f8a:	6053      	str	r3, [r2, #4]
	currentReader.currentSram = currentReader.totalBytes.value / SRAMChipSize;
 8000f8c:	4b07      	ldr	r3, [pc, #28]	; (8000fac <incrementReader+0x64>)
 8000f8e:	689b      	ldr	r3, [r3, #8]
 8000f90:	0c5b      	lsrs	r3, r3, #17
 8000f92:	b2da      	uxtb	r2, r3
 8000f94:	4b05      	ldr	r3, [pc, #20]	; (8000fac <incrementReader+0x64>)
 8000f96:	731a      	strb	r2, [r3, #12]
	currentSRAM = currentReader.currentSram;
 8000f98:	4b04      	ldr	r3, [pc, #16]	; (8000fac <incrementReader+0x64>)
 8000f9a:	7b1a      	ldrb	r2, [r3, #12]
 8000f9c:	4b04      	ldr	r3, [pc, #16]	; (8000fb0 <incrementReader+0x68>)
 8000f9e:	701a      	strb	r2, [r3, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr
 8000fac:	20000378 	.word	0x20000378
 8000fb0:	20000374 	.word	0x20000374

08000fb4 <incrementWriter>:

static void incrementWriter(int size){
 8000fb4:	b480      	push	{r7}
 8000fb6:	b083      	sub	sp, #12
 8000fb8:	af00      	add	r7, sp, #0
 8000fba:	6078      	str	r0, [r7, #4]
	currentWriter.totalBytes.value += size;
 8000fbc:	4b16      	ldr	r3, [pc, #88]	; (8001018 <incrementWriter+0x64>)
 8000fbe:	689a      	ldr	r2, [r3, #8]
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	4413      	add	r3, r2
 8000fc4:	4a14      	ldr	r2, [pc, #80]	; (8001018 <incrementWriter+0x64>)
 8000fc6:	6093      	str	r3, [r2, #8]
	if(currentWriter.totalBytes.value >= SRAMTotalSize)
 8000fc8:	4b13      	ldr	r3, [pc, #76]	; (8001018 <incrementWriter+0x64>)
 8000fca:	689b      	ldr	r3, [r3, #8]
 8000fcc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8000fd0:	d305      	bcc.n	8000fde <incrementWriter+0x2a>
		currentWriter.totalBytes.value %= SRAMTotalSize;
 8000fd2:	4b11      	ldr	r3, [pc, #68]	; (8001018 <incrementWriter+0x64>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8000fda:	4a0f      	ldr	r2, [pc, #60]	; (8001018 <incrementWriter+0x64>)
 8000fdc:	6093      	str	r3, [r2, #8]
	currentWriter.currentByte.value = currentWriter.totalBytes.value % SRAMChipSize;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	; (8001018 <incrementWriter+0x64>)
 8000fe0:	689b      	ldr	r3, [r3, #8]
 8000fe2:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8000fe6:	4a0c      	ldr	r2, [pc, #48]	; (8001018 <incrementWriter+0x64>)
 8000fe8:	6013      	str	r3, [r2, #0]
	currentWriter.currentPage.value = (currentWriter.totalBytes.value / SRAMPageSize) % SRAMPageCount;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	; (8001018 <incrementWriter+0x64>)
 8000fec:	689b      	ldr	r3, [r3, #8]
 8000fee:	095b      	lsrs	r3, r3, #5
 8000ff0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8000ff4:	4a08      	ldr	r2, [pc, #32]	; (8001018 <incrementWriter+0x64>)
 8000ff6:	6053      	str	r3, [r2, #4]
	currentWriter.currentSram = currentWriter.totalBytes.value / SRAMChipSize;
 8000ff8:	4b07      	ldr	r3, [pc, #28]	; (8001018 <incrementWriter+0x64>)
 8000ffa:	689b      	ldr	r3, [r3, #8]
 8000ffc:	0c5b      	lsrs	r3, r3, #17
 8000ffe:	b2da      	uxtb	r2, r3
 8001000:	4b05      	ldr	r3, [pc, #20]	; (8001018 <incrementWriter+0x64>)
 8001002:	731a      	strb	r2, [r3, #12]
	currentSRAM = currentWriter.currentSram;
 8001004:	4b04      	ldr	r3, [pc, #16]	; (8001018 <incrementWriter+0x64>)
 8001006:	7b1a      	ldrb	r2, [r3, #12]
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <incrementWriter+0x68>)
 800100a:	701a      	strb	r2, [r3, #0]
}
 800100c:	bf00      	nop
 800100e:	370c      	adds	r7, #12
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	20000388 	.word	0x20000388
 800101c:	20000374 	.word	0x20000374

08001020 <writeSRAM>:

void writeSRAM(unsigned char *buf,unsigned int size){
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af02      	add	r7, sp, #8
 8001026:	6078      	str	r0, [r7, #4]
 8001028:	6039      	str	r1, [r7, #0]
	unsigned int unaligned = currentWriter.currentByte.value % SRAMPageSize; // byte between start and end of page
 800102a:	4b47      	ldr	r3, [pc, #284]	; (8001148 <writeSRAM+0x128>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	f003 031f 	and.w	r3, r3, #31
 8001032:	60fb      	str	r3, [r7, #12]
	unsigned int remainder = (unaligned > 0?(SRAMPageSize - unaligned):0); // bytes remaining to end of page
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	2b00      	cmp	r3, #0
 8001038:	d003      	beq.n	8001042 <writeSRAM+0x22>
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	f1c3 0320 	rsb	r3, r3, #32
 8001040:	e000      	b.n	8001044 <writeSRAM+0x24>
 8001042:	2300      	movs	r3, #0
 8001044:	60bb      	str	r3, [r7, #8]
	if(size == 0)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d078      	beq.n	800113e <writeSRAM+0x11e>
		return;

	if(size >= SRAMPageSize){
 800104c:	683b      	ldr	r3, [r7, #0]
 800104e:	2b1f      	cmp	r3, #31
 8001050:	d933      	bls.n	80010ba <writeSRAM+0x9a>
		if(unaligned == 0){
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d117      	bne.n	8001088 <writeSRAM+0x68>
			// write page only, pass remaining size to next call
			SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,SRAMPageSize);
 8001058:	4b3b      	ldr	r3, [pc, #236]	; (8001148 <writeSRAM+0x128>)
 800105a:	7818      	ldrb	r0, [r3, #0]
 800105c:	4b3a      	ldr	r3, [pc, #232]	; (8001148 <writeSRAM+0x128>)
 800105e:	7859      	ldrb	r1, [r3, #1]
 8001060:	4b39      	ldr	r3, [pc, #228]	; (8001148 <writeSRAM+0x128>)
 8001062:	789a      	ldrb	r2, [r3, #2]
 8001064:	2320      	movs	r3, #32
 8001066:	9300      	str	r3, [sp, #0]
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	f000 f9b7 	bl	80013dc <SRAMWriteSeq>
			incrementWriter(SRAMPageSize);
 800106e:	2020      	movs	r0, #32
 8001070:	f7ff ffa0 	bl	8000fb4 <incrementWriter>
			writeSRAM(buf + SRAMPageSize,size - SRAMPageSize);
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	f103 0220 	add.w	r2, r3, #32
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	3b20      	subs	r3, #32
 800107e:	4619      	mov	r1, r3
 8001080:	4610      	mov	r0, r2
 8001082:	f7ff ffcd 	bl	8001020 <writeSRAM>
 8001086:	e05b      	b.n	8001140 <writeSRAM+0x120>
		}
		else{
			// write remainder, pass remaining size to next call
			SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,remainder);
 8001088:	4b2f      	ldr	r3, [pc, #188]	; (8001148 <writeSRAM+0x128>)
 800108a:	7818      	ldrb	r0, [r3, #0]
 800108c:	4b2e      	ldr	r3, [pc, #184]	; (8001148 <writeSRAM+0x128>)
 800108e:	7859      	ldrb	r1, [r3, #1]
 8001090:	4b2d      	ldr	r3, [pc, #180]	; (8001148 <writeSRAM+0x128>)
 8001092:	789a      	ldrb	r2, [r3, #2]
 8001094:	68bb      	ldr	r3, [r7, #8]
 8001096:	9300      	str	r3, [sp, #0]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	f000 f99f 	bl	80013dc <SRAMWriteSeq>
			incrementWriter(remainder);
 800109e:	68bb      	ldr	r3, [r7, #8]
 80010a0:	4618      	mov	r0, r3
 80010a2:	f7ff ff87 	bl	8000fb4 <incrementWriter>
			writeSRAM(buf + remainder,size - remainder);
 80010a6:	687a      	ldr	r2, [r7, #4]
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	18d0      	adds	r0, r2, r3
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	68bb      	ldr	r3, [r7, #8]
 80010b0:	1ad3      	subs	r3, r2, r3
 80010b2:	4619      	mov	r1, r3
 80010b4:	f7ff ffb4 	bl	8001020 <writeSRAM>
 80010b8:	e042      	b.n	8001140 <writeSRAM+0x120>


	}
	else{

		if(unaligned > 0){
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d02e      	beq.n	800111e <writeSRAM+0xfe>
			if(size > remainder){
 80010c0:	683a      	ldr	r2, [r7, #0]
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d91a      	bls.n	80010fe <writeSRAM+0xde>
				size -= remainder;
 80010c8:	683a      	ldr	r2, [r7, #0]
 80010ca:	68bb      	ldr	r3, [r7, #8]
 80010cc:	1ad3      	subs	r3, r2, r3
 80010ce:	603b      	str	r3, [r7, #0]
				SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,remainder);
 80010d0:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <writeSRAM+0x128>)
 80010d2:	7818      	ldrb	r0, [r3, #0]
 80010d4:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <writeSRAM+0x128>)
 80010d6:	7859      	ldrb	r1, [r3, #1]
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <writeSRAM+0x128>)
 80010da:	789a      	ldrb	r2, [r3, #2]
 80010dc:	68bb      	ldr	r3, [r7, #8]
 80010de:	9300      	str	r3, [sp, #0]
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	f000 f97b 	bl	80013dc <SRAMWriteSeq>
				incrementWriter(remainder);
 80010e6:	68bb      	ldr	r3, [r7, #8]
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff ff63 	bl	8000fb4 <incrementWriter>
				writeSRAM(buf + remainder,size);
 80010ee:	687a      	ldr	r2, [r7, #4]
 80010f0:	68bb      	ldr	r3, [r7, #8]
 80010f2:	4413      	add	r3, r2
 80010f4:	6839      	ldr	r1, [r7, #0]
 80010f6:	4618      	mov	r0, r3
 80010f8:	f7ff ff92 	bl	8001020 <writeSRAM>
 80010fc:	e020      	b.n	8001140 <writeSRAM+0x120>
			}
			else{
				SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,size);
 80010fe:	4b12      	ldr	r3, [pc, #72]	; (8001148 <writeSRAM+0x128>)
 8001100:	7818      	ldrb	r0, [r3, #0]
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <writeSRAM+0x128>)
 8001104:	7859      	ldrb	r1, [r3, #1]
 8001106:	4b10      	ldr	r3, [pc, #64]	; (8001148 <writeSRAM+0x128>)
 8001108:	789a      	ldrb	r2, [r3, #2]
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	9300      	str	r3, [sp, #0]
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	f000 f964 	bl	80013dc <SRAMWriteSeq>
				incrementWriter(size);
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	4618      	mov	r0, r3
 8001118:	f7ff ff4c 	bl	8000fb4 <incrementWriter>
 800111c:	e010      	b.n	8001140 <writeSRAM+0x120>
			}

		}
		else{
			SRAMWriteSeq(currentWriter.currentByte.bytes[0],currentWriter.currentByte.bytes[1],currentWriter.currentByte.bytes[2],buf,size);
 800111e:	4b0a      	ldr	r3, [pc, #40]	; (8001148 <writeSRAM+0x128>)
 8001120:	7818      	ldrb	r0, [r3, #0]
 8001122:	4b09      	ldr	r3, [pc, #36]	; (8001148 <writeSRAM+0x128>)
 8001124:	7859      	ldrb	r1, [r3, #1]
 8001126:	4b08      	ldr	r3, [pc, #32]	; (8001148 <writeSRAM+0x128>)
 8001128:	789a      	ldrb	r2, [r3, #2]
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	9300      	str	r3, [sp, #0]
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	f000 f954 	bl	80013dc <SRAMWriteSeq>
			incrementWriter(size);
 8001134:	683b      	ldr	r3, [r7, #0]
 8001136:	4618      	mov	r0, r3
 8001138:	f7ff ff3c 	bl	8000fb4 <incrementWriter>
 800113c:	e000      	b.n	8001140 <writeSRAM+0x120>
		return;
 800113e:	bf00      	nop
		}
	}
}
 8001140:	3710      	adds	r7, #16
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
 8001146:	bf00      	nop
 8001148:	20000388 	.word	0x20000388

0800114c <readSRAM>:


void readSRAM(unsigned char *buf,unsigned int size){
 800114c:	b580      	push	{r7, lr}
 800114e:	b086      	sub	sp, #24
 8001150:	af02      	add	r7, sp, #8
 8001152:	6078      	str	r0, [r7, #4]
 8001154:	6039      	str	r1, [r7, #0]
	unsigned int unaligned = currentReader.currentByte.value % SRAMPageSize; // byte between start and end of page
 8001156:	4b47      	ldr	r3, [pc, #284]	; (8001274 <readSRAM+0x128>)
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f003 031f 	and.w	r3, r3, #31
 800115e:	60fb      	str	r3, [r7, #12]
	unsigned int remainder = (unaligned > 0?(SRAMPageSize - unaligned):0); // bytes remaining to end of page
 8001160:	68fb      	ldr	r3, [r7, #12]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <readSRAM+0x22>
 8001166:	68fb      	ldr	r3, [r7, #12]
 8001168:	f1c3 0320 	rsb	r3, r3, #32
 800116c:	e000      	b.n	8001170 <readSRAM+0x24>
 800116e:	2300      	movs	r3, #0
 8001170:	60bb      	str	r3, [r7, #8]

	if(size == 0)
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	2b00      	cmp	r3, #0
 8001176:	d078      	beq.n	800126a <readSRAM+0x11e>
		return;

	if(size >= SRAMPageSize){
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	2b1f      	cmp	r3, #31
 800117c:	d933      	bls.n	80011e6 <readSRAM+0x9a>
		if(unaligned == 0){
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	2b00      	cmp	r3, #0
 8001182:	d117      	bne.n	80011b4 <readSRAM+0x68>
			// read page only, pass remaining size to next call
			SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,SRAMPageSize);
 8001184:	4b3b      	ldr	r3, [pc, #236]	; (8001274 <readSRAM+0x128>)
 8001186:	7818      	ldrb	r0, [r3, #0]
 8001188:	4b3a      	ldr	r3, [pc, #232]	; (8001274 <readSRAM+0x128>)
 800118a:	7859      	ldrb	r1, [r3, #1]
 800118c:	4b39      	ldr	r3, [pc, #228]	; (8001274 <readSRAM+0x128>)
 800118e:	789a      	ldrb	r2, [r3, #2]
 8001190:	2320      	movs	r3, #32
 8001192:	9300      	str	r3, [sp, #0]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	f000 f953 	bl	8001440 <SRAMReadSeq>
			incrementReader(SRAMPageSize);
 800119a:	2020      	movs	r0, #32
 800119c:	f7ff fed4 	bl	8000f48 <incrementReader>
			readSRAM(buf + SRAMPageSize,size - SRAMPageSize);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	f103 0220 	add.w	r2, r3, #32
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	3b20      	subs	r3, #32
 80011aa:	4619      	mov	r1, r3
 80011ac:	4610      	mov	r0, r2
 80011ae:	f7ff ffcd 	bl	800114c <readSRAM>
 80011b2:	e05b      	b.n	800126c <readSRAM+0x120>
		}
		else{
			// read remainder, pass remaining size to next call
			SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,remainder);
 80011b4:	4b2f      	ldr	r3, [pc, #188]	; (8001274 <readSRAM+0x128>)
 80011b6:	7818      	ldrb	r0, [r3, #0]
 80011b8:	4b2e      	ldr	r3, [pc, #184]	; (8001274 <readSRAM+0x128>)
 80011ba:	7859      	ldrb	r1, [r3, #1]
 80011bc:	4b2d      	ldr	r3, [pc, #180]	; (8001274 <readSRAM+0x128>)
 80011be:	789a      	ldrb	r2, [r3, #2]
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	9300      	str	r3, [sp, #0]
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	f000 f93b 	bl	8001440 <SRAMReadSeq>
			incrementReader(remainder);
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	4618      	mov	r0, r3
 80011ce:	f7ff febb 	bl	8000f48 <incrementReader>
			readSRAM(buf + remainder,size - remainder);
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	68bb      	ldr	r3, [r7, #8]
 80011d6:	18d0      	adds	r0, r2, r3
 80011d8:	683a      	ldr	r2, [r7, #0]
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	4619      	mov	r1, r3
 80011e0:	f7ff ffb4 	bl	800114c <readSRAM>
 80011e4:	e042      	b.n	800126c <readSRAM+0x120>


	}
	else{

		if(unaligned > 0){
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d02e      	beq.n	800124a <readSRAM+0xfe>
			if(size > remainder){
 80011ec:	683a      	ldr	r2, [r7, #0]
 80011ee:	68bb      	ldr	r3, [r7, #8]
 80011f0:	429a      	cmp	r2, r3
 80011f2:	d91a      	bls.n	800122a <readSRAM+0xde>
				size -= remainder;
 80011f4:	683a      	ldr	r2, [r7, #0]
 80011f6:	68bb      	ldr	r3, [r7, #8]
 80011f8:	1ad3      	subs	r3, r2, r3
 80011fa:	603b      	str	r3, [r7, #0]
				SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,remainder);
 80011fc:	4b1d      	ldr	r3, [pc, #116]	; (8001274 <readSRAM+0x128>)
 80011fe:	7818      	ldrb	r0, [r3, #0]
 8001200:	4b1c      	ldr	r3, [pc, #112]	; (8001274 <readSRAM+0x128>)
 8001202:	7859      	ldrb	r1, [r3, #1]
 8001204:	4b1b      	ldr	r3, [pc, #108]	; (8001274 <readSRAM+0x128>)
 8001206:	789a      	ldrb	r2, [r3, #2]
 8001208:	68bb      	ldr	r3, [r7, #8]
 800120a:	9300      	str	r3, [sp, #0]
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f000 f917 	bl	8001440 <SRAMReadSeq>
				incrementReader(remainder);
 8001212:	68bb      	ldr	r3, [r7, #8]
 8001214:	4618      	mov	r0, r3
 8001216:	f7ff fe97 	bl	8000f48 <incrementReader>
				readSRAM(buf + remainder,size);
 800121a:	687a      	ldr	r2, [r7, #4]
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	4413      	add	r3, r2
 8001220:	6839      	ldr	r1, [r7, #0]
 8001222:	4618      	mov	r0, r3
 8001224:	f7ff ff92 	bl	800114c <readSRAM>
 8001228:	e020      	b.n	800126c <readSRAM+0x120>
			}
			else{
				SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,size);
 800122a:	4b12      	ldr	r3, [pc, #72]	; (8001274 <readSRAM+0x128>)
 800122c:	7818      	ldrb	r0, [r3, #0]
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <readSRAM+0x128>)
 8001230:	7859      	ldrb	r1, [r3, #1]
 8001232:	4b10      	ldr	r3, [pc, #64]	; (8001274 <readSRAM+0x128>)
 8001234:	789a      	ldrb	r2, [r3, #2]
 8001236:	683b      	ldr	r3, [r7, #0]
 8001238:	9300      	str	r3, [sp, #0]
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f000 f900 	bl	8001440 <SRAMReadSeq>
				incrementReader(size);
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	4618      	mov	r0, r3
 8001244:	f7ff fe80 	bl	8000f48 <incrementReader>
 8001248:	e010      	b.n	800126c <readSRAM+0x120>
			}

		}
		else{
			SRAMReadSeq(currentReader.currentByte.bytes[0],currentReader.currentByte.bytes[1],currentReader.currentByte.bytes[2],buf,size);
 800124a:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <readSRAM+0x128>)
 800124c:	7818      	ldrb	r0, [r3, #0]
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <readSRAM+0x128>)
 8001250:	7859      	ldrb	r1, [r3, #1]
 8001252:	4b08      	ldr	r3, [pc, #32]	; (8001274 <readSRAM+0x128>)
 8001254:	789a      	ldrb	r2, [r3, #2]
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	9300      	str	r3, [sp, #0]
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	f000 f8f0 	bl	8001440 <SRAMReadSeq>
			incrementReader(size);
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	4618      	mov	r0, r3
 8001264:	f7ff fe70 	bl	8000f48 <incrementReader>
 8001268:	e000      	b.n	800126c <readSRAM+0x120>
		return;
 800126a:	bf00      	nop
		}
	}


}
 800126c:	3710      	adds	r7, #16
 800126e:	46bd      	mov	sp, r7
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000378 	.word	0x20000378

08001278 <ReadSPI>:
		SRAM_5_CS_GPIO_Port,
		SRAM_6_CS_GPIO_Port,
		SRAM_7_CS_GPIO_Port
};

static uint8_t ReadSPI(){
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
	uint8_t byte;
	HAL_SPI_Receive(&hspi5,&byte,1,100);
 800127e:	1df9      	adds	r1, r7, #7
 8001280:	2364      	movs	r3, #100	; 0x64
 8001282:	2201      	movs	r2, #1
 8001284:	4803      	ldr	r0, [pc, #12]	; (8001294 <ReadSPI+0x1c>)
 8001286:	f010 f9e5 	bl	8011654 <HAL_SPI_Receive>
	return byte;
 800128a:	79fb      	ldrb	r3, [r7, #7]
}
 800128c:	4618      	mov	r0, r3
 800128e:	3708      	adds	r7, #8
 8001290:	46bd      	mov	sp, r7
 8001292:	bd80      	pop	{r7, pc}
 8001294:	200020a8 	.word	0x200020a8

08001298 <WriteSPI>:

void WriteSPI(uint8_t byte){
 8001298:	b580      	push	{r7, lr}
 800129a:	b082      	sub	sp, #8
 800129c:	af00      	add	r7, sp, #0
 800129e:	4603      	mov	r3, r0
 80012a0:	71fb      	strb	r3, [r7, #7]

	HAL_SPI_Transmit(&hspi5,&byte,1,100);
 80012a2:	1df9      	adds	r1, r7, #7
 80012a4:	2364      	movs	r3, #100	; 0x64
 80012a6:	2201      	movs	r2, #1
 80012a8:	4803      	ldr	r0, [pc, #12]	; (80012b8 <WriteSPI+0x20>)
 80012aa:	f010 f897 	bl	80113dc <HAL_SPI_Transmit>
}
 80012ae:	bf00      	nop
 80012b0:	3708      	adds	r7, #8
 80012b2:	46bd      	mov	sp, r7
 80012b4:	bd80      	pop	{r7, pc}
 80012b6:	bf00      	nop
 80012b8:	200020a8 	.word	0x200020a8

080012bc <SRAMEnable>:

static void SRAMEnable(uint8_t n){
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	4603      	mov	r3, r0
 80012c4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(sramPorts[n],sramPins[n],GPIO_PIN_RESET);
 80012c6:	79fb      	ldrb	r3, [r7, #7]
 80012c8:	4a07      	ldr	r2, [pc, #28]	; (80012e8 <SRAMEnable+0x2c>)
 80012ca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80012ce:	79fb      	ldrb	r3, [r7, #7]
 80012d0:	4a06      	ldr	r2, [pc, #24]	; (80012ec <SRAMEnable+0x30>)
 80012d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012d6:	2200      	movs	r2, #0
 80012d8:	4619      	mov	r1, r3
 80012da:	f00d fec7 	bl	800f06c <HAL_GPIO_WritePin>
}
 80012de:	bf00      	nop
 80012e0:	3708      	adds	r7, #8
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000010 	.word	0x20000010
 80012ec:	20000000 	.word	0x20000000

080012f0 <SRAMDisable>:

static void SRAMDisable(uint8_t n){
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	4603      	mov	r3, r0
 80012f8:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(sramPorts[n],sramPins[n],GPIO_PIN_SET);
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	4a07      	ldr	r2, [pc, #28]	; (800131c <SRAMDisable+0x2c>)
 80012fe:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	4a06      	ldr	r2, [pc, #24]	; (8001320 <SRAMDisable+0x30>)
 8001306:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800130a:	2201      	movs	r2, #1
 800130c:	4619      	mov	r1, r3
 800130e:	f00d fead 	bl	800f06c <HAL_GPIO_WritePin>
}
 8001312:	bf00      	nop
 8001314:	3708      	adds	r7, #8
 8001316:	46bd      	mov	sp, r7
 8001318:	bd80      	pop	{r7, pc}
 800131a:	bf00      	nop
 800131c:	20000010 	.word	0x20000010
 8001320:	20000000 	.word	0x20000000

08001324 <InitSRAM>:

void InitSRAM(void)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	af00      	add	r7, sp, #0
	for(currentSRAM = SRAM_0; currentSRAM <= SRAM_7; currentSRAM++)
 8001328:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <InitSRAM+0x30>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
 800132e:	e00a      	b.n	8001346 <InitSRAM+0x22>
		SRAMDisable(currentSRAM);
 8001330:	4b08      	ldr	r3, [pc, #32]	; (8001354 <InitSRAM+0x30>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff ffdb 	bl	80012f0 <SRAMDisable>
	for(currentSRAM = SRAM_0; currentSRAM <= SRAM_7; currentSRAM++)
 800133a:	4b06      	ldr	r3, [pc, #24]	; (8001354 <InitSRAM+0x30>)
 800133c:	781b      	ldrb	r3, [r3, #0]
 800133e:	3301      	adds	r3, #1
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b04      	ldr	r3, [pc, #16]	; (8001354 <InitSRAM+0x30>)
 8001344:	701a      	strb	r2, [r3, #0]
 8001346:	4b03      	ldr	r3, [pc, #12]	; (8001354 <InitSRAM+0x30>)
 8001348:	781b      	ldrb	r3, [r3, #0]
 800134a:	2b07      	cmp	r3, #7
 800134c:	d9f0      	bls.n	8001330 <InitSRAM+0xc>
}
 800134e:	bf00      	nop
 8001350:	bf00      	nop
 8001352:	bd80      	pop	{r7, pc}
 8001354:	20000374 	.word	0x20000374

08001358 <SRAMWriteStatusReg>:

uint8_t SRAMWriteStatusReg(uint8_t WriteVal)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b082      	sub	sp, #8
 800135c:	af00      	add	r7, sp, #0
 800135e:	4603      	mov	r3, r0
 8001360:	71fb      	strb	r3, [r7, #7]
	SRAMEnable(currentSRAM);
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <SRAMWriteStatusReg+0x38>)
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	4618      	mov	r0, r3
 8001368:	f7ff ffa8 	bl	80012bc <SRAMEnable>
	WriteSPI(CMD_SRAMWRSR);
 800136c:	2001      	movs	r0, #1
 800136e:	f7ff ff93 	bl	8001298 <WriteSPI>
	//while(!SPI_Rx_Buf_Full);
	//ReadData = ReadSPI();
	WriteSPI(WriteVal);
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff ff8f 	bl	8001298 <WriteSPI>
	//while(!SPI_Rx_Buf_Full);
	//ReadData = ReadSPI();
	SRAMDisable(currentSRAM);
 800137a:	4b05      	ldr	r3, [pc, #20]	; (8001390 <SRAMWriteStatusReg+0x38>)
 800137c:	781b      	ldrb	r3, [r3, #0]
 800137e:	4618      	mov	r0, r3
 8001380:	f7ff ffb6 	bl	80012f0 <SRAMDisable>
	return 0;			//Return non -ve nuber indicating success
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3708      	adds	r7, #8
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	20000374 	.word	0x20000374

08001394 <SRAMCommand>:
	ReadData = ReadSPI();
	SRAMDisable(currentSRAM);
	return ReadData;
}
void SRAMCommand(uint8_t AddLB, uint8_t AddMB,uint8_t AddHB, uint8_t RWCmd)
{
 8001394:	b590      	push	{r4, r7, lr}
 8001396:	b083      	sub	sp, #12
 8001398:	af00      	add	r7, sp, #0
 800139a:	4604      	mov	r4, r0
 800139c:	4608      	mov	r0, r1
 800139e:	4611      	mov	r1, r2
 80013a0:	461a      	mov	r2, r3
 80013a2:	4623      	mov	r3, r4
 80013a4:	71fb      	strb	r3, [r7, #7]
 80013a6:	4603      	mov	r3, r0
 80013a8:	71bb      	strb	r3, [r7, #6]
 80013aa:	460b      	mov	r3, r1
 80013ac:	717b      	strb	r3, [r7, #5]
 80013ae:	4613      	mov	r3, r2
 80013b0:	713b      	strb	r3, [r7, #4]
	//Send Read or Write command to SRAM
	WriteSPI(RWCmd);
 80013b2:	793b      	ldrb	r3, [r7, #4]
 80013b4:	4618      	mov	r0, r3
 80013b6:	f7ff ff6f 	bl	8001298 <WriteSPI>
	//while(!SPI_Rx_Buf_Full);
	//ReadData = ReadSPI();
	//Send High byte of address to SRAM
	WriteSPI(AddHB);
 80013ba:	797b      	ldrb	r3, [r7, #5]
 80013bc:	4618      	mov	r0, r3
 80013be:	f7ff ff6b 	bl	8001298 <WriteSPI>
	WriteSPI(AddMB);
 80013c2:	79bb      	ldrb	r3, [r7, #6]
 80013c4:	4618      	mov	r0, r3
 80013c6:	f7ff ff67 	bl	8001298 <WriteSPI>
	//while(!SPI_Rx_Buf_Full);
	//ReadData = ReadSPI();
	//Send Low byte of address to SRAM
	WriteSPI(AddLB);
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	4618      	mov	r0, r3
 80013ce:	f7ff ff63 	bl	8001298 <WriteSPI>
	//while(!SPI_Rx_Buf_Full);
	//ReadData = ReadSPI();
}
 80013d2:	bf00      	nop
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd90      	pop	{r4, r7, pc}
	...

080013dc <SRAMWriteSeq>:
	SRAMDisable(currentSRAM);
	return ReadCnt;			//Return no# of bytes read from SRAM
}

uint8_t SRAMWriteSeq(uint8_t AddLB, uint8_t AddMB,uint8_t AddHB, uint8_t *WriteData,uint32_t WriteCnt)
{
 80013dc:	b580      	push	{r7, lr}
 80013de:	b082      	sub	sp, #8
 80013e0:	af00      	add	r7, sp, #0
 80013e2:	603b      	str	r3, [r7, #0]
 80013e4:	4603      	mov	r3, r0
 80013e6:	71fb      	strb	r3, [r7, #7]
 80013e8:	460b      	mov	r3, r1
 80013ea:	71bb      	strb	r3, [r7, #6]
 80013ec:	4613      	mov	r3, r2
 80013ee:	717b      	strb	r3, [r7, #5]
	SRAMWriteStatusReg(SRAMSeqMode);
 80013f0:	2040      	movs	r0, #64	; 0x40
 80013f2:	f7ff ffb1 	bl	8001358 <SRAMWriteStatusReg>
	//Send Write command to SRAM along with address
	SRAMEnable(currentSRAM);
 80013f6:	4b11      	ldr	r3, [pc, #68]	; (800143c <SRAMWriteSeq+0x60>)
 80013f8:	781b      	ldrb	r3, [r3, #0]
 80013fa:	4618      	mov	r0, r3
 80013fc:	f7ff ff5e 	bl	80012bc <SRAMEnable>
	SRAMCommand(AddLB,AddMB,AddHB,CMD_SRAMWrite);
 8001400:	797a      	ldrb	r2, [r7, #5]
 8001402:	79b9      	ldrb	r1, [r7, #6]
 8001404:	79f8      	ldrb	r0, [r7, #7]
 8001406:	2302      	movs	r3, #2
 8001408:	f7ff ffc4 	bl	8001394 <SRAMCommand>
	//Send Data to be written to SRAM
	for(;WriteCnt > 0;WriteCnt--)
 800140c:	e009      	b.n	8001422 <SRAMWriteSeq+0x46>
	{
		WriteSPI(*WriteData++);
 800140e:	683b      	ldr	r3, [r7, #0]
 8001410:	1c5a      	adds	r2, r3, #1
 8001412:	603a      	str	r2, [r7, #0]
 8001414:	781b      	ldrb	r3, [r3, #0]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ff3e 	bl	8001298 <WriteSPI>
	for(;WriteCnt > 0;WriteCnt--)
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	3b01      	subs	r3, #1
 8001420:	613b      	str	r3, [r7, #16]
 8001422:	693b      	ldr	r3, [r7, #16]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d1f2      	bne.n	800140e <SRAMWriteSeq+0x32>
		//while(!SPI_Rx_Buf_Full);
		//DummyRead =ReadSPI();
	}
	SRAMDisable(currentSRAM);
 8001428:	4b04      	ldr	r3, [pc, #16]	; (800143c <SRAMWriteSeq+0x60>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff5f 	bl	80012f0 <SRAMDisable>
	return 0;			//Return non -ve nuber indicating success
 8001432:	2300      	movs	r3, #0
}
 8001434:	4618      	mov	r0, r3
 8001436:	3708      	adds	r7, #8
 8001438:	46bd      	mov	sp, r7
 800143a:	bd80      	pop	{r7, pc}
 800143c:	20000374 	.word	0x20000374

08001440 <SRAMReadSeq>:

uint8_t SRAMReadSeq(uint8_t AddLB, uint8_t AddMB,uint8_t AddHB, uint8_t *ReadData,uint32_t ReadCnt)
{
 8001440:	b590      	push	{r4, r7, lr}
 8001442:	b083      	sub	sp, #12
 8001444:	af00      	add	r7, sp, #0
 8001446:	603b      	str	r3, [r7, #0]
 8001448:	4603      	mov	r3, r0
 800144a:	71fb      	strb	r3, [r7, #7]
 800144c:	460b      	mov	r3, r1
 800144e:	71bb      	strb	r3, [r7, #6]
 8001450:	4613      	mov	r3, r2
 8001452:	717b      	strb	r3, [r7, #5]
	SRAMWriteStatusReg(SRAMSeqMode);
 8001454:	2040      	movs	r0, #64	; 0x40
 8001456:	f7ff ff7f 	bl	8001358 <SRAMWriteStatusReg>
	//Send Read command to SRAM along with address
	SRAMEnable(currentSRAM);
 800145a:	4b11      	ldr	r3, [pc, #68]	; (80014a0 <SRAMReadSeq+0x60>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	4618      	mov	r0, r3
 8001460:	f7ff ff2c 	bl	80012bc <SRAMEnable>
	SRAMCommand(AddLB,AddMB,AddHB,CMD_SRAMRead);
 8001464:	797a      	ldrb	r2, [r7, #5]
 8001466:	79b9      	ldrb	r1, [r7, #6]
 8001468:	79f8      	ldrb	r0, [r7, #7]
 800146a:	2303      	movs	r3, #3
 800146c:	f7ff ff92 	bl	8001394 <SRAMCommand>
	//Send dummy data so SRAM can put desired Data read from SRAM
	for(; ReadCnt > 0; ReadCnt--)
 8001470:	e009      	b.n	8001486 <SRAMReadSeq+0x46>
	{
		//while(!SPI_Rx_Buf_Full);
		*ReadData++ = ReadSPI();
 8001472:	683c      	ldr	r4, [r7, #0]
 8001474:	1c63      	adds	r3, r4, #1
 8001476:	603b      	str	r3, [r7, #0]
 8001478:	f7ff fefe 	bl	8001278 <ReadSPI>
 800147c:	4603      	mov	r3, r0
 800147e:	7023      	strb	r3, [r4, #0]
	for(; ReadCnt > 0; ReadCnt--)
 8001480:	69bb      	ldr	r3, [r7, #24]
 8001482:	3b01      	subs	r3, #1
 8001484:	61bb      	str	r3, [r7, #24]
 8001486:	69bb      	ldr	r3, [r7, #24]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d1f2      	bne.n	8001472 <SRAMReadSeq+0x32>
	}
	SRAMDisable(currentSRAM);
 800148c:	4b04      	ldr	r3, [pc, #16]	; (80014a0 <SRAMReadSeq+0x60>)
 800148e:	781b      	ldrb	r3, [r3, #0]
 8001490:	4618      	mov	r0, r3
 8001492:	f7ff ff2d 	bl	80012f0 <SRAMDisable>
	return 0;			//Return non -ve nuber indicating success
 8001496:	2300      	movs	r3, #0
}
 8001498:	4618      	mov	r0, r3
 800149a:	370c      	adds	r7, #12
 800149c:	46bd      	mov	sp, r7
 800149e:	bd90      	pop	{r4, r7, pc}
 80014a0:	20000374 	.word	0x20000374

080014a4 <HAL_ADC_ErrorCallback>:
uint32_t adcvals[2];

char strval[5];
uint32_t ind = 0;

void HAL_ADC_ErrorCallback(ADC_HandleTypeDef * hadc){
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
	utoa(hadc->ErrorCode,strval,10);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b0:	220a      	movs	r2, #10
 80014b2:	4906      	ldr	r1, [pc, #24]	; (80014cc <HAL_ADC_ErrorCallback+0x28>)
 80014b4:	4618      	mov	r0, r3
 80014b6:	f016 fa9f 	bl	80179f8 <utoa>
	TM_HD44780_Puts(0,1,strval);
 80014ba:	4a04      	ldr	r2, [pc, #16]	; (80014cc <HAL_ADC_ErrorCallback+0x28>)
 80014bc:	2101      	movs	r1, #1
 80014be:	2000      	movs	r0, #0
 80014c0:	f00a fe94 	bl	800c1ec <TM_HD44780_Puts>
}
 80014c4:	bf00      	nop
 80014c6:	3708      	adds	r7, #8
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	2000039c 	.word	0x2000039c

080014d0 <HAL_ADC_ConvCpltCallback>:
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b082      	sub	sp, #8
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

	if(hadc->Instance == ADC3){
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a33      	ldr	r2, [pc, #204]	; (80015ac <HAL_ADC_ConvCpltCallback+0xdc>)
 80014de:	4293      	cmp	r3, r2
 80014e0:	d102      	bne.n	80014e8 <HAL_ADC_ConvCpltCallback+0x18>
		Update_Joystick();
 80014e2:	f006 f925 	bl	8007730 <Update_Joystick>
		return;
 80014e6:	e05d      	b.n	80015a4 <HAL_ADC_ConvCpltCallback+0xd4>
	}

	if(hadc->Instance == ADC1){
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a30      	ldr	r2, [pc, #192]	; (80015b0 <HAL_ADC_ConvCpltCallback+0xe0>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d158      	bne.n	80015a4 <HAL_ADC_ConvCpltCallback+0xd4>

		adc1val = HAL_ADC_GetValue(hadc);
 80014f2:	6878      	ldr	r0, [r7, #4]
 80014f4:	f00c f90e 	bl	800d714 <HAL_ADC_GetValue>
 80014f8:	4603      	mov	r3, r0
 80014fa:	4a2e      	ldr	r2, [pc, #184]	; (80015b4 <HAL_ADC_ConvCpltCallback+0xe4>)
 80014fc:	6013      	str	r3, [r2, #0]
		if(adc1val == 63)
 80014fe:	4b2d      	ldr	r3, [pc, #180]	; (80015b4 <HAL_ADC_ConvCpltCallback+0xe4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	2b3f      	cmp	r3, #63	; 0x3f
 8001504:	d04b      	beq.n	800159e <HAL_ADC_ConvCpltCallback+0xce>
			return;

		switch(adc1val >> 3){
 8001506:	4b2b      	ldr	r3, [pc, #172]	; (80015b4 <HAL_ADC_ConvCpltCallback+0xe4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2b07      	cmp	r3, #7
 800150e:	d848      	bhi.n	80015a2 <HAL_ADC_ConvCpltCallback+0xd2>
 8001510:	a201      	add	r2, pc, #4	; (adr r2, 8001518 <HAL_ADC_ConvCpltCallback+0x48>)
 8001512:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001516:	bf00      	nop
 8001518:	08001539 	.word	0x08001539
 800151c:	080015a3 	.word	0x080015a3
 8001520:	080015a3 	.word	0x080015a3
 8001524:	08001567 	.word	0x08001567
 8001528:	080015a3 	.word	0x080015a3
 800152c:	08001577 	.word	0x08001577
 8001530:	080015a3 	.word	0x080015a3
 8001534:	08001587 	.word	0x08001587

		case 0:		if(looper.PlayBass == TRUE){
 8001538:	4b1f      	ldr	r3, [pc, #124]	; (80015b8 <HAL_ADC_ConvCpltCallback+0xe8>)
 800153a:	791b      	ldrb	r3, [r3, #4]
 800153c:	b2db      	uxtb	r3, r3
 800153e:	2b01      	cmp	r3, #1
 8001540:	d108      	bne.n	8001554 <HAL_ADC_ConvCpltCallback+0x84>
						looper.PlayBass = FALSE;
 8001542:	4b1d      	ldr	r3, [pc, #116]	; (80015b8 <HAL_ADC_ConvCpltCallback+0xe8>)
 8001544:	2200      	movs	r2, #0
 8001546:	711a      	strb	r2, [r3, #4]
						TM_HD44780_Puts(0,1,"Drums active");
 8001548:	4a1c      	ldr	r2, [pc, #112]	; (80015bc <HAL_ADC_ConvCpltCallback+0xec>)
 800154a:	2101      	movs	r1, #1
 800154c:	2000      	movs	r0, #0
 800154e:	f00a fe4d 	bl	800c1ec <TM_HD44780_Puts>
					}
					else{
						looper.PlayBass = TRUE;
						TM_HD44780_Puts(0,1,"Bass active ");
					}
					break;
 8001552:	e027      	b.n	80015a4 <HAL_ADC_ConvCpltCallback+0xd4>
						looper.PlayBass = TRUE;
 8001554:	4b18      	ldr	r3, [pc, #96]	; (80015b8 <HAL_ADC_ConvCpltCallback+0xe8>)
 8001556:	2201      	movs	r2, #1
 8001558:	711a      	strb	r2, [r3, #4]
						TM_HD44780_Puts(0,1,"Bass active ");
 800155a:	4a19      	ldr	r2, [pc, #100]	; (80015c0 <HAL_ADC_ConvCpltCallback+0xf0>)
 800155c:	2101      	movs	r1, #1
 800155e:	2000      	movs	r0, #0
 8001560:	f00a fe44 	bl	800c1ec <TM_HD44780_Puts>
					break;
 8001564:	e01e      	b.n	80015a4 <HAL_ADC_ConvCpltCallback+0xd4>
		case 3 :	looper.timeIncrement -= 1;
 8001566:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <HAL_ADC_ConvCpltCallback+0xe8>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	3b01      	subs	r3, #1
 800156c:	4a12      	ldr	r2, [pc, #72]	; (80015b8 <HAL_ADC_ConvCpltCallback+0xe8>)
 800156e:	6413      	str	r3, [r2, #64]	; 0x40
					updateMetronome();
 8001570:	f001 fb90 	bl	8002c94 <updateMetronome>
					break;
 8001574:	e016      	b.n	80015a4 <HAL_ADC_ConvCpltCallback+0xd4>
		case 5 :	looper.timeIncrement += 1;
 8001576:	4b10      	ldr	r3, [pc, #64]	; (80015b8 <HAL_ADC_ConvCpltCallback+0xe8>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	3301      	adds	r3, #1
 800157c:	4a0e      	ldr	r2, [pc, #56]	; (80015b8 <HAL_ADC_ConvCpltCallback+0xe8>)
 800157e:	6413      	str	r3, [r2, #64]	; 0x40
					updateMetronome();
 8001580:	f001 fb88 	bl	8002c94 <updateMetronome>
					break;
 8001584:	e00e      	b.n	80015a4 <HAL_ADC_ConvCpltCallback+0xd4>
		case 6: 	//adc1val = 15;
				 	break;

		case 7: looper.Metronome = !looper.Metronome;
 8001586:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <HAL_ADC_ConvCpltCallback+0xe8>)
 8001588:	795b      	ldrb	r3, [r3, #5]
 800158a:	b2db      	uxtb	r3, r3
 800158c:	2b00      	cmp	r3, #0
 800158e:	bf0c      	ite	eq
 8001590:	2301      	moveq	r3, #1
 8001592:	2300      	movne	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	461a      	mov	r2, r3
 8001598:	4b07      	ldr	r3, [pc, #28]	; (80015b8 <HAL_ADC_ConvCpltCallback+0xe8>)
 800159a:	715a      	strb	r2, [r3, #5]
				 break;
 800159c:	e002      	b.n	80015a4 <HAL_ADC_ConvCpltCallback+0xd4>
			return;
 800159e:	bf00      	nop
 80015a0:	e000      	b.n	80015a4 <HAL_ADC_ConvCpltCallback+0xd4>

		default: return;
 80015a2:	bf00      	nop

		}

	}
}
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40012200 	.word	0x40012200
 80015b0:	40012000 	.word	0x40012000
 80015b4:	20000398 	.word	0x20000398
 80015b8:	20001228 	.word	0x20001228
 80015bc:	08018a7c 	.word	0x08018a7c
 80015c0:	08018a8c 	.word	0x08018a8c

080015c4 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc3;
DMA_HandleTypeDef hdma_adc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	b084      	sub	sp, #16
 80015c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80015ca:	463b      	mov	r3, r7
 80015cc:	2200      	movs	r2, #0
 80015ce:	601a      	str	r2, [r3, #0]
 80015d0:	605a      	str	r2, [r3, #4]
 80015d2:	609a      	str	r2, [r3, #8]
 80015d4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80015d6:	4b23      	ldr	r3, [pc, #140]	; (8001664 <MX_ADC1_Init+0xa0>)
 80015d8:	4a23      	ldr	r2, [pc, #140]	; (8001668 <MX_ADC1_Init+0xa4>)
 80015da:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80015dc:	4b21      	ldr	r3, [pc, #132]	; (8001664 <MX_ADC1_Init+0xa0>)
 80015de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80015e2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_6B;
 80015e4:	4b1f      	ldr	r3, [pc, #124]	; (8001664 <MX_ADC1_Init+0xa0>)
 80015e6:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 80015ea:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80015ec:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <MX_ADC1_Init+0xa0>)
 80015ee:	2200      	movs	r2, #0
 80015f0:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80015f2:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <MX_ADC1_Init+0xa0>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80015f8:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <MX_ADC1_Init+0xa0>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001600:	4b18      	ldr	r3, [pc, #96]	; (8001664 <MX_ADC1_Init+0xa0>)
 8001602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001606:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_Ext_IT11;
 8001608:	4b16      	ldr	r3, [pc, #88]	; (8001664 <MX_ADC1_Init+0xa0>)
 800160a:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
 800160e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001610:	4b14      	ldr	r3, [pc, #80]	; (8001664 <MX_ADC1_Init+0xa0>)
 8001612:	2200      	movs	r2, #0
 8001614:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001616:	4b13      	ldr	r3, [pc, #76]	; (8001664 <MX_ADC1_Init+0xa0>)
 8001618:	2201      	movs	r2, #1
 800161a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <MX_ADC1_Init+0xa0>)
 800161e:	2200      	movs	r2, #0
 8001620:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <MX_ADC1_Init+0xa0>)
 8001626:	2201      	movs	r2, #1
 8001628:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800162a:	480e      	ldr	r0, [pc, #56]	; (8001664 <MX_ADC1_Init+0xa0>)
 800162c:	f00b fd30 	bl	800d090 <HAL_ADC_Init>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 8001636:	f006 faa5 	bl	8007b84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 800163a:	2304      	movs	r3, #4
 800163c:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800163e:	2301      	movs	r3, #1
 8001640:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8001642:	2300      	movs	r3, #0
 8001644:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001646:	463b      	mov	r3, r7
 8001648:	4619      	mov	r1, r3
 800164a:	4806      	ldr	r0, [pc, #24]	; (8001664 <MX_ADC1_Init+0xa0>)
 800164c:	f00c f884 	bl	800d758 <HAL_ADC_ConfigChannel>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8001656:	f006 fa95 	bl	8007b84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200003a4 	.word	0x200003a4
 8001668:	40012000 	.word	0x40012000

0800166c <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b084      	sub	sp, #16
 8001670:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001672:	463b      	mov	r3, r7
 8001674:	2200      	movs	r2, #0
 8001676:	601a      	str	r2, [r3, #0]
 8001678:	605a      	str	r2, [r3, #4]
 800167a:	609a      	str	r2, [r3, #8]
 800167c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 800167e:	4b29      	ldr	r3, [pc, #164]	; (8001724 <MX_ADC3_Init+0xb8>)
 8001680:	4a29      	ldr	r2, [pc, #164]	; (8001728 <MX_ADC3_Init+0xbc>)
 8001682:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001684:	4b27      	ldr	r3, [pc, #156]	; (8001724 <MX_ADC3_Init+0xb8>)
 8001686:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800168a:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_6B;
 800168c:	4b25      	ldr	r3, [pc, #148]	; (8001724 <MX_ADC3_Init+0xb8>)
 800168e:	f04f 7240 	mov.w	r2, #50331648	; 0x3000000
 8001692:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ENABLE;
 8001694:	4b23      	ldr	r3, [pc, #140]	; (8001724 <MX_ADC3_Init+0xb8>)
 8001696:	2201      	movs	r2, #1
 8001698:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 800169a:	4b22      	ldr	r3, [pc, #136]	; (8001724 <MX_ADC3_Init+0xb8>)
 800169c:	2200      	movs	r2, #0
 800169e:	761a      	strb	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 80016a0:	4b20      	ldr	r3, [pc, #128]	; (8001724 <MX_ADC3_Init+0xb8>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80016a8:	4b1e      	ldr	r3, [pc, #120]	; (8001724 <MX_ADC3_Init+0xb8>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80016ae:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <MX_ADC3_Init+0xb8>)
 80016b0:	4a1e      	ldr	r2, [pc, #120]	; (800172c <MX_ADC3_Init+0xc0>)
 80016b2:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80016b4:	4b1b      	ldr	r3, [pc, #108]	; (8001724 <MX_ADC3_Init+0xb8>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 2;
 80016ba:	4b1a      	ldr	r3, [pc, #104]	; (8001724 <MX_ADC3_Init+0xb8>)
 80016bc:	2202      	movs	r2, #2
 80016be:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = ENABLE;
 80016c0:	4b18      	ldr	r3, [pc, #96]	; (8001724 <MX_ADC3_Init+0xb8>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80016c8:	4b16      	ldr	r3, [pc, #88]	; (8001724 <MX_ADC3_Init+0xb8>)
 80016ca:	2200      	movs	r2, #0
 80016cc:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 80016ce:	4815      	ldr	r0, [pc, #84]	; (8001724 <MX_ADC3_Init+0xb8>)
 80016d0:	f00b fcde 	bl	800d090 <HAL_ADC_Init>
 80016d4:	4603      	mov	r3, r0
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d001      	beq.n	80016de <MX_ADC3_Init+0x72>
  {
    Error_Handler();
 80016da:	f006 fa53 	bl	8007b84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80016de:	2301      	movs	r3, #1
 80016e0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80016e2:	2301      	movs	r3, #1
 80016e4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_144CYCLES;
 80016e6:	2306      	movs	r3, #6
 80016e8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 80016ea:	463b      	mov	r3, r7
 80016ec:	4619      	mov	r1, r3
 80016ee:	480d      	ldr	r0, [pc, #52]	; (8001724 <MX_ADC3_Init+0xb8>)
 80016f0:	f00c f832 	bl	800d758 <HAL_ADC_ConfigChannel>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d001      	beq.n	80016fe <MX_ADC3_Init+0x92>
  {
    Error_Handler();
 80016fa:	f006 fa43 	bl	8007b84 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80016fe:	2302      	movs	r3, #2
 8001700:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8001702:	2302      	movs	r3, #2
 8001704:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8001706:	463b      	mov	r3, r7
 8001708:	4619      	mov	r1, r3
 800170a:	4806      	ldr	r0, [pc, #24]	; (8001724 <MX_ADC3_Init+0xb8>)
 800170c:	f00c f824 	bl	800d758 <HAL_ADC_ConfigChannel>
 8001710:	4603      	mov	r3, r0
 8001712:	2b00      	cmp	r3, #0
 8001714:	d001      	beq.n	800171a <MX_ADC3_Init+0xae>
  {
    Error_Handler();
 8001716:	f006 fa35 	bl	8007b84 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 800171a:	bf00      	nop
 800171c:	3710      	adds	r7, #16
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
 8001722:	bf00      	nop
 8001724:	200003ec 	.word	0x200003ec
 8001728:	40012200 	.word	0x40012200
 800172c:	0f000001 	.word	0x0f000001

08001730 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b08c      	sub	sp, #48	; 0x30
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001738:	f107 031c 	add.w	r3, r7, #28
 800173c:	2200      	movs	r2, #0
 800173e:	601a      	str	r2, [r3, #0]
 8001740:	605a      	str	r2, [r3, #4]
 8001742:	609a      	str	r2, [r3, #8]
 8001744:	60da      	str	r2, [r3, #12]
 8001746:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a4f      	ldr	r2, [pc, #316]	; (800188c <HAL_ADC_MspInit+0x15c>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d130      	bne.n	80017b4 <HAL_ADC_MspInit+0x84>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	61bb      	str	r3, [r7, #24]
 8001756:	4b4e      	ldr	r3, [pc, #312]	; (8001890 <HAL_ADC_MspInit+0x160>)
 8001758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800175a:	4a4d      	ldr	r2, [pc, #308]	; (8001890 <HAL_ADC_MspInit+0x160>)
 800175c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001760:	6453      	str	r3, [r2, #68]	; 0x44
 8001762:	4b4b      	ldr	r3, [pc, #300]	; (8001890 <HAL_ADC_MspInit+0x160>)
 8001764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001766:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800176a:	61bb      	str	r3, [r7, #24]
 800176c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800176e:	2300      	movs	r3, #0
 8001770:	617b      	str	r3, [r7, #20]
 8001772:	4b47      	ldr	r3, [pc, #284]	; (8001890 <HAL_ADC_MspInit+0x160>)
 8001774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001776:	4a46      	ldr	r2, [pc, #280]	; (8001890 <HAL_ADC_MspInit+0x160>)
 8001778:	f043 0301 	orr.w	r3, r3, #1
 800177c:	6313      	str	r3, [r2, #48]	; 0x30
 800177e:	4b44      	ldr	r3, [pc, #272]	; (8001890 <HAL_ADC_MspInit+0x160>)
 8001780:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001782:	f003 0301 	and.w	r3, r3, #1
 8001786:	617b      	str	r3, [r7, #20]
 8001788:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = AD_KBD_Pin;
 800178a:	2310      	movs	r3, #16
 800178c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800178e:	2303      	movs	r3, #3
 8001790:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AD_KBD_GPIO_Port, &GPIO_InitStruct);
 8001796:	f107 031c 	add.w	r3, r7, #28
 800179a:	4619      	mov	r1, r3
 800179c:	483d      	ldr	r0, [pc, #244]	; (8001894 <HAL_ADC_MspInit+0x164>)
 800179e:	f00d faa1 	bl	800ece4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 3, 0);
 80017a2:	2200      	movs	r2, #0
 80017a4:	2103      	movs	r1, #3
 80017a6:	2012      	movs	r0, #18
 80017a8:	f00c fb8f 	bl	800deca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 80017ac:	2012      	movs	r0, #18
 80017ae:	f00c fba8 	bl	800df02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 80017b2:	e066      	b.n	8001882 <HAL_ADC_MspInit+0x152>
  else if(adcHandle->Instance==ADC3)
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a37      	ldr	r2, [pc, #220]	; (8001898 <HAL_ADC_MspInit+0x168>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d161      	bne.n	8001882 <HAL_ADC_MspInit+0x152>
    __HAL_RCC_ADC3_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	613b      	str	r3, [r7, #16]
 80017c2:	4b33      	ldr	r3, [pc, #204]	; (8001890 <HAL_ADC_MspInit+0x160>)
 80017c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017c6:	4a32      	ldr	r2, [pc, #200]	; (8001890 <HAL_ADC_MspInit+0x160>)
 80017c8:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80017cc:	6453      	str	r3, [r2, #68]	; 0x44
 80017ce:	4b30      	ldr	r3, [pc, #192]	; (8001890 <HAL_ADC_MspInit+0x160>)
 80017d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017d6:	613b      	str	r3, [r7, #16]
 80017d8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017da:	2300      	movs	r3, #0
 80017dc:	60fb      	str	r3, [r7, #12]
 80017de:	4b2c      	ldr	r3, [pc, #176]	; (8001890 <HAL_ADC_MspInit+0x160>)
 80017e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e2:	4a2b      	ldr	r2, [pc, #172]	; (8001890 <HAL_ADC_MspInit+0x160>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6313      	str	r3, [r2, #48]	; 0x30
 80017ea:	4b29      	ldr	r3, [pc, #164]	; (8001890 <HAL_ADC_MspInit+0x160>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	60fb      	str	r3, [r7, #12]
 80017f4:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = Joystick_X_Pin|Joystick_Y_Pin;
 80017f6:	2306      	movs	r3, #6
 80017f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80017fa:	2303      	movs	r3, #3
 80017fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017fe:	2300      	movs	r3, #0
 8001800:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001802:	f107 031c 	add.w	r3, r7, #28
 8001806:	4619      	mov	r1, r3
 8001808:	4822      	ldr	r0, [pc, #136]	; (8001894 <HAL_ADC_MspInit+0x164>)
 800180a:	f00d fa6b 	bl	800ece4 <HAL_GPIO_Init>
    hdma_adc3.Instance = DMA2_Stream1;
 800180e:	4b23      	ldr	r3, [pc, #140]	; (800189c <HAL_ADC_MspInit+0x16c>)
 8001810:	4a23      	ldr	r2, [pc, #140]	; (80018a0 <HAL_ADC_MspInit+0x170>)
 8001812:	601a      	str	r2, [r3, #0]
    hdma_adc3.Init.Channel = DMA_CHANNEL_2;
 8001814:	4b21      	ldr	r3, [pc, #132]	; (800189c <HAL_ADC_MspInit+0x16c>)
 8001816:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800181a:	605a      	str	r2, [r3, #4]
    hdma_adc3.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800181c:	4b1f      	ldr	r3, [pc, #124]	; (800189c <HAL_ADC_MspInit+0x16c>)
 800181e:	2200      	movs	r2, #0
 8001820:	609a      	str	r2, [r3, #8]
    hdma_adc3.Init.PeriphInc = DMA_PINC_DISABLE;
 8001822:	4b1e      	ldr	r3, [pc, #120]	; (800189c <HAL_ADC_MspInit+0x16c>)
 8001824:	2200      	movs	r2, #0
 8001826:	60da      	str	r2, [r3, #12]
    hdma_adc3.Init.MemInc = DMA_MINC_ENABLE;
 8001828:	4b1c      	ldr	r3, [pc, #112]	; (800189c <HAL_ADC_MspInit+0x16c>)
 800182a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800182e:	611a      	str	r2, [r3, #16]
    hdma_adc3.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8001830:	4b1a      	ldr	r3, [pc, #104]	; (800189c <HAL_ADC_MspInit+0x16c>)
 8001832:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001836:	615a      	str	r2, [r3, #20]
    hdma_adc3.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001838:	4b18      	ldr	r3, [pc, #96]	; (800189c <HAL_ADC_MspInit+0x16c>)
 800183a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800183e:	619a      	str	r2, [r3, #24]
    hdma_adc3.Init.Mode = DMA_CIRCULAR;
 8001840:	4b16      	ldr	r3, [pc, #88]	; (800189c <HAL_ADC_MspInit+0x16c>)
 8001842:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001846:	61da      	str	r2, [r3, #28]
    hdma_adc3.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001848:	4b14      	ldr	r3, [pc, #80]	; (800189c <HAL_ADC_MspInit+0x16c>)
 800184a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800184e:	621a      	str	r2, [r3, #32]
    hdma_adc3.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001850:	4b12      	ldr	r3, [pc, #72]	; (800189c <HAL_ADC_MspInit+0x16c>)
 8001852:	2200      	movs	r2, #0
 8001854:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc3) != HAL_OK)
 8001856:	4811      	ldr	r0, [pc, #68]	; (800189c <HAL_ADC_MspInit+0x16c>)
 8001858:	f00c fe06 	bl	800e468 <HAL_DMA_Init>
 800185c:	4603      	mov	r3, r0
 800185e:	2b00      	cmp	r3, #0
 8001860:	d001      	beq.n	8001866 <HAL_ADC_MspInit+0x136>
      Error_Handler();
 8001862:	f006 f98f 	bl	8007b84 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc3);
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	4a0c      	ldr	r2, [pc, #48]	; (800189c <HAL_ADC_MspInit+0x16c>)
 800186a:	639a      	str	r2, [r3, #56]	; 0x38
 800186c:	4a0b      	ldr	r2, [pc, #44]	; (800189c <HAL_ADC_MspInit+0x16c>)
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(ADC_IRQn, 3, 0);
 8001872:	2200      	movs	r2, #0
 8001874:	2103      	movs	r1, #3
 8001876:	2012      	movs	r0, #18
 8001878:	f00c fb27 	bl	800deca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 800187c:	2012      	movs	r0, #18
 800187e:	f00c fb40 	bl	800df02 <HAL_NVIC_EnableIRQ>
}
 8001882:	bf00      	nop
 8001884:	3730      	adds	r7, #48	; 0x30
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
 800188a:	bf00      	nop
 800188c:	40012000 	.word	0x40012000
 8001890:	40023800 	.word	0x40023800
 8001894:	40020000 	.word	0x40020000
 8001898:	40012200 	.word	0x40012200
 800189c:	20000434 	.word	0x20000434
 80018a0:	40026428 	.word	0x40026428

080018a4 <ShortDelayUS>:
__STATIC_INLINE void DelayUS(__IO uint32_t micros);

volatile int totalDelay = 0;

void ShortDelayUS(uint32_t Delay)
{
 80018a4:	b480      	push	{r7}
 80018a6:	b083      	sub	sp, #12
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
	//DelayUS(Delay);
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <bsp_DelayUS>:
#endif
}


void  bsp_DelayUS(uint64_t micros)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	e9c7 0100 	strd	r0, r1, [r7]
		ShortDelayUS(micros);
 80018c2:	683b      	ldr	r3, [r7, #0]
 80018c4:	4618      	mov	r0, r3
 80018c6:	f7ff ffed 	bl	80018a4 <ShortDelayUS>
}
 80018ca:	bf00      	nop
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <ADS1256_Send8Bit>:
*	parameter: _data:  data
*	The return value: NULL
*********************************************************************************************************
*/
void ADS1256_Send8Bit(uint8_t _data)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b082      	sub	sp, #8
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]

	bsp_DelayUS(10);
 80018de:	f04f 000a 	mov.w	r0, #10
 80018e2:	f04f 0100 	mov.w	r1, #0
 80018e6:	f7ff ffe7 	bl	80018b8 <bsp_DelayUS>
	HAL_SPI_Transmit(&hspi3,&_data,1,10);
 80018ea:	1df9      	adds	r1, r7, #7
 80018ec:	230a      	movs	r3, #10
 80018ee:	2201      	movs	r2, #1
 80018f0:	4803      	ldr	r0, [pc, #12]	; (8001900 <ADS1256_Send8Bit+0x2c>)
 80018f2:	f00f fd73 	bl	80113dc <HAL_SPI_Transmit>
	//HAL_SPI_Transmit_DMA(&hspi3,&_data,1);
}
 80018f6:	bf00      	nop
 80018f8:	3708      	adds	r7, #8
 80018fa:	46bd      	mov	sp, r7
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	20002050 	.word	0x20002050

08001904 <ADS1256_CfgADC>:
*                      _drate:  data  rate
*	The return value: NULL
*********************************************************************************************************
*/
void ADS1256_CfgADC(ADS1256_GAIN_E _gain, ADS1256_DRATE_E _drate)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	4603      	mov	r3, r0
 800190c:	460a      	mov	r2, r1
 800190e:	71fb      	strb	r3, [r7, #7]
 8001910:	4613      	mov	r3, r2
 8001912:	71bb      	strb	r3, [r7, #6]
	g_tADS1256.Gain = _gain;
 8001914:	4a1e      	ldr	r2, [pc, #120]	; (8001990 <ADS1256_CfgADC+0x8c>)
 8001916:	79fb      	ldrb	r3, [r7, #7]
 8001918:	7013      	strb	r3, [r2, #0]
	g_tADS1256.DataRate = _drate;
 800191a:	4a1d      	ldr	r2, [pc, #116]	; (8001990 <ADS1256_CfgADC+0x8c>)
 800191c:	79bb      	ldrb	r3, [r7, #6]
 800191e:	7053      	strb	r3, [r2, #1]

	ADS1256_WaitDRDY();
 8001920:	f000 f900 	bl	8001b24 <ADS1256_WaitDRDY>
			Bit 0 DRDY :  Data Ready (Read Only)
				This bit duplicates the state of the DRDY pin.

			ACAL=1  enable  calibration
		*/
		buf[0] = (0 << 3) | (1 << 2) | (1 << 1);//enable the internal buffer
 8001924:	2306      	movs	r3, #6
 8001926:	733b      	strb	r3, [r7, #12]
        //buf[0] = (0 << 3) | (1 << 2) | (0 << 1);  // The internal buffer is prohibited

        //ADS1256_WriteReg(REG_STATUS, (0 << 3) | (1 << 2) | (1 << 1));

		buf[1] = 0x08;	
 8001928:	2308      	movs	r3, #8
 800192a:	737b      	strb	r3, [r7, #13]
				100 = 16
				101 = 32
				110 = 64
				111 = 64
		*/
		buf[2] = (0 << 5) | (0 << 3) | (_gain << 0);
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	73bb      	strb	r3, [r7, #14]
		//ADS1256_WriteReg(REG_ADCON, (0 << 5) | (0 << 2) | (GAIN_1 << 1));	/*choose 1: gain 1 ;input 5V/
		buf[3] = s_tabDataRate[_drate];	// DRATE_10SPS;	
 8001930:	79bb      	ldrb	r3, [r7, #6]
 8001932:	4a18      	ldr	r2, [pc, #96]	; (8001994 <ADS1256_CfgADC+0x90>)
 8001934:	5cd3      	ldrb	r3, [r2, r3]
 8001936:	73fb      	strb	r3, [r7, #15]

		CS_0();	/* SPIƬѡ = 0 */
 8001938:	2200      	movs	r2, #0
 800193a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800193e:	4816      	ldr	r0, [pc, #88]	; (8001998 <ADS1256_CfgADC+0x94>)
 8001940:	f00d fb94 	bl	800f06c <HAL_GPIO_WritePin>
		ADS1256_Send8Bit(CMD_WREG | 0);	/* Write command register, send the register address */
 8001944:	2050      	movs	r0, #80	; 0x50
 8001946:	f7ff ffc5 	bl	80018d4 <ADS1256_Send8Bit>
		ADS1256_Send8Bit(0x03);			/* Register number 4,Initialize the number  -1*/
 800194a:	2003      	movs	r0, #3
 800194c:	f7ff ffc2 	bl	80018d4 <ADS1256_Send8Bit>

		ADS1256_Send8Bit(buf[0]);	/* Set the status register */
 8001950:	7b3b      	ldrb	r3, [r7, #12]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff ffbe 	bl	80018d4 <ADS1256_Send8Bit>
		ADS1256_Send8Bit(buf[1]);	/* Set the input channel parameters */
 8001958:	7b7b      	ldrb	r3, [r7, #13]
 800195a:	4618      	mov	r0, r3
 800195c:	f7ff ffba 	bl	80018d4 <ADS1256_Send8Bit>
		ADS1256_Send8Bit(buf[2]);	/* Set the ADCON control register,gain */
 8001960:	7bbb      	ldrb	r3, [r7, #14]
 8001962:	4618      	mov	r0, r3
 8001964:	f7ff ffb6 	bl	80018d4 <ADS1256_Send8Bit>
		ADS1256_Send8Bit(buf[3]);	/* Set the output rate */
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	4618      	mov	r0, r3
 800196c:	f7ff ffb2 	bl	80018d4 <ADS1256_Send8Bit>

		CS_1();	/* SPI  cs = 1 */
 8001970:	2201      	movs	r2, #1
 8001972:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001976:	4808      	ldr	r0, [pc, #32]	; (8001998 <ADS1256_CfgADC+0x94>)
 8001978:	f00d fb78 	bl	800f06c <HAL_GPIO_WritePin>
	}

	bsp_DelayUS(50);
 800197c:	f04f 0032 	mov.w	r0, #50	; 0x32
 8001980:	f04f 0100 	mov.w	r1, #0
 8001984:	f7ff ff98 	bl	80018b8 <bsp_DelayUS>
}
 8001988:	bf00      	nop
 800198a:	3710      	adds	r7, #16
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	20000494 	.word	0x20000494
 8001994:	08019348 	.word	0x08019348
 8001998:	40020800 	.word	0x40020800

0800199c <ADS1256_DelayDATA>:
*	parameter: NULL
*	The return value: NULL
*********************************************************************************************************
*/
void ADS1256_DelayDATA(void)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	af00      	add	r7, sp, #0
	/*
		Delay from last SCLK edge for DIN to first SCLK rising edge for DOUT: RDATA, RDATAC,RREG Commands
		min  50   CLK = 50 * 0.13uS = 6.5uS
	*/
	bsp_DelayUS(10);	/* The minimum time delay 6.5us */
 80019a0:	f04f 000a 	mov.w	r0, #10
 80019a4:	f04f 0100 	mov.w	r1, #0
 80019a8:	f7ff ff86 	bl	80018b8 <bsp_DelayUS>
}
 80019ac:	bf00      	nop
 80019ae:	bd80      	pop	{r7, pc}

080019b0 <ADS1256_Recive8Bit>:
*	parameter: NULL
*	The return value: NULL
*********************************************************************************************************
*/
uint8_t ADS1256_Recive8Bit(void)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
	uint8_t read = 0;
 80019b6:	2300      	movs	r3, #0
 80019b8:	71bb      	strb	r3, [r7, #6]
	uint8_t byte = 0xff;
 80019ba:	23ff      	movs	r3, #255	; 0xff
 80019bc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Receive(&hspi3,&read,1,10);
 80019be:	1db9      	adds	r1, r7, #6
 80019c0:	230a      	movs	r3, #10
 80019c2:	2201      	movs	r2, #1
 80019c4:	4803      	ldr	r0, [pc, #12]	; (80019d4 <ADS1256_Recive8Bit+0x24>)
 80019c6:	f00f fe45 	bl	8011654 <HAL_SPI_Receive>
	//HAL_SPI_Receive_DMA(&hspi3,&read,1);
	return read;
 80019ca:	79bb      	ldrb	r3, [r7, #6]
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	3708      	adds	r7, #8
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bd80      	pop	{r7, pc}
 80019d4:	20002050 	.word	0x20002050

080019d8 <ADS1256_WriteReg>:
*			 _RegValue: register Value
*	The return value: NULL
*********************************************************************************************************
*/
void ADS1256_WriteReg(uint8_t _RegID, uint8_t _RegValue)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	460a      	mov	r2, r1
 80019e2:	71fb      	strb	r3, [r7, #7]
 80019e4:	4613      	mov	r3, r2
 80019e6:	71bb      	strb	r3, [r7, #6]
	CS_0();	/* SPI  cs  = 0 */
 80019e8:	2200      	movs	r2, #0
 80019ea:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80019ee:	480d      	ldr	r0, [pc, #52]	; (8001a24 <ADS1256_WriteReg+0x4c>)
 80019f0:	f00d fb3c 	bl	800f06c <HAL_GPIO_WritePin>
	ADS1256_Send8Bit(CMD_WREG | _RegID);	/*Write command register */
 80019f4:	79fb      	ldrb	r3, [r7, #7]
 80019f6:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 80019fa:	b2db      	uxtb	r3, r3
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7ff ff69 	bl	80018d4 <ADS1256_Send8Bit>
	ADS1256_Send8Bit(0x00);		/*Write the register number */
 8001a02:	2000      	movs	r0, #0
 8001a04:	f7ff ff66 	bl	80018d4 <ADS1256_Send8Bit>

	ADS1256_Send8Bit(_RegValue);	/*send register value */
 8001a08:	79bb      	ldrb	r3, [r7, #6]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff ff62 	bl	80018d4 <ADS1256_Send8Bit>
	CS_1();	/* SPI   cs = 1 */
 8001a10:	2201      	movs	r2, #1
 8001a12:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a16:	4803      	ldr	r0, [pc, #12]	; (8001a24 <ADS1256_WriteReg+0x4c>)
 8001a18:	f00d fb28 	bl	800f06c <HAL_GPIO_WritePin>
}
 8001a1c:	bf00      	nop
 8001a1e:	3708      	adds	r7, #8
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	40020800 	.word	0x40020800

08001a28 <ADS1256_ReadReg>:
*	parameter: _RegID: register  ID
*	The return value: read register value
*********************************************************************************************************
*/
uint8_t ADS1256_ReadReg(uint8_t _RegID)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	4603      	mov	r3, r0
 8001a30:	71fb      	strb	r3, [r7, #7]
	uint8_t read;

	CS_0();	/* SPI  cs  = 0 */
 8001a32:	2200      	movs	r2, #0
 8001a34:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a38:	480e      	ldr	r0, [pc, #56]	; (8001a74 <ADS1256_ReadReg+0x4c>)
 8001a3a:	f00d fb17 	bl	800f06c <HAL_GPIO_WritePin>
	ADS1256_Send8Bit(CMD_RREG | _RegID);	/* Write command register */
 8001a3e:	79fb      	ldrb	r3, [r7, #7]
 8001a40:	f043 0310 	orr.w	r3, r3, #16
 8001a44:	b2db      	uxtb	r3, r3
 8001a46:	4618      	mov	r0, r3
 8001a48:	f7ff ff44 	bl	80018d4 <ADS1256_Send8Bit>
	ADS1256_Send8Bit(0x00);	/* Write the register number */
 8001a4c:	2000      	movs	r0, #0
 8001a4e:	f7ff ff41 	bl	80018d4 <ADS1256_Send8Bit>

	ADS1256_DelayDATA();	/*delay time */
 8001a52:	f7ff ffa3 	bl	800199c <ADS1256_DelayDATA>

	read = ADS1256_Recive8Bit();	/* Read the register values */
 8001a56:	f7ff ffab 	bl	80019b0 <ADS1256_Recive8Bit>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	73fb      	strb	r3, [r7, #15]
	CS_1();	/* SPI   cs  = 1 */
 8001a5e:	2201      	movs	r2, #1
 8001a60:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a64:	4803      	ldr	r0, [pc, #12]	; (8001a74 <ADS1256_ReadReg+0x4c>)
 8001a66:	f00d fb01 	bl	800f06c <HAL_GPIO_WritePin>

	return read;
 8001a6a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001a6c:	4618      	mov	r0, r3
 8001a6e:	3710      	adds	r7, #16
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd80      	pop	{r7, pc}
 8001a74:	40020800 	.word	0x40020800

08001a78 <ADS1256_WriteCmd>:
*	parameter: _cmd : command
*	The return value: NULL
*********************************************************************************************************
*/
void ADS1256_WriteCmd(uint8_t _cmd)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	4603      	mov	r3, r0
 8001a80:	71fb      	strb	r3, [r7, #7]
	CS_0();	/* SPI   cs = 0 */
 8001a82:	2200      	movs	r2, #0
 8001a84:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a88:	4808      	ldr	r0, [pc, #32]	; (8001aac <ADS1256_WriteCmd+0x34>)
 8001a8a:	f00d faef 	bl	800f06c <HAL_GPIO_WritePin>
	ADS1256_Send8Bit(_cmd);
 8001a8e:	79fb      	ldrb	r3, [r7, #7]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7ff ff1f 	bl	80018d4 <ADS1256_Send8Bit>
	CS_1();	/* SPI  cs  = 1 */
 8001a96:	2201      	movs	r2, #1
 8001a98:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001a9c:	4803      	ldr	r0, [pc, #12]	; (8001aac <ADS1256_WriteCmd+0x34>)
 8001a9e:	f00d fae5 	bl	800f06c <HAL_GPIO_WritePin>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40020800 	.word	0x40020800

08001ab0 <ADS1256_ReadChipID>:
*	parameter: _cmd : NULL
*	The return value: four high status register
*********************************************************************************************************
*/
uint8_t ADS1256_ReadChipID(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0
	uint8_t id;
	ADS1256_WaitDRDY();
 8001ab6:	f000 f835 	bl	8001b24 <ADS1256_WaitDRDY>

	id = ADS1256_ReadReg(REG_STATUS);
 8001aba:	2000      	movs	r0, #0
 8001abc:	f7ff ffb4 	bl	8001a28 <ADS1256_ReadReg>
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	71fb      	strb	r3, [r7, #7]
	return (id >> 4);
 8001ac4:	79fb      	ldrb	r3, [r7, #7]
 8001ac6:	091b      	lsrs	r3, r3, #4
 8001ac8:	b2db      	uxtb	r3, r3
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}

08001ad2 <ADS1256_SetDiffChannel>:
*	parameter:  _ch:  channel number  0--3
*	The return value:  four high status register
*********************************************************************************************************
*/
void ADS1256_SetDiffChannel(uint8_t _ch)
{
 8001ad2:	b580      	push	{r7, lr}
 8001ad4:	b082      	sub	sp, #8
 8001ad6:	af00      	add	r7, sp, #0
 8001ad8:	4603      	mov	r3, r0
 8001ada:	71fb      	strb	r3, [r7, #7]
		0101 = AIN5 (ADS1256 only)
		0110 = AIN6 (ADS1256 only)
		0111 = AIN7 (ADS1256 only)
		1xxx = AINCOM (when NSEL3 = 1, NSEL2, NSEL1, NSEL0 are ��don��t care��)
	*/
	if (_ch == 0)
 8001adc:	79fb      	ldrb	r3, [r7, #7]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d104      	bne.n	8001aec <ADS1256_SetDiffChannel+0x1a>
	{
		ADS1256_WriteReg(REG_MUX, (0 << 4) | 1);	/* DiffChannal  AIN0�� AIN1 */
 8001ae2:	2101      	movs	r1, #1
 8001ae4:	2001      	movs	r0, #1
 8001ae6:	f7ff ff77 	bl	80019d8 <ADS1256_WriteReg>
	}
	else if (_ch == 3)
	{
		ADS1256_WriteReg(REG_MUX, (6 << 4) | 7);	/*DiffChannal   AIN6�� AIN7 */
	}
}
 8001aea:	e016      	b.n	8001b1a <ADS1256_SetDiffChannel+0x48>
	else if (_ch == 1)
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	2b01      	cmp	r3, #1
 8001af0:	d104      	bne.n	8001afc <ADS1256_SetDiffChannel+0x2a>
		ADS1256_WriteReg(REG_MUX, (2 << 4) | 3);	/*DiffChannal   AIN2�� AIN3 */
 8001af2:	2123      	movs	r1, #35	; 0x23
 8001af4:	2001      	movs	r0, #1
 8001af6:	f7ff ff6f 	bl	80019d8 <ADS1256_WriteReg>
}
 8001afa:	e00e      	b.n	8001b1a <ADS1256_SetDiffChannel+0x48>
	else if (_ch == 2)
 8001afc:	79fb      	ldrb	r3, [r7, #7]
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d104      	bne.n	8001b0c <ADS1256_SetDiffChannel+0x3a>
		ADS1256_WriteReg(REG_MUX, (4 << 4) | 5);	/*DiffChannal    AIN4�� AIN5 */
 8001b02:	2145      	movs	r1, #69	; 0x45
 8001b04:	2001      	movs	r0, #1
 8001b06:	f7ff ff67 	bl	80019d8 <ADS1256_WriteReg>
}
 8001b0a:	e006      	b.n	8001b1a <ADS1256_SetDiffChannel+0x48>
	else if (_ch == 3)
 8001b0c:	79fb      	ldrb	r3, [r7, #7]
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d103      	bne.n	8001b1a <ADS1256_SetDiffChannel+0x48>
		ADS1256_WriteReg(REG_MUX, (6 << 4) | 7);	/*DiffChannal   AIN6�� AIN7 */
 8001b12:	2167      	movs	r1, #103	; 0x67
 8001b14:	2001      	movs	r0, #1
 8001b16:	f7ff ff5f 	bl	80019d8 <ADS1256_WriteReg>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
	...

08001b24 <ADS1256_WaitDRDY>:
*	parameter:  NULL
*	The return value:  NULL
*********************************************************************************************************
*/
void ADS1256_WaitDRDY(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b082      	sub	sp, #8
 8001b28:	af00      	add	r7, sp, #0
	uint32_t i;


	for (i = 0; i < 400000; i++)
 8001b2a:	2300      	movs	r3, #0
 8001b2c:	607b      	str	r3, [r7, #4]
 8001b2e:	e009      	b.n	8001b44 <ADS1256_WaitDRDY+0x20>
	{
		if (DRDY_IS_LOW())
 8001b30:	2104      	movs	r1, #4
 8001b32:	4809      	ldr	r0, [pc, #36]	; (8001b58 <ADS1256_WaitDRDY+0x34>)
 8001b34:	f00d fa82 	bl	800f03c <HAL_GPIO_ReadPin>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d007      	beq.n	8001b4e <ADS1256_WaitDRDY+0x2a>
	for (i = 0; i < 400000; i++)
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	3301      	adds	r3, #1
 8001b42:	607b      	str	r3, [r7, #4]
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	4a05      	ldr	r2, [pc, #20]	; (8001b5c <ADS1256_WaitDRDY+0x38>)
 8001b48:	4293      	cmp	r3, r2
 8001b4a:	d9f1      	bls.n	8001b30 <ADS1256_WaitDRDY+0xc>
	}
	if (i >= 400000)
	{
		//printf("ADS1256_WaitDRDY() Time Out ...\r\n");
	}
}
 8001b4c:	e000      	b.n	8001b50 <ADS1256_WaitDRDY+0x2c>
			break;
 8001b4e:	bf00      	nop
}
 8001b50:	bf00      	nop
 8001b52:	3708      	adds	r7, #8
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	40020c00 	.word	0x40020c00
 8001b5c:	00061a7f 	.word	0x00061a7f

08001b60 <ADS1256_ReadData>:
*	parameter: NULL
*	The return value:  NULL
*********************************************************************************************************
*/
int32_t ADS1256_ReadData(void)
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b082      	sub	sp, #8
 8001b64:	af00      	add	r7, sp, #0
	uint32_t read = 0;
 8001b66:	2300      	movs	r3, #0
 8001b68:	607b      	str	r3, [r7, #4]
    static uint8_t buf[3];

	CS_0();	/* SPI   cs = 0 */
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001b70:	481f      	ldr	r0, [pc, #124]	; (8001bf0 <ADS1256_ReadData+0x90>)
 8001b72:	f00d fa7b 	bl	800f06c <HAL_GPIO_WritePin>

	ADS1256_Send8Bit(CMD_RDATA);	/* read ADC command  */
 8001b76:	2001      	movs	r0, #1
 8001b78:	f7ff feac 	bl	80018d4 <ADS1256_Send8Bit>

	ADS1256_DelayDATA();	/*delay time  */
 8001b7c:	f7ff ff0e 	bl	800199c <ADS1256_DelayDATA>

	/*Read the sample results 24bit*/
    buf[0] = ADS1256_Recive8Bit();
 8001b80:	f7ff ff16 	bl	80019b0 <ADS1256_Recive8Bit>
 8001b84:	4603      	mov	r3, r0
 8001b86:	461a      	mov	r2, r3
 8001b88:	4b1a      	ldr	r3, [pc, #104]	; (8001bf4 <ADS1256_ReadData+0x94>)
 8001b8a:	701a      	strb	r2, [r3, #0]
    buf[1] = ADS1256_Recive8Bit();
 8001b8c:	f7ff ff10 	bl	80019b0 <ADS1256_Recive8Bit>
 8001b90:	4603      	mov	r3, r0
 8001b92:	461a      	mov	r2, r3
 8001b94:	4b17      	ldr	r3, [pc, #92]	; (8001bf4 <ADS1256_ReadData+0x94>)
 8001b96:	705a      	strb	r2, [r3, #1]
    buf[2] = ADS1256_Recive8Bit();
 8001b98:	f7ff ff0a 	bl	80019b0 <ADS1256_Recive8Bit>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	461a      	mov	r2, r3
 8001ba0:	4b14      	ldr	r3, [pc, #80]	; (8001bf4 <ADS1256_ReadData+0x94>)
 8001ba2:	709a      	strb	r2, [r3, #2]

    read = ((uint32_t)buf[0] << 16) & 0x00FF0000;
 8001ba4:	4b13      	ldr	r3, [pc, #76]	; (8001bf4 <ADS1256_ReadData+0x94>)
 8001ba6:	781b      	ldrb	r3, [r3, #0]
 8001ba8:	041b      	lsls	r3, r3, #16
 8001baa:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001bae:	607b      	str	r3, [r7, #4]
    read |= ((uint32_t)buf[1] << 8);  /* Pay attention to It is wrong   read |= (buf[1] << 8) */
 8001bb0:	4b10      	ldr	r3, [pc, #64]	; (8001bf4 <ADS1256_ReadData+0x94>)
 8001bb2:	785b      	ldrb	r3, [r3, #1]
 8001bb4:	021b      	lsls	r3, r3, #8
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	607b      	str	r3, [r7, #4]
    read |= buf[2];
 8001bbc:	4b0d      	ldr	r3, [pc, #52]	; (8001bf4 <ADS1256_ReadData+0x94>)
 8001bbe:	789b      	ldrb	r3, [r3, #2]
 8001bc0:	461a      	mov	r2, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	607b      	str	r3, [r7, #4]

	CS_1();	/* SPIƬѡ = 1 */
 8001bc8:	2201      	movs	r2, #1
 8001bca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001bce:	4808      	ldr	r0, [pc, #32]	; (8001bf0 <ADS1256_ReadData+0x90>)
 8001bd0:	f00d fa4c 	bl	800f06c <HAL_GPIO_WritePin>

	/* Extend a signed number*/
    if (read & 0x800000)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <ADS1256_ReadData+0x86>
    {
	    read |= 0xFF000000;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
 8001be4:	607b      	str	r3, [r7, #4]
    }

	return (int32_t)read;
 8001be6:	687b      	ldr	r3, [r7, #4]
}
 8001be8:	4618      	mov	r0, r3
 8001bea:	3708      	adds	r7, #8
 8001bec:	46bd      	mov	sp, r7
 8001bee:	bd80      	pop	{r7, pc}
 8001bf0:	40020800 	.word	0x40020800
 8001bf4:	200004bc 	.word	0x200004bc

08001bf8 <Write_DAC8552>:
*			   data : output DAC value 
*	The return value:  NULL
*********************************************************************************************************
*/
void Write_DAC8552(uint8_t channel, uint16_t Data)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	b084      	sub	sp, #16
 8001bfc:	af00      	add	r7, sp, #0
 8001bfe:	4603      	mov	r3, r0
 8001c00:	460a      	mov	r2, r1
 8001c02:	71fb      	strb	r3, [r7, #7]
 8001c04:	4613      	mov	r3, r2
 8001c06:	80bb      	strh	r3, [r7, #4]
	//uint8_t high,low;
	uint8_t sample[3];
	sample[0] = channel;
 8001c08:	79fb      	ldrb	r3, [r7, #7]
 8001c0a:	733b      	strb	r3, [r7, #12]
	sample[1] = (uint8_t)(Data >> 8);
 8001c0c:	88bb      	ldrh	r3, [r7, #4]
 8001c0e:	0a1b      	lsrs	r3, r3, #8
 8001c10:	b29b      	uxth	r3, r3
 8001c12:	b2db      	uxtb	r3, r3
 8001c14:	737b      	strb	r3, [r7, #13]
	sample[2] = (uint8_t)(Data & 0xff);
 8001c16:	88bb      	ldrh	r3, [r7, #4]
 8001c18:	b2db      	uxtb	r3, r3
 8001c1a:	73bb      	strb	r3, [r7, #14]
	CS1_1();
 8001c1c:	2201      	movs	r2, #1
 8001c1e:	2120      	movs	r1, #32
 8001c20:	480b      	ldr	r0, [pc, #44]	; (8001c50 <Write_DAC8552+0x58>)
 8001c22:	f00d fa23 	bl	800f06c <HAL_GPIO_WritePin>
	CS1_0();
 8001c26:	2200      	movs	r2, #0
 8001c28:	2120      	movs	r1, #32
 8001c2a:	4809      	ldr	r0, [pc, #36]	; (8001c50 <Write_DAC8552+0x58>)
 8001c2c:	f00d fa1e 	bl	800f06c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,sample,3,100);
 8001c30:	f107 010c 	add.w	r1, r7, #12
 8001c34:	2364      	movs	r3, #100	; 0x64
 8001c36:	2203      	movs	r2, #3
 8001c38:	4806      	ldr	r0, [pc, #24]	; (8001c54 <Write_DAC8552+0x5c>)
 8001c3a:	f00f fbcf 	bl	80113dc <HAL_SPI_Transmit>
	CS1_1();
 8001c3e:	2201      	movs	r2, #1
 8001c40:	2120      	movs	r1, #32
 8001c42:	4803      	ldr	r0, [pc, #12]	; (8001c50 <Write_DAC8552+0x58>)
 8001c44:	f00d fa12 	bl	800f06c <HAL_GPIO_WritePin>
}
 8001c48:	bf00      	nop
 8001c4a:	3710      	adds	r7, #16
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}
 8001c50:	40020c00 	.word	0x40020c00
 8001c54:	20002050 	.word	0x20002050

08001c58 <Write_DAC8552_Both>:


void Write_DAC8552_Both(uint16_t A,uint16_t B){
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b084      	sub	sp, #16
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	4603      	mov	r3, r0
 8001c60:	460a      	mov	r2, r1
 8001c62:	80fb      	strh	r3, [r7, #6]
 8001c64:	4613      	mov	r3, r2
 8001c66:	80bb      	strh	r3, [r7, #4]
	uint8_t tab[6];
	tab[0] = 0x00;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	723b      	strb	r3, [r7, #8]
	tab[1] = (uint8_t)(A >> 8);
 8001c6c:	88fb      	ldrh	r3, [r7, #6]
 8001c6e:	0a1b      	lsrs	r3, r3, #8
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	b2db      	uxtb	r3, r3
 8001c74:	727b      	strb	r3, [r7, #9]
	tab[2] = (uint8_t)A;
 8001c76:	88fb      	ldrh	r3, [r7, #6]
 8001c78:	b2db      	uxtb	r3, r3
 8001c7a:	72bb      	strb	r3, [r7, #10]
	tab[3] = 0x34;
 8001c7c:	2334      	movs	r3, #52	; 0x34
 8001c7e:	72fb      	strb	r3, [r7, #11]
	tab[4] = (uint8_t)(B >> 8);
 8001c80:	88bb      	ldrh	r3, [r7, #4]
 8001c82:	0a1b      	lsrs	r3, r3, #8
 8001c84:	b29b      	uxth	r3, r3
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	733b      	strb	r3, [r7, #12]
	tab[5] = (uint8_t)B;
 8001c8a:	88bb      	ldrh	r3, [r7, #4]
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	737b      	strb	r3, [r7, #13]
	CS1_0();
 8001c90:	2200      	movs	r2, #0
 8001c92:	2120      	movs	r1, #32
 8001c94:	4812      	ldr	r0, [pc, #72]	; (8001ce0 <Write_DAC8552_Both+0x88>)
 8001c96:	f00d f9e9 	bl	800f06c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,tab,3,100);
 8001c9a:	f107 0108 	add.w	r1, r7, #8
 8001c9e:	2364      	movs	r3, #100	; 0x64
 8001ca0:	2203      	movs	r2, #3
 8001ca2:	4810      	ldr	r0, [pc, #64]	; (8001ce4 <Write_DAC8552_Both+0x8c>)
 8001ca4:	f00f fb9a 	bl	80113dc <HAL_SPI_Transmit>
	CS1_1();
 8001ca8:	2201      	movs	r2, #1
 8001caa:	2120      	movs	r1, #32
 8001cac:	480c      	ldr	r0, [pc, #48]	; (8001ce0 <Write_DAC8552_Both+0x88>)
 8001cae:	f00d f9dd 	bl	800f06c <HAL_GPIO_WritePin>
	CS1_0();
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	2120      	movs	r1, #32
 8001cb6:	480a      	ldr	r0, [pc, #40]	; (8001ce0 <Write_DAC8552_Both+0x88>)
 8001cb8:	f00d f9d8 	bl	800f06c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3,(tab + 3),3,100);
 8001cbc:	f107 0108 	add.w	r1, r7, #8
 8001cc0:	3103      	adds	r1, #3
 8001cc2:	2364      	movs	r3, #100	; 0x64
 8001cc4:	2203      	movs	r2, #3
 8001cc6:	4807      	ldr	r0, [pc, #28]	; (8001ce4 <Write_DAC8552_Both+0x8c>)
 8001cc8:	f00f fb88 	bl	80113dc <HAL_SPI_Transmit>
	CS1_1();
 8001ccc:	2201      	movs	r2, #1
 8001cce:	2120      	movs	r1, #32
 8001cd0:	4803      	ldr	r0, [pc, #12]	; (8001ce0 <Write_DAC8552_Both+0x88>)
 8001cd2:	f00d f9cb 	bl	800f06c <HAL_GPIO_WritePin>
}
 8001cd6:	bf00      	nop
 8001cd8:	3710      	adds	r7, #16
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bd80      	pop	{r7, pc}
 8001cde:	bf00      	nop
 8001ce0:	40020c00 	.word	0x40020c00
 8001ce4:	20002050 	.word	0x20002050

08001ce8 <updateSdramPointer>:
static uint32_t sdramPointerTmp = 0;
static uint32_t sampleCounter = 0;
static BOOL recordState = FALSE;
static BOOL playbackState = FALSE;

void updateSdramPointer(){
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0
	sdram_pointer = pattern_audio_map[looper.StartPattern].sample_position * looper.SampleBytes;
 8001cec:	4b0a      	ldr	r3, [pc, #40]	; (8001d18 <updateSdramPointer+0x30>)
 8001cee:	695a      	ldr	r2, [r3, #20]
 8001cf0:	490a      	ldr	r1, [pc, #40]	; (8001d1c <updateSdramPointer+0x34>)
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	4413      	add	r3, r2
 8001cf8:	009b      	lsls	r3, r3, #2
 8001cfa:	440b      	add	r3, r1
 8001cfc:	3304      	adds	r3, #4
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a05      	ldr	r2, [pc, #20]	; (8001d18 <updateSdramPointer+0x30>)
 8001d02:	6912      	ldr	r2, [r2, #16]
 8001d04:	fb02 f303 	mul.w	r3, r2, r3
 8001d08:	4a05      	ldr	r2, [pc, #20]	; (8001d20 <updateSdramPointer+0x38>)
 8001d0a:	6013      	str	r3, [r2, #0]
}
 8001d0c:	bf00      	nop
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
 8001d16:	bf00      	nop
 8001d18:	20001228 	.word	0x20001228
 8001d1c:	20000568 	.word	0x20000568
 8001d20:	200004c0 	.word	0x200004c0

08001d24 <setSampleCounter>:

void setSampleCounter(uint32_t cnt){
 8001d24:	b480      	push	{r7}
 8001d26:	b083      	sub	sp, #12
 8001d28:	af00      	add	r7, sp, #0
 8001d2a:	6078      	str	r0, [r7, #4]
	sampleCounter = cnt;
 8001d2c:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <setSampleCounter+0x1c>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6013      	str	r3, [r2, #0]
}
 8001d32:	bf00      	nop
 8001d34:	370c      	adds	r7, #12
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	200004d4 	.word	0x200004d4

08001d44 <getStartEndPatterns>:

void getStartEndPatterns(uint32_t *start,uint32_t *end){
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
	*start = startPatternTmp;
 8001d4e:	4b07      	ldr	r3, [pc, #28]	; (8001d6c <getStartEndPatterns+0x28>)
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	601a      	str	r2, [r3, #0]
	*end = endPatternTmp;
 8001d56:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <getStartEndPatterns+0x2c>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	683b      	ldr	r3, [r7, #0]
 8001d5c:	601a      	str	r2, [r3, #0]
}
 8001d5e:	bf00      	nop
 8001d60:	370c      	adds	r7, #12
 8001d62:	46bd      	mov	sp, r7
 8001d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d68:	4770      	bx	lr
 8001d6a:	bf00      	nop
 8001d6c:	200004c8 	.word	0x200004c8
 8001d70:	200004cc 	.word	0x200004cc

08001d74 <setStartEndPatterns>:

void setStartEndPatterns(uint32_t start,uint32_t end){
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
 8001d7c:	6039      	str	r1, [r7, #0]
	startPatternTmp = start;
 8001d7e:	4a2a      	ldr	r2, [pc, #168]	; (8001e28 <setStartEndPatterns+0xb4>)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6013      	str	r3, [r2, #0]
	endPatternTmp = end;
 8001d84:	4a29      	ldr	r2, [pc, #164]	; (8001e2c <setStartEndPatterns+0xb8>)
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	6013      	str	r3, [r2, #0]

	// happens only when playback button is pressed immediately after recording
	if(looper.Function == AUDIO_ONLY && looper.Playback == TRUE && looper.Recording == TRUE)
 8001d8a:	4b29      	ldr	r3, [pc, #164]	; (8001e30 <setStartEndPatterns+0xbc>)
 8001d8c:	7f5b      	ldrb	r3, [r3, #29]
 8001d8e:	b2db      	uxtb	r3, r3
 8001d90:	2b01      	cmp	r3, #1
 8001d92:	d116      	bne.n	8001dc2 <setStartEndPatterns+0x4e>
 8001d94:	4b26      	ldr	r3, [pc, #152]	; (8001e30 <setStartEndPatterns+0xbc>)
 8001d96:	785b      	ldrb	r3, [r3, #1]
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	2b01      	cmp	r3, #1
 8001d9c:	d111      	bne.n	8001dc2 <setStartEndPatterns+0x4e>
 8001d9e:	4b24      	ldr	r3, [pc, #144]	; (8001e30 <setStartEndPatterns+0xbc>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	b2db      	uxtb	r3, r3
 8001da4:	2b01      	cmp	r3, #1
 8001da6:	d10c      	bne.n	8001dc2 <setStartEndPatterns+0x4e>
		pattern_audio_map[endPatternTmp + 1].sample_position = sampleCounter;
 8001da8:	4b20      	ldr	r3, [pc, #128]	; (8001e2c <setStartEndPatterns+0xb8>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	1c5a      	adds	r2, r3, #1
 8001dae:	4b21      	ldr	r3, [pc, #132]	; (8001e34 <setStartEndPatterns+0xc0>)
 8001db0:	6819      	ldr	r1, [r3, #0]
 8001db2:	4821      	ldr	r0, [pc, #132]	; (8001e38 <setStartEndPatterns+0xc4>)
 8001db4:	4613      	mov	r3, r2
 8001db6:	005b      	lsls	r3, r3, #1
 8001db8:	4413      	add	r3, r2
 8001dba:	009b      	lsls	r3, r3, #2
 8001dbc:	4403      	add	r3, r0
 8001dbe:	3304      	adds	r3, #4
 8001dc0:	6019      	str	r1, [r3, #0]

	sdram_pointer =  sdramPointerTmp = pattern_audio_map[startPatternTmp].sample_position * looper.SampleBytes;
 8001dc2:	4b19      	ldr	r3, [pc, #100]	; (8001e28 <setStartEndPatterns+0xb4>)
 8001dc4:	681a      	ldr	r2, [r3, #0]
 8001dc6:	491c      	ldr	r1, [pc, #112]	; (8001e38 <setStartEndPatterns+0xc4>)
 8001dc8:	4613      	mov	r3, r2
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	4413      	add	r3, r2
 8001dce:	009b      	lsls	r3, r3, #2
 8001dd0:	440b      	add	r3, r1
 8001dd2:	3304      	adds	r3, #4
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a16      	ldr	r2, [pc, #88]	; (8001e30 <setStartEndPatterns+0xbc>)
 8001dd8:	6912      	ldr	r2, [r2, #16]
 8001dda:	fb02 f303 	mul.w	r3, r2, r3
 8001dde:	4a17      	ldr	r2, [pc, #92]	; (8001e3c <setStartEndPatterns+0xc8>)
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	4b16      	ldr	r3, [pc, #88]	; (8001e3c <setStartEndPatterns+0xc8>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	4a16      	ldr	r2, [pc, #88]	; (8001e40 <setStartEndPatterns+0xcc>)
 8001de8:	6013      	str	r3, [r2, #0]
	looper.SamplesRead = pattern_audio_map[startPatternTmp].sample_position;
 8001dea:	4b0f      	ldr	r3, [pc, #60]	; (8001e28 <setStartEndPatterns+0xb4>)
 8001dec:	681a      	ldr	r2, [r3, #0]
 8001dee:	4912      	ldr	r1, [pc, #72]	; (8001e38 <setStartEndPatterns+0xc4>)
 8001df0:	4613      	mov	r3, r2
 8001df2:	005b      	lsls	r3, r3, #1
 8001df4:	4413      	add	r3, r2
 8001df6:	009b      	lsls	r3, r3, #2
 8001df8:	440b      	add	r3, r1
 8001dfa:	3304      	adds	r3, #4
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a0c      	ldr	r2, [pc, #48]	; (8001e30 <setStartEndPatterns+0xbc>)
 8001e00:	6093      	str	r3, [r2, #8]
	looper.SamplesWritten = pattern_audio_map[endPatternTmp + 1].sample_position;
 8001e02:	4b0a      	ldr	r3, [pc, #40]	; (8001e2c <setStartEndPatterns+0xb8>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	1c5a      	adds	r2, r3, #1
 8001e08:	490b      	ldr	r1, [pc, #44]	; (8001e38 <setStartEndPatterns+0xc4>)
 8001e0a:	4613      	mov	r3, r2
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	4413      	add	r3, r2
 8001e10:	009b      	lsls	r3, r3, #2
 8001e12:	440b      	add	r3, r1
 8001e14:	3304      	adds	r3, #4
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a05      	ldr	r2, [pc, #20]	; (8001e30 <setStartEndPatterns+0xbc>)
 8001e1a:	60d3      	str	r3, [r2, #12]

	//}
}
 8001e1c:	bf00      	nop
 8001e1e:	370c      	adds	r7, #12
 8001e20:	46bd      	mov	sp, r7
 8001e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e26:	4770      	bx	lr
 8001e28:	200004c8 	.word	0x200004c8
 8001e2c:	200004cc 	.word	0x200004cc
 8001e30:	20001228 	.word	0x20001228
 8001e34:	200004d4 	.word	0x200004d4
 8001e38:	20000568 	.word	0x20000568
 8001e3c:	200004d0 	.word	0x200004d0
 8001e40:	200004c0 	.word	0x200004c0

08001e44 <signed16_unsigned12>:
	if(looper.Recording == TRUE){
		//looper.SampleOffset = 0;
	}
}

void signed16_unsigned12(int16_t *buf,int32_t start,int32_t stop){
 8001e44:	b480      	push	{r7}
 8001e46:	b085      	sub	sp, #20
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
	for(;start < stop;start++)
 8001e50:	e017      	b.n	8001e82 <signed16_unsigned12+0x3e>
		buf[start] = SIGNED16_UNSIGNED12(buf[start]);
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	005b      	lsls	r3, r3, #1
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	4413      	add	r3, r2
 8001e5a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	da00      	bge.n	8001e64 <signed16_unsigned12+0x20>
 8001e62:	3303      	adds	r3, #3
 8001e64:	109b      	asrs	r3, r3, #2
 8001e66:	b21b      	sxth	r3, r3
 8001e68:	b29b      	uxth	r3, r3
 8001e6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001e6e:	b299      	uxth	r1, r3
 8001e70:	68bb      	ldr	r3, [r7, #8]
 8001e72:	005b      	lsls	r3, r3, #1
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	4413      	add	r3, r2
 8001e78:	b20a      	sxth	r2, r1
 8001e7a:	801a      	strh	r2, [r3, #0]
	for(;start < stop;start++)
 8001e7c:	68bb      	ldr	r3, [r7, #8]
 8001e7e:	3301      	adds	r3, #1
 8001e80:	60bb      	str	r3, [r7, #8]
 8001e82:	68ba      	ldr	r2, [r7, #8]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	429a      	cmp	r2, r3
 8001e88:	dbe3      	blt.n	8001e52 <signed16_unsigned12+0xe>
}
 8001e8a:	bf00      	nop
 8001e8c:	bf00      	nop
 8001e8e:	3714      	adds	r7, #20
 8001e90:	46bd      	mov	sp, r7
 8001e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e96:	4770      	bx	lr

08001e98 <record_sample>:

void record_sample(int16_t swrite,__IO CHANNEL *cha){
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	b082      	sub	sp, #8
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	6039      	str	r1, [r7, #0]
 8001ea2:	80fb      	strh	r3, [r7, #6]
	if(looper.StartLooper == FALSE){
 8001ea4:	4b17      	ldr	r3, [pc, #92]	; (8001f04 <record_sample+0x6c>)
 8001ea6:	789b      	ldrb	r3, [r3, #2]
 8001ea8:	b2db      	uxtb	r3, r3
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d026      	beq.n	8001efc <record_sample+0x64>
		return;
	}

	if(sdram_pointer < SDRAM_SIZE){
 8001eae:	4b16      	ldr	r3, [pc, #88]	; (8001f08 <record_sample+0x70>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001eb6:	d222      	bcs.n	8001efe <record_sample+0x66>
		BSP_SDRAM_WriteData16b(SDRAM_DEVICE_ADDR + sdram_pointer + cha->Offset,(uint16_t *) &swrite, 1);
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	781b      	ldrb	r3, [r3, #0]
 8001ebc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	461a      	mov	r2, r3
 8001ec4:	4b10      	ldr	r3, [pc, #64]	; (8001f08 <record_sample+0x70>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4413      	add	r3, r2
 8001eca:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 8001ece:	1db9      	adds	r1, r7, #6
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f009 fcc2 	bl	800b85c <BSP_SDRAM_WriteData16b>
		sdram_pointer += looper.SampleBytes;
 8001ed8:	4b0a      	ldr	r3, [pc, #40]	; (8001f04 <record_sample+0x6c>)
 8001eda:	691a      	ldr	r2, [r3, #16]
 8001edc:	4b0a      	ldr	r3, [pc, #40]	; (8001f08 <record_sample+0x70>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4413      	add	r3, r2
 8001ee2:	4a09      	ldr	r2, [pc, #36]	; (8001f08 <record_sample+0x70>)
 8001ee4:	6013      	str	r3, [r2, #0]
		if(looper.Function == AUDIO_ONLY)
 8001ee6:	4b07      	ldr	r3, [pc, #28]	; (8001f04 <record_sample+0x6c>)
 8001ee8:	7f5b      	ldrb	r3, [r3, #29]
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	2b01      	cmp	r3, #1
 8001eee:	d106      	bne.n	8001efe <record_sample+0x66>
			sampleCounter++;
 8001ef0:	4b06      	ldr	r3, [pc, #24]	; (8001f0c <record_sample+0x74>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	3301      	adds	r3, #1
 8001ef6:	4a05      	ldr	r2, [pc, #20]	; (8001f0c <record_sample+0x74>)
 8001ef8:	6013      	str	r3, [r2, #0]
 8001efa:	e000      	b.n	8001efe <record_sample+0x66>
		return;
 8001efc:	bf00      	nop
			//(GET_ACTIVE_CHANNEL)->SamplesWritten++;
	}

}
 8001efe:	3708      	adds	r7, #8
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}
 8001f04:	20001228 	.word	0x20001228
 8001f08:	200004c0 	.word	0x200004c0
 8001f0c:	200004d4 	.word	0x200004d4

08001f10 <record_samples>:

void record_samples(int16_t swrite,__IO CHANNEL *cha,__IO CHANNEL *chb){
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	4603      	mov	r3, r0
 8001f18:	60b9      	str	r1, [r7, #8]
 8001f1a:	607a      	str	r2, [r7, #4]
 8001f1c:	81fb      	strh	r3, [r7, #14]
	int16_t sread;

	if(looper.StartLooper == FALSE ){
 8001f1e:	4b66      	ldr	r3, [pc, #408]	; (80020b8 <record_samples+0x1a8>)
 8001f20:	789b      	ldrb	r3, [r3, #2]
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	f000 80c2 	beq.w	80020ae <record_samples+0x19e>
		return;
	}

	if(sdram_pointer < SDRAM_SIZE){
 8001f2a:	4b64      	ldr	r3, [pc, #400]	; (80020bc <record_samples+0x1ac>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f32:	f080 8099 	bcs.w	8002068 <record_samples+0x158>
		if(cha->Active == TRUE){
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	781b      	ldrb	r3, [r3, #0]
 8001f3a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001f3e:	b2db      	uxtb	r3, r3
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d13a      	bne.n	8001fba <record_samples+0xaa>
			BSP_SDRAM_WriteData16b(SDRAM_DEVICE_ADDR + sdram_pointer + cha->Offset,(uint16_t *) &swrite, 1);
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	781b      	ldrb	r3, [r3, #0]
 8001f48:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	461a      	mov	r2, r3
 8001f50:	4b5a      	ldr	r3, [pc, #360]	; (80020bc <record_samples+0x1ac>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4413      	add	r3, r2
 8001f56:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 8001f5a:	f107 010e 	add.w	r1, r7, #14
 8001f5e:	2201      	movs	r2, #1
 8001f60:	4618      	mov	r0, r3
 8001f62:	f009 fc7b 	bl	800b85c <BSP_SDRAM_WriteData16b>

			// read other track if it has any samples
			if(pattern_audio_map[looper.StartPattern].channel_recorded[INACTIVE_CHANNEL_INDEX] == TRUE){
 8001f66:	4b54      	ldr	r3, [pc, #336]	; (80020b8 <record_samples+0x1a8>)
 8001f68:	695a      	ldr	r2, [r3, #20]
 8001f6a:	4b53      	ldr	r3, [pc, #332]	; (80020b8 <record_samples+0x1a8>)
 8001f6c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001f70:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	4618      	mov	r0, r3
 8001f78:	4951      	ldr	r1, [pc, #324]	; (80020c0 <record_samples+0x1b0>)
 8001f7a:	4613      	mov	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	4413      	add	r3, r2
 8001f80:	009b      	lsls	r3, r3, #2
 8001f82:	440b      	add	r3, r1
 8001f84:	4403      	add	r3, r0
 8001f86:	3308      	adds	r3, #8
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b01      	cmp	r3, #1
 8001f8c:	d156      	bne.n	800203c <record_samples+0x12c>
				BSP_SDRAM_ReadData16b(SDRAM_DEVICE_ADDR + sdram_pointer + chb->Offset,(uint16_t *)&sread,1);
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	781b      	ldrb	r3, [r3, #0]
 8001f92:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001f96:	b2db      	uxtb	r3, r3
 8001f98:	461a      	mov	r2, r3
 8001f9a:	4b48      	ldr	r3, [pc, #288]	; (80020bc <record_samples+0x1ac>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 8001fa4:	f107 0116 	add.w	r1, r7, #22
 8001fa8:	2201      	movs	r2, #1
 8001faa:	4618      	mov	r0, r3
 8001fac:	f009 fc44 	bl	800b838 <BSP_SDRAM_ReadData16b>
				chb->CurrentSample = sread;
 8001fb0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	805a      	strh	r2, [r3, #2]
 8001fb8:	e040      	b.n	800203c <record_samples+0x12c>
			}

		}
		else if(chb->Active == TRUE){
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	781b      	ldrb	r3, [r3, #0]
 8001fbe:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001fc2:	b2db      	uxtb	r3, r3
 8001fc4:	2b01      	cmp	r3, #1
 8001fc6:	d139      	bne.n	800203c <record_samples+0x12c>
			BSP_SDRAM_WriteData16b(SDRAM_DEVICE_ADDR + sdram_pointer  + chb->Offset,(uint16_t *) &swrite, 1);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	461a      	mov	r2, r3
 8001fd4:	4b39      	ldr	r3, [pc, #228]	; (80020bc <record_samples+0x1ac>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	4413      	add	r3, r2
 8001fda:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 8001fde:	f107 010e 	add.w	r1, r7, #14
 8001fe2:	2201      	movs	r2, #1
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f009 fc39 	bl	800b85c <BSP_SDRAM_WriteData16b>

			// read other track if it has any samples
			if(pattern_audio_map[looper.StartPattern].channel_recorded[INACTIVE_CHANNEL_INDEX] == TRUE){
 8001fea:	4b33      	ldr	r3, [pc, #204]	; (80020b8 <record_samples+0x1a8>)
 8001fec:	695a      	ldr	r2, [r3, #20]
 8001fee:	4b32      	ldr	r3, [pc, #200]	; (80020b8 <record_samples+0x1a8>)
 8001ff0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001ff4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8001ff8:	b2db      	uxtb	r3, r3
 8001ffa:	4618      	mov	r0, r3
 8001ffc:	4930      	ldr	r1, [pc, #192]	; (80020c0 <record_samples+0x1b0>)
 8001ffe:	4613      	mov	r3, r2
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	4413      	add	r3, r2
 8002004:	009b      	lsls	r3, r3, #2
 8002006:	440b      	add	r3, r1
 8002008:	4403      	add	r3, r0
 800200a:	3308      	adds	r3, #8
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	2b01      	cmp	r3, #1
 8002010:	d114      	bne.n	800203c <record_samples+0x12c>
				BSP_SDRAM_ReadData16b(SDRAM_DEVICE_ADDR + sdram_pointer + cha->Offset,(uint16_t *)&sread,1);
 8002012:	68bb      	ldr	r3, [r7, #8]
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800201a:	b2db      	uxtb	r3, r3
 800201c:	461a      	mov	r2, r3
 800201e:	4b27      	ldr	r3, [pc, #156]	; (80020bc <record_samples+0x1ac>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	4413      	add	r3, r2
 8002024:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 8002028:	f107 0116 	add.w	r1, r7, #22
 800202c:	2201      	movs	r2, #1
 800202e:	4618      	mov	r0, r3
 8002030:	f009 fc02 	bl	800b838 <BSP_SDRAM_ReadData16b>
				cha->CurrentSample = sread;
 8002034:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	805a      	strh	r2, [r3, #2]
			}
		}

		sdram_pointer += looper.SampleBytes;
 800203c:	4b1e      	ldr	r3, [pc, #120]	; (80020b8 <record_samples+0x1a8>)
 800203e:	691a      	ldr	r2, [r3, #16]
 8002040:	4b1e      	ldr	r3, [pc, #120]	; (80020bc <record_samples+0x1ac>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4413      	add	r3, r2
 8002046:	4a1d      	ldr	r2, [pc, #116]	; (80020bc <record_samples+0x1ac>)
 8002048:	6013      	str	r3, [r2, #0]
		if(looper.Function == AUDIO_ONLY)
 800204a:	4b1b      	ldr	r3, [pc, #108]	; (80020b8 <record_samples+0x1a8>)
 800204c:	7f5b      	ldrb	r3, [r3, #29]
 800204e:	b2db      	uxtb	r3, r3
 8002050:	2b01      	cmp	r3, #1
 8002052:	d104      	bne.n	800205e <record_samples+0x14e>
			sampleCounter++;
 8002054:	4b1b      	ldr	r3, [pc, #108]	; (80020c4 <record_samples+0x1b4>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	3301      	adds	r3, #1
 800205a:	4a1a      	ldr	r2, [pc, #104]	; (80020c4 <record_samples+0x1b4>)
 800205c:	6013      	str	r3, [r2, #0]
			//(GET_ACTIVE_CHANNEL)->SamplesWritten++;
		looper.SamplesRead++;
 800205e:	4b16      	ldr	r3, [pc, #88]	; (80020b8 <record_samples+0x1a8>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	3301      	adds	r3, #1
 8002064:	4a14      	ldr	r2, [pc, #80]	; (80020b8 <record_samples+0x1a8>)
 8002066:	6093      	str	r3, [r2, #8]
	}

	if(looper.SamplesWritten > 0 && looper.SamplesRead >= looper.SamplesWritten){
 8002068:	4b13      	ldr	r3, [pc, #76]	; (80020b8 <record_samples+0x1a8>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d012      	beq.n	8002096 <record_samples+0x186>
 8002070:	4b11      	ldr	r3, [pc, #68]	; (80020b8 <record_samples+0x1a8>)
 8002072:	689a      	ldr	r2, [r3, #8]
 8002074:	4b10      	ldr	r3, [pc, #64]	; (80020b8 <record_samples+0x1a8>)
 8002076:	68db      	ldr	r3, [r3, #12]
 8002078:	429a      	cmp	r2, r3
 800207a:	d30c      	bcc.n	8002096 <record_samples+0x186>
			BSP_LED_Off(LED_RED);
 800207c:	2001      	movs	r0, #1
 800207e:	f009 faab 	bl	800b5d8 <BSP_LED_Off>
			looper.Recording = FALSE;
 8002082:	4b0d      	ldr	r3, [pc, #52]	; (80020b8 <record_samples+0x1a8>)
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]
			show_status_line = TRUE;
 8002088:	4b0f      	ldr	r3, [pc, #60]	; (80020c8 <record_samples+0x1b8>)
 800208a:	2201      	movs	r2, #1
 800208c:	701a      	strb	r2, [r3, #0]
			looper.StartLooper = FALSE;
 800208e:	4b0a      	ldr	r3, [pc, #40]	; (80020b8 <record_samples+0x1a8>)
 8002090:	2200      	movs	r2, #0
 8002092:	709a      	strb	r2, [r3, #2]
			return;
 8002094:	e00c      	b.n	80020b0 <record_samples+0x1a0>
	}
	if(sdram_pointer == SDRAM_SIZE){
 8002096:	4b09      	ldr	r3, [pc, #36]	; (80020bc <record_samples+0x1ac>)
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800209e:	d107      	bne.n	80020b0 <record_samples+0x1a0>
		sdram_pointer = 0;
 80020a0:	4b06      	ldr	r3, [pc, #24]	; (80020bc <record_samples+0x1ac>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
		looper.StartLooper = FALSE;
 80020a6:	4b04      	ldr	r3, [pc, #16]	; (80020b8 <record_samples+0x1a8>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	709a      	strb	r2, [r3, #2]
 80020ac:	e000      	b.n	80020b0 <record_samples+0x1a0>
		return;
 80020ae:	bf00      	nop
	}
}
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	20001228 	.word	0x20001228
 80020bc:	200004c0 	.word	0x200004c0
 80020c0:	20000568 	.word	0x20000568
 80020c4:	200004d4 	.word	0x200004d4
 80020c8:	20001c48 	.word	0x20001c48
 80020cc:	00000000 	.word	0x00000000

080020d0 <read_sample>:

void read_sample(int16_t swrite,__IO CHANNEL *cha){
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b084      	sub	sp, #16
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	4603      	mov	r3, r0
 80020d8:	6039      	str	r1, [r7, #0]
 80020da:	80fb      	strh	r3, [r7, #6]
	int16_t sread;

	if(looper.StartLooper == FALSE ){
 80020dc:	4b6c      	ldr	r3, [pc, #432]	; (8002290 <read_sample+0x1c0>)
 80020de:	789b      	ldrb	r3, [r3, #2]
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	f000 80ca 	beq.w	800227c <read_sample+0x1ac>
		return;
	}

	BSP_SDRAM_ReadData16b(SDRAM_DEVICE_ADDR + sdram_pointer + cha->Offset,(uint16_t *) &sread, 1);
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	781b      	ldrb	r3, [r3, #0]
 80020ec:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80020f0:	b2db      	uxtb	r3, r3
 80020f2:	461a      	mov	r2, r3
 80020f4:	4b67      	ldr	r3, [pc, #412]	; (8002294 <read_sample+0x1c4>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4413      	add	r3, r2
 80020fa:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 80020fe:	f107 010e 	add.w	r1, r7, #14
 8002102:	2201      	movs	r2, #1
 8002104:	4618      	mov	r0, r3
 8002106:	f009 fb97 	bl	800b838 <BSP_SDRAM_ReadData16b>

	cha->mix32tmp = sread  + swrite;
 800210a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800210e:	b29a      	uxth	r2, r3
 8002110:	88fb      	ldrh	r3, [r7, #6]
 8002112:	4413      	add	r3, r2
 8002114:	b29b      	uxth	r3, r3
 8002116:	b21a      	sxth	r2, r3
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	811a      	strh	r2, [r3, #8]
	cha->CurrentSample = sread;
 800211c:	f9b7 200e 	ldrsh.w	r2, [r7, #14]
 8002120:	683b      	ldr	r3, [r7, #0]
 8002122:	805a      	strh	r2, [r3, #2]

	if(cha->Clipping == TRUE)
 8002124:	683b      	ldr	r3, [r7, #0]
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	f3c3 0380 	ubfx	r3, r3, #2, #1
 800212c:	b2db      	uxtb	r3, r3
 800212e:	2b01      	cmp	r3, #1
 8002130:	d11e      	bne.n	8002170 <read_sample+0xa0>
		cha->mix32tmp = (int32_t)(cha->gain * (float)sread  + cha->gain * (float)swrite);
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	ed93 7a03 	vldr	s14, [r3, #12]
 8002138:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800213c:	ee07 3a90 	vmov	s15, r3
 8002140:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002144:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	edd3 6a03 	vldr	s13, [r3, #12]
 800214e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002152:	ee07 3a90 	vmov	s15, r3
 8002156:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800215a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800215e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002162:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002166:	ee17 3a90 	vmov	r3, s15
 800216a:	b21a      	sxth	r2, r3
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	811a      	strh	r2, [r3, #8]

	if(cha->mix32tmp > cha->mix32Max)
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	891b      	ldrh	r3, [r3, #8]
 8002174:	b21b      	sxth	r3, r3
 8002176:	461a      	mov	r2, r3
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	685b      	ldr	r3, [r3, #4]
 800217c:	429a      	cmp	r2, r3
 800217e:	dd05      	ble.n	800218c <read_sample+0xbc>
		cha->mix32Max = cha->mix32tmp;
 8002180:	683b      	ldr	r3, [r7, #0]
 8002182:	891b      	ldrh	r3, [r3, #8]
 8002184:	b21b      	sxth	r3, r3
 8002186:	461a      	mov	r2, r3
 8002188:	683b      	ldr	r3, [r7, #0]
 800218a:	605a      	str	r2, [r3, #4]

	if(cha->Overdub == TRUE)
 800218c:	683b      	ldr	r3, [r7, #0]
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8002194:	b2db      	uxtb	r3, r3
 8002196:	2b01      	cmp	r3, #1
 8002198:	d110      	bne.n	80021bc <read_sample+0xec>
		BSP_SDRAM_WriteData16b(SDRAM_DEVICE_ADDR + sdram_pointer + cha->Offset,(uint16_t *) &cha->mix32tmp, 1);
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80021a2:	b2db      	uxtb	r3, r3
 80021a4:	461a      	mov	r2, r3
 80021a6:	4b3b      	ldr	r3, [pc, #236]	; (8002294 <read_sample+0x1c4>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4413      	add	r3, r2
 80021ac:	f103 4050 	add.w	r0, r3, #3489660928	; 0xd0000000
 80021b0:	683b      	ldr	r3, [r7, #0]
 80021b2:	3308      	adds	r3, #8
 80021b4:	2201      	movs	r2, #1
 80021b6:	4619      	mov	r1, r3
 80021b8:	f009 fb50 	bl	800b85c <BSP_SDRAM_WriteData16b>

	looper.SamplesRead++;
 80021bc:	4b34      	ldr	r3, [pc, #208]	; (8002290 <read_sample+0x1c0>)
 80021be:	689b      	ldr	r3, [r3, #8]
 80021c0:	3301      	adds	r3, #1
 80021c2:	4a33      	ldr	r2, [pc, #204]	; (8002290 <read_sample+0x1c0>)
 80021c4:	6093      	str	r3, [r2, #8]
	sdram_pointer += looper.SampleBytes;
 80021c6:	4b32      	ldr	r3, [pc, #200]	; (8002290 <read_sample+0x1c0>)
 80021c8:	691a      	ldr	r2, [r3, #16]
 80021ca:	4b32      	ldr	r3, [pc, #200]	; (8002294 <read_sample+0x1c4>)
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	4413      	add	r3, r2
 80021d0:	4a30      	ldr	r2, [pc, #192]	; (8002294 <read_sample+0x1c4>)
 80021d2:	6013      	str	r3, [r2, #0]

	if(looper.SamplesRead >= looper.SamplesWritten){
 80021d4:	4b2e      	ldr	r3, [pc, #184]	; (8002290 <read_sample+0x1c0>)
 80021d6:	689a      	ldr	r2, [r3, #8]
 80021d8:	4b2d      	ldr	r3, [pc, #180]	; (8002290 <read_sample+0x1c0>)
 80021da:	68db      	ldr	r3, [r3, #12]
 80021dc:	429a      	cmp	r2, r3
 80021de:	d344      	bcc.n	800226a <read_sample+0x19a>
		if(cha->Overdub == TRUE && cha->mix32Max > 16383){
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d11f      	bne.n	800222e <read_sample+0x15e>
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80021f6:	db1a      	blt.n	800222e <read_sample+0x15e>
			cha->Clipping = TRUE;
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	7813      	ldrb	r3, [r2, #0]
 80021fc:	f043 0304 	orr.w	r3, r3, #4
 8002200:	7013      	strb	r3, [r2, #0]
			cha->gain = 16383.00 / cha->mix32Max;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	685b      	ldr	r3, [r3, #4]
 8002206:	4618      	mov	r0, r3
 8002208:	f7fe f99c 	bl	8000544 <__aeabi_i2d>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	a11d      	add	r1, pc, #116	; (adr r1, 8002288 <read_sample+0x1b8>)
 8002212:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002216:	f7fe fb29 	bl	800086c <__aeabi_ddiv>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	4610      	mov	r0, r2
 8002220:	4619      	mov	r1, r3
 8002222:	f7fe fc2b 	bl	8000a7c <__aeabi_d2f>
 8002226:	4602      	mov	r2, r0
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	60da      	str	r2, [r3, #12]
 800222c:	e008      	b.n	8002240 <read_sample+0x170>
		}
		else{
			cha->Clipping = FALSE;
 800222e:	683a      	ldr	r2, [r7, #0]
 8002230:	7813      	ldrb	r3, [r2, #0]
 8002232:	f36f 0382 	bfc	r3, #2, #1
 8002236:	7013      	strb	r3, [r2, #0]
			cha->gain = 1.0;
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800223e:	60da      	str	r2, [r3, #12]
		}

		cha->mix32Max = 16383;
 8002240:	683b      	ldr	r3, [r7, #0]
 8002242:	f643 72ff 	movw	r2, #16383	; 0x3fff
 8002246:	605a      	str	r2, [r3, #4]
		if(looper.Function == AUDIO_DRUMS)
 8002248:	4b11      	ldr	r3, [pc, #68]	; (8002290 <read_sample+0x1c0>)
 800224a:	7f5b      	ldrb	r3, [r3, #29]
 800224c:	b2db      	uxtb	r3, r3
 800224e:	2b02      	cmp	r3, #2
 8002250:	d102      	bne.n	8002258 <read_sample+0x188>
			looper.StartLooper = FALSE;
 8002252:	4b0f      	ldr	r3, [pc, #60]	; (8002290 <read_sample+0x1c0>)
 8002254:	2200      	movs	r2, #0
 8002256:	709a      	strb	r2, [r3, #2]

		setStartEndPatterns(startPatternTmp,endPatternTmp);
 8002258:	4b0f      	ldr	r3, [pc, #60]	; (8002298 <read_sample+0x1c8>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4a0f      	ldr	r2, [pc, #60]	; (800229c <read_sample+0x1cc>)
 800225e:	6812      	ldr	r2, [r2, #0]
 8002260:	4611      	mov	r1, r2
 8002262:	4618      	mov	r0, r3
 8002264:	f7ff fd86 	bl	8001d74 <setStartEndPatterns>
		return;
 8002268:	e009      	b.n	800227e <read_sample+0x1ae>
	}



	if(sdram_pointer == SDRAM_SIZE)
 800226a:	4b0a      	ldr	r3, [pc, #40]	; (8002294 <read_sample+0x1c4>)
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002272:	d104      	bne.n	800227e <read_sample+0x1ae>
		sdram_pointer = 0;
 8002274:	4b07      	ldr	r3, [pc, #28]	; (8002294 <read_sample+0x1c4>)
 8002276:	2200      	movs	r2, #0
 8002278:	601a      	str	r2, [r3, #0]
 800227a:	e000      	b.n	800227e <read_sample+0x1ae>
		return;
 800227c:	bf00      	nop
}
 800227e:	3710      	adds	r7, #16
 8002280:	46bd      	mov	sp, r7
 8002282:	bd80      	pop	{r7, pc}
 8002284:	f3af 8000 	nop.w
 8002288:	00000000 	.word	0x00000000
 800228c:	40cfff80 	.word	0x40cfff80
 8002290:	20001228 	.word	0x20001228
 8002294:	200004c0 	.word	0x200004c0
 8002298:	200004c8 	.word	0x200004c8
 800229c:	200004cc 	.word	0x200004cc

080022a0 <read_samples>:

void read_samples(int16_t swrite,__IO CHANNEL *cha,__IO CHANNEL *chb){
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b086      	sub	sp, #24
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	4603      	mov	r3, r0
 80022a8:	60b9      	str	r1, [r7, #8]
 80022aa:	607a      	str	r2, [r7, #4]
 80022ac:	81fb      	strh	r3, [r7, #14]

	int16_t sread[2];

	if(looper.StartLooper == FALSE ){
 80022ae:	4b23      	ldr	r3, [pc, #140]	; (800233c <read_samples+0x9c>)
 80022b0:	789b      	ldrb	r3, [r3, #2]
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d03c      	beq.n	8002332 <read_samples+0x92>
		return;
	}

	BSP_SDRAM_ReadData(SDRAM_DEVICE_ADDR + sdram_pointer,(uint32_t *) sread, 1);
 80022b8:	4b21      	ldr	r3, [pc, #132]	; (8002340 <read_samples+0xa0>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 80022c0:	f107 0114 	add.w	r1, r7, #20
 80022c4:	2201      	movs	r2, #1
 80022c6:	4618      	mov	r0, r3
 80022c8:	f009 faa4 	bl	800b814 <BSP_SDRAM_ReadData>
	cha->CurrentSample = sread[0];
 80022cc:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80022d0:	68bb      	ldr	r3, [r7, #8]
 80022d2:	805a      	strh	r2, [r3, #2]
	chb->CurrentSample = sread[1];
 80022d4:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	805a      	strh	r2, [r3, #2]

	looper.SamplesRead++;
 80022dc:	4b17      	ldr	r3, [pc, #92]	; (800233c <read_samples+0x9c>)
 80022de:	689b      	ldr	r3, [r3, #8]
 80022e0:	3301      	adds	r3, #1
 80022e2:	4a16      	ldr	r2, [pc, #88]	; (800233c <read_samples+0x9c>)
 80022e4:	6093      	str	r3, [r2, #8]
	sdram_pointer += looper.SampleBytes;
 80022e6:	4b15      	ldr	r3, [pc, #84]	; (800233c <read_samples+0x9c>)
 80022e8:	691a      	ldr	r2, [r3, #16]
 80022ea:	4b15      	ldr	r3, [pc, #84]	; (8002340 <read_samples+0xa0>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4413      	add	r3, r2
 80022f0:	4a13      	ldr	r2, [pc, #76]	; (8002340 <read_samples+0xa0>)
 80022f2:	6013      	str	r3, [r2, #0]

	if(looper.SamplesRead >= looper.SamplesWritten){
 80022f4:	4b11      	ldr	r3, [pc, #68]	; (800233c <read_samples+0x9c>)
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	4b10      	ldr	r3, [pc, #64]	; (800233c <read_samples+0x9c>)
 80022fa:	68db      	ldr	r3, [r3, #12]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d30f      	bcc.n	8002320 <read_samples+0x80>
		if(looper.Function == AUDIO_DRUMS)
 8002300:	4b0e      	ldr	r3, [pc, #56]	; (800233c <read_samples+0x9c>)
 8002302:	7f5b      	ldrb	r3, [r3, #29]
 8002304:	b2db      	uxtb	r3, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d102      	bne.n	8002310 <read_samples+0x70>
			looper.StartLooper = FALSE;
 800230a:	4b0c      	ldr	r3, [pc, #48]	; (800233c <read_samples+0x9c>)
 800230c:	2200      	movs	r2, #0
 800230e:	709a      	strb	r2, [r3, #2]

		setStartEndPatterns(startPatternTmp,endPatternTmp);
 8002310:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <read_samples+0xa4>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4a0c      	ldr	r2, [pc, #48]	; (8002348 <read_samples+0xa8>)
 8002316:	6812      	ldr	r2, [r2, #0]
 8002318:	4611      	mov	r1, r2
 800231a:	4618      	mov	r0, r3
 800231c:	f7ff fd2a 	bl	8001d74 <setStartEndPatterns>

	}
	if(sdram_pointer == SDRAM_SIZE)
 8002320:	4b07      	ldr	r3, [pc, #28]	; (8002340 <read_samples+0xa0>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002328:	d104      	bne.n	8002334 <read_samples+0x94>
		sdram_pointer = 0;
 800232a:	4b05      	ldr	r3, [pc, #20]	; (8002340 <read_samples+0xa0>)
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
 8002330:	e000      	b.n	8002334 <read_samples+0x94>
		return;
 8002332:	bf00      	nop

}
 8002334:	3718      	adds	r7, #24
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20001228 	.word	0x20001228
 8002340:	200004c0 	.word	0x200004c0
 8002344:	200004c8 	.word	0x200004c8
 8002348:	200004cc 	.word	0x200004cc

0800234c <play_sample>:

void play_sample(__IO CHANNEL *cha){
 800234c:	b580      	push	{r7, lr}
 800234e:	b082      	sub	sp, #8
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
	//if(cha->SampleCount > 0 && cha->SamplesRead <= cha->SampleCount)
	Write_DAC8552(channel_A,(uint16_t)(cha->CurrentSample + 16383));
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	885b      	ldrh	r3, [r3, #2]
 8002358:	b21b      	sxth	r3, r3
 800235a:	b29b      	uxth	r3, r3
 800235c:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8002360:	333f      	adds	r3, #63	; 0x3f
 8002362:	b29b      	uxth	r3, r3
 8002364:	4619      	mov	r1, r3
 8002366:	2010      	movs	r0, #16
 8002368:	f7ff fc46 	bl	8001bf8 <Write_DAC8552>

}
 800236c:	bf00      	nop
 800236e:	3708      	adds	r7, #8
 8002370:	46bd      	mov	sp, r7
 8002372:	bd80      	pop	{r7, pc}

08002374 <play_samples>:

void play_samples(__IO CHANNEL *cha,__IO CHANNEL *chb){
 8002374:	b580      	push	{r7, lr}
 8002376:	b082      	sub	sp, #8
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]

	//if(looper.TwoChannels && cha->SampleCount > 0 && chb->SampleCount > 0)
	if(looper.TwoChannels && pattern_audio_map[looper.StartPattern].channel_recorded[_CH1] && pattern_audio_map[looper.StartPattern].channel_recorded[_CH2])
 800237e:	4b3b      	ldr	r3, [pc, #236]	; (800246c <play_samples+0xf8>)
 8002380:	78db      	ldrb	r3, [r3, #3]
 8002382:	b2db      	uxtb	r3, r3
 8002384:	2b00      	cmp	r3, #0
 8002386:	d02c      	beq.n	80023e2 <play_samples+0x6e>
 8002388:	4b38      	ldr	r3, [pc, #224]	; (800246c <play_samples+0xf8>)
 800238a:	695a      	ldr	r2, [r3, #20]
 800238c:	4938      	ldr	r1, [pc, #224]	; (8002470 <play_samples+0xfc>)
 800238e:	4613      	mov	r3, r2
 8002390:	005b      	lsls	r3, r3, #1
 8002392:	4413      	add	r3, r2
 8002394:	009b      	lsls	r3, r3, #2
 8002396:	440b      	add	r3, r1
 8002398:	3308      	adds	r3, #8
 800239a:	781b      	ldrb	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d020      	beq.n	80023e2 <play_samples+0x6e>
 80023a0:	4b32      	ldr	r3, [pc, #200]	; (800246c <play_samples+0xf8>)
 80023a2:	695a      	ldr	r2, [r3, #20]
 80023a4:	4932      	ldr	r1, [pc, #200]	; (8002470 <play_samples+0xfc>)
 80023a6:	4613      	mov	r3, r2
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	4413      	add	r3, r2
 80023ac:	009b      	lsls	r3, r3, #2
 80023ae:	440b      	add	r3, r1
 80023b0:	3309      	adds	r3, #9
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d014      	beq.n	80023e2 <play_samples+0x6e>
		Write_DAC8552_Both((uint16_t)(cha->CurrentSample + 16383),(uint16_t)(chb->CurrentSample + 16383));
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	885b      	ldrh	r3, [r3, #2]
 80023bc:	b21b      	sxth	r3, r3
 80023be:	b29b      	uxth	r3, r3
 80023c0:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80023c4:	333f      	adds	r3, #63	; 0x3f
 80023c6:	b29a      	uxth	r2, r3
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	885b      	ldrh	r3, [r3, #2]
 80023cc:	b21b      	sxth	r3, r3
 80023ce:	b29b      	uxth	r3, r3
 80023d0:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 80023d4:	333f      	adds	r3, #63	; 0x3f
 80023d6:	b29b      	uxth	r3, r3
 80023d8:	4619      	mov	r1, r3
 80023da:	4610      	mov	r0, r2
 80023dc:	f7ff fc3c 	bl	8001c58 <Write_DAC8552_Both>
 80023e0:	e03f      	b.n	8002462 <play_samples+0xee>
	else if(cha->Active == TRUE && pattern_audio_map[looper.StartPattern].channel_recorded[_CH1])
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	781b      	ldrb	r3, [r3, #0]
 80023e6:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	2b01      	cmp	r3, #1
 80023ee:	d118      	bne.n	8002422 <play_samples+0xae>
 80023f0:	4b1e      	ldr	r3, [pc, #120]	; (800246c <play_samples+0xf8>)
 80023f2:	695a      	ldr	r2, [r3, #20]
 80023f4:	491e      	ldr	r1, [pc, #120]	; (8002470 <play_samples+0xfc>)
 80023f6:	4613      	mov	r3, r2
 80023f8:	005b      	lsls	r3, r3, #1
 80023fa:	4413      	add	r3, r2
 80023fc:	009b      	lsls	r3, r3, #2
 80023fe:	440b      	add	r3, r1
 8002400:	3308      	adds	r3, #8
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00c      	beq.n	8002422 <play_samples+0xae>
		Write_DAC8552(channel_A,(uint16_t)(cha->CurrentSample + 16383));
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	885b      	ldrh	r3, [r3, #2]
 800240c:	b21b      	sxth	r3, r3
 800240e:	b29b      	uxth	r3, r3
 8002410:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8002414:	333f      	adds	r3, #63	; 0x3f
 8002416:	b29b      	uxth	r3, r3
 8002418:	4619      	mov	r1, r3
 800241a:	2010      	movs	r0, #16
 800241c:	f7ff fbec 	bl	8001bf8 <Write_DAC8552>
 8002420:	e01f      	b.n	8002462 <play_samples+0xee>
	else if(chb->Active == TRUE && pattern_audio_map[looper.StartPattern].channel_recorded[_CH2])
 8002422:	683b      	ldr	r3, [r7, #0]
 8002424:	781b      	ldrb	r3, [r3, #0]
 8002426:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b01      	cmp	r3, #1
 800242e:	d118      	bne.n	8002462 <play_samples+0xee>
 8002430:	4b0e      	ldr	r3, [pc, #56]	; (800246c <play_samples+0xf8>)
 8002432:	695a      	ldr	r2, [r3, #20]
 8002434:	490e      	ldr	r1, [pc, #56]	; (8002470 <play_samples+0xfc>)
 8002436:	4613      	mov	r3, r2
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	4413      	add	r3, r2
 800243c:	009b      	lsls	r3, r3, #2
 800243e:	440b      	add	r3, r1
 8002440:	3309      	adds	r3, #9
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	2b00      	cmp	r3, #0
 8002446:	d00c      	beq.n	8002462 <play_samples+0xee>
		Write_DAC8552(channel_B,(uint16_t)(chb->CurrentSample + 16383));
 8002448:	683b      	ldr	r3, [r7, #0]
 800244a:	885b      	ldrh	r3, [r3, #2]
 800244c:	b21b      	sxth	r3, r3
 800244e:	b29b      	uxth	r3, r3
 8002450:	f503 537f 	add.w	r3, r3, #16320	; 0x3fc0
 8002454:	333f      	adds	r3, #63	; 0x3f
 8002456:	b29b      	uxth	r3, r3
 8002458:	4619      	mov	r1, r3
 800245a:	2024      	movs	r0, #36	; 0x24
 800245c:	f7ff fbcc 	bl	8001bf8 <Write_DAC8552>

}
 8002460:	e7ff      	b.n	8002462 <play_samples+0xee>
 8002462:	bf00      	nop
 8002464:	3708      	adds	r7, #8
 8002466:	46bd      	mov	sp, r7
 8002468:	bd80      	pop	{r7, pc}
 800246a:	bf00      	nop
 800246c:	20001228 	.word	0x20001228
 8002470:	20000568 	.word	0x20000568

08002474 <setActiveChannelOne>:
	looper.ch1.mix32Max = looper.ch2.mix32Max = FALSE;
	looper.ch1.gain = looper.ch2.gain = 1.0;
	looper.ch1.CurrentSample = looper.ch2.CurrentSample = 0;
}

void setActiveChannelOne(){
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
	looper.StartLooper = FALSE;
 8002478:	4b0e      	ldr	r3, [pc, #56]	; (80024b4 <setActiveChannelOne+0x40>)
 800247a:	2200      	movs	r2, #0
 800247c:	709a      	strb	r2, [r3, #2]
	looper.ch1.Active = TRUE;
 800247e:	4a0d      	ldr	r2, [pc, #52]	; (80024b4 <setActiveChannelOne+0x40>)
 8002480:	f892 3020 	ldrb.w	r3, [r2, #32]
 8002484:	f043 0301 	orr.w	r3, r3, #1
 8002488:	f882 3020 	strb.w	r3, [r2, #32]
	looper.ch2.Active = FALSE;
 800248c:	4a09      	ldr	r2, [pc, #36]	; (80024b4 <setActiveChannelOne+0x40>)
 800248e:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8002492:	f36f 0300 	bfc	r3, #0, #1
 8002496:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	setSampleBytesAndOffset();
 800249a:	f000 f82f 	bl	80024fc <setSampleBytesAndOffset>
	ADS1256_SetDiffChannel(0);
 800249e:	2000      	movs	r0, #0
 80024a0:	f7ff fb17 	bl	8001ad2 <ADS1256_SetDiffChannel>
	ADS1256_WriteCmd(CMD_SELFCAL);
 80024a4:	20f0      	movs	r0, #240	; 0xf0
 80024a6:	f7ff fae7 	bl	8001a78 <ADS1256_WriteCmd>
	ADS1256_WriteCmd(CMD_SELFOCAL);
 80024aa:	20f1      	movs	r0, #241	; 0xf1
 80024ac:	f7ff fae4 	bl	8001a78 <ADS1256_WriteCmd>
}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	20001228 	.word	0x20001228

080024b8 <setActiveChannelTwo>:

void setActiveChannelTwo(){
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
	looper.StartLooper = FALSE;
 80024bc:	4b0e      	ldr	r3, [pc, #56]	; (80024f8 <setActiveChannelTwo+0x40>)
 80024be:	2200      	movs	r2, #0
 80024c0:	709a      	strb	r2, [r3, #2]
	looper.ch2.Active = TRUE;
 80024c2:	4a0d      	ldr	r2, [pc, #52]	; (80024f8 <setActiveChannelTwo+0x40>)
 80024c4:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80024c8:	f043 0301 	orr.w	r3, r3, #1
 80024cc:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
	looper.ch1.Active = FALSE;
 80024d0:	4a09      	ldr	r2, [pc, #36]	; (80024f8 <setActiveChannelTwo+0x40>)
 80024d2:	f892 3020 	ldrb.w	r3, [r2, #32]
 80024d6:	f36f 0300 	bfc	r3, #0, #1
 80024da:	f882 3020 	strb.w	r3, [r2, #32]
	setSampleBytesAndOffset();
 80024de:	f000 f80d 	bl	80024fc <setSampleBytesAndOffset>
	ADS1256_SetDiffChannel(1);
 80024e2:	2001      	movs	r0, #1
 80024e4:	f7ff faf5 	bl	8001ad2 <ADS1256_SetDiffChannel>
	ADS1256_WriteCmd(CMD_SELFCAL);
 80024e8:	20f0      	movs	r0, #240	; 0xf0
 80024ea:	f7ff fac5 	bl	8001a78 <ADS1256_WriteCmd>
	ADS1256_WriteCmd(CMD_SELFOCAL);
 80024ee:	20f1      	movs	r0, #241	; 0xf1
 80024f0:	f7ff fac2 	bl	8001a78 <ADS1256_WriteCmd>
}
 80024f4:	bf00      	nop
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	20001228 	.word	0x20001228

080024fc <setSampleBytesAndOffset>:

void setSampleBytesAndOffset(){
 80024fc:	b480      	push	{r7}
 80024fe:	af00      	add	r7, sp, #0
	if(looper.TwoChannels == TRUE){
 8002500:	4b1a      	ldr	r3, [pc, #104]	; (800256c <setSampleBytesAndOffset+0x70>)
 8002502:	78db      	ldrb	r3, [r3, #3]
 8002504:	b2db      	uxtb	r3, r3
 8002506:	2b01      	cmp	r3, #1
 8002508:	d112      	bne.n	8002530 <setSampleBytesAndOffset+0x34>
		looper.SampleBytes = 4;
 800250a:	4b18      	ldr	r3, [pc, #96]	; (800256c <setSampleBytesAndOffset+0x70>)
 800250c:	2204      	movs	r2, #4
 800250e:	611a      	str	r2, [r3, #16]
		looper.ch1.Offset = 0;
 8002510:	4a16      	ldr	r2, [pc, #88]	; (800256c <setSampleBytesAndOffset+0x70>)
 8002512:	f892 3020 	ldrb.w	r3, [r2, #32]
 8002516:	f36f 1307 	bfc	r3, #4, #4
 800251a:	f882 3020 	strb.w	r3, [r2, #32]
		looper.ch2.Offset = 2;
 800251e:	4a13      	ldr	r2, [pc, #76]	; (800256c <setSampleBytesAndOffset+0x70>)
 8002520:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 8002524:	2102      	movs	r1, #2
 8002526:	f361 1307 	bfi	r3, r1, #4, #4
 800252a:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
		looper.SampleBytes = 2;
		looper.ch1.Offset = 0;
		if(looper.ch2.Active == TRUE)
			looper.ch2.Offset = 0;
	}
}
 800252e:	e018      	b.n	8002562 <setSampleBytesAndOffset+0x66>
		looper.SampleBytes = 2;
 8002530:	4b0e      	ldr	r3, [pc, #56]	; (800256c <setSampleBytesAndOffset+0x70>)
 8002532:	2202      	movs	r2, #2
 8002534:	611a      	str	r2, [r3, #16]
		looper.ch1.Offset = 0;
 8002536:	4a0d      	ldr	r2, [pc, #52]	; (800256c <setSampleBytesAndOffset+0x70>)
 8002538:	f892 3020 	ldrb.w	r3, [r2, #32]
 800253c:	f36f 1307 	bfc	r3, #4, #4
 8002540:	f882 3020 	strb.w	r3, [r2, #32]
		if(looper.ch2.Active == TRUE)
 8002544:	4b09      	ldr	r3, [pc, #36]	; (800256c <setSampleBytesAndOffset+0x70>)
 8002546:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800254a:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800254e:	b2db      	uxtb	r3, r3
 8002550:	2b01      	cmp	r3, #1
 8002552:	d106      	bne.n	8002562 <setSampleBytesAndOffset+0x66>
			looper.ch2.Offset = 0;
 8002554:	4a05      	ldr	r2, [pc, #20]	; (800256c <setSampleBytesAndOffset+0x70>)
 8002556:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 800255a:	f36f 1307 	bfc	r3, #4, #4
 800255e:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
}
 8002562:	bf00      	nop
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr
 800256c:	20001228 	.word	0x20001228

08002570 <toggleActiveBothChannels>:

void toggleActiveBothChannels(uint8_t state){
 8002570:	b580      	push	{r7, lr}
 8002572:	b082      	sub	sp, #8
 8002574:	af00      	add	r7, sp, #0
 8002576:	4603      	mov	r3, r0
 8002578:	71fb      	strb	r3, [r7, #7]
	looper.TwoChannels = !looper.TwoChannels;
 800257a:	4b08      	ldr	r3, [pc, #32]	; (800259c <toggleActiveBothChannels+0x2c>)
 800257c:	78db      	ldrb	r3, [r3, #3]
 800257e:	b2db      	uxtb	r3, r3
 8002580:	2b00      	cmp	r3, #0
 8002582:	bf0c      	ite	eq
 8002584:	2301      	moveq	r3, #1
 8002586:	2300      	movne	r3, #0
 8002588:	b2db      	uxtb	r3, r3
 800258a:	461a      	mov	r2, r3
 800258c:	4b03      	ldr	r3, [pc, #12]	; (800259c <toggleActiveBothChannels+0x2c>)
 800258e:	70da      	strb	r2, [r3, #3]
	setSampleBytesAndOffset();
 8002590:	f7ff ffb4 	bl	80024fc <setSampleBytesAndOffset>
}
 8002594:	bf00      	nop
 8002596:	3708      	adds	r7, #8
 8002598:	46bd      	mov	sp, r7
 800259a:	bd80      	pop	{r7, pc}
 800259c:	20001228 	.word	0x20001228

080025a0 <resetChannel>:


void resetChannel(__IO CHANNEL *ch){
 80025a0:	b480      	push	{r7}
 80025a2:	b083      	sub	sp, #12
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
	//looper.SamplesWritten = 0;
	//looper.SamplesRead = 0;
	ch->Clipping = FALSE;
 80025a8:	687a      	ldr	r2, [r7, #4]
 80025aa:	7813      	ldrb	r3, [r2, #0]
 80025ac:	f36f 0382 	bfc	r3, #2, #1
 80025b0:	7013      	strb	r3, [r2, #0]
	ch->Overdub = FALSE;
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	7813      	ldrb	r3, [r2, #0]
 80025b6:	f36f 03c3 	bfc	r3, #3, #1
 80025ba:	7013      	strb	r3, [r2, #0]
	ch->mix32Max = 16383;
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	f643 72ff 	movw	r2, #16383	; 0x3fff
 80025c2:	605a      	str	r2, [r3, #4]
	ch->gain = 1.0;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80025ca:	60da      	str	r2, [r3, #12]
	ch->CurrentSample = 0;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	805a      	strh	r2, [r3, #2]
}
 80025d2:	bf00      	nop
 80025d4:	370c      	adds	r7, #12
 80025d6:	46bd      	mov	sp, r7
 80025d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025dc:	4770      	bx	lr
	...

080025e0 <pauseLoop>:
	pattern_audio_map[looper.StartPattern].channel_recorded[_CH1] = FALSE;
	pattern_audio_map[looper.StartPattern].channel_recorded[_CH2] = FALSE;
}


void pauseLoop() {
 80025e0:	b480      	push	{r7}
 80025e2:	af00      	add	r7, sp, #0
	if(looper.StartLooper == TRUE){
 80025e4:	4b1c      	ldr	r3, [pc, #112]	; (8002658 <pauseLoop+0x78>)
 80025e6:	789b      	ldrb	r3, [r3, #2]
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	2b01      	cmp	r3, #1
 80025ec:	d11d      	bne.n	800262a <pauseLoop+0x4a>
		looper.StartLooper = FALSE;
 80025ee:	4b1a      	ldr	r3, [pc, #104]	; (8002658 <pauseLoop+0x78>)
 80025f0:	2200      	movs	r2, #0
 80025f2:	709a      	strb	r2, [r3, #2]
		if(looper.Recording == TRUE)
 80025f4:	4b18      	ldr	r3, [pc, #96]	; (8002658 <pauseLoop+0x78>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d104      	bne.n	8002608 <pauseLoop+0x28>
			recordState = looper.Recording;
 80025fe:	4b16      	ldr	r3, [pc, #88]	; (8002658 <pauseLoop+0x78>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	b2da      	uxtb	r2, r3
 8002604:	4b15      	ldr	r3, [pc, #84]	; (800265c <pauseLoop+0x7c>)
 8002606:	701a      	strb	r2, [r3, #0]
		if(looper.Playback == TRUE)
 8002608:	4b13      	ldr	r3, [pc, #76]	; (8002658 <pauseLoop+0x78>)
 800260a:	785b      	ldrb	r3, [r3, #1]
 800260c:	b2db      	uxtb	r3, r3
 800260e:	2b01      	cmp	r3, #1
 8002610:	d104      	bne.n	800261c <pauseLoop+0x3c>
			playbackState = looper.Playback;
 8002612:	4b11      	ldr	r3, [pc, #68]	; (8002658 <pauseLoop+0x78>)
 8002614:	785b      	ldrb	r3, [r3, #1]
 8002616:	b2da      	uxtb	r2, r3
 8002618:	4b11      	ldr	r3, [pc, #68]	; (8002660 <pauseLoop+0x80>)
 800261a:	701a      	strb	r2, [r3, #0]
		looper.Recording = FALSE;
 800261c:	4b0e      	ldr	r3, [pc, #56]	; (8002658 <pauseLoop+0x78>)
 800261e:	2200      	movs	r2, #0
 8002620:	701a      	strb	r2, [r3, #0]
		looper.Playback = FALSE;
 8002622:	4b0d      	ldr	r3, [pc, #52]	; (8002658 <pauseLoop+0x78>)
 8002624:	2200      	movs	r2, #0
 8002626:	705a      	strb	r2, [r3, #1]
		looper.Recording = recordState;
		looper.Playback = playbackState;
		recordState = FALSE;
		playbackState = FALSE;
	}
}
 8002628:	e010      	b.n	800264c <pauseLoop+0x6c>
		looper.StartLooper = TRUE;
 800262a:	4b0b      	ldr	r3, [pc, #44]	; (8002658 <pauseLoop+0x78>)
 800262c:	2201      	movs	r2, #1
 800262e:	709a      	strb	r2, [r3, #2]
		looper.Recording = recordState;
 8002630:	4b0a      	ldr	r3, [pc, #40]	; (800265c <pauseLoop+0x7c>)
 8002632:	781a      	ldrb	r2, [r3, #0]
 8002634:	4b08      	ldr	r3, [pc, #32]	; (8002658 <pauseLoop+0x78>)
 8002636:	701a      	strb	r2, [r3, #0]
		looper.Playback = playbackState;
 8002638:	4b09      	ldr	r3, [pc, #36]	; (8002660 <pauseLoop+0x80>)
 800263a:	781a      	ldrb	r2, [r3, #0]
 800263c:	4b06      	ldr	r3, [pc, #24]	; (8002658 <pauseLoop+0x78>)
 800263e:	705a      	strb	r2, [r3, #1]
		recordState = FALSE;
 8002640:	4b06      	ldr	r3, [pc, #24]	; (800265c <pauseLoop+0x7c>)
 8002642:	2200      	movs	r2, #0
 8002644:	701a      	strb	r2, [r3, #0]
		playbackState = FALSE;
 8002646:	4b06      	ldr	r3, [pc, #24]	; (8002660 <pauseLoop+0x80>)
 8002648:	2200      	movs	r2, #0
 800264a:	701a      	strb	r2, [r3, #0]
}
 800264c:	bf00      	nop
 800264e:	46bd      	mov	sp, r7
 8002650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002654:	4770      	bx	lr
 8002656:	bf00      	nop
 8002658:	20001228 	.word	0x20001228
 800265c:	200004d8 	.word	0x200004d8
 8002660:	200004d9 	.word	0x200004d9

08002664 <stopAll>:


void stopAll(){
 8002664:	b580      	push	{r7, lr}
 8002666:	af00      	add	r7, sp, #0
	looper.Recording = FALSE;
 8002668:	4b10      	ldr	r3, [pc, #64]	; (80026ac <stopAll+0x48>)
 800266a:	2200      	movs	r2, #0
 800266c:	701a      	strb	r2, [r3, #0]
	looper.Playback = FALSE;
 800266e:	4b0f      	ldr	r3, [pc, #60]	; (80026ac <stopAll+0x48>)
 8002670:	2200      	movs	r2, #0
 8002672:	705a      	strb	r2, [r3, #1]
	looper.StartLooper = FALSE;
 8002674:	4b0d      	ldr	r3, [pc, #52]	; (80026ac <stopAll+0x48>)
 8002676:	2200      	movs	r2, #0
 8002678:	709a      	strb	r2, [r3, #2]
	looper.DrumState = DRUMS_STOPPED;
 800267a:	4b0c      	ldr	r3, [pc, #48]	; (80026ac <stopAll+0x48>)
 800267c:	2200      	movs	r2, #0
 800267e:	771a      	strb	r2, [r3, #28]
	//looper.Function = NONE;
	resetChannel(&looper.ch1);
 8002680:	480b      	ldr	r0, [pc, #44]	; (80026b0 <stopAll+0x4c>)
 8002682:	f7ff ff8d 	bl	80025a0 <resetChannel>
	resetChannel(&looper.ch2);
 8002686:	480b      	ldr	r0, [pc, #44]	; (80026b4 <stopAll+0x50>)
 8002688:	f7ff ff8a 	bl	80025a0 <resetChannel>
	setSampleCounter(0);
 800268c:	2000      	movs	r0, #0
 800268e:	f7ff fb49 	bl	8001d24 <setSampleCounter>
	stopDrums();
 8002692:	f000 feed 	bl	8003470 <stopDrums>
	BSP_LED_Off(LED_RED);
 8002696:	2001      	movs	r0, #1
 8002698:	f008 ff9e 	bl	800b5d8 <BSP_LED_Off>
	BSP_LED_Off(LED_GREEN);
 800269c:	2000      	movs	r0, #0
 800269e:	f008 ff9b 	bl	800b5d8 <BSP_LED_Off>
	show_status_line = TRUE;
 80026a2:	4b05      	ldr	r3, [pc, #20]	; (80026b8 <stopAll+0x54>)
 80026a4:	2201      	movs	r2, #1
 80026a6:	701a      	strb	r2, [r3, #0]
}
 80026a8:	bf00      	nop
 80026aa:	bd80      	pop	{r7, pc}
 80026ac:	20001228 	.word	0x20001228
 80026b0:	20001248 	.word	0x20001248
 80026b4:	20001258 	.word	0x20001258
 80026b8:	20001c48 	.word	0x20001c48

080026bc <MX_DAC_Init>:
DAC_HandleTypeDef hdac;
DMA_HandleTypeDef hdma_dac2;

/* DAC init function */
void MX_DAC_Init(void)
{
 80026bc:	b580      	push	{r7, lr}
 80026be:	b082      	sub	sp, #8
 80026c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80026c2:	463b      	mov	r3, r7
 80026c4:	2200      	movs	r2, #0
 80026c6:	601a      	str	r2, [r3, #0]
 80026c8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80026ca:	4b0f      	ldr	r3, [pc, #60]	; (8002708 <MX_DAC_Init+0x4c>)
 80026cc:	4a0f      	ldr	r2, [pc, #60]	; (800270c <MX_DAC_Init+0x50>)
 80026ce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80026d0:	480d      	ldr	r0, [pc, #52]	; (8002708 <MX_DAC_Init+0x4c>)
 80026d2:	f00b fc3e 	bl	800df52 <HAL_DAC_Init>
 80026d6:	4603      	mov	r3, r0
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d001      	beq.n	80026e0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80026dc:	f005 fa52 	bl	8007b84 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T8_TRGO;
 80026e0:	230c      	movs	r3, #12
 80026e2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80026e4:	2300      	movs	r3, #0
 80026e6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 80026e8:	463b      	mov	r3, r7
 80026ea:	2210      	movs	r2, #16
 80026ec:	4619      	mov	r1, r3
 80026ee:	4806      	ldr	r0, [pc, #24]	; (8002708 <MX_DAC_Init+0x4c>)
 80026f0:	f00b fdf4 	bl	800e2dc <HAL_DAC_ConfigChannel>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d001      	beq.n	80026fe <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80026fa:	f005 fa43 	bl	8007b84 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80026fe:	bf00      	nop
 8002700:	3708      	adds	r7, #8
 8002702:	46bd      	mov	sp, r7
 8002704:	bd80      	pop	{r7, pc}
 8002706:	bf00      	nop
 8002708:	200004dc 	.word	0x200004dc
 800270c:	40007400 	.word	0x40007400

08002710 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08a      	sub	sp, #40	; 0x28
 8002714:	af00      	add	r7, sp, #0
 8002716:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002718:	f107 0314 	add.w	r3, r7, #20
 800271c:	2200      	movs	r2, #0
 800271e:	601a      	str	r2, [r3, #0]
 8002720:	605a      	str	r2, [r3, #4]
 8002722:	609a      	str	r2, [r3, #8]
 8002724:	60da      	str	r2, [r3, #12]
 8002726:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a30      	ldr	r2, [pc, #192]	; (80027f0 <HAL_DAC_MspInit+0xe0>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d159      	bne.n	80027e6 <HAL_DAC_MspInit+0xd6>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	613b      	str	r3, [r7, #16]
 8002736:	4b2f      	ldr	r3, [pc, #188]	; (80027f4 <HAL_DAC_MspInit+0xe4>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	4a2e      	ldr	r2, [pc, #184]	; (80027f4 <HAL_DAC_MspInit+0xe4>)
 800273c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002740:	6413      	str	r3, [r2, #64]	; 0x40
 8002742:	4b2c      	ldr	r3, [pc, #176]	; (80027f4 <HAL_DAC_MspInit+0xe4>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800274a:	613b      	str	r3, [r7, #16]
 800274c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800274e:	2300      	movs	r3, #0
 8002750:	60fb      	str	r3, [r7, #12]
 8002752:	4b28      	ldr	r3, [pc, #160]	; (80027f4 <HAL_DAC_MspInit+0xe4>)
 8002754:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002756:	4a27      	ldr	r2, [pc, #156]	; (80027f4 <HAL_DAC_MspInit+0xe4>)
 8002758:	f043 0301 	orr.w	r3, r3, #1
 800275c:	6313      	str	r3, [r2, #48]	; 0x30
 800275e:	4b25      	ldr	r3, [pc, #148]	; (80027f4 <HAL_DAC_MspInit+0xe4>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	f003 0301 	and.w	r3, r3, #1
 8002766:	60fb      	str	r3, [r7, #12]
 8002768:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA5     ------> DAC_OUT2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 800276a:	2320      	movs	r3, #32
 800276c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800276e:	2303      	movs	r3, #3
 8002770:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002772:	2300      	movs	r3, #0
 8002774:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002776:	f107 0314 	add.w	r3, r7, #20
 800277a:	4619      	mov	r1, r3
 800277c:	481e      	ldr	r0, [pc, #120]	; (80027f8 <HAL_DAC_MspInit+0xe8>)
 800277e:	f00c fab1 	bl	800ece4 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC2 Init */
    hdma_dac2.Instance = DMA1_Stream6;
 8002782:	4b1e      	ldr	r3, [pc, #120]	; (80027fc <HAL_DAC_MspInit+0xec>)
 8002784:	4a1e      	ldr	r2, [pc, #120]	; (8002800 <HAL_DAC_MspInit+0xf0>)
 8002786:	601a      	str	r2, [r3, #0]
    hdma_dac2.Init.Channel = DMA_CHANNEL_7;
 8002788:	4b1c      	ldr	r3, [pc, #112]	; (80027fc <HAL_DAC_MspInit+0xec>)
 800278a:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 800278e:	605a      	str	r2, [r3, #4]
    hdma_dac2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002790:	4b1a      	ldr	r3, [pc, #104]	; (80027fc <HAL_DAC_MspInit+0xec>)
 8002792:	2240      	movs	r2, #64	; 0x40
 8002794:	609a      	str	r2, [r3, #8]
    hdma_dac2.Init.PeriphInc = DMA_PINC_DISABLE;
 8002796:	4b19      	ldr	r3, [pc, #100]	; (80027fc <HAL_DAC_MspInit+0xec>)
 8002798:	2200      	movs	r2, #0
 800279a:	60da      	str	r2, [r3, #12]
    hdma_dac2.Init.MemInc = DMA_MINC_ENABLE;
 800279c:	4b17      	ldr	r3, [pc, #92]	; (80027fc <HAL_DAC_MspInit+0xec>)
 800279e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027a2:	611a      	str	r2, [r3, #16]
    hdma_dac2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80027a4:	4b15      	ldr	r3, [pc, #84]	; (80027fc <HAL_DAC_MspInit+0xec>)
 80027a6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80027aa:	615a      	str	r2, [r3, #20]
    hdma_dac2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80027ac:	4b13      	ldr	r3, [pc, #76]	; (80027fc <HAL_DAC_MspInit+0xec>)
 80027ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80027b2:	619a      	str	r2, [r3, #24]
    hdma_dac2.Init.Mode = DMA_CIRCULAR;
 80027b4:	4b11      	ldr	r3, [pc, #68]	; (80027fc <HAL_DAC_MspInit+0xec>)
 80027b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80027ba:	61da      	str	r2, [r3, #28]
    hdma_dac2.Init.Priority = DMA_PRIORITY_HIGH;
 80027bc:	4b0f      	ldr	r3, [pc, #60]	; (80027fc <HAL_DAC_MspInit+0xec>)
 80027be:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80027c2:	621a      	str	r2, [r3, #32]
    hdma_dac2.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80027c4:	4b0d      	ldr	r3, [pc, #52]	; (80027fc <HAL_DAC_MspInit+0xec>)
 80027c6:	2200      	movs	r2, #0
 80027c8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac2) != HAL_OK)
 80027ca:	480c      	ldr	r0, [pc, #48]	; (80027fc <HAL_DAC_MspInit+0xec>)
 80027cc:	f00b fe4c 	bl	800e468 <HAL_DMA_Init>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d001      	beq.n	80027da <HAL_DAC_MspInit+0xca>
    {
      Error_Handler();
 80027d6:	f005 f9d5 	bl	8007b84 <Error_Handler>
    }

    __HAL_LINKDMA(dacHandle,DMA_Handle2,hdma_dac2);
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	4a07      	ldr	r2, [pc, #28]	; (80027fc <HAL_DAC_MspInit+0xec>)
 80027de:	60da      	str	r2, [r3, #12]
 80027e0:	4a06      	ldr	r2, [pc, #24]	; (80027fc <HAL_DAC_MspInit+0xec>)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	6393      	str	r3, [r2, #56]	; 0x38

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80027e6:	bf00      	nop
 80027e8:	3728      	adds	r7, #40	; 0x28
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	40007400 	.word	0x40007400
 80027f4:	40023800 	.word	0x40023800
 80027f8:	40020000 	.word	0x40020000
 80027fc:	200004f0 	.word	0x200004f0
 8002800:	400260a0 	.word	0x400260a0

08002804 <disk_initialize>:
/* Inidialize a Drive                                                    */
/*-----------------------------------------------------------------------*/
DSTATUS disk_initialize (
	BYTE pdrv				/* Physical drive nmuber (0..) */
)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	71fb      	strb	r3, [r7, #7]
	/* Return low level status */
	if (FATFS_LowLevelDrivers[pdrv].disk_initialize) {
 800280e:	79fa      	ldrb	r2, [r7, #7]
 8002810:	490c      	ldr	r1, [pc, #48]	; (8002844 <disk_initialize+0x40>)
 8002812:	4613      	mov	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	4413      	add	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	440b      	add	r3, r1
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	2b00      	cmp	r3, #0
 8002820:	d00a      	beq.n	8002838 <disk_initialize+0x34>
		return FATFS_LowLevelDrivers[pdrv].disk_initialize();
 8002822:	79fa      	ldrb	r2, [r7, #7]
 8002824:	4907      	ldr	r1, [pc, #28]	; (8002844 <disk_initialize+0x40>)
 8002826:	4613      	mov	r3, r2
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	440b      	add	r3, r1
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	4798      	blx	r3
 8002834:	4603      	mov	r3, r0
 8002836:	e000      	b.n	800283a <disk_initialize+0x36>
	}
	
	/* Return parameter error */
	return RES_PARERR;
 8002838:	2304      	movs	r3, #4
}
 800283a:	4618      	mov	r0, r3
 800283c:	3708      	adds	r7, #8
 800283e:	46bd      	mov	sp, r7
 8002840:	bd80      	pop	{r7, pc}
 8002842:	bf00      	nop
 8002844:	20000030 	.word	0x20000030

08002848 <disk_status>:
/* Get Disk Status                                                       */
/*-----------------------------------------------------------------------*/
DSTATUS disk_status (
	BYTE pdrv		/* Physical drive nmuber (0..) */
)
{
 8002848:	b580      	push	{r7, lr}
 800284a:	b082      	sub	sp, #8
 800284c:	af00      	add	r7, sp, #0
 800284e:	4603      	mov	r3, r0
 8002850:	71fb      	strb	r3, [r7, #7]
	/* Return low level status */
	if (FATFS_LowLevelDrivers[pdrv].disk_status) {
 8002852:	79fa      	ldrb	r2, [r7, #7]
 8002854:	490d      	ldr	r1, [pc, #52]	; (800288c <disk_status+0x44>)
 8002856:	4613      	mov	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	4413      	add	r3, r2
 800285c:	009b      	lsls	r3, r3, #2
 800285e:	440b      	add	r3, r1
 8002860:	3304      	adds	r3, #4
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00b      	beq.n	8002880 <disk_status+0x38>
		return FATFS_LowLevelDrivers[pdrv].disk_status();
 8002868:	79fa      	ldrb	r2, [r7, #7]
 800286a:	4908      	ldr	r1, [pc, #32]	; (800288c <disk_status+0x44>)
 800286c:	4613      	mov	r3, r2
 800286e:	009b      	lsls	r3, r3, #2
 8002870:	4413      	add	r3, r2
 8002872:	009b      	lsls	r3, r3, #2
 8002874:	440b      	add	r3, r1
 8002876:	3304      	adds	r3, #4
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4798      	blx	r3
 800287c:	4603      	mov	r3, r0
 800287e:	e000      	b.n	8002882 <disk_status+0x3a>
	}
	
	/* Return parameter error */
	return RES_PARERR;
 8002880:	2304      	movs	r3, #4
}
 8002882:	4618      	mov	r0, r3
 8002884:	3708      	adds	r7, #8
 8002886:	46bd      	mov	sp, r7
 8002888:	bd80      	pop	{r7, pc}
 800288a:	bf00      	nop
 800288c:	20000030 	.word	0x20000030

08002890 <disk_read>:
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE *buff,		/* Data buffer to store read data */
	DWORD sector,	/* Sector address (LBA) */
	UINT count		/* Number of sectors to read (1..128) */
)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	60b9      	str	r1, [r7, #8]
 8002898:	607a      	str	r2, [r7, #4]
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	4603      	mov	r3, r0
 800289e:	73fb      	strb	r3, [r7, #15]
	/* Check count */
	if (!count) {
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d101      	bne.n	80028aa <disk_read+0x1a>
		return RES_PARERR;
 80028a6:	2304      	movs	r3, #4
 80028a8:	e01a      	b.n	80028e0 <disk_read+0x50>
	}
	
	/* Return low level status */
	if (FATFS_LowLevelDrivers[pdrv].disk_read) {
 80028aa:	7bfa      	ldrb	r2, [r7, #15]
 80028ac:	490e      	ldr	r1, [pc, #56]	; (80028e8 <disk_read+0x58>)
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	009b      	lsls	r3, r3, #2
 80028b6:	440b      	add	r3, r1
 80028b8:	3310      	adds	r3, #16
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d00e      	beq.n	80028de <disk_read+0x4e>
		return FATFS_LowLevelDrivers[pdrv].disk_read(buff, sector, count);
 80028c0:	7bfa      	ldrb	r2, [r7, #15]
 80028c2:	4909      	ldr	r1, [pc, #36]	; (80028e8 <disk_read+0x58>)
 80028c4:	4613      	mov	r3, r2
 80028c6:	009b      	lsls	r3, r3, #2
 80028c8:	4413      	add	r3, r2
 80028ca:	009b      	lsls	r3, r3, #2
 80028cc:	440b      	add	r3, r1
 80028ce:	3310      	adds	r3, #16
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	683a      	ldr	r2, [r7, #0]
 80028d4:	6879      	ldr	r1, [r7, #4]
 80028d6:	68b8      	ldr	r0, [r7, #8]
 80028d8:	4798      	blx	r3
 80028da:	4603      	mov	r3, r0
 80028dc:	e000      	b.n	80028e0 <disk_read+0x50>
	}
	
	/* Return parameter error */
	return RES_PARERR;
 80028de:	2304      	movs	r3, #4
}
 80028e0:	4618      	mov	r0, r3
 80028e2:	3710      	adds	r7, #16
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	20000030 	.word	0x20000030

080028ec <disk_write>:
	BYTE pdrv,			/* Physical drive nmuber (0..) */
	const BYTE *buff,	/* Data to be written */
	DWORD sector,		/* Sector address (LBA) */
	UINT count			/* Number of sectors to write (1..128) */
)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	60b9      	str	r1, [r7, #8]
 80028f4:	607a      	str	r2, [r7, #4]
 80028f6:	603b      	str	r3, [r7, #0]
 80028f8:	4603      	mov	r3, r0
 80028fa:	73fb      	strb	r3, [r7, #15]
	/* Check count */
	if (!count) {
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <disk_write+0x1a>
		return RES_PARERR;
 8002902:	2304      	movs	r3, #4
 8002904:	e01a      	b.n	800293c <disk_write+0x50>
	}
	
	/* Return low level status */
	if (FATFS_LowLevelDrivers[pdrv].disk_write) {
 8002906:	7bfa      	ldrb	r2, [r7, #15]
 8002908:	490e      	ldr	r1, [pc, #56]	; (8002944 <disk_write+0x58>)
 800290a:	4613      	mov	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	4413      	add	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	330c      	adds	r3, #12
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d00e      	beq.n	800293a <disk_write+0x4e>
		return FATFS_LowLevelDrivers[pdrv].disk_write(buff, sector, count);
 800291c:	7bfa      	ldrb	r2, [r7, #15]
 800291e:	4909      	ldr	r1, [pc, #36]	; (8002944 <disk_write+0x58>)
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	009b      	lsls	r3, r3, #2
 8002928:	440b      	add	r3, r1
 800292a:	330c      	adds	r3, #12
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	683a      	ldr	r2, [r7, #0]
 8002930:	6879      	ldr	r1, [r7, #4]
 8002932:	68b8      	ldr	r0, [r7, #8]
 8002934:	4798      	blx	r3
 8002936:	4603      	mov	r3, r0
 8002938:	e000      	b.n	800293c <disk_write+0x50>
	}
	
	/* Return parameter error */
	return RES_PARERR;
 800293a:	2304      	movs	r3, #4
}
 800293c:	4618      	mov	r0, r3
 800293e:	3710      	adds	r7, #16
 8002940:	46bd      	mov	sp, r7
 8002942:	bd80      	pop	{r7, pc}
 8002944:	20000030 	.word	0x20000030

08002948 <disk_ioctl>:
DRESULT disk_ioctl (
	BYTE pdrv,		/* Physical drive nmuber (0..) */
	BYTE cmd,		/* Control code */
	void *buff		/* Buffer to send/receive control data */
)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	603a      	str	r2, [r7, #0]
 8002952:	71fb      	strb	r3, [r7, #7]
 8002954:	460b      	mov	r3, r1
 8002956:	71bb      	strb	r3, [r7, #6]
	/* Return low level status */
	if (FATFS_LowLevelDrivers[pdrv].disk_ioctl) {
 8002958:	79fa      	ldrb	r2, [r7, #7]
 800295a:	490f      	ldr	r1, [pc, #60]	; (8002998 <disk_ioctl+0x50>)
 800295c:	4613      	mov	r3, r2
 800295e:	009b      	lsls	r3, r3, #2
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	440b      	add	r3, r1
 8002966:	3308      	adds	r3, #8
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d00e      	beq.n	800298c <disk_ioctl+0x44>
		return FATFS_LowLevelDrivers[pdrv].disk_ioctl(cmd, buff);
 800296e:	79fa      	ldrb	r2, [r7, #7]
 8002970:	4909      	ldr	r1, [pc, #36]	; (8002998 <disk_ioctl+0x50>)
 8002972:	4613      	mov	r3, r2
 8002974:	009b      	lsls	r3, r3, #2
 8002976:	4413      	add	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	3308      	adds	r3, #8
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	79ba      	ldrb	r2, [r7, #6]
 8002982:	6839      	ldr	r1, [r7, #0]
 8002984:	4610      	mov	r0, r2
 8002986:	4798      	blx	r3
 8002988:	4603      	mov	r3, r0
 800298a:	e000      	b.n	800298e <disk_ioctl+0x46>
	}
	
	/* Return parameter error */
	return RES_PARERR;
 800298c:	2304      	movs	r3, #4
}
 800298e:	4618      	mov	r0, r3
 8002990:	3708      	adds	r7, #8
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	20000030 	.word	0x20000030

0800299c <get_fattime>:
#endif

/*-----------------------------------------------------------------------*/
/* Get time for fatfs for files                                          */
/*-----------------------------------------------------------------------*/
__weak DWORD get_fattime(void) {
 800299c:	b480      	push	{r7}
 800299e:	af00      	add	r7, sp, #0
	/* Returns current time packed into a DWORD variable */
	return	  ((DWORD)(2013 - 1980) << 25)	/* Year 2013 */
 80029a0:	4b02      	ldr	r3, [pc, #8]	; (80029ac <get_fattime+0x10>)
			| ((DWORD)7 << 21)				/* Month 7 */
			| ((DWORD)28 << 16)				/* Mday 28 */
			| ((DWORD)0 << 11)				/* Hour 0 */
			| ((DWORD)0 << 5)				/* Min 0 */
			| ((DWORD)0 >> 1);				/* Sec 0 */
}
 80029a2:	4618      	mov	r0, r3
 80029a4:	46bd      	mov	sp, r7
 80029a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029aa:	4770      	bx	lr
 80029ac:	42fc0000 	.word	0x42fc0000

080029b0 <TM_FATFS_SD_disk_initialize>:

/* Function declarations to prevent link errors if functions are not found */
__weak DSTATUS TM_FATFS_SD_SDIO_disk_initialize(void) {return RES_ERROR;}
__weak DSTATUS TM_FATFS_SD_disk_initialize(void) {return RES_ERROR;}
 80029b0:	b480      	push	{r7}
 80029b2:	af00      	add	r7, sp, #0
 80029b4:	2301      	movs	r3, #1
 80029b6:	4618      	mov	r0, r3
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <TM_FATFS_USB_disk_initialize>:
__weak DSTATUS TM_FATFS_USB_disk_initialize(void) {return RES_ERROR;}
 80029c0:	b480      	push	{r7}
 80029c2:	af00      	add	r7, sp, #0
 80029c4:	2301      	movs	r3, #1
 80029c6:	4618      	mov	r0, r3
 80029c8:	46bd      	mov	sp, r7
 80029ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ce:	4770      	bx	lr

080029d0 <TM_FATFS_SDRAM_disk_initialize>:
__weak DSTATUS TM_FATFS_SDRAM_disk_initialize(void) {return RES_ERROR;}
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
 80029d4:	2301      	movs	r3, #1
 80029d6:	4618      	mov	r0, r3
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr

080029e0 <TM_FATFS_SPI_FLASH_disk_initialize>:
__weak DSTATUS TM_FATFS_SPI_FLASH_disk_initialize(void) {return RES_ERROR;}
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	2301      	movs	r3, #1
 80029e6:	4618      	mov	r0, r3
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <TM_FATFS_SD_disk_status>:

__weak DSTATUS TM_FATFS_SD_SDIO_disk_status(void) {return RES_ERROR;}
__weak DSTATUS TM_FATFS_SD_disk_status(void) {return RES_ERROR;}
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0
 80029f4:	2301      	movs	r3, #1
 80029f6:	4618      	mov	r0, r3
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <TM_FATFS_USB_disk_status>:
__weak DSTATUS TM_FATFS_USB_disk_status(void) {return RES_ERROR;}
 8002a00:	b480      	push	{r7}
 8002a02:	af00      	add	r7, sp, #0
 8002a04:	2301      	movs	r3, #1
 8002a06:	4618      	mov	r0, r3
 8002a08:	46bd      	mov	sp, r7
 8002a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0e:	4770      	bx	lr

08002a10 <TM_FATFS_SDRAM_disk_status>:
__weak DSTATUS TM_FATFS_SDRAM_disk_status(void) {return RES_ERROR;}
 8002a10:	b480      	push	{r7}
 8002a12:	af00      	add	r7, sp, #0
 8002a14:	2301      	movs	r3, #1
 8002a16:	4618      	mov	r0, r3
 8002a18:	46bd      	mov	sp, r7
 8002a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1e:	4770      	bx	lr

08002a20 <TM_FATFS_SPI_FLASH_disk_status>:
__weak DSTATUS TM_FATFS_SPI_FLASH_disk_status(void) {return RES_ERROR;}
 8002a20:	b480      	push	{r7}
 8002a22:	af00      	add	r7, sp, #0
 8002a24:	2301      	movs	r3, #1
 8002a26:	4618      	mov	r0, r3
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <TM_FATFS_SD_disk_ioctl>:

__weak DRESULT TM_FATFS_SD_SDIO_disk_ioctl(BYTE cmd, void *buff) {return (DRESULT)STA_NOINIT;}
__weak DRESULT TM_FATFS_SD_disk_ioctl(BYTE cmd, void *buff) {return (DRESULT)STA_NOINIT;}
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	4603      	mov	r3, r0
 8002a38:	6039      	str	r1, [r7, #0]
 8002a3a:	71fb      	strb	r3, [r7, #7]
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	4618      	mov	r0, r3
 8002a40:	370c      	adds	r7, #12
 8002a42:	46bd      	mov	sp, r7
 8002a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a48:	4770      	bx	lr

08002a4a <TM_FATFS_USB_disk_ioctl>:
__weak DRESULT TM_FATFS_USB_disk_ioctl(BYTE cmd, void *buff) {return (DRESULT)STA_NOINIT;}
 8002a4a:	b480      	push	{r7}
 8002a4c:	b083      	sub	sp, #12
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	4603      	mov	r3, r0
 8002a52:	6039      	str	r1, [r7, #0]
 8002a54:	71fb      	strb	r3, [r7, #7]
 8002a56:	2301      	movs	r3, #1
 8002a58:	4618      	mov	r0, r3
 8002a5a:	370c      	adds	r7, #12
 8002a5c:	46bd      	mov	sp, r7
 8002a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a62:	4770      	bx	lr

08002a64 <TM_FATFS_SDRAM_disk_ioctl>:
__weak DRESULT TM_FATFS_SDRAM_disk_ioctl(BYTE cmd, void *buff) {return (DRESULT)STA_NOINIT;}
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	6039      	str	r1, [r7, #0]
 8002a6e:	71fb      	strb	r3, [r7, #7]
 8002a70:	2301      	movs	r3, #1
 8002a72:	4618      	mov	r0, r3
 8002a74:	370c      	adds	r7, #12
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr

08002a7e <TM_FATFS_SPI_FLASH_disk_ioctl>:
__weak DRESULT TM_FATFS_SPI_FLASH_disk_ioctl(BYTE cmd, void *buff) {return (DRESULT)STA_NOINIT;}
 8002a7e:	b480      	push	{r7}
 8002a80:	b083      	sub	sp, #12
 8002a82:	af00      	add	r7, sp, #0
 8002a84:	4603      	mov	r3, r0
 8002a86:	6039      	str	r1, [r7, #0]
 8002a88:	71fb      	strb	r3, [r7, #7]
 8002a8a:	2301      	movs	r3, #1
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr

08002a98 <TM_FATFS_SD_disk_read>:

__weak DRESULT TM_FATFS_SD_SDIO_disk_read(BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
__weak DRESULT TM_FATFS_SD_disk_read(BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 8002a98:	b480      	push	{r7}
 8002a9a:	b085      	sub	sp, #20
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	60f8      	str	r0, [r7, #12]
 8002aa0:	60b9      	str	r1, [r7, #8]
 8002aa2:	607a      	str	r2, [r7, #4]
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr

08002ab2 <TM_FATFS_USB_disk_read>:
__weak DRESULT TM_FATFS_USB_disk_read(BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 8002ab2:	b480      	push	{r7}
 8002ab4:	b085      	sub	sp, #20
 8002ab6:	af00      	add	r7, sp, #0
 8002ab8:	60f8      	str	r0, [r7, #12]
 8002aba:	60b9      	str	r1, [r7, #8]
 8002abc:	607a      	str	r2, [r7, #4]
 8002abe:	2301      	movs	r3, #1
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	3714      	adds	r7, #20
 8002ac4:	46bd      	mov	sp, r7
 8002ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aca:	4770      	bx	lr

08002acc <TM_FATFS_SDRAM_disk_read>:
__weak DRESULT TM_FATFS_SDRAM_disk_read(BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
 8002ad8:	2301      	movs	r3, #1
 8002ada:	4618      	mov	r0, r3
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr

08002ae6 <TM_FATFS_SPI_FLASH_disk_read>:
__weak DRESULT TM_FATFS_SPI_FLASH_disk_read(BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 8002ae6:	b480      	push	{r7}
 8002ae8:	b085      	sub	sp, #20
 8002aea:	af00      	add	r7, sp, #0
 8002aec:	60f8      	str	r0, [r7, #12]
 8002aee:	60b9      	str	r1, [r7, #8]
 8002af0:	607a      	str	r2, [r7, #4]
 8002af2:	2301      	movs	r3, #1
 8002af4:	4618      	mov	r0, r3
 8002af6:	3714      	adds	r7, #20
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr

08002b00 <TM_FATFS_SD_disk_write>:

__weak DRESULT TM_FATFS_SD_SDIO_disk_write(const BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
__weak DRESULT TM_FATFS_SD_disk_write(const BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	60f8      	str	r0, [r7, #12]
 8002b08:	60b9      	str	r1, [r7, #8]
 8002b0a:	607a      	str	r2, [r7, #4]
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3714      	adds	r7, #20
 8002b12:	46bd      	mov	sp, r7
 8002b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b18:	4770      	bx	lr

08002b1a <TM_FATFS_USB_disk_write>:
__weak DRESULT TM_FATFS_USB_disk_write(const BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 8002b1a:	b480      	push	{r7}
 8002b1c:	b085      	sub	sp, #20
 8002b1e:	af00      	add	r7, sp, #0
 8002b20:	60f8      	str	r0, [r7, #12]
 8002b22:	60b9      	str	r1, [r7, #8]
 8002b24:	607a      	str	r2, [r7, #4]
 8002b26:	2301      	movs	r3, #1
 8002b28:	4618      	mov	r0, r3
 8002b2a:	3714      	adds	r7, #20
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <TM_FATFS_SDRAM_disk_write>:
__weak DRESULT TM_FATFS_SDRAM_disk_write(const BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	60f8      	str	r0, [r7, #12]
 8002b3c:	60b9      	str	r1, [r7, #8]
 8002b3e:	607a      	str	r2, [r7, #4]
 8002b40:	2301      	movs	r3, #1
 8002b42:	4618      	mov	r0, r3
 8002b44:	3714      	adds	r7, #20
 8002b46:	46bd      	mov	sp, r7
 8002b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b4c:	4770      	bx	lr

08002b4e <TM_FATFS_SPI_FLASH_disk_write>:
__weak DRESULT TM_FATFS_SPI_FLASH_disk_write(const BYTE *buff, DWORD sector, UINT count) {return (DRESULT)STA_NOINIT;}
 8002b4e:	b480      	push	{r7}
 8002b50:	b085      	sub	sp, #20
 8002b52:	af00      	add	r7, sp, #0
 8002b54:	60f8      	str	r0, [r7, #12]
 8002b56:	60b9      	str	r1, [r7, #8]
 8002b58:	607a      	str	r2, [r7, #4]
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3714      	adds	r7, #20
 8002b60:	46bd      	mov	sp, r7
 8002b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b66:	4770      	bx	lr

08002b68 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b082      	sub	sp, #8
 8002b6c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002b6e:	2300      	movs	r3, #0
 8002b70:	607b      	str	r3, [r7, #4]
 8002b72:	4b1f      	ldr	r3, [pc, #124]	; (8002bf0 <MX_DMA_Init+0x88>)
 8002b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b76:	4a1e      	ldr	r2, [pc, #120]	; (8002bf0 <MX_DMA_Init+0x88>)
 8002b78:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b7e:	4b1c      	ldr	r3, [pc, #112]	; (8002bf0 <MX_DMA_Init+0x88>)
 8002b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b82:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b86:	607b      	str	r3, [r7, #4]
 8002b88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	603b      	str	r3, [r7, #0]
 8002b8e:	4b18      	ldr	r3, [pc, #96]	; (8002bf0 <MX_DMA_Init+0x88>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	4a17      	ldr	r2, [pc, #92]	; (8002bf0 <MX_DMA_Init+0x88>)
 8002b94:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002b98:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9a:	4b15      	ldr	r3, [pc, #84]	; (8002bf0 <MX_DMA_Init+0x88>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ba2:	603b      	str	r3, [r7, #0]
 8002ba4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 1, 2);
 8002ba6:	2202      	movs	r2, #2
 8002ba8:	2101      	movs	r1, #1
 8002baa:	2011      	movs	r0, #17
 8002bac:	f00b f98d 	bl	800deca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8002bb0:	2011      	movs	r0, #17
 8002bb2:	f00b f9a6 	bl	800df02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 1, 3);
 8002bb6:	2203      	movs	r2, #3
 8002bb8:	2101      	movs	r1, #1
 8002bba:	2039      	movs	r0, #57	; 0x39
 8002bbc:	f00b f985 	bl	800deca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8002bc0:	2039      	movs	r0, #57	; 0x39
 8002bc2:	f00b f99e 	bl	800df02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 3, 0);
 8002bc6:	2200      	movs	r2, #0
 8002bc8:	2103      	movs	r1, #3
 8002bca:	203b      	movs	r0, #59	; 0x3b
 8002bcc:	f00b f97d 	bl	800deca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8002bd0:	203b      	movs	r0, #59	; 0x3b
 8002bd2:	f00b f996 	bl	800df02 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 3, 2);
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	2103      	movs	r1, #3
 8002bda:	203c      	movs	r0, #60	; 0x3c
 8002bdc:	f00b f975 	bl	800deca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8002be0:	203c      	movs	r0, #60	; 0x3c
 8002be2:	f00b f98e 	bl	800df02 <HAL_NVIC_EnableIRQ>

}
 8002be6:	bf00      	nop
 8002be8:	3708      	adds	r7, #8
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40023800 	.word	0x40023800

08002bf4 <getRhythmParams>:
__IO PatternTimes tim2;
__IO PatternTimes *timptr;
__IO PatternBeats *patptr;


void getRhythmParams(uint32_t *bts,uint32_t *div,uint32_t *time){
 8002bf4:	b480      	push	{r7}
 8002bf6:	b085      	sub	sp, #20
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	60f8      	str	r0, [r7, #12]
 8002bfc:	60b9      	str	r1, [r7, #8]
 8002bfe:	607a      	str	r2, [r7, #4]
	*bts = beats;
 8002c00:	4b08      	ldr	r3, [pc, #32]	; (8002c24 <getRhythmParams+0x30>)
 8002c02:	681a      	ldr	r2, [r3, #0]
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	601a      	str	r2, [r3, #0]
	*div = division;
 8002c08:	4b07      	ldr	r3, [pc, #28]	; (8002c28 <getRhythmParams+0x34>)
 8002c0a:	681a      	ldr	r2, [r3, #0]
 8002c0c:	68bb      	ldr	r3, [r7, #8]
 8002c0e:	601a      	str	r2, [r3, #0]
	*time = beattime;
 8002c10:	4b06      	ldr	r3, [pc, #24]	; (8002c2c <getRhythmParams+0x38>)
 8002c12:	681a      	ldr	r2, [r3, #0]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	601a      	str	r2, [r3, #0]
}
 8002c18:	bf00      	nop
 8002c1a:	3714      	adds	r7, #20
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr
 8002c24:	200000ec 	.word	0x200000ec
 8002c28:	200000e8 	.word	0x200000e8
 8002c2c:	200000e4 	.word	0x200000e4

08002c30 <seekPattern>:

static void seekPattern(PatternData *pattern_audio_map,uint32_t ind){
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b082      	sub	sp, #8
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
 8002c38:	6039      	str	r1, [r7, #0]
	switch_buff = FALSE;
 8002c3a:	4b12      	ldr	r3, [pc, #72]	; (8002c84 <seekPattern+0x54>)
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	701a      	strb	r2, [r3, #0]
	SRAM_seekRead(pattern_audio_map[ind].sram_position,SRAM_SET);
 8002c40:	683a      	ldr	r2, [r7, #0]
 8002c42:	4613      	mov	r3, r2
 8002c44:	005b      	lsls	r3, r3, #1
 8002c46:	4413      	add	r3, r2
 8002c48:	009b      	lsls	r3, r3, #2
 8002c4a:	461a      	mov	r2, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4413      	add	r3, r2
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	2100      	movs	r1, #0
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7fe f91f 	bl	8000e98 <SRAM_seekRead>
	readSRAM((uint8_t *)&pat1,sizeof(PatternBeats));
 8002c5a:	2110      	movs	r1, #16
 8002c5c:	480a      	ldr	r0, [pc, #40]	; (8002c88 <seekPattern+0x58>)
 8002c5e:	f7fe fa75 	bl	800114c <readSRAM>
	setPatternTime(&pat1,&tim1);
 8002c62:	490a      	ldr	r1, [pc, #40]	; (8002c8c <seekPattern+0x5c>)
 8002c64:	4808      	ldr	r0, [pc, #32]	; (8002c88 <seekPattern+0x58>)
 8002c66:	f000 fc15 	bl	8003494 <setPatternTime>
	readSRAM((uint8_t *)drumBuffA,tim1.subbeats * 5);
 8002c6a:	4b08      	ldr	r3, [pc, #32]	; (8002c8c <seekPattern+0x5c>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	4613      	mov	r3, r2
 8002c70:	009b      	lsls	r3, r3, #2
 8002c72:	4413      	add	r3, r2
 8002c74:	4619      	mov	r1, r3
 8002c76:	4806      	ldr	r0, [pc, #24]	; (8002c90 <seekPattern+0x60>)
 8002c78:	f7fe fa68 	bl	800114c <readSRAM>

}
 8002c7c:	bf00      	nop
 8002c7e:	3708      	adds	r7, #8
 8002c80:	46bd      	mov	sp, r7
 8002c82:	bd80      	pop	{r7, pc}
 8002c84:	20000560 	.word	0x20000560
 8002c88:	2000117c 	.word	0x2000117c
 8002c8c:	2000119c 	.word	0x2000119c
 8002c90:	20000ed4 	.word	0x20000ed4

08002c94 <updateMetronome>:

void updateMetronome(){
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
	metronomeUpdated = TRUE;
 8002c98:	4b03      	ldr	r3, [pc, #12]	; (8002ca8 <updateMetronome+0x14>)
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	701a      	strb	r2, [r3, #0]
}
 8002c9e:	bf00      	nop
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	20000550 	.word	0x20000550

08002cac <drumLoop>:
	//looper.SampleOffset = pattern_audio_map[looper.StartPattern].sample_position;
	//sdram_pointer = looper.SampleOffset * 2;
	//looper.SampleCount = pattern_audio_map[looper.EndPattern + 1].sample_position;
}

void drumLoop(){
 8002cac:	b580      	push	{r7, lr}
 8002cae:	b084      	sub	sp, #16
 8002cb0:	af02      	add	r7, sp, #8
	uint32_t tmp = looper.StartPattern;
 8002cb2:	4b85      	ldr	r3, [pc, #532]	; (8002ec8 <drumLoop+0x21c>)
 8002cb4:	695b      	ldr	r3, [r3, #20]
 8002cb6:	607b      	str	r3, [r7, #4]
	switch_buff = FALSE;
 8002cb8:	4b84      	ldr	r3, [pc, #528]	; (8002ecc <drumLoop+0x220>)
 8002cba:	2200      	movs	r2, #0
 8002cbc:	701a      	strb	r2, [r3, #0]
	first_beat = FALSE;
 8002cbe:	4b84      	ldr	r3, [pc, #528]	; (8002ed0 <drumLoop+0x224>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim2);
 8002cc4:	4883      	ldr	r0, [pc, #524]	; (8002ed4 <drumLoop+0x228>)
 8002cc6:	f00f fa4f 	bl	8012168 <HAL_TIM_Base_Start_IT>
	seekPattern(pattern_audio_map,looper.StartPattern);
 8002cca:	4b7f      	ldr	r3, [pc, #508]	; (8002ec8 <drumLoop+0x21c>)
 8002ccc:	695b      	ldr	r3, [r3, #20]
 8002cce:	4619      	mov	r1, r3
 8002cd0:	4881      	ldr	r0, [pc, #516]	; (8002ed8 <drumLoop+0x22c>)
 8002cd2:	f7ff ffad 	bl	8002c30 <seekPattern>
	looper.Function = AUDIO_DRUMS;
 8002cd6:	4b7c      	ldr	r3, [pc, #496]	; (8002ec8 <drumLoop+0x21c>)
 8002cd8:	2202      	movs	r2, #2
 8002cda:	775a      	strb	r2, [r3, #29]
	looper.DrumState = DRUMS_STARTED;
 8002cdc:	4b7a      	ldr	r3, [pc, #488]	; (8002ec8 <drumLoop+0x21c>)
 8002cde:	2201      	movs	r2, #1
 8002ce0:	771a      	strb	r2, [r3, #28]
	resetDrums();
 8002ce2:	f001 f88f 	bl	8003e04 <resetDrums>

	//setStartEndPatterns(looper.StartPattern,looper.EndPattern);

	while(looper.DrumState == DRUMS_STARTED && looper.StartPattern < (looper.EndPattern + 1)){
 8002ce6:	e0c6      	b.n	8002e76 <drumLoop+0x1ca>
			updateSdramPointer();
 8002ce8:	f7fe fffe 	bl	8001ce8 <updateSdramPointer>
			looper.StartLooper = TRUE;
 8002cec:	4b76      	ldr	r3, [pc, #472]	; (8002ec8 <drumLoop+0x21c>)
 8002cee:	2201      	movs	r2, #1
 8002cf0:	709a      	strb	r2, [r3, #2]

			if(switch_buff == FALSE){
 8002cf2:	4b76      	ldr	r3, [pc, #472]	; (8002ecc <drumLoop+0x220>)
 8002cf4:	781b      	ldrb	r3, [r3, #0]
 8002cf6:	b2db      	uxtb	r3, r3
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d129      	bne.n	8002d50 <drumLoop+0xa4>
					updatePatternTime(&pat1,&tim1);
 8002cfc:	4977      	ldr	r1, [pc, #476]	; (8002edc <drumLoop+0x230>)
 8002cfe:	4878      	ldr	r0, [pc, #480]	; (8002ee0 <drumLoop+0x234>)
 8002d00:	f000 fbfc 	bl	80034fc <updatePatternTime>
					timptr = &tim1;
 8002d04:	4b77      	ldr	r3, [pc, #476]	; (8002ee4 <drumLoop+0x238>)
 8002d06:	4a75      	ldr	r2, [pc, #468]	; (8002edc <drumLoop+0x230>)
 8002d08:	601a      	str	r2, [r3, #0]
					patptr = &pat1;
 8002d0a:	4b77      	ldr	r3, [pc, #476]	; (8002ee8 <drumLoop+0x23c>)
 8002d0c:	4a74      	ldr	r2, [pc, #464]	; (8002ee0 <drumLoop+0x234>)
 8002d0e:	601a      	str	r2, [r3, #0]
					drumBuffReadPtr = drumBuffA;
 8002d10:	4b76      	ldr	r3, [pc, #472]	; (8002eec <drumLoop+0x240>)
 8002d12:	4a77      	ldr	r2, [pc, #476]	; (8002ef0 <drumLoop+0x244>)
 8002d14:	601a      	str	r2, [r3, #0]
					menuShowStatus();
 8002d16:	f005 fe31 	bl	800897c <menuShowStatus>
					if(looper.StartPattern == looper.EndPattern)
 8002d1a:	4b6b      	ldr	r3, [pc, #428]	; (8002ec8 <drumLoop+0x21c>)
 8002d1c:	695a      	ldr	r2, [r3, #20]
 8002d1e:	4b6a      	ldr	r3, [pc, #424]	; (8002ec8 <drumLoop+0x21c>)
 8002d20:	699b      	ldr	r3, [r3, #24]
 8002d22:	429a      	cmp	r2, r3
 8002d24:	d03c      	beq.n	8002da0 <drumLoop+0xf4>
						goto wait_first_beat;
					readSRAM((uint8_t *)&pat2,sizeof(PatternBeats));
 8002d26:	2110      	movs	r1, #16
 8002d28:	4872      	ldr	r0, [pc, #456]	; (8002ef4 <drumLoop+0x248>)
 8002d2a:	f7fe fa0f 	bl	800114c <readSRAM>
					setPatternTime(&pat2,&tim2);
 8002d2e:	4972      	ldr	r1, [pc, #456]	; (8002ef8 <drumLoop+0x24c>)
 8002d30:	4870      	ldr	r0, [pc, #448]	; (8002ef4 <drumLoop+0x248>)
 8002d32:	f000 fbaf 	bl	8003494 <setPatternTime>
					readSRAM((uint8_t *)drumBuffB,tim2.subbeats * NUM_ALL_TRACKS);
 8002d36:	4b70      	ldr	r3, [pc, #448]	; (8002ef8 <drumLoop+0x24c>)
 8002d38:	681a      	ldr	r2, [r3, #0]
 8002d3a:	4613      	mov	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	4413      	add	r3, r2
 8002d40:	4619      	mov	r1, r3
 8002d42:	486e      	ldr	r0, [pc, #440]	; (8002efc <drumLoop+0x250>)
 8002d44:	f7fe fa02 	bl	800114c <readSRAM>
					switch_buff = TRUE;
 8002d48:	4b60      	ldr	r3, [pc, #384]	; (8002ecc <drumLoop+0x220>)
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	701a      	strb	r2, [r3, #0]
 8002d4e:	e02a      	b.n	8002da6 <drumLoop+0xfa>
				}
				else{
					updatePatternTime(&pat2,&tim2);
 8002d50:	4969      	ldr	r1, [pc, #420]	; (8002ef8 <drumLoop+0x24c>)
 8002d52:	4868      	ldr	r0, [pc, #416]	; (8002ef4 <drumLoop+0x248>)
 8002d54:	f000 fbd2 	bl	80034fc <updatePatternTime>
					timptr = &tim2;
 8002d58:	4b62      	ldr	r3, [pc, #392]	; (8002ee4 <drumLoop+0x238>)
 8002d5a:	4a67      	ldr	r2, [pc, #412]	; (8002ef8 <drumLoop+0x24c>)
 8002d5c:	601a      	str	r2, [r3, #0]
					patptr = &pat2;
 8002d5e:	4b62      	ldr	r3, [pc, #392]	; (8002ee8 <drumLoop+0x23c>)
 8002d60:	4a64      	ldr	r2, [pc, #400]	; (8002ef4 <drumLoop+0x248>)
 8002d62:	601a      	str	r2, [r3, #0]
					drumBuffReadPtr = drumBuffB;
 8002d64:	4b61      	ldr	r3, [pc, #388]	; (8002eec <drumLoop+0x240>)
 8002d66:	4a65      	ldr	r2, [pc, #404]	; (8002efc <drumLoop+0x250>)
 8002d68:	601a      	str	r2, [r3, #0]
					if(looper.StartPattern == looper.EndPattern)
 8002d6a:	4b57      	ldr	r3, [pc, #348]	; (8002ec8 <drumLoop+0x21c>)
 8002d6c:	695a      	ldr	r2, [r3, #20]
 8002d6e:	4b56      	ldr	r3, [pc, #344]	; (8002ec8 <drumLoop+0x21c>)
 8002d70:	699b      	ldr	r3, [r3, #24]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d016      	beq.n	8002da4 <drumLoop+0xf8>
						goto wait_first_beat;
					readSRAM((uint8_t *)&pat1,sizeof(PatternBeats));
 8002d76:	2110      	movs	r1, #16
 8002d78:	4859      	ldr	r0, [pc, #356]	; (8002ee0 <drumLoop+0x234>)
 8002d7a:	f7fe f9e7 	bl	800114c <readSRAM>
					setPatternTime(&pat1,&tim1);
 8002d7e:	4957      	ldr	r1, [pc, #348]	; (8002edc <drumLoop+0x230>)
 8002d80:	4857      	ldr	r0, [pc, #348]	; (8002ee0 <drumLoop+0x234>)
 8002d82:	f000 fb87 	bl	8003494 <setPatternTime>
					readSRAM((uint8_t *)drumBuffA,tim1.subbeats * NUM_ALL_TRACKS);
 8002d86:	4b55      	ldr	r3, [pc, #340]	; (8002edc <drumLoop+0x230>)
 8002d88:	681a      	ldr	r2, [r3, #0]
 8002d8a:	4613      	mov	r3, r2
 8002d8c:	009b      	lsls	r3, r3, #2
 8002d8e:	4413      	add	r3, r2
 8002d90:	4619      	mov	r1, r3
 8002d92:	4857      	ldr	r0, [pc, #348]	; (8002ef0 <drumLoop+0x244>)
 8002d94:	f7fe f9da 	bl	800114c <readSRAM>
					switch_buff = FALSE;
 8002d98:	4b4c      	ldr	r3, [pc, #304]	; (8002ecc <drumLoop+0x220>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	701a      	strb	r2, [r3, #0]
 8002d9e:	e002      	b.n	8002da6 <drumLoop+0xfa>
						goto wait_first_beat;
 8002da0:	bf00      	nop
 8002da2:	e000      	b.n	8002da6 <drumLoop+0xfa>
						goto wait_first_beat;
 8002da4:	bf00      	nop
				}

				wait_first_beat:
				sprintf(lcdline," Playing bar: %-4u",(unsigned int)(looper.StartPattern + 1));
 8002da6:	4b48      	ldr	r3, [pc, #288]	; (8002ec8 <drumLoop+0x21c>)
 8002da8:	695b      	ldr	r3, [r3, #20]
 8002daa:	3301      	adds	r3, #1
 8002dac:	461a      	mov	r2, r3
 8002dae:	4954      	ldr	r1, [pc, #336]	; (8002f00 <drumLoop+0x254>)
 8002db0:	4854      	ldr	r0, [pc, #336]	; (8002f04 <drumLoop+0x258>)
 8002db2:	f014 fd93 	bl	80178dc <siprintf>
				TM_ILI9341_Puts(10, 150, lcdline, &TM_Font_11x18, ILI9341_COLOR_BLACK, ILI9341_COLOR_BLUE2);
 8002db6:	f240 531d 	movw	r3, #1309	; 0x51d
 8002dba:	9301      	str	r3, [sp, #4]
 8002dbc:	2300      	movs	r3, #0
 8002dbe:	9300      	str	r3, [sp, #0]
 8002dc0:	4b51      	ldr	r3, [pc, #324]	; (8002f08 <drumLoop+0x25c>)
 8002dc2:	4a50      	ldr	r2, [pc, #320]	; (8002f04 <drumLoop+0x258>)
 8002dc4:	2196      	movs	r1, #150	; 0x96
 8002dc6:	200a      	movs	r0, #10
 8002dc8:	f009 fe90 	bl	800caec <TM_ILI9341_Puts>

				while(first_beat == FALSE){
 8002dcc:	e00a      	b.n	8002de4 <drumLoop+0x138>
					if(looper.DrumState == DRUMS_PAUSED || looper.DrumState == DRUMS_STOPPED)
 8002dce:	4b3e      	ldr	r3, [pc, #248]	; (8002ec8 <drumLoop+0x21c>)
 8002dd0:	7f1b      	ldrb	r3, [r3, #28]
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	2b03      	cmp	r3, #3
 8002dd6:	d05c      	beq.n	8002e92 <drumLoop+0x1e6>
 8002dd8:	4b3b      	ldr	r3, [pc, #236]	; (8002ec8 <drumLoop+0x21c>)
 8002dda:	7f1b      	ldrb	r3, [r3, #28]
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d057      	beq.n	8002e92 <drumLoop+0x1e6>
						goto end_drum_loop;
					continue;
 8002de2:	bf00      	nop
				while(first_beat == FALSE){
 8002de4:	4b3a      	ldr	r3, [pc, #232]	; (8002ed0 <drumLoop+0x224>)
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d0ef      	beq.n	8002dce <drumLoop+0x122>
				}

				first_beat = FALSE;
 8002dee:	4b38      	ldr	r3, [pc, #224]	; (8002ed0 <drumLoop+0x224>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	701a      	strb	r2, [r3, #0]
				if(looper.Recording == TRUE)
 8002df4:	4b34      	ldr	r3, [pc, #208]	; (8002ec8 <drumLoop+0x21c>)
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	b2db      	uxtb	r3, r3
 8002dfa:	2b01      	cmp	r3, #1
 8002dfc:	d115      	bne.n	8002e2a <drumLoop+0x17e>
					pattern_audio_map[looper.StartPattern].channel_recorded[ACTIVE_CHANNEL_INDEX] = TRUE;
 8002dfe:	4b32      	ldr	r3, [pc, #200]	; (8002ec8 <drumLoop+0x21c>)
 8002e00:	695a      	ldr	r2, [r3, #20]
 8002e02:	4b31      	ldr	r3, [pc, #196]	; (8002ec8 <drumLoop+0x21c>)
 8002e04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002e08:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	f083 0301 	eor.w	r3, r3, #1
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	4618      	mov	r0, r3
 8002e16:	4930      	ldr	r1, [pc, #192]	; (8002ed8 <drumLoop+0x22c>)
 8002e18:	4613      	mov	r3, r2
 8002e1a:	005b      	lsls	r3, r3, #1
 8002e1c:	4413      	add	r3, r2
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	440b      	add	r3, r1
 8002e22:	4403      	add	r3, r0
 8002e24:	3308      	adds	r3, #8
 8002e26:	2201      	movs	r2, #1
 8002e28:	701a      	strb	r2, [r3, #0]
				looper.StartPattern++;
 8002e2a:	4b27      	ldr	r3, [pc, #156]	; (8002ec8 <drumLoop+0x21c>)
 8002e2c:	695b      	ldr	r3, [r3, #20]
 8002e2e:	3301      	adds	r3, #1
 8002e30:	4a25      	ldr	r2, [pc, #148]	; (8002ec8 <drumLoop+0x21c>)
 8002e32:	6153      	str	r3, [r2, #20]

				if(looper.StartPattern == (looper.EndPattern + 1)){
 8002e34:	4b24      	ldr	r3, [pc, #144]	; (8002ec8 <drumLoop+0x21c>)
 8002e36:	695a      	ldr	r2, [r3, #20]
 8002e38:	4b23      	ldr	r3, [pc, #140]	; (8002ec8 <drumLoop+0x21c>)
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	429a      	cmp	r2, r3
 8002e40:	d119      	bne.n	8002e76 <drumLoop+0x1ca>
					if(looper.Recording == TRUE){
 8002e42:	4b21      	ldr	r3, [pc, #132]	; (8002ec8 <drumLoop+0x21c>)
 8002e44:	781b      	ldrb	r3, [r3, #0]
 8002e46:	b2db      	uxtb	r3, r3
 8002e48:	2b01      	cmp	r3, #1
 8002e4a:	d103      	bne.n	8002e54 <drumLoop+0x1a8>
						looper.Recording = FALSE;
 8002e4c:	4b1e      	ldr	r3, [pc, #120]	; (8002ec8 <drumLoop+0x21c>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	701a      	strb	r2, [r3, #0]
						goto end_drum_loop;
 8002e52:	e021      	b.n	8002e98 <drumLoop+0x1ec>
					}

					looper.StartPattern = tmp;	// restore original start pattern number
 8002e54:	4a1c      	ldr	r2, [pc, #112]	; (8002ec8 <drumLoop+0x21c>)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6153      	str	r3, [r2, #20]
					// setStartEndPatterns in read_sample and read_samples
					switch_buff = FALSE;
 8002e5a:	4b1c      	ldr	r3, [pc, #112]	; (8002ecc <drumLoop+0x220>)
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	701a      	strb	r2, [r3, #0]
					first_beat = FALSE;
 8002e60:	4b1b      	ldr	r3, [pc, #108]	; (8002ed0 <drumLoop+0x224>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	701a      	strb	r2, [r3, #0]
					seekPattern(pattern_audio_map,looper.StartPattern);
 8002e66:	4b18      	ldr	r3, [pc, #96]	; (8002ec8 <drumLoop+0x21c>)
 8002e68:	695b      	ldr	r3, [r3, #20]
 8002e6a:	4619      	mov	r1, r3
 8002e6c:	481a      	ldr	r0, [pc, #104]	; (8002ed8 <drumLoop+0x22c>)
 8002e6e:	f7ff fedf 	bl	8002c30 <seekPattern>
					resetDrums();
 8002e72:	f000 ffc7 	bl	8003e04 <resetDrums>
	while(looper.DrumState == DRUMS_STARTED && looper.StartPattern < (looper.EndPattern + 1)){
 8002e76:	4b14      	ldr	r3, [pc, #80]	; (8002ec8 <drumLoop+0x21c>)
 8002e78:	7f1b      	ldrb	r3, [r3, #28]
 8002e7a:	b2db      	uxtb	r3, r3
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d10a      	bne.n	8002e96 <drumLoop+0x1ea>
 8002e80:	4b11      	ldr	r3, [pc, #68]	; (8002ec8 <drumLoop+0x21c>)
 8002e82:	695a      	ldr	r2, [r3, #20]
 8002e84:	4b10      	ldr	r3, [pc, #64]	; (8002ec8 <drumLoop+0x21c>)
 8002e86:	699b      	ldr	r3, [r3, #24]
 8002e88:	3301      	adds	r3, #1
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	f4ff af2c 	bcc.w	8002ce8 <drumLoop+0x3c>
				}

		}


		end_drum_loop:
 8002e90:	e001      	b.n	8002e96 <drumLoop+0x1ea>
						goto end_drum_loop;
 8002e92:	bf00      	nop
 8002e94:	e000      	b.n	8002e98 <drumLoop+0x1ec>
		end_drum_loop:
 8002e96:	bf00      	nop
		stopDrums();
 8002e98:	f000 faea 	bl	8003470 <stopDrums>
		looper.StartPattern = tmp;
 8002e9c:	4a0a      	ldr	r2, [pc, #40]	; (8002ec8 <drumLoop+0x21c>)
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6153      	str	r3, [r2, #20]
		looper.StartLooper = FALSE;
 8002ea2:	4b09      	ldr	r3, [pc, #36]	; (8002ec8 <drumLoop+0x21c>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	709a      	strb	r2, [r3, #2]
		looper.Playback = FALSE;
 8002ea8:	4b07      	ldr	r3, [pc, #28]	; (8002ec8 <drumLoop+0x21c>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	705a      	strb	r2, [r3, #1]
		looper.Recording = FALSE;
 8002eae:	4b06      	ldr	r3, [pc, #24]	; (8002ec8 <drumLoop+0x21c>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	701a      	strb	r2, [r3, #0]
		BSP_LED_Off(LED_GREEN);
 8002eb4:	2000      	movs	r0, #0
 8002eb6:	f008 fb8f 	bl	800b5d8 <BSP_LED_Off>
		BSP_LED_Off(LED_RED);
 8002eba:	2001      	movs	r0, #1
 8002ebc:	f008 fb8c 	bl	800b5d8 <BSP_LED_Off>
}
 8002ec0:	bf00      	nop
 8002ec2:	3708      	adds	r7, #8
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bd80      	pop	{r7, pc}
 8002ec8:	20001228 	.word	0x20001228
 8002ecc:	20000560 	.word	0x20000560
 8002ed0:	20000561 	.word	0x20000561
 8002ed4:	20002284 	.word	0x20002284
 8002ed8:	20000568 	.word	0x20000568
 8002edc:	2000119c 	.word	0x2000119c
 8002ee0:	2000117c 	.word	0x2000117c
 8002ee4:	200011bc 	.word	0x200011bc
 8002ee8:	200011c0 	.word	0x200011c0
 8002eec:	20001174 	.word	0x20001174
 8002ef0:	20000ed4 	.word	0x20000ed4
 8002ef4:	2000118c 	.word	0x2000118c
 8002ef8:	200011ac 	.word	0x200011ac
 8002efc:	20000fc4 	.word	0x20000fc4
 8002f00:	08018bb4 	.word	0x08018bb4
 8002f04:	20001270 	.word	0x20001270
 8002f08:	200001e0 	.word	0x200001e0

08002f0c <show_rhythm_param_values>:

static void show_rhythm_param_values(uint8_t currentPosition){
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b084      	sub	sp, #16
 8002f10:	af02      	add	r7, sp, #8
 8002f12:	4603      	mov	r3, r0
 8002f14:	71fb      	strb	r3, [r7, #7]
	switch(currentPosition){
 8002f16:	79fb      	ldrb	r3, [r7, #7]
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d02e      	beq.n	8002f7a <show_rhythm_param_values+0x6e>
 8002f1c:	2b02      	cmp	r3, #2
 8002f1e:	dc40      	bgt.n	8002fa2 <show_rhythm_param_values+0x96>
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d002      	beq.n	8002f2a <show_rhythm_param_values+0x1e>
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d014      	beq.n	8002f52 <show_rhythm_param_values+0x46>
		case 2: sprintf(lcdline,"%3u",(unsigned int)beattime);
				TM_ILI9341_Puts(120, 130,lcdline, &TM_Font_11x18, ILI9341_COLOR_YELLOW, ILI9341_COLOR_BLUE2);
				break;
		}

}
 8002f28:	e03b      	b.n	8002fa2 <show_rhythm_param_values+0x96>
		case 0: sprintf(lcdline,"%3u",(unsigned int)beats);
 8002f2a:	4b20      	ldr	r3, [pc, #128]	; (8002fac <show_rhythm_param_values+0xa0>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	461a      	mov	r2, r3
 8002f30:	491f      	ldr	r1, [pc, #124]	; (8002fb0 <show_rhythm_param_values+0xa4>)
 8002f32:	4820      	ldr	r0, [pc, #128]	; (8002fb4 <show_rhythm_param_values+0xa8>)
 8002f34:	f014 fcd2 	bl	80178dc <siprintf>
				TM_ILI9341_Puts(120, 90,lcdline, &TM_Font_11x18, ILI9341_COLOR_YELLOW, ILI9341_COLOR_BLUE2);
 8002f38:	f240 531d 	movw	r3, #1309	; 0x51d
 8002f3c:	9301      	str	r3, [sp, #4]
 8002f3e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002f42:	9300      	str	r3, [sp, #0]
 8002f44:	4b1c      	ldr	r3, [pc, #112]	; (8002fb8 <show_rhythm_param_values+0xac>)
 8002f46:	4a1b      	ldr	r2, [pc, #108]	; (8002fb4 <show_rhythm_param_values+0xa8>)
 8002f48:	215a      	movs	r1, #90	; 0x5a
 8002f4a:	2078      	movs	r0, #120	; 0x78
 8002f4c:	f009 fdce 	bl	800caec <TM_ILI9341_Puts>
				break;
 8002f50:	e027      	b.n	8002fa2 <show_rhythm_param_values+0x96>
		case 1: sprintf(lcdline,"%3u",(unsigned int)division);
 8002f52:	4b1a      	ldr	r3, [pc, #104]	; (8002fbc <show_rhythm_param_values+0xb0>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	461a      	mov	r2, r3
 8002f58:	4915      	ldr	r1, [pc, #84]	; (8002fb0 <show_rhythm_param_values+0xa4>)
 8002f5a:	4816      	ldr	r0, [pc, #88]	; (8002fb4 <show_rhythm_param_values+0xa8>)
 8002f5c:	f014 fcbe 	bl	80178dc <siprintf>
				TM_ILI9341_Puts(120, 110,lcdline, &TM_Font_11x18, ILI9341_COLOR_YELLOW, ILI9341_COLOR_BLUE2);
 8002f60:	f240 531d 	movw	r3, #1309	; 0x51d
 8002f64:	9301      	str	r3, [sp, #4]
 8002f66:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002f6a:	9300      	str	r3, [sp, #0]
 8002f6c:	4b12      	ldr	r3, [pc, #72]	; (8002fb8 <show_rhythm_param_values+0xac>)
 8002f6e:	4a11      	ldr	r2, [pc, #68]	; (8002fb4 <show_rhythm_param_values+0xa8>)
 8002f70:	216e      	movs	r1, #110	; 0x6e
 8002f72:	2078      	movs	r0, #120	; 0x78
 8002f74:	f009 fdba 	bl	800caec <TM_ILI9341_Puts>
				break;
 8002f78:	e013      	b.n	8002fa2 <show_rhythm_param_values+0x96>
		case 2: sprintf(lcdline,"%3u",(unsigned int)beattime);
 8002f7a:	4b11      	ldr	r3, [pc, #68]	; (8002fc0 <show_rhythm_param_values+0xb4>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	461a      	mov	r2, r3
 8002f80:	490b      	ldr	r1, [pc, #44]	; (8002fb0 <show_rhythm_param_values+0xa4>)
 8002f82:	480c      	ldr	r0, [pc, #48]	; (8002fb4 <show_rhythm_param_values+0xa8>)
 8002f84:	f014 fcaa 	bl	80178dc <siprintf>
				TM_ILI9341_Puts(120, 130,lcdline, &TM_Font_11x18, ILI9341_COLOR_YELLOW, ILI9341_COLOR_BLUE2);
 8002f88:	f240 531d 	movw	r3, #1309	; 0x51d
 8002f8c:	9301      	str	r3, [sp, #4]
 8002f8e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002f92:	9300      	str	r3, [sp, #0]
 8002f94:	4b08      	ldr	r3, [pc, #32]	; (8002fb8 <show_rhythm_param_values+0xac>)
 8002f96:	4a07      	ldr	r2, [pc, #28]	; (8002fb4 <show_rhythm_param_values+0xa8>)
 8002f98:	2182      	movs	r1, #130	; 0x82
 8002f9a:	2078      	movs	r0, #120	; 0x78
 8002f9c:	f009 fda6 	bl	800caec <TM_ILI9341_Puts>
				break;
 8002fa0:	bf00      	nop
}
 8002fa2:	bf00      	nop
 8002fa4:	3708      	adds	r7, #8
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop
 8002fac:	200000ec 	.word	0x200000ec
 8002fb0:	08018bc8 	.word	0x08018bc8
 8002fb4:	20001270 	.word	0x20001270
 8002fb8:	200001e0 	.word	0x200001e0
 8002fbc:	200000e8 	.word	0x200000e8
 8002fc0:	200000e4 	.word	0x200000e4

08002fc4 <show_rhythm_params>:

static void show_rhythm_params(uint8_t currentPosition){
 8002fc4:	b590      	push	{r4, r7, lr}
 8002fc6:	b089      	sub	sp, #36	; 0x24
 8002fc8:	af02      	add	r7, sp, #8
 8002fca:	4603      	mov	r3, r0
 8002fcc:	71fb      	strb	r3, [r7, #7]
	char *options[4] = {"Beats","Subbeats","Time [bpm]","Other"};
 8002fce:	4b2c      	ldr	r3, [pc, #176]	; (8003080 <show_rhythm_params+0xbc>)
 8002fd0:	f107 0408 	add.w	r4, r7, #8
 8002fd4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002fd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	menuMultiLine(4,90,options[0],options[1],options[2],options[3]);
 8002fda:	68b9      	ldr	r1, [r7, #8]
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	697a      	ldr	r2, [r7, #20]
 8002fe2:	9201      	str	r2, [sp, #4]
 8002fe4:	9300      	str	r3, [sp, #0]
 8002fe6:	4603      	mov	r3, r0
 8002fe8:	460a      	mov	r2, r1
 8002fea:	215a      	movs	r1, #90	; 0x5a
 8002fec:	2004      	movs	r0, #4
 8002fee:	f005 fe0b 	bl	8008c08 <menuMultiLine>
	TM_ILI9341_Puts(10, 90 + currentPosition * 20,options[currentPosition], &TM_Font_11x18, ILI9341_COLOR_RED, ILI9341_COLOR_BLUE);
 8002ff2:	79fb      	ldrb	r3, [r7, #7]
 8002ff4:	b29b      	uxth	r3, r3
 8002ff6:	461a      	mov	r2, r3
 8002ff8:	0092      	lsls	r2, r2, #2
 8002ffa:	4413      	add	r3, r2
 8002ffc:	009b      	lsls	r3, r3, #2
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	335a      	adds	r3, #90	; 0x5a
 8003002:	b299      	uxth	r1, r3
 8003004:	79fb      	ldrb	r3, [r7, #7]
 8003006:	009b      	lsls	r3, r3, #2
 8003008:	3318      	adds	r3, #24
 800300a:	443b      	add	r3, r7
 800300c:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8003010:	231f      	movs	r3, #31
 8003012:	9301      	str	r3, [sp, #4]
 8003014:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003018:	9300      	str	r3, [sp, #0]
 800301a:	4b1a      	ldr	r3, [pc, #104]	; (8003084 <show_rhythm_params+0xc0>)
 800301c:	200a      	movs	r0, #10
 800301e:	f009 fd65 	bl	800caec <TM_ILI9341_Puts>
	if(currentPosition > 0)
 8003022:	79fb      	ldrb	r3, [r7, #7]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d01a      	beq.n	800305e <show_rhythm_params+0x9a>
		TM_ILI9341_Puts(10, 90 + currentPosition * 20 - 20,options[currentPosition - 1], &TM_Font_11x18, ILI9341_COLOR_RED, ILI9341_COLOR_BLUE2);
 8003028:	79fb      	ldrb	r3, [r7, #7]
 800302a:	b29b      	uxth	r3, r3
 800302c:	461a      	mov	r2, r3
 800302e:	0092      	lsls	r2, r2, #2
 8003030:	4413      	add	r3, r2
 8003032:	009b      	lsls	r3, r3, #2
 8003034:	b29b      	uxth	r3, r3
 8003036:	3346      	adds	r3, #70	; 0x46
 8003038:	b299      	uxth	r1, r3
 800303a:	79fb      	ldrb	r3, [r7, #7]
 800303c:	3b01      	subs	r3, #1
 800303e:	009b      	lsls	r3, r3, #2
 8003040:	3318      	adds	r3, #24
 8003042:	443b      	add	r3, r7
 8003044:	f853 2c10 	ldr.w	r2, [r3, #-16]
 8003048:	f240 531d 	movw	r3, #1309	; 0x51d
 800304c:	9301      	str	r3, [sp, #4]
 800304e:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003052:	9300      	str	r3, [sp, #0]
 8003054:	4b0b      	ldr	r3, [pc, #44]	; (8003084 <show_rhythm_params+0xc0>)
 8003056:	200a      	movs	r0, #10
 8003058:	f009 fd48 	bl	800caec <TM_ILI9341_Puts>
	 else
		 TM_ILI9341_Puts(10, 90 + 3 * 20,options[3], &TM_Font_11x18, ILI9341_COLOR_RED, ILI9341_COLOR_BLUE2);
}
 800305c:	e00b      	b.n	8003076 <show_rhythm_params+0xb2>
		 TM_ILI9341_Puts(10, 90 + 3 * 20,options[3], &TM_Font_11x18, ILI9341_COLOR_RED, ILI9341_COLOR_BLUE2);
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	f240 531d 	movw	r3, #1309	; 0x51d
 8003064:	9301      	str	r3, [sp, #4]
 8003066:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800306a:	9300      	str	r3, [sp, #0]
 800306c:	4b05      	ldr	r3, [pc, #20]	; (8003084 <show_rhythm_params+0xc0>)
 800306e:	2196      	movs	r1, #150	; 0x96
 8003070:	200a      	movs	r0, #10
 8003072:	f009 fd3b 	bl	800caec <TM_ILI9341_Puts>
}
 8003076:	bf00      	nop
 8003078:	371c      	adds	r7, #28
 800307a:	46bd      	mov	sp, r7
 800307c:	bd90      	pop	{r4, r7, pc}
 800307e:	bf00      	nop
 8003080:	08018bcc 	.word	0x08018bcc
 8003084:	200001e0 	.word	0x200001e0

08003088 <change_value>:

static void change_value(uint8_t currentPosition,TM_KEYPAD_Button_t key){
 8003088:	b480      	push	{r7}
 800308a:	b085      	sub	sp, #20
 800308c:	af00      	add	r7, sp, #0
 800308e:	4603      	mov	r3, r0
 8003090:	460a      	mov	r2, r1
 8003092:	71fb      	strb	r3, [r7, #7]
 8003094:	4613      	mov	r3, r2
 8003096:	71bb      	strb	r3, [r7, #6]
	uint32_t *ptr;
	switch(currentPosition){
 8003098:	79fb      	ldrb	r3, [r7, #7]
 800309a:	2b02      	cmp	r3, #2
 800309c:	d00c      	beq.n	80030b8 <change_value+0x30>
 800309e:	2b02      	cmp	r3, #2
 80030a0:	dc0d      	bgt.n	80030be <change_value+0x36>
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d002      	beq.n	80030ac <change_value+0x24>
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d003      	beq.n	80030b2 <change_value+0x2a>
 80030aa:	e008      	b.n	80030be <change_value+0x36>
	case 0: ptr = &beats;
 80030ac:	4b20      	ldr	r3, [pc, #128]	; (8003130 <change_value+0xa8>)
 80030ae:	60fb      	str	r3, [r7, #12]
			break;
 80030b0:	e005      	b.n	80030be <change_value+0x36>
	case 1: ptr = &division;
 80030b2:	4b20      	ldr	r3, [pc, #128]	; (8003134 <change_value+0xac>)
 80030b4:	60fb      	str	r3, [r7, #12]
			break;
 80030b6:	e002      	b.n	80030be <change_value+0x36>
	case 2: ptr = &beattime;
 80030b8:	4b1f      	ldr	r3, [pc, #124]	; (8003138 <change_value+0xb0>)
 80030ba:	60fb      	str	r3, [r7, #12]
			break;
 80030bc:	bf00      	nop
	}

	if(*ptr == 0)
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d02e      	beq.n	8003124 <change_value+0x9c>
		return;

	if(key == TM_KEYPAD_Button_5 && beats > 1 && division > 1)
 80030c6:	79bb      	ldrb	r3, [r7, #6]
 80030c8:	2b05      	cmp	r3, #5
 80030ca:	d10d      	bne.n	80030e8 <change_value+0x60>
 80030cc:	4b18      	ldr	r3, [pc, #96]	; (8003130 <change_value+0xa8>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2b01      	cmp	r3, #1
 80030d2:	d909      	bls.n	80030e8 <change_value+0x60>
 80030d4:	4b17      	ldr	r3, [pc, #92]	; (8003134 <change_value+0xac>)
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	2b01      	cmp	r3, #1
 80030da:	d905      	bls.n	80030e8 <change_value+0x60>
		(*ptr)--;
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	1e5a      	subs	r2, r3, #1
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	601a      	str	r2, [r3, #0]
 80030e6:	e00f      	b.n	8003108 <change_value+0x80>
	else if(key == TM_KEYPAD_Button_2 && division * beats < MAX_SUBBEATS)
 80030e8:	79bb      	ldrb	r3, [r7, #6]
 80030ea:	2b02      	cmp	r3, #2
 80030ec:	d10c      	bne.n	8003108 <change_value+0x80>
 80030ee:	4b11      	ldr	r3, [pc, #68]	; (8003134 <change_value+0xac>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a0f      	ldr	r2, [pc, #60]	; (8003130 <change_value+0xa8>)
 80030f4:	6812      	ldr	r2, [r2, #0]
 80030f6:	fb02 f303 	mul.w	r3, r2, r3
 80030fa:	2b2f      	cmp	r3, #47	; 0x2f
 80030fc:	d804      	bhi.n	8003108 <change_value+0x80>
		(*ptr)++;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	1c5a      	adds	r2, r3, #1
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	601a      	str	r2, [r3, #0]
	if(division * beats > MAX_SUBBEATS)
 8003108:	4b0a      	ldr	r3, [pc, #40]	; (8003134 <change_value+0xac>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a08      	ldr	r2, [pc, #32]	; (8003130 <change_value+0xa8>)
 800310e:	6812      	ldr	r2, [r2, #0]
 8003110:	fb02 f303 	mul.w	r3, r2, r3
 8003114:	2b30      	cmp	r3, #48	; 0x30
 8003116:	d906      	bls.n	8003126 <change_value+0x9e>
		(*ptr)--;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	1e5a      	subs	r2, r3, #1
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	601a      	str	r2, [r3, #0]
 8003122:	e000      	b.n	8003126 <change_value+0x9e>
		return;
 8003124:	bf00      	nop
}
 8003126:	3714      	adds	r7, #20
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr
 8003130:	200000ec 	.word	0x200000ec
 8003134:	200000e8 	.word	0x200000e8
 8003138:	200000e4 	.word	0x200000e4

0800313c <select_rhythm_params>:


void select_rhythm_params(){
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af02      	add	r7, sp, #8
	uint8_t currentPosition = 0;
 8003142:	2300      	movs	r3, #0
 8003144:	71fb      	strb	r3, [r7, #7]
	TM_ILI9341_Fill(ILI9341_COLOR_MAGENTA);
 8003146:	f24a 2054 	movw	r0, #41556	; 0xa254
 800314a:	f009 fbcb 	bl	800c8e4 <TM_ILI9341_Fill>
	menuMultiLine(3,10,"[0] Exit","[1:4] Select options","[2:5] Set value");
 800314e:	4b2c      	ldr	r3, [pc, #176]	; (8003200 <select_rhythm_params+0xc4>)
 8003150:	9300      	str	r3, [sp, #0]
 8003152:	4b2c      	ldr	r3, [pc, #176]	; (8003204 <select_rhythm_params+0xc8>)
 8003154:	4a2c      	ldr	r2, [pc, #176]	; (8003208 <select_rhythm_params+0xcc>)
 8003156:	210a      	movs	r1, #10
 8003158:	2003      	movs	r0, #3
 800315a:	f005 fd55 	bl	8008c08 <menuMultiLine>
	show_rhythm_params(0);
 800315e:	2000      	movs	r0, #0
 8003160:	f7ff ff30 	bl	8002fc4 <show_rhythm_params>
	show_rhythm_param_values(0);
 8003164:	2000      	movs	r0, #0
 8003166:	f7ff fed1 	bl	8002f0c <show_rhythm_param_values>
	show_rhythm_param_values(1);
 800316a:	2001      	movs	r0, #1
 800316c:	f7ff fece 	bl	8002f0c <show_rhythm_param_values>
	show_rhythm_param_values(2);
 8003170:	2002      	movs	r0, #2
 8003172:	f7ff fecb 	bl	8002f0c <show_rhythm_param_values>
	while(TRUE){
		Keypad_Button = TM_KEYPAD_Read();
 8003176:	f009 fdf3 	bl	800cd60 <TM_KEYPAD_Read>
 800317a:	4603      	mov	r3, r0
 800317c:	461a      	mov	r2, r3
 800317e:	4b23      	ldr	r3, [pc, #140]	; (800320c <select_rhythm_params+0xd0>)
 8003180:	701a      	strb	r2, [r3, #0]
		switch(Keypad_Button){
 8003182:	4b22      	ldr	r3, [pc, #136]	; (800320c <select_rhythm_params+0xd0>)
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	2b05      	cmp	r3, #5
 8003188:	d8f5      	bhi.n	8003176 <select_rhythm_params+0x3a>
 800318a:	a201      	add	r2, pc, #4	; (adr r2, 8003190 <select_rhythm_params+0x54>)
 800318c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003190:	080031ef 	.word	0x080031ef
 8003194:	080031a9 	.word	0x080031a9
 8003198:	080031d5 	.word	0x080031d5
 800319c:	08003177 	.word	0x08003177
 80031a0:	080031bf 	.word	0x080031bf
 80031a4:	080031d5 	.word	0x080031d5
			case TM_KEYPAD_Button_0: goto end_select_params;
			case TM_KEYPAD_Button_1:
				if(currentPosition > 0)
 80031a8:	79fb      	ldrb	r3, [r7, #7]
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d002      	beq.n	80031b4 <select_rhythm_params+0x78>
					currentPosition--;
 80031ae:	79fb      	ldrb	r3, [r7, #7]
 80031b0:	3b01      	subs	r3, #1
 80031b2:	71fb      	strb	r3, [r7, #7]
				show_rhythm_params(currentPosition);
 80031b4:	79fb      	ldrb	r3, [r7, #7]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f7ff ff04 	bl	8002fc4 <show_rhythm_params>
				break;
 80031bc:	e016      	b.n	80031ec <select_rhythm_params+0xb0>
			case TM_KEYPAD_Button_4:
				if(currentPosition < 3)
 80031be:	79fb      	ldrb	r3, [r7, #7]
 80031c0:	2b02      	cmp	r3, #2
 80031c2:	d802      	bhi.n	80031ca <select_rhythm_params+0x8e>
					currentPosition++;
 80031c4:	79fb      	ldrb	r3, [r7, #7]
 80031c6:	3301      	adds	r3, #1
 80031c8:	71fb      	strb	r3, [r7, #7]
				show_rhythm_params(currentPosition);
 80031ca:	79fb      	ldrb	r3, [r7, #7]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7ff fef9 	bl	8002fc4 <show_rhythm_params>
				break;
 80031d2:	e00b      	b.n	80031ec <select_rhythm_params+0xb0>
			case TM_KEYPAD_Button_2:
			case TM_KEYPAD_Button_5:
				change_value(currentPosition,Keypad_Button);
 80031d4:	4b0d      	ldr	r3, [pc, #52]	; (800320c <select_rhythm_params+0xd0>)
 80031d6:	781a      	ldrb	r2, [r3, #0]
 80031d8:	79fb      	ldrb	r3, [r7, #7]
 80031da:	4611      	mov	r1, r2
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff ff53 	bl	8003088 <change_value>
				show_rhythm_param_values(currentPosition);
 80031e2:	79fb      	ldrb	r3, [r7, #7]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f7ff fe91 	bl	8002f0c <show_rhythm_param_values>
				break;
 80031ea:	bf00      	nop
		Keypad_Button = TM_KEYPAD_Read();
 80031ec:	e7c3      	b.n	8003176 <select_rhythm_params+0x3a>
			case TM_KEYPAD_Button_0: goto end_select_params;
 80031ee:	bf00      	nop

		}
	}

	end_select_params:
	Skip_Read_Button = TRUE;
 80031f0:	4b07      	ldr	r3, [pc, #28]	; (8003210 <select_rhythm_params+0xd4>)
 80031f2:	2201      	movs	r2, #1
 80031f4:	701a      	strb	r2, [r3, #0]
	return;
 80031f6:	bf00      	nop

}
 80031f8:	3708      	adds	r7, #8
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bd80      	pop	{r7, pc}
 80031fe:	bf00      	nop
 8003200:	08018c00 	.word	0x08018c00
 8003204:	08018bdc 	.word	0x08018bdc
 8003208:	08018bf4 	.word	0x08018bf4
 800320c:	20001c45 	.word	0x20001c45
 8003210:	20001c47 	.word	0x20001c47

08003214 <save_first>:

void save_first(uint8_t *ptr){
 8003214:	b580      	push	{r7, lr}
 8003216:	b086      	sub	sp, #24
 8003218:	af00      	add	r7, sp, #0
 800321a:	6078      	str	r0, [r7, #4]
	uint32_t header[3];
	SRAM_seekWrite(0,SRAM_SET);
 800321c:	2100      	movs	r1, #0
 800321e:	2000      	movs	r0, #0
 8003220:	f7fd fe66 	bl	8000ef0 <SRAM_seekWrite>
	header[HEADER_NUM_BYTES] = sizeof(header) + sizeof(PatternBeats) + pat1.beats * pat1.division * NUM_ALL_TRACKS;
 8003224:	4b15      	ldr	r3, [pc, #84]	; (800327c <save_first+0x68>)
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	4a14      	ldr	r2, [pc, #80]	; (800327c <save_first+0x68>)
 800322a:	6852      	ldr	r2, [r2, #4]
 800322c:	fb03 f202 	mul.w	r2, r3, r2
 8003230:	4613      	mov	r3, r2
 8003232:	009b      	lsls	r3, r3, #2
 8003234:	4413      	add	r3, r2
 8003236:	331c      	adds	r3, #28
 8003238:	60fb      	str	r3, [r7, #12]
	header[HEADER_NUM_PATTS] = 1;
 800323a:	2301      	movs	r3, #1
 800323c:	613b      	str	r3, [r7, #16]
	header[HEADER_MAX_BEATS] = tim1.subbeats;
 800323e:	4b10      	ldr	r3, [pc, #64]	; (8003280 <save_first+0x6c>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	617b      	str	r3, [r7, #20]
	writeSRAM((uint8_t *)header,sizeof(header));
 8003244:	f107 030c 	add.w	r3, r7, #12
 8003248:	210c      	movs	r1, #12
 800324a:	4618      	mov	r0, r3
 800324c:	f7fd fee8 	bl	8001020 <writeSRAM>
	writeSRAM((uint8_t *)&pat1,sizeof(PatternBeats));
 8003250:	2110      	movs	r1, #16
 8003252:	480a      	ldr	r0, [pc, #40]	; (800327c <save_first+0x68>)
 8003254:	f7fd fee4 	bl	8001020 <writeSRAM>
	writeSRAM((uint8_t *)ptr,pat1.beats * pat1.division * NUM_ALL_TRACKS);
 8003258:	4b08      	ldr	r3, [pc, #32]	; (800327c <save_first+0x68>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a07      	ldr	r2, [pc, #28]	; (800327c <save_first+0x68>)
 800325e:	6852      	ldr	r2, [r2, #4]
 8003260:	fb03 f202 	mul.w	r2, r3, r2
 8003264:	4613      	mov	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	4413      	add	r3, r2
 800326a:	4619      	mov	r1, r3
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f7fd fed7 	bl	8001020 <writeSRAM>
}
 8003272:	bf00      	nop
 8003274:	3718      	adds	r7, #24
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	2000117c 	.word	0x2000117c
 8003280:	2000119c 	.word	0x2000119c

08003284 <save_next>:

void save_next(uint8_t *ptr){
 8003284:	b580      	push	{r7, lr}
 8003286:	b086      	sub	sp, #24
 8003288:	af00      	add	r7, sp, #0
 800328a:	6078      	str	r0, [r7, #4]
	uint32_t header[3];		// number of patterns, number of bytes, max. resolution
	uint32_t currentBytes;
	SRAM_seekRead(0,SRAM_SET);
 800328c:	2100      	movs	r1, #0
 800328e:	2000      	movs	r0, #0
 8003290:	f7fd fe02 	bl	8000e98 <SRAM_seekRead>
	SRAM_seekWrite(0,SRAM_SET);
 8003294:	2100      	movs	r1, #0
 8003296:	2000      	movs	r0, #0
 8003298:	f7fd fe2a 	bl	8000ef0 <SRAM_seekWrite>
	readSRAM((uint8_t *)header,sizeof(header));
 800329c:	f107 0308 	add.w	r3, r7, #8
 80032a0:	210c      	movs	r1, #12
 80032a2:	4618      	mov	r0, r3
 80032a4:	f7fd ff52 	bl	800114c <readSRAM>
	if(header[HEADER_NUM_BYTES] == 0){
 80032a8:	68bb      	ldr	r3, [r7, #8]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d103      	bne.n	80032b6 <save_next+0x32>
		save_first(ptr);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7ff ffb0 	bl	8003214 <save_first>
 80032b4:	e035      	b.n	8003322 <save_next+0x9e>
		return;
	}
	currentBytes = header[HEADER_NUM_BYTES];
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	617b      	str	r3, [r7, #20]
	header[HEADER_NUM_BYTES] += (sizeof(PatternBeats) + pat1.beats * pat1.division * NUM_ALL_TRACKS);
 80032ba:	4b1b      	ldr	r3, [pc, #108]	; (8003328 <save_next+0xa4>)
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	4a1a      	ldr	r2, [pc, #104]	; (8003328 <save_next+0xa4>)
 80032c0:	6852      	ldr	r2, [r2, #4]
 80032c2:	fb03 f202 	mul.w	r2, r3, r2
 80032c6:	4613      	mov	r3, r2
 80032c8:	009b      	lsls	r3, r3, #2
 80032ca:	4413      	add	r3, r2
 80032cc:	f103 0210 	add.w	r2, r3, #16
 80032d0:	68bb      	ldr	r3, [r7, #8]
 80032d2:	4413      	add	r3, r2
 80032d4:	60bb      	str	r3, [r7, #8]
	header[HEADER_NUM_PATTS]++;
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	3301      	adds	r3, #1
 80032da:	60fb      	str	r3, [r7, #12]
	if(tim1.subbeats > header[HEADER_MAX_BEATS])
 80032dc:	4b13      	ldr	r3, [pc, #76]	; (800332c <save_next+0xa8>)
 80032de:	681a      	ldr	r2, [r3, #0]
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	429a      	cmp	r2, r3
 80032e4:	d902      	bls.n	80032ec <save_next+0x68>
		header[HEADER_MAX_BEATS] = tim1.subbeats;
 80032e6:	4b11      	ldr	r3, [pc, #68]	; (800332c <save_next+0xa8>)
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	613b      	str	r3, [r7, #16]
	writeSRAM((uint8_t *)header,sizeof(header));
 80032ec:	f107 0308 	add.w	r3, r7, #8
 80032f0:	210c      	movs	r1, #12
 80032f2:	4618      	mov	r0, r3
 80032f4:	f7fd fe94 	bl	8001020 <writeSRAM>
	SRAM_seekWrite(currentBytes,SRAM_SET);
 80032f8:	2100      	movs	r1, #0
 80032fa:	6978      	ldr	r0, [r7, #20]
 80032fc:	f7fd fdf8 	bl	8000ef0 <SRAM_seekWrite>
	writeSRAM((uint8_t *)&pat1,sizeof(PatternBeats));
 8003300:	2110      	movs	r1, #16
 8003302:	4809      	ldr	r0, [pc, #36]	; (8003328 <save_next+0xa4>)
 8003304:	f7fd fe8c 	bl	8001020 <writeSRAM>
	writeSRAM((uint8_t *)ptr,pat1.beats * pat1.division * NUM_ALL_TRACKS);
 8003308:	4b07      	ldr	r3, [pc, #28]	; (8003328 <save_next+0xa4>)
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a06      	ldr	r2, [pc, #24]	; (8003328 <save_next+0xa4>)
 800330e:	6852      	ldr	r2, [r2, #4]
 8003310:	fb03 f202 	mul.w	r2, r3, r2
 8003314:	4613      	mov	r3, r2
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	4413      	add	r3, r2
 800331a:	4619      	mov	r1, r3
 800331c:	6878      	ldr	r0, [r7, #4]
 800331e:	f7fd fe7f 	bl	8001020 <writeSRAM>
}
 8003322:	3718      	adds	r7, #24
 8003324:	46bd      	mov	sp, r7
 8003326:	bd80      	pop	{r7, pc}
 8003328:	2000117c 	.word	0x2000117c
 800332c:	2000119c 	.word	0x2000119c

08003330 <readDrums>:


void readDrums(uint32_t *numOfPatterns,uint32_t *numOfBytes,uint32_t *maxResolution){
 8003330:	b580      	push	{r7, lr}
 8003332:	b08e      	sub	sp, #56	; 0x38
 8003334:	af00      	add	r7, sp, #0
 8003336:	60f8      	str	r0, [r7, #12]
 8003338:	60b9      	str	r1, [r7, #8]
 800333a:	607a      	str	r2, [r7, #4]
	PatternBeats tmp;
	uint32_t header[3];		// number of patterns, number of bytes, max. resolution
	//uint32_t (*map)[2] = NULL;
	uint32_t currPat = 0;
 800333c:	2300      	movs	r3, #0
 800333e:	637b      	str	r3, [r7, #52]	; 0x34
	switch_buff = FALSE;
 8003340:	4b47      	ldr	r3, [pc, #284]	; (8003460 <readDrums+0x130>)
 8003342:	2200      	movs	r2, #0
 8003344:	701a      	strb	r2, [r3, #0]
	first_beat = FALSE;
 8003346:	4b47      	ldr	r3, [pc, #284]	; (8003464 <readDrums+0x134>)
 8003348:	2200      	movs	r2, #0
 800334a:	701a      	strb	r2, [r3, #0]

	//f_read(fil,header,sizeof(header),&bytesRead);
	SRAM_seekRead(0,SRAM_SET);
 800334c:	2100      	movs	r1, #0
 800334e:	2000      	movs	r0, #0
 8003350:	f7fd fda2 	bl	8000e98 <SRAM_seekRead>
	readSRAM((uint8_t *)header,sizeof(header));
 8003354:	f107 0314 	add.w	r3, r7, #20
 8003358:	210c      	movs	r1, #12
 800335a:	4618      	mov	r0, r3
 800335c:	f7fd fef6 	bl	800114c <readSRAM>
	*numOfBytes = header[HEADER_NUM_BYTES];
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	68bb      	ldr	r3, [r7, #8]
 8003364:	601a      	str	r2, [r3, #0]
	*numOfPatterns = header[HEADER_NUM_PATTS];
 8003366:	69ba      	ldr	r2, [r7, #24]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	601a      	str	r2, [r3, #0]
	*maxResolution = header[HEADER_MAX_BEATS];
 800336c:	69fa      	ldr	r2, [r7, #28]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	601a      	str	r2, [r3, #0]

	if(*numOfPatterns == 0 || *maxResolution > MAX_SUBBEATS)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d06e      	beq.n	8003458 <readDrums+0x128>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	2b30      	cmp	r3, #48	; 0x30
 8003380:	d86a      	bhi.n	8003458 <readDrums+0x128>
		return;

	// create memory map
	pattern_audio_map[0].sample_position = 0;
 8003382:	4b39      	ldr	r3, [pc, #228]	; (8003468 <readDrums+0x138>)
 8003384:	2200      	movs	r2, #0
 8003386:	605a      	str	r2, [r3, #4]
	pattern_audio_map[0].channel_recorded[_CH1] = FALSE;
 8003388:	4b37      	ldr	r3, [pc, #220]	; (8003468 <readDrums+0x138>)
 800338a:	2200      	movs	r2, #0
 800338c:	721a      	strb	r2, [r3, #8]
	pattern_audio_map[0].channel_recorded[_CH2] = FALSE;
 800338e:	4b36      	ldr	r3, [pc, #216]	; (8003468 <readDrums+0x138>)
 8003390:	2200      	movs	r2, #0
 8003392:	725a      	strb	r2, [r3, #9]
	for(currPat = 0; currPat < *numOfPatterns; currPat++){
 8003394:	2300      	movs	r3, #0
 8003396:	637b      	str	r3, [r7, #52]	; 0x34
 8003398:	e058      	b.n	800344c <readDrums+0x11c>
		pattern_audio_map[currPat].channel_recorded[_CH1] = FALSE;
 800339a:	4933      	ldr	r1, [pc, #204]	; (8003468 <readDrums+0x138>)
 800339c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800339e:	4613      	mov	r3, r2
 80033a0:	005b      	lsls	r3, r3, #1
 80033a2:	4413      	add	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	440b      	add	r3, r1
 80033a8:	3308      	adds	r3, #8
 80033aa:	2200      	movs	r2, #0
 80033ac:	701a      	strb	r2, [r3, #0]
		pattern_audio_map[currPat].channel_recorded[_CH2] = FALSE;
 80033ae:	492e      	ldr	r1, [pc, #184]	; (8003468 <readDrums+0x138>)
 80033b0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033b2:	4613      	mov	r3, r2
 80033b4:	005b      	lsls	r3, r3, #1
 80033b6:	4413      	add	r3, r2
 80033b8:	009b      	lsls	r3, r3, #2
 80033ba:	440b      	add	r3, r1
 80033bc:	3309      	adds	r3, #9
 80033be:	2200      	movs	r2, #0
 80033c0:	701a      	strb	r2, [r3, #0]
		pattern_audio_map[currPat].sram_position = SRAM_readerPosition();
 80033c2:	f7fd fd5d 	bl	8000e80 <SRAM_readerPosition>
 80033c6:	4601      	mov	r1, r0
 80033c8:	4827      	ldr	r0, [pc, #156]	; (8003468 <readDrums+0x138>)
 80033ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033cc:	4613      	mov	r3, r2
 80033ce:	005b      	lsls	r3, r3, #1
 80033d0:	4413      	add	r3, r2
 80033d2:	009b      	lsls	r3, r3, #2
 80033d4:	4403      	add	r3, r0
 80033d6:	6019      	str	r1, [r3, #0]
		readSRAM((uint8_t *)&tmp,sizeof(PatternBeats));
 80033d8:	f107 0320 	add.w	r3, r7, #32
 80033dc:	2110      	movs	r1, #16
 80033de:	4618      	mov	r0, r3
 80033e0:	f7fd feb4 	bl	800114c <readSRAM>
		readSRAM((uint8_t *)drumBuffA,tmp.beats * tmp.division * NUM_ALL_TRACKS);
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e8:	fb03 f202 	mul.w	r2, r3, r2
 80033ec:	4613      	mov	r3, r2
 80033ee:	009b      	lsls	r3, r3, #2
 80033f0:	4413      	add	r3, r2
 80033f2:	4619      	mov	r1, r3
 80033f4:	481d      	ldr	r0, [pc, #116]	; (800346c <readDrums+0x13c>)
 80033f6:	f7fd fea9 	bl	800114c <readSRAM>
		if(currPat < *numOfPatterns){
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003400:	429a      	cmp	r2, r3
 8003402:	d220      	bcs.n	8003446 <readDrums+0x116>
			uint32_t millis = BEAT_MILLIS(tmp.beattime);
 8003404:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003406:	f64e 2260 	movw	r2, #60000	; 0xea60
 800340a:	fbb2 f3f3 	udiv	r3, r2, r3
 800340e:	633b      	str	r3, [r7, #48]	; 0x30
			pattern_audio_map[currPat + 1].sample_position = pattern_audio_map[currPat].sample_position + (millis * tmp.beats * 15);
 8003410:	4915      	ldr	r1, [pc, #84]	; (8003468 <readDrums+0x138>)
 8003412:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003414:	4613      	mov	r3, r2
 8003416:	005b      	lsls	r3, r3, #1
 8003418:	4413      	add	r3, r2
 800341a:	009b      	lsls	r3, r3, #2
 800341c:	440b      	add	r3, r1
 800341e:	3304      	adds	r3, #4
 8003420:	6819      	ldr	r1, [r3, #0]
 8003422:	6a3b      	ldr	r3, [r7, #32]
 8003424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003426:	fb03 f202 	mul.w	r2, r3, r2
 800342a:	4613      	mov	r3, r2
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003432:	3201      	adds	r2, #1
 8003434:	4419      	add	r1, r3
 8003436:	480c      	ldr	r0, [pc, #48]	; (8003468 <readDrums+0x138>)
 8003438:	4613      	mov	r3, r2
 800343a:	005b      	lsls	r3, r3, #1
 800343c:	4413      	add	r3, r2
 800343e:	009b      	lsls	r3, r3, #2
 8003440:	4403      	add	r3, r0
 8003442:	3304      	adds	r3, #4
 8003444:	6019      	str	r1, [r3, #0]
	for(currPat = 0; currPat < *numOfPatterns; currPat++){
 8003446:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003448:	3301      	adds	r3, #1
 800344a:	637b      	str	r3, [r7, #52]	; 0x34
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003452:	429a      	cmp	r2, r3
 8003454:	d3a1      	bcc.n	800339a <readDrums+0x6a>
 8003456:	e000      	b.n	800345a <readDrums+0x12a>
		return;
 8003458:	bf00      	nop
		}
	}

	//return (uint32_t *)map;

}
 800345a:	3738      	adds	r7, #56	; 0x38
 800345c:	46bd      	mov	sp, r7
 800345e:	bd80      	pop	{r7, pc}
 8003460:	20000560 	.word	0x20000560
 8003464:	20000561 	.word	0x20000561
 8003468:	20000568 	.word	0x20000568
 800346c:	20000ed4 	.word	0x20000ed4

08003470 <stopDrums>:
void startDrums(){
	HAL_TIM_Base_Start_IT(&htim2);
	looper.DrumState = DRUMS_STARTED;
}

void stopDrums(){
 8003470:	b580      	push	{r7, lr}
 8003472:	af00      	add	r7, sp, #0
	looper.DrumState = DRUMS_STOPPED;
 8003474:	4b05      	ldr	r3, [pc, #20]	; (800348c <stopDrums+0x1c>)
 8003476:	2200      	movs	r2, #0
 8003478:	771a      	strb	r2, [r3, #28]
	HAL_TIM_Base_Stop_IT(&htim2);
 800347a:	4805      	ldr	r0, [pc, #20]	; (8003490 <stopDrums+0x20>)
 800347c:	f00e fee4 	bl	8012248 <HAL_TIM_Base_Stop_IT>
	HAL_Delay(100);
 8003480:	2064      	movs	r0, #100	; 0x64
 8003482:	f009 fde1 	bl	800d048 <HAL_Delay>

}
 8003486:	bf00      	nop
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20001228 	.word	0x20001228
 8003490:	20002284 	.word	0x20002284

08003494 <setPatternTime>:

void setPatternTime(__IO PatternBeats *p,__IO PatternTimes *t){
 8003494:	b480      	push	{r7}
 8003496:	b085      	sub	sp, #20
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
 800349c:	6039      	str	r1, [r7, #0]
	uint32_t millis = BEAT_MILLIS(p->beattime);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	f64e 2260 	movw	r2, #60000	; 0xea60
 80034a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80034aa:	60fb      	str	r3, [r7, #12]
	t->subbeats = p->beats * p->division;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	687a      	ldr	r2, [r7, #4]
 80034b2:	6852      	ldr	r2, [r2, #4]
 80034b4:	fb03 f202 	mul.w	r2, r3, r2
 80034b8:	683b      	ldr	r3, [r7, #0]
 80034ba:	601a      	str	r2, [r3, #0]
	t->barDuration = p->beats * millis;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	68fa      	ldr	r2, [r7, #12]
 80034c2:	fb03 f202 	mul.w	r2, r3, r2
 80034c6:	683b      	ldr	r3, [r7, #0]
 80034c8:	605a      	str	r2, [r3, #4]
	t->remainder = t->barDuration % t->subbeats;
 80034ca:	683b      	ldr	r3, [r7, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	6812      	ldr	r2, [r2, #0]
 80034d2:	fbb3 f1f2 	udiv	r1, r3, r2
 80034d6:	fb01 f202 	mul.w	r2, r1, r2
 80034da:	1a9a      	subs	r2, r3, r2
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	609a      	str	r2, [r3, #8]
	t->subBeatDuration = t->barDuration / t->subbeats;
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	683b      	ldr	r3, [r7, #0]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	fbb2 f2f3 	udiv	r2, r2, r3
 80034ec:	683b      	ldr	r3, [r7, #0]
 80034ee:	60da      	str	r2, [r3, #12]
}
 80034f0:	bf00      	nop
 80034f2:	3714      	adds	r7, #20
 80034f4:	46bd      	mov	sp, r7
 80034f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034fa:	4770      	bx	lr

080034fc <updatePatternTime>:

void updatePatternTime(__IO PatternBeats *p,__IO PatternTimes *t){
 80034fc:	b480      	push	{r7}
 80034fe:	b085      	sub	sp, #20
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
 8003504:	6039      	str	r1, [r7, #0]
	uint32_t millis = BEAT_MILLIS(p->beattime + looper.timeIncrement) ;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	4a18      	ldr	r2, [pc, #96]	; (800356c <updatePatternTime+0x70>)
 800350c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800350e:	4413      	add	r3, r2
 8003510:	f64e 2260 	movw	r2, #60000	; 0xea60
 8003514:	fbb2 f3f3 	udiv	r3, r2, r3
 8003518:	60fb      	str	r3, [r7, #12]
	t->subbeats = p->beats * p->division;
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	687a      	ldr	r2, [r7, #4]
 8003520:	6852      	ldr	r2, [r2, #4]
 8003522:	fb03 f202 	mul.w	r2, r3, r2
 8003526:	683b      	ldr	r3, [r7, #0]
 8003528:	601a      	str	r2, [r3, #0]
	t->barDuration = p->beats * millis;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68fa      	ldr	r2, [r7, #12]
 8003530:	fb03 f202 	mul.w	r2, r3, r2
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	605a      	str	r2, [r3, #4]
	t->remainder = t->barDuration % t->subbeats;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	685b      	ldr	r3, [r3, #4]
 800353c:	683a      	ldr	r2, [r7, #0]
 800353e:	6812      	ldr	r2, [r2, #0]
 8003540:	fbb3 f1f2 	udiv	r1, r3, r2
 8003544:	fb01 f202 	mul.w	r2, r1, r2
 8003548:	1a9a      	subs	r2, r3, r2
 800354a:	683b      	ldr	r3, [r7, #0]
 800354c:	609a      	str	r2, [r3, #8]
	t->subBeatDuration = t->barDuration / t->subbeats;
 800354e:	683b      	ldr	r3, [r7, #0]
 8003550:	685a      	ldr	r2, [r3, #4]
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	fbb2 f2f3 	udiv	r2, r2, r3
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	60da      	str	r2, [r3, #12]
}
 800355e:	bf00      	nop
 8003560:	3714      	adds	r7, #20
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr
 800356a:	bf00      	nop
 800356c:	20001228 	.word	0x20001228

08003570 <readDrumKeyboard>:


TM_KEYPAD_Button_t readDrumKeyboard(BOOL record){
 8003570:	b580      	push	{r7, lr}
 8003572:	b084      	sub	sp, #16
 8003574:	af00      	add	r7, sp, #0
 8003576:	4603      	mov	r3, r0
 8003578:	71fb      	strb	r3, [r7, #7]

	TM_KEYPAD_Button_t key = TM_KEYPAD_Read();
 800357a:	f009 fbf1 	bl	800cd60 <TM_KEYPAD_Read>
 800357e:	4603      	mov	r3, r0
 8003580:	73fb      	strb	r3, [r7, #15]
	JOYSTICK js = Read_Joystick();
 8003582:	f004 f8b7 	bl	80076f4 <Read_Joystick>
 8003586:	4603      	mov	r3, r0
 8003588:	461a      	mov	r2, r3
 800358a:	733a      	strb	r2, [r7, #12]
 800358c:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003590:	737a      	strb	r2, [r7, #13]
 8003592:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003596:	73bb      	strb	r3, [r7, #14]
	if(js.xpos == MAX_JOY)
 8003598:	7b3b      	ldrb	r3, [r7, #12]
 800359a:	2b07      	cmp	r3, #7
 800359c:	d103      	bne.n	80035a6 <readDrumKeyboard+0x36>
		octave = 12;
 800359e:	4b3e      	ldr	r3, [pc, #248]	; (8003698 <readDrumKeyboard+0x128>)
 80035a0:	220c      	movs	r2, #12
 80035a2:	701a      	strb	r2, [r3, #0]
 80035a4:	e009      	b.n	80035ba <readDrumKeyboard+0x4a>
	else if(js.xpos == MIN_JOY)
 80035a6:	7b3b      	ldrb	r3, [r7, #12]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d103      	bne.n	80035b4 <readDrumKeyboard+0x44>
		octave = -12;
 80035ac:	4b3a      	ldr	r3, [pc, #232]	; (8003698 <readDrumKeyboard+0x128>)
 80035ae:	22f4      	movs	r2, #244	; 0xf4
 80035b0:	701a      	strb	r2, [r3, #0]
 80035b2:	e002      	b.n	80035ba <readDrumKeyboard+0x4a>
	else
		octave = 0;
 80035b4:	4b38      	ldr	r3, [pc, #224]	; (8003698 <readDrumKeyboard+0x128>)
 80035b6:	2200      	movs	r2, #0
 80035b8:	701a      	strb	r2, [r3, #0]

	if(key != TM_KEYPAD_Button_NOPRESSED){
 80035ba:	7bfb      	ldrb	r3, [r7, #15]
 80035bc:	2bff      	cmp	r3, #255	; 0xff
 80035be:	d066      	beq.n	800368e <readDrumKeyboard+0x11e>
		if(record == TRUE){
 80035c0:	79fb      	ldrb	r3, [r7, #7]
 80035c2:	2b01      	cmp	r3, #1
 80035c4:	d134      	bne.n	8003630 <readDrumKeyboard+0xc0>
			if(looper.DrumState != DRUMS_STARTED){
 80035c6:	4b35      	ldr	r3, [pc, #212]	; (800369c <readDrumKeyboard+0x12c>)
 80035c8:	7f1b      	ldrb	r3, [r3, #28]
 80035ca:	b2db      	uxtb	r3, r3
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d004      	beq.n	80035da <readDrumKeyboard+0x6a>
					resetDrums();
 80035d0:	f000 fc18 	bl	8003e04 <resetDrums>
					looper.DrumState = DRUMS_STARTED;
 80035d4:	4b31      	ldr	r3, [pc, #196]	; (800369c <readDrumKeyboard+0x12c>)
 80035d6:	2201      	movs	r2, #1
 80035d8:	771a      	strb	r2, [r3, #28]
			}

			if(looper.PlayBass == FALSE)
 80035da:	4b30      	ldr	r3, [pc, #192]	; (800369c <readDrumKeyboard+0x12c>)
 80035dc:	791b      	ldrb	r3, [r3, #4]
 80035de:	b2db      	uxtb	r3, r3
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d107      	bne.n	80035f4 <readDrumKeyboard+0x84>
				drumBuffWritePtr[drumBufferIndex] = key;	// numbers are resolved to drums and parts using key_to_drum_part array
 80035e4:	4b2e      	ldr	r3, [pc, #184]	; (80036a0 <readDrumKeyboard+0x130>)
 80035e6:	681a      	ldr	r2, [r3, #0]
 80035e8:	4b2e      	ldr	r3, [pc, #184]	; (80036a4 <readDrumKeyboard+0x134>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	4413      	add	r3, r2
 80035ee:	7bfa      	ldrb	r2, [r7, #15]
 80035f0:	701a      	strb	r2, [r3, #0]
 80035f2:	e00e      	b.n	8003612 <readDrumKeyboard+0xa2>
			else
				drumBuffWritePtr[drumBufferIndex] = key_to_bass[key] + octave;
 80035f4:	7bfb      	ldrb	r3, [r7, #15]
 80035f6:	4a2c      	ldr	r2, [pc, #176]	; (80036a8 <readDrumKeyboard+0x138>)
 80035f8:	5cd1      	ldrb	r1, [r2, r3]
 80035fa:	4b27      	ldr	r3, [pc, #156]	; (8003698 <readDrumKeyboard+0x128>)
 80035fc:	f993 3000 	ldrsb.w	r3, [r3]
 8003600:	b2da      	uxtb	r2, r3
 8003602:	4b27      	ldr	r3, [pc, #156]	; (80036a0 <readDrumKeyboard+0x130>)
 8003604:	6818      	ldr	r0, [r3, #0]
 8003606:	4b27      	ldr	r3, [pc, #156]	; (80036a4 <readDrumKeyboard+0x134>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4403      	add	r3, r0
 800360c:	440a      	add	r2, r1
 800360e:	b2d2      	uxtb	r2, r2
 8003610:	701a      	strb	r2, [r3, #0]
			drumEventTimes[drumBufferIndex] = midiDrumClock;
 8003612:	4b24      	ldr	r3, [pc, #144]	; (80036a4 <readDrumKeyboard+0x134>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4a25      	ldr	r2, [pc, #148]	; (80036ac <readDrumKeyboard+0x13c>)
 8003618:	6812      	ldr	r2, [r2, #0]
 800361a:	4925      	ldr	r1, [pc, #148]	; (80036b0 <readDrumKeyboard+0x140>)
 800361c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			drumBufferIndex++;
 8003620:	4b20      	ldr	r3, [pc, #128]	; (80036a4 <readDrumKeyboard+0x134>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	3301      	adds	r3, #1
 8003626:	4a1f      	ldr	r2, [pc, #124]	; (80036a4 <readDrumKeyboard+0x134>)
 8003628:	6013      	str	r3, [r2, #0]
			BSP_LED_On(LED_RED);
 800362a:	2001      	movs	r0, #1
 800362c:	f007 ffba 	bl	800b5a4 <BSP_LED_On>
		}

		if(looper.PlayBass == FALSE)
 8003630:	4b1a      	ldr	r3, [pc, #104]	; (800369c <readDrumKeyboard+0x12c>)
 8003632:	791b      	ldrb	r3, [r3, #4]
 8003634:	b2db      	uxtb	r3, r3
 8003636:	2b00      	cmp	r3, #0
 8003638:	d108      	bne.n	800364c <readDrumKeyboard+0xdc>
			playPercussion(NOTEON,key_to_drum_part[key][0]);
 800363a:	7bfb      	ldrb	r3, [r7, #15]
 800363c:	4a1d      	ldr	r2, [pc, #116]	; (80036b4 <readDrumKeyboard+0x144>)
 800363e:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8003642:	4619      	mov	r1, r3
 8003644:	2001      	movs	r0, #1
 8003646:	f006 fdc3 	bl	800a1d0 <playPercussion>
 800364a:	e020      	b.n	800368e <readDrumKeyboard+0x11e>
		else{

				currNote = key_to_bass[key] + octave;
 800364c:	7bfb      	ldrb	r3, [r7, #15]
 800364e:	4a16      	ldr	r2, [pc, #88]	; (80036a8 <readDrumKeyboard+0x138>)
 8003650:	5cd2      	ldrb	r2, [r2, r3]
 8003652:	4b11      	ldr	r3, [pc, #68]	; (8003698 <readDrumKeyboard+0x128>)
 8003654:	f993 3000 	ldrsb.w	r3, [r3]
 8003658:	b2db      	uxtb	r3, r3
 800365a:	4413      	add	r3, r2
 800365c:	b2da      	uxtb	r2, r3
 800365e:	4b16      	ldr	r3, [pc, #88]	; (80036b8 <readDrumKeyboard+0x148>)
 8003660:	701a      	strb	r2, [r3, #0]
				if(prevNote != currNote)
 8003662:	4b16      	ldr	r3, [pc, #88]	; (80036bc <readDrumKeyboard+0x14c>)
 8003664:	781a      	ldrb	r2, [r3, #0]
 8003666:	4b14      	ldr	r3, [pc, #80]	; (80036b8 <readDrumKeyboard+0x148>)
 8003668:	781b      	ldrb	r3, [r3, #0]
 800366a:	429a      	cmp	r2, r3
 800366c:	d005      	beq.n	800367a <readDrumKeyboard+0x10a>
					playBass(NOTEOFF,prevNote);
 800366e:	4b13      	ldr	r3, [pc, #76]	; (80036bc <readDrumKeyboard+0x14c>)
 8003670:	781b      	ldrb	r3, [r3, #0]
 8003672:	4619      	mov	r1, r3
 8003674:	2000      	movs	r0, #0
 8003676:	f006 fdc7 	bl	800a208 <playBass>
				playBass(NOTEON,currNote);	// Bass lowest E midi code = 28, each key adds half-tone
 800367a:	4b0f      	ldr	r3, [pc, #60]	; (80036b8 <readDrumKeyboard+0x148>)
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	4619      	mov	r1, r3
 8003680:	2001      	movs	r0, #1
 8003682:	f006 fdc1 	bl	800a208 <playBass>

				prevNote = currNote;
 8003686:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <readDrumKeyboard+0x148>)
 8003688:	781a      	ldrb	r2, [r3, #0]
 800368a:	4b0c      	ldr	r3, [pc, #48]	; (80036bc <readDrumKeyboard+0x14c>)
 800368c:	701a      	strb	r2, [r3, #0]
		}
	}

	return key;
 800368e:	7bfb      	ldrb	r3, [r7, #15]

}
 8003690:	4618      	mov	r0, r3
 8003692:	3710      	adds	r7, #16
 8003694:	46bd      	mov	sp, r7
 8003696:	bd80      	pop	{r7, pc}
 8003698:	20000565 	.word	0x20000565
 800369c:	20001228 	.word	0x20001228
 80036a0:	20001178 	.word	0x20001178
 80036a4:	20000558 	.word	0x20000558
 80036a8:	20000190 	.word	0x20000190
 80036ac:	2000055c 	.word	0x2000055c
 80036b0:	200010b4 	.word	0x200010b4
 80036b4:	20000170 	.word	0x20000170
 80036b8:	20000564 	.word	0x20000564
 80036bc:	20000563 	.word	0x20000563

080036c0 <clear_drums>:
		drumBeatIndex = 0;
	}

}

void clear_drums(){
 80036c0:	b580      	push	{r7, lr}
 80036c2:	af00      	add	r7, sp, #0
	memset(drumBuffA,0,MAX_SUBBEATS * NUM_ALL_TRACKS);
 80036c4:	22f0      	movs	r2, #240	; 0xf0
 80036c6:	2100      	movs	r1, #0
 80036c8:	4807      	ldr	r0, [pc, #28]	; (80036e8 <clear_drums+0x28>)
 80036ca:	f013 fff7 	bl	80176bc <memset>
	memset(drumBuffB,0,MAX_SUBBEATS * NUM_ALL_TRACKS);
 80036ce:	22f0      	movs	r2, #240	; 0xf0
 80036d0:	2100      	movs	r1, #0
 80036d2:	4806      	ldr	r0, [pc, #24]	; (80036ec <clear_drums+0x2c>)
 80036d4:	f013 fff2 	bl	80176bc <memset>
	memset(drumEventTimes,0,MAX_SUBBEATS * 4);
 80036d8:	22c0      	movs	r2, #192	; 0xc0
 80036da:	2100      	movs	r1, #0
 80036dc:	4804      	ldr	r0, [pc, #16]	; (80036f0 <clear_drums+0x30>)
 80036de:	f013 ffed 	bl	80176bc <memset>
}
 80036e2:	bf00      	nop
 80036e4:	bd80      	pop	{r7, pc}
 80036e6:	bf00      	nop
 80036e8:	20000ed4 	.word	0x20000ed4
 80036ec:	20000fc4 	.word	0x20000fc4
 80036f0:	200010b4 	.word	0x200010b4

080036f4 <preview_drums>:

void preview_drums() {
 80036f4:	b590      	push	{r4, r7, lr}
 80036f6:	b089      	sub	sp, #36	; 0x24
 80036f8:	af04      	add	r7, sp, #16
	uint16_t x, y, i;
	JOYSTICK js;
	TM_KEYPAD_Button_t currentkey = TM_KEYPAD_Button_NOPRESSED, tmpkey =
 80036fa:	23ff      	movs	r3, #255	; 0xff
 80036fc:	713b      	strb	r3, [r7, #4]
 80036fe:	23ff      	movs	r3, #255	; 0xff
 8003700:	727b      	strb	r3, [r7, #9]
			TM_KEYPAD_Button_NOPRESSED;
	uint8_t joydrumkey = 0, joypartkey = 0;
 8003702:	2300      	movs	r3, #0
 8003704:	723b      	strb	r3, [r7, #8]
 8003706:	2300      	movs	r3, #0
 8003708:	71fb      	strb	r3, [r7, #7]
	BOOL pressed = FALSE, changed = FALSE;
 800370a:	2300      	movs	r3, #0
 800370c:	71bb      	strb	r3, [r7, #6]
 800370e:	2300      	movs	r3, #0
 8003710:	717b      	strb	r3, [r7, #5]
	//menuClearLines(2,4,6);

	TM_ILI9341_Fill(ILI9341_COLOR_MAGENTA);
 8003712:	f24a 2054 	movw	r0, #41556	; 0xa254
 8003716:	f009 f8e5 	bl	800c8e4 <TM_ILI9341_Fill>
	menuTextBox(5, 190, 10,"Press keys to hear","drum sounds","Move joystick","to change sound",
 800371a:	4ba3      	ldr	r3, [pc, #652]	; (80039a8 <preview_drums+0x2b4>)
 800371c:	9303      	str	r3, [sp, #12]
 800371e:	4ba3      	ldr	r3, [pc, #652]	; (80039ac <preview_drums+0x2b8>)
 8003720:	9302      	str	r3, [sp, #8]
 8003722:	4ba3      	ldr	r3, [pc, #652]	; (80039b0 <preview_drums+0x2bc>)
 8003724:	9301      	str	r3, [sp, #4]
 8003726:	4ba3      	ldr	r3, [pc, #652]	; (80039b4 <preview_drums+0x2c0>)
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	4ba3      	ldr	r3, [pc, #652]	; (80039b8 <preview_drums+0x2c4>)
 800372c:	220a      	movs	r2, #10
 800372e:	21be      	movs	r1, #190	; 0xbe
 8003730:	2005      	movs	r0, #5
 8003732:	f005 fa2f 	bl	8008b94 <menuTextBox>
			"Blue button finish");

	for (x = 10; x < 160; x += 42) {
 8003736:	230a      	movs	r3, #10
 8003738:	81fb      	strh	r3, [r7, #14]
 800373a:	e018      	b.n	800376e <preview_drums+0x7a>
		for (y = 10; y < 160; y += 42) {
 800373c:	230a      	movs	r3, #10
 800373e:	81bb      	strh	r3, [r7, #12]
 8003740:	e00f      	b.n	8003762 <preview_drums+0x6e>
			TM_ILI9341_DrawFilledRectangle(x, y, x + 40, y + 40,ILI9341_COLOR_BLUE2);
 8003742:	89fb      	ldrh	r3, [r7, #14]
 8003744:	3328      	adds	r3, #40	; 0x28
 8003746:	b29a      	uxth	r2, r3
 8003748:	89bb      	ldrh	r3, [r7, #12]
 800374a:	3328      	adds	r3, #40	; 0x28
 800374c:	b29b      	uxth	r3, r3
 800374e:	89b9      	ldrh	r1, [r7, #12]
 8003750:	89f8      	ldrh	r0, [r7, #14]
 8003752:	f240 541d 	movw	r4, #1309	; 0x51d
 8003756:	9400      	str	r4, [sp, #0]
 8003758:	f009 fab2 	bl	800ccc0 <TM_ILI9341_DrawFilledRectangle>
		for (y = 10; y < 160; y += 42) {
 800375c:	89bb      	ldrh	r3, [r7, #12]
 800375e:	332a      	adds	r3, #42	; 0x2a
 8003760:	81bb      	strh	r3, [r7, #12]
 8003762:	89bb      	ldrh	r3, [r7, #12]
 8003764:	2b9f      	cmp	r3, #159	; 0x9f
 8003766:	d9ec      	bls.n	8003742 <preview_drums+0x4e>
	for (x = 10; x < 160; x += 42) {
 8003768:	89fb      	ldrh	r3, [r7, #14]
 800376a:	332a      	adds	r3, #42	; 0x2a
 800376c:	81fb      	strh	r3, [r7, #14]
 800376e:	89fb      	ldrh	r3, [r7, #14]
 8003770:	2b9f      	cmp	r3, #159	; 0x9f
 8003772:	d9e3      	bls.n	800373c <preview_drums+0x48>
		}
	}

	looper.DrumState = DRUMS_PAUSED;
 8003774:	4b91      	ldr	r3, [pc, #580]	; (80039bc <preview_drums+0x2c8>)
 8003776:	2203      	movs	r2, #3
 8003778:	771a      	strb	r2, [r3, #28]
	while (looper.DrumState == DRUMS_PAUSED) {
 800377a:	e16d      	b.n	8003a58 <preview_drums+0x364>
		if ((currentkey = readDrumKeyboard(FALSE))
 800377c:	2000      	movs	r0, #0
 800377e:	f7ff fef7 	bl	8003570 <readDrumKeyboard>
 8003782:	4603      	mov	r3, r0
 8003784:	713b      	strb	r3, [r7, #4]
 8003786:	793b      	ldrb	r3, [r7, #4]
 8003788:	2bff      	cmp	r3, #255	; 0xff
 800378a:	f000 80c5 	beq.w	8003918 <preview_drums+0x224>
				!= TM_KEYPAD_Button_NOPRESSED) {
			switch (currentkey) {
 800378e:	793b      	ldrb	r3, [r7, #4]
 8003790:	2b0f      	cmp	r3, #15
 8003792:	d873      	bhi.n	800387c <preview_drums+0x188>
 8003794:	a201      	add	r2, pc, #4	; (adr r2, 800379c <preview_drums+0xa8>)
 8003796:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800379a:	bf00      	nop
 800379c:	080037dd 	.word	0x080037dd
 80037a0:	080037e7 	.word	0x080037e7
 80037a4:	080037f1 	.word	0x080037f1
 80037a8:	080037fb 	.word	0x080037fb
 80037ac:	08003805 	.word	0x08003805
 80037b0:	0800380f 	.word	0x0800380f
 80037b4:	08003819 	.word	0x08003819
 80037b8:	08003823 	.word	0x08003823
 80037bc:	0800382d 	.word	0x0800382d
 80037c0:	08003837 	.word	0x08003837
 80037c4:	08003869 	.word	0x08003869
 80037c8:	08003873 	.word	0x08003873
 80037cc:	08003841 	.word	0x08003841
 80037d0:	0800384b 	.word	0x0800384b
 80037d4:	08003855 	.word	0x08003855
 80037d8:	0800385f 	.word	0x0800385f
			case TM_KEYPAD_Button_0:
				y = 136;
 80037dc:	2388      	movs	r3, #136	; 0x88
 80037de:	81bb      	strh	r3, [r7, #12]
				x = 52;
 80037e0:	2334      	movs	r3, #52	; 0x34
 80037e2:	81fb      	strh	r3, [r7, #14]
				break;
 80037e4:	e04a      	b.n	800387c <preview_drums+0x188>
			case TM_KEYPAD_Button_1:
				y = 10;
 80037e6:	230a      	movs	r3, #10
 80037e8:	81bb      	strh	r3, [r7, #12]
				x = 10;
 80037ea:	230a      	movs	r3, #10
 80037ec:	81fb      	strh	r3, [r7, #14]
				break;
 80037ee:	e045      	b.n	800387c <preview_drums+0x188>
			case TM_KEYPAD_Button_2:
				y = 10;
 80037f0:	230a      	movs	r3, #10
 80037f2:	81bb      	strh	r3, [r7, #12]
				x = 52;
 80037f4:	2334      	movs	r3, #52	; 0x34
 80037f6:	81fb      	strh	r3, [r7, #14]
				break;
 80037f8:	e040      	b.n	800387c <preview_drums+0x188>
			case TM_KEYPAD_Button_3:
				y = 10;
 80037fa:	230a      	movs	r3, #10
 80037fc:	81bb      	strh	r3, [r7, #12]
				x = 94;
 80037fe:	235e      	movs	r3, #94	; 0x5e
 8003800:	81fb      	strh	r3, [r7, #14]
				break;
 8003802:	e03b      	b.n	800387c <preview_drums+0x188>
			case TM_KEYPAD_Button_4:
				y = 52;
 8003804:	2334      	movs	r3, #52	; 0x34
 8003806:	81bb      	strh	r3, [r7, #12]
				x = 10;
 8003808:	230a      	movs	r3, #10
 800380a:	81fb      	strh	r3, [r7, #14]
				break;
 800380c:	e036      	b.n	800387c <preview_drums+0x188>
			case TM_KEYPAD_Button_5:
				y = 52;
 800380e:	2334      	movs	r3, #52	; 0x34
 8003810:	81bb      	strh	r3, [r7, #12]
				x = 52;
 8003812:	2334      	movs	r3, #52	; 0x34
 8003814:	81fb      	strh	r3, [r7, #14]
				break;
 8003816:	e031      	b.n	800387c <preview_drums+0x188>
			case TM_KEYPAD_Button_6:
				y = 52;
 8003818:	2334      	movs	r3, #52	; 0x34
 800381a:	81bb      	strh	r3, [r7, #12]
				x = 94;
 800381c:	235e      	movs	r3, #94	; 0x5e
 800381e:	81fb      	strh	r3, [r7, #14]
				break;
 8003820:	e02c      	b.n	800387c <preview_drums+0x188>
			case TM_KEYPAD_Button_7:
				y = 94;
 8003822:	235e      	movs	r3, #94	; 0x5e
 8003824:	81bb      	strh	r3, [r7, #12]
				x = 10;
 8003826:	230a      	movs	r3, #10
 8003828:	81fb      	strh	r3, [r7, #14]
				break;
 800382a:	e027      	b.n	800387c <preview_drums+0x188>
			case TM_KEYPAD_Button_8:
				y = 94;
 800382c:	235e      	movs	r3, #94	; 0x5e
 800382e:	81bb      	strh	r3, [r7, #12]
				x = 52;
 8003830:	2334      	movs	r3, #52	; 0x34
 8003832:	81fb      	strh	r3, [r7, #14]
				break;
 8003834:	e022      	b.n	800387c <preview_drums+0x188>
			case TM_KEYPAD_Button_9:
				y = 94;
 8003836:	235e      	movs	r3, #94	; 0x5e
 8003838:	81bb      	strh	r3, [r7, #12]
				x = 94;
 800383a:	235e      	movs	r3, #94	; 0x5e
 800383c:	81fb      	strh	r3, [r7, #14]
				break;
 800383e:	e01d      	b.n	800387c <preview_drums+0x188>
			case TM_KEYPAD_Button_A:
				y = 10;
 8003840:	230a      	movs	r3, #10
 8003842:	81bb      	strh	r3, [r7, #12]
				x = 136;
 8003844:	2388      	movs	r3, #136	; 0x88
 8003846:	81fb      	strh	r3, [r7, #14]
				break;
 8003848:	e018      	b.n	800387c <preview_drums+0x188>
			case TM_KEYPAD_Button_B:
				y = 52;
 800384a:	2334      	movs	r3, #52	; 0x34
 800384c:	81bb      	strh	r3, [r7, #12]
				x = 136;
 800384e:	2388      	movs	r3, #136	; 0x88
 8003850:	81fb      	strh	r3, [r7, #14]
				break;
 8003852:	e013      	b.n	800387c <preview_drums+0x188>
			case TM_KEYPAD_Button_C:
				y = 94;
 8003854:	235e      	movs	r3, #94	; 0x5e
 8003856:	81bb      	strh	r3, [r7, #12]
				x = 136;
 8003858:	2388      	movs	r3, #136	; 0x88
 800385a:	81fb      	strh	r3, [r7, #14]
				break;
 800385c:	e00e      	b.n	800387c <preview_drums+0x188>
			case TM_KEYPAD_Button_D:
				y = 136;
 800385e:	2388      	movs	r3, #136	; 0x88
 8003860:	81bb      	strh	r3, [r7, #12]
				x = 136;
 8003862:	2388      	movs	r3, #136	; 0x88
 8003864:	81fb      	strh	r3, [r7, #14]
				break;
 8003866:	e009      	b.n	800387c <preview_drums+0x188>
			case TM_KEYPAD_Button_STAR:
				y = 136;
 8003868:	2388      	movs	r3, #136	; 0x88
 800386a:	81bb      	strh	r3, [r7, #12]
				x = 10;
 800386c:	230a      	movs	r3, #10
 800386e:	81fb      	strh	r3, [r7, #14]
				break;
 8003870:	e004      	b.n	800387c <preview_drums+0x188>
			case TM_KEYPAD_Button_HASH:
				y = 136;
 8003872:	2388      	movs	r3, #136	; 0x88
 8003874:	81bb      	strh	r3, [r7, #12]
				x = 94;
 8003876:	235e      	movs	r3, #94	; 0x5e
 8003878:	81fb      	strh	r3, [r7, #14]
				break;
 800387a:	bf00      	nop

			}


			changed = FALSE;
 800387c:	2300      	movs	r3, #0
 800387e:	717b      	strb	r3, [r7, #5]
			pressed = TRUE;
 8003880:	2301      	movs	r3, #1
 8003882:	71bb      	strb	r3, [r7, #6]
			tmpkey = currentkey;
 8003884:	793b      	ldrb	r3, [r7, #4]
 8003886:	727b      	strb	r3, [r7, #9]
			for (i = 0; key_to_drum_part[currentkey][0] != drum_midi_values[i];i++)
 8003888:	2300      	movs	r3, #0
 800388a:	817b      	strh	r3, [r7, #10]
 800388c:	e002      	b.n	8003894 <preview_drums+0x1a0>
 800388e:	897b      	ldrh	r3, [r7, #10]
 8003890:	3301      	adds	r3, #1
 8003892:	817b      	strh	r3, [r7, #10]
 8003894:	793b      	ldrb	r3, [r7, #4]
 8003896:	4a4a      	ldr	r2, [pc, #296]	; (80039c0 <preview_drums+0x2cc>)
 8003898:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 800389c:	897b      	ldrh	r3, [r7, #10]
 800389e:	4949      	ldr	r1, [pc, #292]	; (80039c4 <preview_drums+0x2d0>)
 80038a0:	5ccb      	ldrb	r3, [r1, r3]
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d1f3      	bne.n	800388e <preview_drums+0x19a>
				continue;
			sprintf(lcdline,"%s ",drum_names[i]);
 80038a6:	897b      	ldrh	r3, [r7, #10]
 80038a8:	4a47      	ldr	r2, [pc, #284]	; (80039c8 <preview_drums+0x2d4>)
 80038aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038ae:	461a      	mov	r2, r3
 80038b0:	4946      	ldr	r1, [pc, #280]	; (80039cc <preview_drums+0x2d8>)
 80038b2:	4847      	ldr	r0, [pc, #284]	; (80039d0 <preview_drums+0x2dc>)
 80038b4:	f014 f812 	bl	80178dc <siprintf>
			joydrumkey = i;
 80038b8:	897b      	ldrh	r3, [r7, #10]
 80038ba:	723b      	strb	r3, [r7, #8]
			if (key_to_drum_part[currentkey][1] == drum_parts[currentkey][0])
 80038bc:	793b      	ldrb	r3, [r7, #4]
 80038be:	4a40      	ldr	r2, [pc, #256]	; (80039c0 <preview_drums+0x2cc>)
 80038c0:	005b      	lsls	r3, r3, #1
 80038c2:	4413      	add	r3, r2
 80038c4:	785a      	ldrb	r2, [r3, #1]
 80038c6:	793b      	ldrb	r3, [r7, #4]
 80038c8:	4942      	ldr	r1, [pc, #264]	; (80039d4 <preview_drums+0x2e0>)
 80038ca:	f811 3013 	ldrb.w	r3, [r1, r3, lsl #1]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d102      	bne.n	80038d8 <preview_drums+0x1e4>
				joypartkey = 0;
 80038d2:	2300      	movs	r3, #0
 80038d4:	71fb      	strb	r3, [r7, #7]
 80038d6:	e001      	b.n	80038dc <preview_drums+0x1e8>
			else
				joypartkey = 1;
 80038d8:	2301      	movs	r3, #1
 80038da:	71fb      	strb	r3, [r7, #7]
			strcat(lcdline, part_names[key_to_drum_part[currentkey][1]]);
 80038dc:	793b      	ldrb	r3, [r7, #4]
 80038de:	4a38      	ldr	r2, [pc, #224]	; (80039c0 <preview_drums+0x2cc>)
 80038e0:	005b      	lsls	r3, r3, #1
 80038e2:	4413      	add	r3, r2
 80038e4:	785b      	ldrb	r3, [r3, #1]
 80038e6:	461a      	mov	r2, r3
 80038e8:	4b3b      	ldr	r3, [pc, #236]	; (80039d8 <preview_drums+0x2e4>)
 80038ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038ee:	4619      	mov	r1, r3
 80038f0:	4837      	ldr	r0, [pc, #220]	; (80039d0 <preview_drums+0x2dc>)
 80038f2:	f014 f813 	bl	801791c <strcat>
			menuStatusLine(lcdline);
 80038f6:	4836      	ldr	r0, [pc, #216]	; (80039d0 <preview_drums+0x2dc>)
 80038f8:	f005 f8f4 	bl	8008ae4 <menuStatusLine>
			TM_ILI9341_DrawFilledRectangle(x, y, x + 40, y + 40,
 80038fc:	89fb      	ldrh	r3, [r7, #14]
 80038fe:	3328      	adds	r3, #40	; 0x28
 8003900:	b29a      	uxth	r2, r3
 8003902:	89bb      	ldrh	r3, [r7, #12]
 8003904:	3328      	adds	r3, #40	; 0x28
 8003906:	b29b      	uxth	r3, r3
 8003908:	89b9      	ldrh	r1, [r7, #12]
 800390a:	89f8      	ldrh	r0, [r7, #14]
 800390c:	f44f 4478 	mov.w	r4, #63488	; 0xf800
 8003910:	9400      	str	r4, [sp, #0]
 8003912:	f009 f9d5 	bl	800ccc0 <TM_ILI9341_DrawFilledRectangle>
 8003916:	e09f      	b.n	8003a58 <preview_drums+0x364>
					ILI9341_COLOR_RED);	// square on keyboard

		}

		else {
			if (pressed == TRUE) {
 8003918:	79bb      	ldrb	r3, [r7, #6]
 800391a:	2b01      	cmp	r3, #1
 800391c:	d10e      	bne.n	800393c <preview_drums+0x248>
				TM_ILI9341_DrawFilledRectangle(x, y, x + 40, y + 40,ILI9341_COLOR_BLUE2);
 800391e:	89fb      	ldrh	r3, [r7, #14]
 8003920:	3328      	adds	r3, #40	; 0x28
 8003922:	b29a      	uxth	r2, r3
 8003924:	89bb      	ldrh	r3, [r7, #12]
 8003926:	3328      	adds	r3, #40	; 0x28
 8003928:	b29b      	uxth	r3, r3
 800392a:	89b9      	ldrh	r1, [r7, #12]
 800392c:	89f8      	ldrh	r0, [r7, #14]
 800392e:	f240 541d 	movw	r4, #1309	; 0x51d
 8003932:	9400      	str	r4, [sp, #0]
 8003934:	f009 f9c4 	bl	800ccc0 <TM_ILI9341_DrawFilledRectangle>
				pressed = FALSE;
 8003938:	2300      	movs	r3, #0
 800393a:	71bb      	strb	r3, [r7, #6]
			}
			if (Active_Joystick() == TRUE && looper.PlayBass == FALSE) {
 800393c:	f003 fefe 	bl	800773c <Active_Joystick>
 8003940:	4603      	mov	r3, r0
 8003942:	2b01      	cmp	r3, #1
 8003944:	f040 8088 	bne.w	8003a58 <preview_drums+0x364>
 8003948:	4b1c      	ldr	r3, [pc, #112]	; (80039bc <preview_drums+0x2c8>)
 800394a:	791b      	ldrb	r3, [r3, #4]
 800394c:	b2db      	uxtb	r3, r3
 800394e:	2b00      	cmp	r3, #0
 8003950:	f040 8082 	bne.w	8003a58 <preview_drums+0x364>
				js = Read_Joystick();
 8003954:	f003 fece 	bl	80076f4 <Read_Joystick>
 8003958:	4603      	mov	r3, r0
 800395a:	461a      	mov	r2, r3
 800395c:	703a      	strb	r2, [r7, #0]
 800395e:	f3c3 2207 	ubfx	r2, r3, #8, #8
 8003962:	707a      	strb	r2, [r7, #1]
 8003964:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8003968:	70bb      	strb	r3, [r7, #2]
				if (js.xpos == MAX_JOY && joydrumkey < 15) {
 800396a:	783b      	ldrb	r3, [r7, #0]
 800396c:	2b07      	cmp	r3, #7
 800396e:	d107      	bne.n	8003980 <preview_drums+0x28c>
 8003970:	7a3b      	ldrb	r3, [r7, #8]
 8003972:	2b0e      	cmp	r3, #14
 8003974:	d804      	bhi.n	8003980 <preview_drums+0x28c>
					joydrumkey++;
 8003976:	7a3b      	ldrb	r3, [r7, #8]
 8003978:	3301      	adds	r3, #1
 800397a:	723b      	strb	r3, [r7, #8]
					changed = TRUE;
 800397c:	2301      	movs	r3, #1
 800397e:	717b      	strb	r3, [r7, #5]
				}
				if (js.xpos == MIN_JOY && joydrumkey > 0) {
 8003980:	783b      	ldrb	r3, [r7, #0]
 8003982:	2b00      	cmp	r3, #0
 8003984:	d107      	bne.n	8003996 <preview_drums+0x2a2>
 8003986:	7a3b      	ldrb	r3, [r7, #8]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d004      	beq.n	8003996 <preview_drums+0x2a2>
					joydrumkey--;
 800398c:	7a3b      	ldrb	r3, [r7, #8]
 800398e:	3b01      	subs	r3, #1
 8003990:	723b      	strb	r3, [r7, #8]
					changed = TRUE;
 8003992:	2301      	movs	r3, #1
 8003994:	717b      	strb	r3, [r7, #5]
				}

				if (js.ypos == MAX_JOY) {
 8003996:	787b      	ldrb	r3, [r7, #1]
 8003998:	2b07      	cmp	r3, #7
 800399a:	d11f      	bne.n	80039dc <preview_drums+0x2e8>
					joypartkey = 1;
 800399c:	2301      	movs	r3, #1
 800399e:	71fb      	strb	r3, [r7, #7]
					changed = TRUE;
 80039a0:	2301      	movs	r3, #1
 80039a2:	717b      	strb	r3, [r7, #5]
 80039a4:	e021      	b.n	80039ea <preview_drums+0x2f6>
 80039a6:	bf00      	nop
 80039a8:	08018c24 	.word	0x08018c24
 80039ac:	08018c38 	.word	0x08018c38
 80039b0:	08018c48 	.word	0x08018c48
 80039b4:	08018c58 	.word	0x08018c58
 80039b8:	08018c10 	.word	0x08018c10
 80039bc:	20001228 	.word	0x20001228
 80039c0:	20000170 	.word	0x20000170
 80039c4:	20000140 	.word	0x20000140
 80039c8:	200000f0 	.word	0x200000f0
 80039cc:	08018c64 	.word	0x08018c64
 80039d0:	20001270 	.word	0x20001270
 80039d4:	20000150 	.word	0x20000150
 80039d8:	20000130 	.word	0x20000130
				} else if (js.ypos == MIN_JOY) {
 80039dc:	787b      	ldrb	r3, [r7, #1]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d103      	bne.n	80039ea <preview_drums+0x2f6>
					joypartkey = 0;
 80039e2:	2300      	movs	r3, #0
 80039e4:	71fb      	strb	r3, [r7, #7]
					changed = TRUE;
 80039e6:	2301      	movs	r3, #1
 80039e8:	717b      	strb	r3, [r7, #5]
				}

				// assign new values in key_to_drum_part[]
				if (changed == TRUE) {
 80039ea:	797b      	ldrb	r3, [r7, #5]
 80039ec:	2b01      	cmp	r3, #1
 80039ee:	d133      	bne.n	8003a58 <preview_drums+0x364>
					sprintf(lcdline, "%s ", drum_names[joydrumkey]);
 80039f0:	7a3b      	ldrb	r3, [r7, #8]
 80039f2:	4a1f      	ldr	r2, [pc, #124]	; (8003a70 <preview_drums+0x37c>)
 80039f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80039f8:	461a      	mov	r2, r3
 80039fa:	491e      	ldr	r1, [pc, #120]	; (8003a74 <preview_drums+0x380>)
 80039fc:	481e      	ldr	r0, [pc, #120]	; (8003a78 <preview_drums+0x384>)
 80039fe:	f013 ff6d 	bl	80178dc <siprintf>
					strcat(lcdline,part_names[drum_parts[joydrumkey][joypartkey]]);
 8003a02:	7a3a      	ldrb	r2, [r7, #8]
 8003a04:	79fb      	ldrb	r3, [r7, #7]
 8003a06:	491d      	ldr	r1, [pc, #116]	; (8003a7c <preview_drums+0x388>)
 8003a08:	0052      	lsls	r2, r2, #1
 8003a0a:	440a      	add	r2, r1
 8003a0c:	4413      	add	r3, r2
 8003a0e:	781b      	ldrb	r3, [r3, #0]
 8003a10:	461a      	mov	r2, r3
 8003a12:	4b1b      	ldr	r3, [pc, #108]	; (8003a80 <preview_drums+0x38c>)
 8003a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003a18:	4619      	mov	r1, r3
 8003a1a:	4817      	ldr	r0, [pc, #92]	; (8003a78 <preview_drums+0x384>)
 8003a1c:	f013 ff7e 	bl	801791c <strcat>
					menuStatusLine(lcdline);
 8003a20:	4815      	ldr	r0, [pc, #84]	; (8003a78 <preview_drums+0x384>)
 8003a22:	f005 f85f 	bl	8008ae4 <menuStatusLine>
					//TM_ILI9341_DrawFilledRectangle(10, 180, 320, 240,ILI9341_COLOR_MAGENTA);	// clear text field
					//TM_ILI9341_Puts(10, 180, lcdline, &TM_Font_11x18,ILI9341_COLOR_WHITE, ILI9341_COLOR_MAGENTA);// put text
					key_to_drum_part[tmpkey][0] = drum_midi_values[joydrumkey];
 8003a26:	7a3a      	ldrb	r2, [r7, #8]
 8003a28:	7a7b      	ldrb	r3, [r7, #9]
 8003a2a:	4916      	ldr	r1, [pc, #88]	; (8003a84 <preview_drums+0x390>)
 8003a2c:	5c89      	ldrb	r1, [r1, r2]
 8003a2e:	4a16      	ldr	r2, [pc, #88]	; (8003a88 <preview_drums+0x394>)
 8003a30:	f802 1013 	strb.w	r1, [r2, r3, lsl #1]
					key_to_drum_part[tmpkey][1] = drum_parts[joydrumkey][joypartkey];
 8003a34:	7a39      	ldrb	r1, [r7, #8]
 8003a36:	79fa      	ldrb	r2, [r7, #7]
 8003a38:	7a7b      	ldrb	r3, [r7, #9]
 8003a3a:	4810      	ldr	r0, [pc, #64]	; (8003a7c <preview_drums+0x388>)
 8003a3c:	0049      	lsls	r1, r1, #1
 8003a3e:	4401      	add	r1, r0
 8003a40:	440a      	add	r2, r1
 8003a42:	7811      	ldrb	r1, [r2, #0]
 8003a44:	4a10      	ldr	r2, [pc, #64]	; (8003a88 <preview_drums+0x394>)
 8003a46:	005b      	lsls	r3, r3, #1
 8003a48:	4413      	add	r3, r2
 8003a4a:	460a      	mov	r2, r1
 8003a4c:	705a      	strb	r2, [r3, #1]
					changed = FALSE;
 8003a4e:	2300      	movs	r3, #0
 8003a50:	717b      	strb	r3, [r7, #5]
					HAL_Delay(100);
 8003a52:	2064      	movs	r0, #100	; 0x64
 8003a54:	f009 faf8 	bl	800d048 <HAL_Delay>
	while (looper.DrumState == DRUMS_PAUSED) {
 8003a58:	4b0c      	ldr	r3, [pc, #48]	; (8003a8c <preview_drums+0x398>)
 8003a5a:	7f1b      	ldrb	r3, [r3, #28]
 8003a5c:	b2db      	uxtb	r3, r3
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	f43f ae8c 	beq.w	800377c <preview_drums+0x88>
		}

	}


}
 8003a64:	bf00      	nop
 8003a66:	bf00      	nop
 8003a68:	3714      	adds	r7, #20
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	bd90      	pop	{r4, r7, pc}
 8003a6e:	bf00      	nop
 8003a70:	200000f0 	.word	0x200000f0
 8003a74:	08018c64 	.word	0x08018c64
 8003a78:	20001270 	.word	0x20001270
 8003a7c:	20000150 	.word	0x20000150
 8003a80:	20000130 	.word	0x20000130
 8003a84:	20000140 	.word	0x20000140
 8003a88:	20000170 	.word	0x20000170
 8003a8c:	20001228 	.word	0x20001228

08003a90 <play_drums>:

void play_drums() {
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b082      	sub	sp, #8
 8003a94:	af00      	add	r7, sp, #0
	looper.Metronome = FALSE;
 8003a96:	4b20      	ldr	r3, [pc, #128]	; (8003b18 <play_drums+0x88>)
 8003a98:	2200      	movs	r2, #0
 8003a9a:	715a      	strb	r2, [r3, #5]
	uint8_t beat_counter = 0;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	71fb      	strb	r3, [r7, #7]
	HAL_TIM_Base_Start_IT(&htim2);
 8003aa0:	481e      	ldr	r0, [pc, #120]	; (8003b1c <play_drums+0x8c>)
 8003aa2:	f00e fb61 	bl	8012168 <HAL_TIM_Base_Start_IT>
	resetDrums();
 8003aa6:	f000 f9ad 	bl	8003e04 <resetDrums>
	pat1.beattime = beattime;
 8003aaa:	4b1d      	ldr	r3, [pc, #116]	; (8003b20 <play_drums+0x90>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	4a1d      	ldr	r2, [pc, #116]	; (8003b24 <play_drums+0x94>)
 8003ab0:	6093      	str	r3, [r2, #8]
	setPatternTime(&pat1, &tim1);
 8003ab2:	491d      	ldr	r1, [pc, #116]	; (8003b28 <play_drums+0x98>)
 8003ab4:	481b      	ldr	r0, [pc, #108]	; (8003b24 <play_drums+0x94>)
 8003ab6:	f7ff fced 	bl	8003494 <setPatternTime>
	looper.DrumState = DRUMS_STARTED;
 8003aba:	4b17      	ldr	r3, [pc, #92]	; (8003b18 <play_drums+0x88>)
 8003abc:	2201      	movs	r2, #1
 8003abe:	771a      	strb	r2, [r3, #28]
	while(TRUE) {
		while(midiDrumClock < tim1.barDuration){
 8003ac0:	e01a      	b.n	8003af8 <play_drums+0x68>
			 if(every_beat == TRUE){
 8003ac2:	4b1a      	ldr	r3, [pc, #104]	; (8003b2c <play_drums+0x9c>)
 8003ac4:	781b      	ldrb	r3, [r3, #0]
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	2b01      	cmp	r3, #1
 8003aca:	d110      	bne.n	8003aee <play_drums+0x5e>
				  sprintf(lcdline,"Beat: %2u",(unsigned int)++beat_counter);
 8003acc:	79fb      	ldrb	r3, [r7, #7]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	71fb      	strb	r3, [r7, #7]
 8003ad2:	79fb      	ldrb	r3, [r7, #7]
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	4916      	ldr	r1, [pc, #88]	; (8003b30 <play_drums+0xa0>)
 8003ad8:	4816      	ldr	r0, [pc, #88]	; (8003b34 <play_drums+0xa4>)
 8003ada:	f013 feff 	bl	80178dc <siprintf>
				  TM_HD44780_Puts(0,1,lcdline);
 8003ade:	4a15      	ldr	r2, [pc, #84]	; (8003b34 <play_drums+0xa4>)
 8003ae0:	2101      	movs	r1, #1
 8003ae2:	2000      	movs	r0, #0
 8003ae4:	f008 fb82 	bl	800c1ec <TM_HD44780_Puts>
				  every_beat = FALSE;
 8003ae8:	4b10      	ldr	r3, [pc, #64]	; (8003b2c <play_drums+0x9c>)
 8003aea:	2200      	movs	r2, #0
 8003aec:	701a      	strb	r2, [r3, #0]
			 }
			 if(looper.DrumState == DRUMS_STOPPED)
 8003aee:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <play_drums+0x88>)
 8003af0:	7f1b      	ldrb	r3, [r3, #28]
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d008      	beq.n	8003b0a <play_drums+0x7a>
		while(midiDrumClock < tim1.barDuration){
 8003af8:	4b0b      	ldr	r3, [pc, #44]	; (8003b28 <play_drums+0x98>)
 8003afa:	685a      	ldr	r2, [r3, #4]
 8003afc:	4b0e      	ldr	r3, [pc, #56]	; (8003b38 <play_drums+0xa8>)
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d8de      	bhi.n	8003ac2 <play_drums+0x32>
			 	goto end_play_drums;
		}

		beat_counter = 0;
 8003b04:	2300      	movs	r3, #0
 8003b06:	71fb      	strb	r3, [r7, #7]
		while(midiDrumClock < tim1.barDuration){
 8003b08:	e7f6      	b.n	8003af8 <play_drums+0x68>
			 	goto end_play_drums;
 8003b0a:	bf00      	nop

	}

	end_play_drums:
	stopDrums();
 8003b0c:	f7ff fcb0 	bl	8003470 <stopDrums>
}
 8003b10:	bf00      	nop
 8003b12:	3708      	adds	r7, #8
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bd80      	pop	{r7, pc}
 8003b18:	20001228 	.word	0x20001228
 8003b1c:	20002284 	.word	0x20002284
 8003b20:	200000e4 	.word	0x200000e4
 8003b24:	2000117c 	.word	0x2000117c
 8003b28:	2000119c 	.word	0x2000119c
 8003b2c:	20000562 	.word	0x20000562
 8003b30:	08018c68 	.word	0x08018c68
 8003b34:	20001270 	.word	0x20001270
 8003b38:	2000055c 	.word	0x2000055c

08003b3c <wait_metronome>:



static void wait_metronome(){
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	af00      	add	r7, sp, #0
	while(looper.DrumState != DRUMS_STARTED){
 8003b40:	e00f      	b.n	8003b62 <wait_metronome+0x26>
		  if(metronomeUpdated == TRUE){
 8003b42:	4b0c      	ldr	r3, [pc, #48]	; (8003b74 <wait_metronome+0x38>)
 8003b44:	781b      	ldrb	r3, [r3, #0]
 8003b46:	2b01      	cmp	r3, #1
 8003b48:	d106      	bne.n	8003b58 <wait_metronome+0x1c>
			  updatePatternTime(&pat1,&tim1);
 8003b4a:	490b      	ldr	r1, [pc, #44]	; (8003b78 <wait_metronome+0x3c>)
 8003b4c:	480b      	ldr	r0, [pc, #44]	; (8003b7c <wait_metronome+0x40>)
 8003b4e:	f7ff fcd5 	bl	80034fc <updatePatternTime>
			  metronomeUpdated = FALSE;
 8003b52:	4b08      	ldr	r3, [pc, #32]	; (8003b74 <wait_metronome+0x38>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	701a      	strb	r2, [r3, #0]
		  }
		  if(looper.DrumState == DRUMS_STOPPED)	// blue button pressed
 8003b58:	4b09      	ldr	r3, [pc, #36]	; (8003b80 <wait_metronome+0x44>)
 8003b5a:	7f1b      	ldrb	r3, [r3, #28]
 8003b5c:	b2db      	uxtb	r3, r3
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d005      	beq.n	8003b6e <wait_metronome+0x32>
	while(looper.DrumState != DRUMS_STARTED){
 8003b62:	4b07      	ldr	r3, [pc, #28]	; (8003b80 <wait_metronome+0x44>)
 8003b64:	7f1b      	ldrb	r3, [r3, #28]
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b01      	cmp	r3, #1
 8003b6a:	d1ea      	bne.n	8003b42 <wait_metronome+0x6>
			  break;
	}
}
 8003b6c:	e000      	b.n	8003b70 <wait_metronome+0x34>
			  break;
 8003b6e:	bf00      	nop
}
 8003b70:	bf00      	nop
 8003b72:	bd80      	pop	{r7, pc}
 8003b74:	20000550 	.word	0x20000550
 8003b78:	2000119c 	.word	0x2000119c
 8003b7c:	2000117c 	.word	0x2000117c
 8003b80:	20001228 	.word	0x20001228

08003b84 <fit_events>:

static void fit_events(){
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
	uint32_t barMillis;
	uint8_t drum,part;
	 while(drumBuffWritePtr[drumBufferIndex] != No_Event){
 8003b8a:	e074      	b.n	8003c76 <fit_events+0xf2>
		for(barMillis = 0; barMillis < tim1.barDuration; barMillis += tim1.subBeatDuration){
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	607b      	str	r3, [r7, #4]
 8003b90:	e067      	b.n	8003c62 <fit_events+0xde>
		  if(drumEventTimes[drumBufferIndex] >= barMillis && drumEventTimes[drumBufferIndex] < (barMillis + tim1.subBeatDuration)){
 8003b92:	4b40      	ldr	r3, [pc, #256]	; (8003c94 <fit_events+0x110>)
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	4a40      	ldr	r2, [pc, #256]	; (8003c98 <fit_events+0x114>)
 8003b98:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	429a      	cmp	r2, r3
 8003ba0:	d85a      	bhi.n	8003c58 <fit_events+0xd4>
 8003ba2:	4b3c      	ldr	r3, [pc, #240]	; (8003c94 <fit_events+0x110>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a3c      	ldr	r2, [pc, #240]	; (8003c98 <fit_events+0x114>)
 8003ba8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003bac:	4b3b      	ldr	r3, [pc, #236]	; (8003c9c <fit_events+0x118>)
 8003bae:	68d9      	ldr	r1, [r3, #12]
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	440b      	add	r3, r1
 8003bb4:	429a      	cmp	r2, r3
 8003bb6:	d24f      	bcs.n	8003c58 <fit_events+0xd4>
			  drumBeatIndex = barMillis / tim1.subBeatDuration;
 8003bb8:	4b38      	ldr	r3, [pc, #224]	; (8003c9c <fit_events+0x118>)
 8003bba:	68db      	ldr	r3, [r3, #12]
 8003bbc:	687a      	ldr	r2, [r7, #4]
 8003bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bc2:	4a37      	ldr	r2, [pc, #220]	; (8003ca0 <fit_events+0x11c>)
 8003bc4:	6013      	str	r3, [r2, #0]
			  if(looper.PlayBass == FALSE){
 8003bc6:	4b37      	ldr	r3, [pc, #220]	; (8003ca4 <fit_events+0x120>)
 8003bc8:	791b      	ldrb	r3, [r3, #4]
 8003bca:	b2db      	uxtb	r3, r3
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d116      	bne.n	8003bfe <fit_events+0x7a>
				  drum = key_to_drum_part[drumBuffWritePtr[drumBufferIndex]][0];
 8003bd0:	4b35      	ldr	r3, [pc, #212]	; (8003ca8 <fit_events+0x124>)
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	4b2f      	ldr	r3, [pc, #188]	; (8003c94 <fit_events+0x110>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4413      	add	r3, r2
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	461a      	mov	r2, r3
 8003bde:	4b33      	ldr	r3, [pc, #204]	; (8003cac <fit_events+0x128>)
 8003be0:	f813 3012 	ldrb.w	r3, [r3, r2, lsl #1]
 8003be4:	70fb      	strb	r3, [r7, #3]
				  part = key_to_drum_part[drumBuffWritePtr[drumBufferIndex]][1];
 8003be6:	4b30      	ldr	r3, [pc, #192]	; (8003ca8 <fit_events+0x124>)
 8003be8:	681a      	ldr	r2, [r3, #0]
 8003bea:	4b2a      	ldr	r3, [pc, #168]	; (8003c94 <fit_events+0x110>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4413      	add	r3, r2
 8003bf0:	781b      	ldrb	r3, [r3, #0]
 8003bf2:	4a2e      	ldr	r2, [pc, #184]	; (8003cac <fit_events+0x128>)
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	4413      	add	r3, r2
 8003bf8:	785b      	ldrb	r3, [r3, #1]
 8003bfa:	70bb      	strb	r3, [r7, #2]
 8003bfc:	e006      	b.n	8003c0c <fit_events+0x88>
			  }
			  else{
				  drum = drumBuffB[drumBufferIndex];
 8003bfe:	4b25      	ldr	r3, [pc, #148]	; (8003c94 <fit_events+0x110>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a2b      	ldr	r2, [pc, #172]	; (8003cb0 <fit_events+0x12c>)
 8003c04:	5cd3      	ldrb	r3, [r2, r3]
 8003c06:	70fb      	strb	r3, [r7, #3]
				  part = BASS;
 8003c08:	2304      	movs	r3, #4
 8003c0a:	70bb      	strb	r3, [r7, #2]
			  }
			  if(drumEventTimes[drumBufferIndex] < (barMillis + tim1.subBeatDuration / 2))
 8003c0c:	4b21      	ldr	r3, [pc, #132]	; (8003c94 <fit_events+0x110>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	4a21      	ldr	r2, [pc, #132]	; (8003c98 <fit_events+0x114>)
 8003c12:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003c16:	4b21      	ldr	r3, [pc, #132]	; (8003c9c <fit_events+0x118>)
 8003c18:	68db      	ldr	r3, [r3, #12]
 8003c1a:	0859      	lsrs	r1, r3, #1
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	440b      	add	r3, r1
 8003c20:	429a      	cmp	r2, r3
 8003c22:	d20c      	bcs.n	8003c3e <fit_events+0xba>
				  drumBuffReadPtr[drumBeatIndex * 5 + part] = drum;
 8003c24:	4b23      	ldr	r3, [pc, #140]	; (8003cb4 <fit_events+0x130>)
 8003c26:	6819      	ldr	r1, [r3, #0]
 8003c28:	4b1d      	ldr	r3, [pc, #116]	; (8003ca0 <fit_events+0x11c>)
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	4613      	mov	r3, r2
 8003c2e:	009b      	lsls	r3, r3, #2
 8003c30:	441a      	add	r2, r3
 8003c32:	78bb      	ldrb	r3, [r7, #2]
 8003c34:	4413      	add	r3, r2
 8003c36:	440b      	add	r3, r1
 8003c38:	78fa      	ldrb	r2, [r7, #3]
 8003c3a:	701a      	strb	r2, [r3, #0]
 8003c3c:	e00c      	b.n	8003c58 <fit_events+0xd4>
			  else
				  drumBuffReadPtr[drumBeatIndex * 5 + 5 + part] = drum;
 8003c3e:	4b1d      	ldr	r3, [pc, #116]	; (8003cb4 <fit_events+0x130>)
 8003c40:	6819      	ldr	r1, [r3, #0]
 8003c42:	4b17      	ldr	r3, [pc, #92]	; (8003ca0 <fit_events+0x11c>)
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	1c5a      	adds	r2, r3, #1
 8003c48:	4613      	mov	r3, r2
 8003c4a:	009b      	lsls	r3, r3, #2
 8003c4c:	441a      	add	r2, r3
 8003c4e:	78bb      	ldrb	r3, [r7, #2]
 8003c50:	4413      	add	r3, r2
 8003c52:	440b      	add	r3, r1
 8003c54:	78fa      	ldrb	r2, [r7, #3]
 8003c56:	701a      	strb	r2, [r3, #0]
		for(barMillis = 0; barMillis < tim1.barDuration; barMillis += tim1.subBeatDuration){
 8003c58:	4b10      	ldr	r3, [pc, #64]	; (8003c9c <fit_events+0x118>)
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	4413      	add	r3, r2
 8003c60:	607b      	str	r3, [r7, #4]
 8003c62:	4b0e      	ldr	r3, [pc, #56]	; (8003c9c <fit_events+0x118>)
 8003c64:	685b      	ldr	r3, [r3, #4]
 8003c66:	687a      	ldr	r2, [r7, #4]
 8003c68:	429a      	cmp	r2, r3
 8003c6a:	d392      	bcc.n	8003b92 <fit_events+0xe>

		  }
		}

		drumBufferIndex++;
 8003c6c:	4b09      	ldr	r3, [pc, #36]	; (8003c94 <fit_events+0x110>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	3301      	adds	r3, #1
 8003c72:	4a08      	ldr	r2, [pc, #32]	; (8003c94 <fit_events+0x110>)
 8003c74:	6013      	str	r3, [r2, #0]
	 while(drumBuffWritePtr[drumBufferIndex] != No_Event){
 8003c76:	4b0c      	ldr	r3, [pc, #48]	; (8003ca8 <fit_events+0x124>)
 8003c78:	681a      	ldr	r2, [r3, #0]
 8003c7a:	4b06      	ldr	r3, [pc, #24]	; (8003c94 <fit_events+0x110>)
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4413      	add	r3, r2
 8003c80:	781b      	ldrb	r3, [r3, #0]
 8003c82:	2bff      	cmp	r3, #255	; 0xff
 8003c84:	d182      	bne.n	8003b8c <fit_events+0x8>
	 }
}
 8003c86:	bf00      	nop
 8003c88:	bf00      	nop
 8003c8a:	370c      	adds	r7, #12
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c92:	4770      	bx	lr
 8003c94:	20000558 	.word	0x20000558
 8003c98:	200010b4 	.word	0x200010b4
 8003c9c:	2000119c 	.word	0x2000119c
 8003ca0:	20000554 	.word	0x20000554
 8003ca4:	20001228 	.word	0x20001228
 8003ca8:	20001178 	.word	0x20001178
 8003cac:	20000170 	.word	0x20000170
 8003cb0:	20000fc4 	.word	0x20000fc4
 8003cb4:	20001174 	.word	0x20001174

08003cb8 <record_drums>:


void record_drums(){
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b082      	sub	sp, #8
 8003cbc:	af00      	add	r7, sp, #0
		uint8_t beat_counter = 0;
 8003cbe:	2300      	movs	r3, #0
 8003cc0:	71fb      	strb	r3, [r7, #7]
		pat1.beattime = beattime;
 8003cc2:	4b3d      	ldr	r3, [pc, #244]	; (8003db8 <record_drums+0x100>)
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	4a3d      	ldr	r2, [pc, #244]	; (8003dbc <record_drums+0x104>)
 8003cc8:	6093      	str	r3, [r2, #8]
		pat1.division = division;
 8003cca:	4b3d      	ldr	r3, [pc, #244]	; (8003dc0 <record_drums+0x108>)
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a3b      	ldr	r2, [pc, #236]	; (8003dbc <record_drums+0x104>)
 8003cd0:	6053      	str	r3, [r2, #4]
		pat1.beats = beats;
 8003cd2:	4b3c      	ldr	r3, [pc, #240]	; (8003dc4 <record_drums+0x10c>)
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	4a39      	ldr	r2, [pc, #228]	; (8003dbc <record_drums+0x104>)
 8003cd8:	6013      	str	r3, [r2, #0]
		drumBuffReadPtr = drumBuffA;
 8003cda:	4b3b      	ldr	r3, [pc, #236]	; (8003dc8 <record_drums+0x110>)
 8003cdc:	4a3b      	ldr	r2, [pc, #236]	; (8003dcc <record_drums+0x114>)
 8003cde:	601a      	str	r2, [r3, #0]
		drumBuffWritePtr = drumBuffB;
 8003ce0:	4b3b      	ldr	r3, [pc, #236]	; (8003dd0 <record_drums+0x118>)
 8003ce2:	4a3c      	ldr	r2, [pc, #240]	; (8003dd4 <record_drums+0x11c>)
 8003ce4:	601a      	str	r2, [r3, #0]
		timptr = &tim1;
 8003ce6:	4b3c      	ldr	r3, [pc, #240]	; (8003dd8 <record_drums+0x120>)
 8003ce8:	4a3c      	ldr	r2, [pc, #240]	; (8003ddc <record_drums+0x124>)
 8003cea:	601a      	str	r2, [r3, #0]
		patptr = &pat1;
 8003cec:	4b3c      	ldr	r3, [pc, #240]	; (8003de0 <record_drums+0x128>)
 8003cee:	4a33      	ldr	r2, [pc, #204]	; (8003dbc <record_drums+0x104>)
 8003cf0:	601a      	str	r2, [r3, #0]
		looper.Metronome = TRUE;
 8003cf2:	4b3c      	ldr	r3, [pc, #240]	; (8003de4 <record_drums+0x12c>)
 8003cf4:	2201      	movs	r2, #1
 8003cf6:	715a      	strb	r2, [r3, #5]
		setPatternTime(&pat1,&tim1);
 8003cf8:	4938      	ldr	r1, [pc, #224]	; (8003ddc <record_drums+0x124>)
 8003cfa:	4830      	ldr	r0, [pc, #192]	; (8003dbc <record_drums+0x104>)
 8003cfc:	f7ff fbca 	bl	8003494 <setPatternTime>
		resetDrums();
 8003d00:	f000 f880 	bl	8003e04 <resetDrums>
		HAL_TIM_Base_Start_IT(&htim2);
 8003d04:	4838      	ldr	r0, [pc, #224]	; (8003de8 <record_drums+0x130>)
 8003d06:	f00e fa2f 	bl	8012168 <HAL_TIM_Base_Start_IT>

		while(TRUE){
			// Metronome is ticking. Pressing drum keyboard starts recording and sets clocks to 0
			wait_metronome();
 8003d0a:	f7ff ff17 	bl	8003b3c <wait_metronome>
			// recording loop and playback: drum events added to buffer in readDrumKeyboard(), called in midiDrumHandler()
			while(midiDrumClock < tim1.barDuration){
 8003d0e:	e01b      	b.n	8003d48 <record_drums+0x90>
			  if(every_beat == TRUE){
 8003d10:	4b36      	ldr	r3, [pc, #216]	; (8003dec <record_drums+0x134>)
 8003d12:	781b      	ldrb	r3, [r3, #0]
 8003d14:	b2db      	uxtb	r3, r3
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d110      	bne.n	8003d3c <record_drums+0x84>
				  sprintf(lcdline,"Beat: %2u",(unsigned int)++beat_counter);
 8003d1a:	79fb      	ldrb	r3, [r7, #7]
 8003d1c:	3301      	adds	r3, #1
 8003d1e:	71fb      	strb	r3, [r7, #7]
 8003d20:	79fb      	ldrb	r3, [r7, #7]
 8003d22:	461a      	mov	r2, r3
 8003d24:	4932      	ldr	r1, [pc, #200]	; (8003df0 <record_drums+0x138>)
 8003d26:	4833      	ldr	r0, [pc, #204]	; (8003df4 <record_drums+0x13c>)
 8003d28:	f013 fdd8 	bl	80178dc <siprintf>
				  TM_HD44780_Puts(0,1,lcdline);
 8003d2c:	4a31      	ldr	r2, [pc, #196]	; (8003df4 <record_drums+0x13c>)
 8003d2e:	2101      	movs	r1, #1
 8003d30:	2000      	movs	r0, #0
 8003d32:	f008 fa5b 	bl	800c1ec <TM_HD44780_Puts>
				  every_beat = FALSE;
 8003d36:	4b2d      	ldr	r3, [pc, #180]	; (8003dec <record_drums+0x134>)
 8003d38:	2200      	movs	r2, #0
 8003d3a:	701a      	strb	r2, [r3, #0]
			  }

			  if(looper.DrumState == DRUMS_STOPPED)	// blue button pressed
 8003d3c:	4b29      	ldr	r3, [pc, #164]	; (8003de4 <record_drums+0x12c>)
 8003d3e:	7f1b      	ldrb	r3, [r3, #28]
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d022      	beq.n	8003d8c <record_drums+0xd4>
				  goto end_drum_record;
			  continue;
 8003d46:	bf00      	nop
			while(midiDrumClock < tim1.barDuration){
 8003d48:	4b24      	ldr	r3, [pc, #144]	; (8003ddc <record_drums+0x124>)
 8003d4a:	685a      	ldr	r2, [r3, #4]
 8003d4c:	4b2a      	ldr	r3, [pc, #168]	; (8003df8 <record_drums+0x140>)
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d8dd      	bhi.n	8003d10 <record_drums+0x58>
		  }

		  drumBuffWritePtr[drumBufferIndex] = No_Event;
 8003d54:	4b1e      	ldr	r3, [pc, #120]	; (8003dd0 <record_drums+0x118>)
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	4b28      	ldr	r3, [pc, #160]	; (8003dfc <record_drums+0x144>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4413      	add	r3, r2
 8003d5e:	22ff      	movs	r2, #255	; 0xff
 8003d60:	701a      	strb	r2, [r3, #0]
		  looper.DrumState = DRUMS_STOPPED;
 8003d62:	4b20      	ldr	r3, [pc, #128]	; (8003de4 <record_drums+0x12c>)
 8003d64:	2200      	movs	r2, #0
 8003d66:	771a      	strb	r2, [r3, #28]
		  beat_counter = 0;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	71fb      	strb	r3, [r7, #7]
		  resetDrums();
 8003d6c:	f000 f84a 	bl	8003e04 <resetDrums>
		  BSP_LED_Off(LED_RED);
 8003d70:	2001      	movs	r0, #1
 8003d72:	f007 fc31 	bl	800b5d8 <BSP_LED_Off>
		  BSP_LED_On(LED_GREEN);
 8003d76:	2000      	movs	r0, #0
 8003d78:	f007 fc14 	bl	800b5a4 <BSP_LED_On>
		  // fit events into playing buffer
		  fit_events();
 8003d7c:	f7ff ff02 	bl	8003b84 <fit_events>
		  resetDrums();
 8003d80:	f000 f840 	bl	8003e04 <resetDrums>
		  looper.DrumState = DRUMS_STARTED;
 8003d84:	4b17      	ldr	r3, [pc, #92]	; (8003de4 <record_drums+0x12c>)
 8003d86:	2201      	movs	r2, #1
 8003d88:	771a      	strb	r2, [r3, #28]
			wait_metronome();
 8003d8a:	e7be      	b.n	8003d0a <record_drums+0x52>
				  goto end_drum_record;
 8003d8c:	bf00      	nop

	  }

	  end_drum_record:
	  stopDrums();
 8003d8e:	f7ff fb6f 	bl	8003470 <stopDrums>
	  beattime += looper.timeIncrement;
 8003d92:	4b14      	ldr	r3, [pc, #80]	; (8003de4 <record_drums+0x12c>)
 8003d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d96:	461a      	mov	r2, r3
 8003d98:	4b07      	ldr	r3, [pc, #28]	; (8003db8 <record_drums+0x100>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	4413      	add	r3, r2
 8003d9e:	4a06      	ldr	r2, [pc, #24]	; (8003db8 <record_drums+0x100>)
 8003da0:	6013      	str	r3, [r2, #0]
	  looper.timeIncrement = 0;
 8003da2:	4b10      	ldr	r3, [pc, #64]	; (8003de4 <record_drums+0x12c>)
 8003da4:	2200      	movs	r2, #0
 8003da6:	641a      	str	r2, [r3, #64]	; 0x40
	  Skip_Read_Button = TRUE;
 8003da8:	4b15      	ldr	r3, [pc, #84]	; (8003e00 <record_drums+0x148>)
 8003daa:	2201      	movs	r2, #1
 8003dac:	701a      	strb	r2, [r3, #0]
	  return;
 8003dae:	bf00      	nop
}
 8003db0:	3708      	adds	r7, #8
 8003db2:	46bd      	mov	sp, r7
 8003db4:	bd80      	pop	{r7, pc}
 8003db6:	bf00      	nop
 8003db8:	200000e4 	.word	0x200000e4
 8003dbc:	2000117c 	.word	0x2000117c
 8003dc0:	200000e8 	.word	0x200000e8
 8003dc4:	200000ec 	.word	0x200000ec
 8003dc8:	20001174 	.word	0x20001174
 8003dcc:	20000ed4 	.word	0x20000ed4
 8003dd0:	20001178 	.word	0x20001178
 8003dd4:	20000fc4 	.word	0x20000fc4
 8003dd8:	200011bc 	.word	0x200011bc
 8003ddc:	2000119c 	.word	0x2000119c
 8003de0:	200011c0 	.word	0x200011c0
 8003de4:	20001228 	.word	0x20001228
 8003de8:	20002284 	.word	0x20002284
 8003dec:	20000562 	.word	0x20000562
 8003df0:	08018c68 	.word	0x08018c68
 8003df4:	20001270 	.word	0x20001270
 8003df8:	2000055c 	.word	0x2000055c
 8003dfc:	20000558 	.word	0x20000558
 8003e00:	20001c47 	.word	0x20001c47

08003e04 <resetDrums>:

void resetDrums(){
 8003e04:	b480      	push	{r7}
 8003e06:	af00      	add	r7, sp, #0
	midiDrumClock = 0;
 8003e08:	4b06      	ldr	r3, [pc, #24]	; (8003e24 <resetDrums+0x20>)
 8003e0a:	2200      	movs	r2, #0
 8003e0c:	601a      	str	r2, [r3, #0]
	drumBeatIndex = 0;
 8003e0e:	4b06      	ldr	r3, [pc, #24]	; (8003e28 <resetDrums+0x24>)
 8003e10:	2200      	movs	r2, #0
 8003e12:	601a      	str	r2, [r3, #0]
	drumBufferIndex = 0;
 8003e14:	4b05      	ldr	r3, [pc, #20]	; (8003e2c <resetDrums+0x28>)
 8003e16:	2200      	movs	r2, #0
 8003e18:	601a      	str	r2, [r3, #0]
}
 8003e1a:	bf00      	nop
 8003e1c:	46bd      	mov	sp, r7
 8003e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e22:	4770      	bx	lr
 8003e24:	2000055c 	.word	0x2000055c
 8003e28:	20000554 	.word	0x20000554
 8003e2c:	20000558 	.word	0x20000558

08003e30 <mem_cpy>:
/* String functions                                                      */
/*-----------------------------------------------------------------------*/

/* Copy memory to memory */
static
void mem_cpy (void* dst, const void* src, UINT cnt) {
 8003e30:	b480      	push	{r7}
 8003e32:	b087      	sub	sp, #28
 8003e34:	af00      	add	r7, sp, #0
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	617b      	str	r3, [r7, #20]
	const BYTE *s = (const BYTE*)src;
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	613b      	str	r3, [r7, #16]
		*(int*)d = *(int*)s;
		d += sizeof (int); s += sizeof (int);
		cnt -= sizeof (int);
	}
#endif
	while (cnt--)
 8003e44:	e007      	b.n	8003e56 <mem_cpy+0x26>
		*d++ = *s++;
 8003e46:	693a      	ldr	r2, [r7, #16]
 8003e48:	1c53      	adds	r3, r2, #1
 8003e4a:	613b      	str	r3, [r7, #16]
 8003e4c:	697b      	ldr	r3, [r7, #20]
 8003e4e:	1c59      	adds	r1, r3, #1
 8003e50:	6179      	str	r1, [r7, #20]
 8003e52:	7812      	ldrb	r2, [r2, #0]
 8003e54:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	1e5a      	subs	r2, r3, #1
 8003e5a:	607a      	str	r2, [r7, #4]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d1f2      	bne.n	8003e46 <mem_cpy+0x16>
}
 8003e60:	bf00      	nop
 8003e62:	bf00      	nop
 8003e64:	371c      	adds	r7, #28
 8003e66:	46bd      	mov	sp, r7
 8003e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6c:	4770      	bx	lr

08003e6e <mem_set>:

/* Fill memory */
static
void mem_set (void* dst, int val, UINT cnt) {
 8003e6e:	b480      	push	{r7}
 8003e70:	b087      	sub	sp, #28
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	607a      	str	r2, [r7, #4]
	BYTE *d = (BYTE*)dst;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	617b      	str	r3, [r7, #20]

	while (cnt--)
 8003e7e:	e005      	b.n	8003e8c <mem_set+0x1e>
		*d++ = (BYTE)val;
 8003e80:	697b      	ldr	r3, [r7, #20]
 8003e82:	1c5a      	adds	r2, r3, #1
 8003e84:	617a      	str	r2, [r7, #20]
 8003e86:	68ba      	ldr	r2, [r7, #8]
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	701a      	strb	r2, [r3, #0]
	while (cnt--)
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	1e5a      	subs	r2, r3, #1
 8003e90:	607a      	str	r2, [r7, #4]
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d1f4      	bne.n	8003e80 <mem_set+0x12>
}
 8003e96:	bf00      	nop
 8003e98:	bf00      	nop
 8003e9a:	371c      	adds	r7, #28
 8003e9c:	46bd      	mov	sp, r7
 8003e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea2:	4770      	bx	lr

08003ea4 <mem_cmp>:

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, UINT cnt) {
 8003ea4:	b480      	push	{r7}
 8003ea6:	b089      	sub	sp, #36	; 0x24
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	60f8      	str	r0, [r7, #12]
 8003eac:	60b9      	str	r1, [r7, #8]
 8003eae:	607a      	str	r2, [r7, #4]
	const BYTE *d = (const BYTE *)dst, *s = (const BYTE *)src;
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	61fb      	str	r3, [r7, #28]
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	61bb      	str	r3, [r7, #24]
	int r = 0;
 8003eb8:	2300      	movs	r3, #0
 8003eba:	617b      	str	r3, [r7, #20]

	while (cnt-- && (r = *d++ - *s++) == 0) ;
 8003ebc:	bf00      	nop
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	1e5a      	subs	r2, r3, #1
 8003ec2:	607a      	str	r2, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d00d      	beq.n	8003ee4 <mem_cmp+0x40>
 8003ec8:	69fb      	ldr	r3, [r7, #28]
 8003eca:	1c5a      	adds	r2, r3, #1
 8003ecc:	61fa      	str	r2, [r7, #28]
 8003ece:	781b      	ldrb	r3, [r3, #0]
 8003ed0:	4619      	mov	r1, r3
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	1c5a      	adds	r2, r3, #1
 8003ed6:	61ba      	str	r2, [r7, #24]
 8003ed8:	781b      	ldrb	r3, [r3, #0]
 8003eda:	1acb      	subs	r3, r1, r3
 8003edc:	617b      	str	r3, [r7, #20]
 8003ede:	697b      	ldr	r3, [r7, #20]
 8003ee0:	2b00      	cmp	r3, #0
 8003ee2:	d0ec      	beq.n	8003ebe <mem_cmp+0x1a>
	return r;
 8003ee4:	697b      	ldr	r3, [r7, #20]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3724      	adds	r7, #36	; 0x24
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <chk_chr>:

/* Check if chr is contained in the string */
static
int chk_chr (const char* str, int chr) {
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
 8003efa:	6039      	str	r1, [r7, #0]
	while (*str && *str != chr) str++;
 8003efc:	e002      	b.n	8003f04 <chk_chr+0x12>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	3301      	adds	r3, #1
 8003f02:	607b      	str	r3, [r7, #4]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	781b      	ldrb	r3, [r3, #0]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d005      	beq.n	8003f18 <chk_chr+0x26>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	781b      	ldrb	r3, [r3, #0]
 8003f10:	461a      	mov	r2, r3
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d1f2      	bne.n	8003efe <chk_chr+0xc>
	return *str;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	781b      	ldrb	r3, [r3, #0]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f26:	4770      	bx	lr

08003f28 <sync_window>:
#if !_FS_READONLY
static
FRESULT sync_window (
	FATFS* fs		/* File system object */
)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
 8003f2e:	6078      	str	r0, [r7, #4]
	DWORD wsect;
	UINT nf;
	FRESULT res = FR_OK;
 8003f30:	2300      	movs	r3, #0
 8003f32:	73fb      	strb	r3, [r7, #15]


	if (fs->wflag) {	/* Write back the sector if it is dirty */
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	791b      	ldrb	r3, [r3, #4]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d034      	beq.n	8003fa6 <sync_window+0x7e>
		wsect = fs->winsect;	/* Current sector number */
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f40:	617b      	str	r3, [r7, #20]
		if (disk_write(fs->drv, fs->win, wsect, 1) != RES_OK) {
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	7858      	ldrb	r0, [r3, #1]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	f7fe fccc 	bl	80028ec <disk_write>
 8003f54:	4603      	mov	r3, r0
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d002      	beq.n	8003f60 <sync_window+0x38>
			res = FR_DISK_ERR;
 8003f5a:	2301      	movs	r3, #1
 8003f5c:	73fb      	strb	r3, [r7, #15]
 8003f5e:	e022      	b.n	8003fa6 <sync_window+0x7e>
		} else {
			fs->wflag = 0;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	711a      	strb	r2, [r3, #4]
			if (wsect - fs->fatbase < fs->fsize) {		/* Is it in the FAT area? */
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	1ad2      	subs	r2, r2, r3
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	69db      	ldr	r3, [r3, #28]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d217      	bcs.n	8003fa6 <sync_window+0x7e>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	78db      	ldrb	r3, [r3, #3]
 8003f7a:	613b      	str	r3, [r7, #16]
 8003f7c:	e010      	b.n	8003fa0 <sync_window+0x78>
					wsect += fs->fsize;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	69db      	ldr	r3, [r3, #28]
 8003f82:	697a      	ldr	r2, [r7, #20]
 8003f84:	4413      	add	r3, r2
 8003f86:	617b      	str	r3, [r7, #20]
					disk_write(fs->drv, fs->win, wsect, 1);
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	7858      	ldrb	r0, [r3, #1]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003f92:	2301      	movs	r3, #1
 8003f94:	697a      	ldr	r2, [r7, #20]
 8003f96:	f7fe fca9 	bl	80028ec <disk_write>
				for (nf = fs->n_fats; nf >= 2; nf--) {	/* Reflect the change to all FAT copies */
 8003f9a:	693b      	ldr	r3, [r7, #16]
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	613b      	str	r3, [r7, #16]
 8003fa0:	693b      	ldr	r3, [r7, #16]
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d8eb      	bhi.n	8003f7e <sync_window+0x56>
				}
			}
		}
	}
	return res;
 8003fa6:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}

08003fb0 <move_window>:
static
FRESULT move_window (
	FATFS* fs,		/* File system object */
	DWORD sector	/* Sector number to make appearance in the fs->win[] */
)
{
 8003fb0:	b580      	push	{r7, lr}
 8003fb2:	b084      	sub	sp, #16
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
	FRESULT res = FR_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	73fb      	strb	r3, [r7, #15]


	if (sector != fs->winsect) {	/* Window offset changed? */
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fc2:	683a      	ldr	r2, [r7, #0]
 8003fc4:	429a      	cmp	r2, r3
 8003fc6:	d01b      	beq.n	8004000 <move_window+0x50>
#if !_FS_READONLY
		res = sync_window(fs);		/* Write-back changes */
 8003fc8:	6878      	ldr	r0, [r7, #4]
 8003fca:	f7ff ffad 	bl	8003f28 <sync_window>
 8003fce:	4603      	mov	r3, r0
 8003fd0:	73fb      	strb	r3, [r7, #15]
#endif
		if (res == FR_OK) {			/* Fill sector window with new data */
 8003fd2:	7bfb      	ldrb	r3, [r7, #15]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d113      	bne.n	8004000 <move_window+0x50>
			if (disk_read(fs->drv, fs->win, sector, 1) != RES_OK) {
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	7858      	ldrb	r0, [r3, #1]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	f103 0134 	add.w	r1, r3, #52	; 0x34
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	683a      	ldr	r2, [r7, #0]
 8003fe6:	f7fe fc53 	bl	8002890 <disk_read>
 8003fea:	4603      	mov	r3, r0
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d004      	beq.n	8003ffa <move_window+0x4a>
				sector = 0xFFFFFFFF;	/* Invalidate window if data is not reliable */
 8003ff0:	f04f 33ff 	mov.w	r3, #4294967295
 8003ff4:	603b      	str	r3, [r7, #0]
				res = FR_DISK_ERR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	73fb      	strb	r3, [r7, #15]
			}
			fs->winsect = sector;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	683a      	ldr	r2, [r7, #0]
 8003ffe:	631a      	str	r2, [r3, #48]	; 0x30
		}
	}
	return res;
 8004000:	7bfb      	ldrb	r3, [r7, #15]
}
 8004002:	4618      	mov	r0, r3
 8004004:	3710      	adds	r7, #16
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}

0800400a <sync_fs>:
#if !_FS_READONLY
static
FRESULT sync_fs (	/* FR_OK: successful, FR_DISK_ERR: failed */
	FATFS* fs		/* File system object */
)
{
 800400a:	b580      	push	{r7, lr}
 800400c:	b084      	sub	sp, #16
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = sync_window(fs);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f7ff ff88 	bl	8003f28 <sync_window>
 8004018:	4603      	mov	r3, r0
 800401a:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 800401c:	7bfb      	ldrb	r3, [r7, #15]
 800401e:	2b00      	cmp	r3, #0
 8004020:	f040 8090 	bne.w	8004144 <sync_fs+0x13a>
		/* Update FSINFO sector if needed */
		if (fs->fs_type == FS_FAT32 && fs->fsi_flag == 1) {
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	781b      	ldrb	r3, [r3, #0]
 8004028:	2b03      	cmp	r3, #3
 800402a:	d17f      	bne.n	800412c <sync_fs+0x122>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	795b      	ldrb	r3, [r3, #5]
 8004030:	2b01      	cmp	r3, #1
 8004032:	d17b      	bne.n	800412c <sync_fs+0x122>
			/* Create FSINFO structure */
			mem_set(fs->win, 0, SS(fs));
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3334      	adds	r3, #52	; 0x34
 8004038:	f44f 7200 	mov.w	r2, #512	; 0x200
 800403c:	2100      	movs	r1, #0
 800403e:	4618      	mov	r0, r3
 8004040:	f7ff ff15 	bl	8003e6e <mem_set>
			ST_WORD(fs->win + BS_55AA, 0xAA55);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2255      	movs	r2, #85	; 0x55
 8004048:	f883 2232 	strb.w	r2, [r3, #562]	; 0x232
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	22aa      	movs	r2, #170	; 0xaa
 8004050:	f883 2233 	strb.w	r2, [r3, #563]	; 0x233
			ST_DWORD(fs->win + FSI_LeadSig, 0x41615252);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2252      	movs	r2, #82	; 0x52
 8004058:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	2252      	movs	r2, #82	; 0x52
 8004060:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2261      	movs	r2, #97	; 0x61
 8004068:	f883 2036 	strb.w	r2, [r3, #54]	; 0x36
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2241      	movs	r2, #65	; 0x41
 8004070:	f883 2037 	strb.w	r2, [r3, #55]	; 0x37
			ST_DWORD(fs->win + FSI_StrucSig, 0x61417272);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2272      	movs	r2, #114	; 0x72
 8004078:	f883 2218 	strb.w	r2, [r3, #536]	; 0x218
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2272      	movs	r2, #114	; 0x72
 8004080:	f883 2219 	strb.w	r2, [r3, #537]	; 0x219
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2241      	movs	r2, #65	; 0x41
 8004088:	f883 221a 	strb.w	r2, [r3, #538]	; 0x21a
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2261      	movs	r2, #97	; 0x61
 8004090:	f883 221b 	strb.w	r2, [r3, #539]	; 0x21b
			ST_DWORD(fs->win + FSI_Free_Count, fs->free_clust);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	691b      	ldr	r3, [r3, #16]
 8004098:	b2da      	uxtb	r2, r3
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f883 221c 	strb.w	r2, [r3, #540]	; 0x21c
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	691b      	ldr	r3, [r3, #16]
 80040a4:	b29b      	uxth	r3, r3
 80040a6:	0a1b      	lsrs	r3, r3, #8
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	f883 221d 	strb.w	r2, [r3, #541]	; 0x21d
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	0c1b      	lsrs	r3, r3, #16
 80040b8:	b2da      	uxtb	r2, r3
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f883 221e 	strb.w	r2, [r3, #542]	; 0x21e
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	691b      	ldr	r3, [r3, #16]
 80040c4:	0e1b      	lsrs	r3, r3, #24
 80040c6:	b2da      	uxtb	r2, r3
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	f883 221f 	strb.w	r2, [r3, #543]	; 0x21f
			ST_DWORD(fs->win + FSI_Nxt_Free, fs->last_clust);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68db      	ldr	r3, [r3, #12]
 80040d2:	b2da      	uxtb	r2, r3
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	f883 2220 	strb.w	r2, [r3, #544]	; 0x220
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68db      	ldr	r3, [r3, #12]
 80040de:	b29b      	uxth	r3, r3
 80040e0:	0a1b      	lsrs	r3, r3, #8
 80040e2:	b29b      	uxth	r3, r3
 80040e4:	b2da      	uxtb	r2, r3
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	f883 2221 	strb.w	r2, [r3, #545]	; 0x221
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	0c1b      	lsrs	r3, r3, #16
 80040f2:	b2da      	uxtb	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	68db      	ldr	r3, [r3, #12]
 80040fe:	0e1b      	lsrs	r3, r3, #24
 8004100:	b2da      	uxtb	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	f883 2223 	strb.w	r2, [r3, #547]	; 0x223
			/* Write it into the FSINFO sector */
			fs->winsect = fs->volbase + 1;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6a1b      	ldr	r3, [r3, #32]
 800410c:	1c5a      	adds	r2, r3, #1
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	631a      	str	r2, [r3, #48]	; 0x30
			disk_write(fs->drv, fs->win, fs->winsect, 1);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	7858      	ldrb	r0, [r3, #1]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	f103 0134 	add.w	r1, r3, #52	; 0x34
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004120:	2301      	movs	r3, #1
 8004122:	f7fe fbe3 	bl	80028ec <disk_write>
			fs->fsi_flag = 0;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	2200      	movs	r2, #0
 800412a:	715a      	strb	r2, [r3, #5]
		}
		/* Make sure that no pending write process in the physical drive */
		if (disk_ioctl(fs->drv, CTRL_SYNC, 0) != RES_OK)
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	785b      	ldrb	r3, [r3, #1]
 8004130:	2200      	movs	r2, #0
 8004132:	2100      	movs	r1, #0
 8004134:	4618      	mov	r0, r3
 8004136:	f7fe fc07 	bl	8002948 <disk_ioctl>
 800413a:	4603      	mov	r3, r0
 800413c:	2b00      	cmp	r3, #0
 800413e:	d001      	beq.n	8004144 <sync_fs+0x13a>
			res = FR_DISK_ERR;
 8004140:	2301      	movs	r3, #1
 8004142:	73fb      	strb	r3, [r7, #15]
	}

	return res;
 8004144:	7bfb      	ldrb	r3, [r7, #15]
}
 8004146:	4618      	mov	r0, r3
 8004148:	3710      	adds	r7, #16
 800414a:	46bd      	mov	sp, r7
 800414c:	bd80      	pop	{r7, pc}

0800414e <clust2sect>:

DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	FATFS* fs,		/* File system object */
	DWORD clst		/* Cluster# to be converted */
)
{
 800414e:	b480      	push	{r7}
 8004150:	b083      	sub	sp, #12
 8004152:	af00      	add	r7, sp, #0
 8004154:	6078      	str	r0, [r7, #4]
 8004156:	6039      	str	r1, [r7, #0]
	clst -= 2;
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	3b02      	subs	r3, #2
 800415c:	603b      	str	r3, [r7, #0]
	if (clst >= fs->n_fatent - 2) return 0;		/* Invalid cluster# */
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	699b      	ldr	r3, [r3, #24]
 8004162:	3b02      	subs	r3, #2
 8004164:	683a      	ldr	r2, [r7, #0]
 8004166:	429a      	cmp	r2, r3
 8004168:	d301      	bcc.n	800416e <clust2sect+0x20>
 800416a:	2300      	movs	r3, #0
 800416c:	e008      	b.n	8004180 <clust2sect+0x32>
	return clst * fs->csize + fs->database;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	789b      	ldrb	r3, [r3, #2]
 8004172:	461a      	mov	r2, r3
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	fb03 f202 	mul.w	r2, r3, r2
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800417e:	4413      	add	r3, r2
}
 8004180:	4618      	mov	r0, r3
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr

0800418c <get_fat>:

DWORD get_fat (	/* 0xFFFFFFFF:Disk error, 1:Internal error, 2..0x0FFFFFFF:Cluster status */
	FATFS* fs,	/* File system object */
	DWORD clst	/* FAT index number (cluster number) to get the value */
)
{
 800418c:	b580      	push	{r7, lr}
 800418e:	b086      	sub	sp, #24
 8004190:	af00      	add	r7, sp, #0
 8004192:	6078      	str	r0, [r7, #4]
 8004194:	6039      	str	r1, [r7, #0]
	UINT wc, bc;
	BYTE *p;
	DWORD val;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	2b01      	cmp	r3, #1
 800419a:	d904      	bls.n	80041a6 <get_fat+0x1a>
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	429a      	cmp	r2, r3
 80041a4:	d302      	bcc.n	80041ac <get_fat+0x20>
		val = 1;	/* Internal error */
 80041a6:	2301      	movs	r3, #1
 80041a8:	617b      	str	r3, [r7, #20]
 80041aa:	e0a6      	b.n	80042fa <get_fat+0x16e>

	} else {
		val = 0xFFFFFFFF;	/* Default value falls on disk error */
 80041ac:	f04f 33ff 	mov.w	r3, #4294967295
 80041b0:	617b      	str	r3, [r7, #20]

		switch (fs->fs_type) {
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	2b03      	cmp	r3, #3
 80041b8:	d06b      	beq.n	8004292 <get_fat+0x106>
 80041ba:	2b03      	cmp	r3, #3
 80041bc:	f300 8093 	bgt.w	80042e6 <get_fat+0x15a>
 80041c0:	2b01      	cmp	r3, #1
 80041c2:	d002      	beq.n	80041ca <get_fat+0x3e>
 80041c4:	2b02      	cmp	r3, #2
 80041c6:	d042      	beq.n	800424e <get_fat+0xc2>
 80041c8:	e08d      	b.n	80042e6 <get_fat+0x15a>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	60fb      	str	r3, [r7, #12]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	085b      	lsrs	r3, r3, #1
 80041d2:	68fa      	ldr	r2, [r7, #12]
 80041d4:	4413      	add	r3, r2
 80041d6:	60fb      	str	r3, [r7, #12]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	0a5b      	lsrs	r3, r3, #9
 80041e0:	4413      	add	r3, r2
 80041e2:	4619      	mov	r1, r3
 80041e4:	6878      	ldr	r0, [r7, #4]
 80041e6:	f7ff fee3 	bl	8003fb0 <move_window>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d17d      	bne.n	80042ec <get_fat+0x160>
			wc = fs->win[bc++ % SS(fs)];
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	1c5a      	adds	r2, r3, #1
 80041f4:	60fa      	str	r2, [r7, #12]
 80041f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80041fa:	687a      	ldr	r2, [r7, #4]
 80041fc:	4413      	add	r3, r2
 80041fe:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004202:	60bb      	str	r3, [r7, #8]
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	0a5b      	lsrs	r3, r3, #9
 800420c:	4413      	add	r3, r2
 800420e:	4619      	mov	r1, r3
 8004210:	6878      	ldr	r0, [r7, #4]
 8004212:	f7ff fecd 	bl	8003fb0 <move_window>
 8004216:	4603      	mov	r3, r0
 8004218:	2b00      	cmp	r3, #0
 800421a:	d169      	bne.n	80042f0 <get_fat+0x164>
			wc |= fs->win[bc % SS(fs)] << 8;
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004222:	687a      	ldr	r2, [r7, #4]
 8004224:	4413      	add	r3, r2
 8004226:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800422a:	021b      	lsls	r3, r3, #8
 800422c:	461a      	mov	r2, r3
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	4313      	orrs	r3, r2
 8004232:	60bb      	str	r3, [r7, #8]
			val = clst & 1 ? wc >> 4 : (wc & 0xFFF);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	f003 0301 	and.w	r3, r3, #1
 800423a:	2b00      	cmp	r3, #0
 800423c:	d002      	beq.n	8004244 <get_fat+0xb8>
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	091b      	lsrs	r3, r3, #4
 8004242:	e002      	b.n	800424a <get_fat+0xbe>
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800424a:	617b      	str	r3, [r7, #20]
			break;
 800424c:	e055      	b.n	80042fa <get_fat+0x16e>

		case FS_FAT16 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004252:	683b      	ldr	r3, [r7, #0]
 8004254:	0a1b      	lsrs	r3, r3, #8
 8004256:	4413      	add	r3, r2
 8004258:	4619      	mov	r1, r3
 800425a:	6878      	ldr	r0, [r7, #4]
 800425c:	f7ff fea8 	bl	8003fb0 <move_window>
 8004260:	4603      	mov	r3, r0
 8004262:	2b00      	cmp	r3, #0
 8004264:	d146      	bne.n	80042f4 <get_fat+0x168>
			p = &fs->win[clst * 2 % SS(fs)];
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	005b      	lsls	r3, r3, #1
 800426a:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 800426e:	3330      	adds	r3, #48	; 0x30
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	4413      	add	r3, r2
 8004274:	3304      	adds	r3, #4
 8004276:	613b      	str	r3, [r7, #16]
			val = LD_WORD(p);
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	3301      	adds	r3, #1
 800427c:	781b      	ldrb	r3, [r3, #0]
 800427e:	021b      	lsls	r3, r3, #8
 8004280:	b21a      	sxth	r2, r3
 8004282:	693b      	ldr	r3, [r7, #16]
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	b21b      	sxth	r3, r3
 8004288:	4313      	orrs	r3, r2
 800428a:	b21b      	sxth	r3, r3
 800428c:	b29b      	uxth	r3, r3
 800428e:	617b      	str	r3, [r7, #20]
			break;
 8004290:	e033      	b.n	80042fa <get_fat+0x16e>

		case FS_FAT32 :
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	09db      	lsrs	r3, r3, #7
 800429a:	4413      	add	r3, r2
 800429c:	4619      	mov	r1, r3
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f7ff fe86 	bl	8003fb0 <move_window>
 80042a4:	4603      	mov	r3, r0
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d126      	bne.n	80042f8 <get_fat+0x16c>
			p = &fs->win[clst * 4 % SS(fs)];
 80042aa:	683b      	ldr	r3, [r7, #0]
 80042ac:	009b      	lsls	r3, r3, #2
 80042ae:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 80042b2:	3330      	adds	r3, #48	; 0x30
 80042b4:	687a      	ldr	r2, [r7, #4]
 80042b6:	4413      	add	r3, r2
 80042b8:	3304      	adds	r3, #4
 80042ba:	613b      	str	r3, [r7, #16]
			val = LD_DWORD(p) & 0x0FFFFFFF;
 80042bc:	693b      	ldr	r3, [r7, #16]
 80042be:	3303      	adds	r3, #3
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	061a      	lsls	r2, r3, #24
 80042c4:	693b      	ldr	r3, [r7, #16]
 80042c6:	3302      	adds	r3, #2
 80042c8:	781b      	ldrb	r3, [r3, #0]
 80042ca:	041b      	lsls	r3, r3, #16
 80042cc:	4313      	orrs	r3, r2
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	3201      	adds	r2, #1
 80042d2:	7812      	ldrb	r2, [r2, #0]
 80042d4:	0212      	lsls	r2, r2, #8
 80042d6:	4313      	orrs	r3, r2
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	7812      	ldrb	r2, [r2, #0]
 80042dc:	4313      	orrs	r3, r2
 80042de:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 80042e2:	617b      	str	r3, [r7, #20]
			break;
 80042e4:	e009      	b.n	80042fa <get_fat+0x16e>

		default:
			val = 1;	/* Internal error */
 80042e6:	2301      	movs	r3, #1
 80042e8:	617b      	str	r3, [r7, #20]
 80042ea:	e006      	b.n	80042fa <get_fat+0x16e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80042ec:	bf00      	nop
 80042ee:	e004      	b.n	80042fa <get_fat+0x16e>
			if (move_window(fs, fs->fatbase + (bc / SS(fs))) != FR_OK) break;
 80042f0:	bf00      	nop
 80042f2:	e002      	b.n	80042fa <get_fat+0x16e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 2))) != FR_OK) break;
 80042f4:	bf00      	nop
 80042f6:	e000      	b.n	80042fa <get_fat+0x16e>
			if (move_window(fs, fs->fatbase + (clst / (SS(fs) / 4))) != FR_OK) break;
 80042f8:	bf00      	nop
		}
	}

	return val;
 80042fa:	697b      	ldr	r3, [r7, #20]
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	3718      	adds	r7, #24
 8004300:	46bd      	mov	sp, r7
 8004302:	bd80      	pop	{r7, pc}

08004304 <put_fat>:
FRESULT put_fat (
	FATFS* fs,	/* File system object */
	DWORD clst,	/* FAT index number (cluster number) to be changed */
	DWORD val	/* New value to be set to the entry */
)
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b088      	sub	sp, #32
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
	UINT bc;
	BYTE *p;
	FRESULT res;


	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004310:	68bb      	ldr	r3, [r7, #8]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d904      	bls.n	8004320 <put_fat+0x1c>
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	699b      	ldr	r3, [r3, #24]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	429a      	cmp	r2, r3
 800431e:	d302      	bcc.n	8004326 <put_fat+0x22>
		res = FR_INT_ERR;
 8004320:	2302      	movs	r3, #2
 8004322:	77fb      	strb	r3, [r7, #31]
 8004324:	e0f5      	b.n	8004512 <put_fat+0x20e>

	} else {
		switch (fs->fs_type) {
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	781b      	ldrb	r3, [r3, #0]
 800432a:	2b03      	cmp	r3, #3
 800432c:	f000 809e 	beq.w	800446c <put_fat+0x168>
 8004330:	2b03      	cmp	r3, #3
 8004332:	f300 80e4 	bgt.w	80044fe <put_fat+0x1fa>
 8004336:	2b01      	cmp	r3, #1
 8004338:	d002      	beq.n	8004340 <put_fat+0x3c>
 800433a:	2b02      	cmp	r3, #2
 800433c:	d06f      	beq.n	800441e <put_fat+0x11a>
 800433e:	e0de      	b.n	80044fe <put_fat+0x1fa>
		case FS_FAT12 :
			bc = (UINT)clst; bc += bc / 2;
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	617b      	str	r3, [r7, #20]
 8004344:	697b      	ldr	r3, [r7, #20]
 8004346:	085b      	lsrs	r3, r3, #1
 8004348:	697a      	ldr	r2, [r7, #20]
 800434a:	4413      	add	r3, r2
 800434c:	617b      	str	r3, [r7, #20]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	0a5b      	lsrs	r3, r3, #9
 8004356:	4413      	add	r3, r2
 8004358:	4619      	mov	r1, r3
 800435a:	68f8      	ldr	r0, [r7, #12]
 800435c:	f7ff fe28 	bl	8003fb0 <move_window>
 8004360:	4603      	mov	r3, r0
 8004362:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004364:	7ffb      	ldrb	r3, [r7, #31]
 8004366:	2b00      	cmp	r3, #0
 8004368:	f040 80cc 	bne.w	8004504 <put_fat+0x200>
			p = &fs->win[bc++ % SS(fs)];
 800436c:	697b      	ldr	r3, [r7, #20]
 800436e:	1c5a      	adds	r2, r3, #1
 8004370:	617a      	str	r2, [r7, #20]
 8004372:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004376:	3330      	adds	r3, #48	; 0x30
 8004378:	68fa      	ldr	r2, [r7, #12]
 800437a:	4413      	add	r3, r2
 800437c:	3304      	adds	r3, #4
 800437e:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? ((*p & 0x0F) | ((BYTE)val << 4)) : (BYTE)val;
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00d      	beq.n	80043a6 <put_fat+0xa2>
 800438a:	69bb      	ldr	r3, [r7, #24]
 800438c:	781b      	ldrb	r3, [r3, #0]
 800438e:	b25b      	sxtb	r3, r3
 8004390:	f003 030f 	and.w	r3, r3, #15
 8004394:	b25a      	sxtb	r2, r3
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	b2db      	uxtb	r3, r3
 800439a:	011b      	lsls	r3, r3, #4
 800439c:	b25b      	sxtb	r3, r3
 800439e:	4313      	orrs	r3, r2
 80043a0:	b25b      	sxtb	r3, r3
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	e001      	b.n	80043aa <put_fat+0xa6>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	69ba      	ldr	r2, [r7, #24]
 80043ac:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	2201      	movs	r2, #1
 80043b2:	711a      	strb	r2, [r3, #4]
			res = move_window(fs, fs->fatbase + (bc / SS(fs)));
 80043b4:	68fb      	ldr	r3, [r7, #12]
 80043b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80043b8:	697b      	ldr	r3, [r7, #20]
 80043ba:	0a5b      	lsrs	r3, r3, #9
 80043bc:	4413      	add	r3, r2
 80043be:	4619      	mov	r1, r3
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f7ff fdf5 	bl	8003fb0 <move_window>
 80043c6:	4603      	mov	r3, r0
 80043c8:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 80043ca:	7ffb      	ldrb	r3, [r7, #31]
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	f040 809b 	bne.w	8004508 <put_fat+0x204>
			p = &fs->win[bc % SS(fs)];
 80043d2:	697b      	ldr	r3, [r7, #20]
 80043d4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80043d8:	3330      	adds	r3, #48	; 0x30
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	4413      	add	r3, r2
 80043de:	3304      	adds	r3, #4
 80043e0:	61bb      	str	r3, [r7, #24]
			*p = (clst & 1) ? (BYTE)(val >> 4) : ((*p & 0xF0) | ((BYTE)(val >> 8) & 0x0F));
 80043e2:	68bb      	ldr	r3, [r7, #8]
 80043e4:	f003 0301 	and.w	r3, r3, #1
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d003      	beq.n	80043f4 <put_fat+0xf0>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	091b      	lsrs	r3, r3, #4
 80043f0:	b2db      	uxtb	r3, r3
 80043f2:	e00e      	b.n	8004412 <put_fat+0x10e>
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	781b      	ldrb	r3, [r3, #0]
 80043f8:	b25b      	sxtb	r3, r3
 80043fa:	f023 030f 	bic.w	r3, r3, #15
 80043fe:	b25a      	sxtb	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	0a1b      	lsrs	r3, r3, #8
 8004404:	b25b      	sxtb	r3, r3
 8004406:	f003 030f 	and.w	r3, r3, #15
 800440a:	b25b      	sxtb	r3, r3
 800440c:	4313      	orrs	r3, r2
 800440e:	b25b      	sxtb	r3, r3
 8004410:	b2db      	uxtb	r3, r3
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	7013      	strb	r3, [r2, #0]
			fs->wflag = 1;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	2201      	movs	r2, #1
 800441a:	711a      	strb	r2, [r3, #4]
			break;
 800441c:	e079      	b.n	8004512 <put_fat+0x20e>

		case FS_FAT16 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 2)));
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004422:	68bb      	ldr	r3, [r7, #8]
 8004424:	0a1b      	lsrs	r3, r3, #8
 8004426:	4413      	add	r3, r2
 8004428:	4619      	mov	r1, r3
 800442a:	68f8      	ldr	r0, [r7, #12]
 800442c:	f7ff fdc0 	bl	8003fb0 <move_window>
 8004430:	4603      	mov	r3, r0
 8004432:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004434:	7ffb      	ldrb	r3, [r7, #31]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d168      	bne.n	800450c <put_fat+0x208>
			p = &fs->win[clst * 2 % SS(fs)];
 800443a:	68bb      	ldr	r3, [r7, #8]
 800443c:	005b      	lsls	r3, r3, #1
 800443e:	f403 73ff 	and.w	r3, r3, #510	; 0x1fe
 8004442:	3330      	adds	r3, #48	; 0x30
 8004444:	68fa      	ldr	r2, [r7, #12]
 8004446:	4413      	add	r3, r2
 8004448:	3304      	adds	r3, #4
 800444a:	61bb      	str	r3, [r7, #24]
			ST_WORD(p, (WORD)val);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	b2da      	uxtb	r2, r3
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	701a      	strb	r2, [r3, #0]
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	b29b      	uxth	r3, r3
 8004458:	0a1b      	lsrs	r3, r3, #8
 800445a:	b29a      	uxth	r2, r3
 800445c:	69bb      	ldr	r3, [r7, #24]
 800445e:	3301      	adds	r3, #1
 8004460:	b2d2      	uxtb	r2, r2
 8004462:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	2201      	movs	r2, #1
 8004468:	711a      	strb	r2, [r3, #4]
			break;
 800446a:	e052      	b.n	8004512 <put_fat+0x20e>

		case FS_FAT32 :
			res = move_window(fs, fs->fatbase + (clst / (SS(fs) / 4)));
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004470:	68bb      	ldr	r3, [r7, #8]
 8004472:	09db      	lsrs	r3, r3, #7
 8004474:	4413      	add	r3, r2
 8004476:	4619      	mov	r1, r3
 8004478:	68f8      	ldr	r0, [r7, #12]
 800447a:	f7ff fd99 	bl	8003fb0 <move_window>
 800447e:	4603      	mov	r3, r0
 8004480:	77fb      	strb	r3, [r7, #31]
			if (res != FR_OK) break;
 8004482:	7ffb      	ldrb	r3, [r7, #31]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d143      	bne.n	8004510 <put_fat+0x20c>
			p = &fs->win[clst * 4 % SS(fs)];
 8004488:	68bb      	ldr	r3, [r7, #8]
 800448a:	009b      	lsls	r3, r3, #2
 800448c:	f403 73fe 	and.w	r3, r3, #508	; 0x1fc
 8004490:	3330      	adds	r3, #48	; 0x30
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	4413      	add	r3, r2
 8004496:	3304      	adds	r3, #4
 8004498:	61bb      	str	r3, [r7, #24]
			val |= LD_DWORD(p) & 0xF0000000;
 800449a:	69bb      	ldr	r3, [r7, #24]
 800449c:	3303      	adds	r3, #3
 800449e:	781b      	ldrb	r3, [r3, #0]
 80044a0:	061a      	lsls	r2, r3, #24
 80044a2:	69bb      	ldr	r3, [r7, #24]
 80044a4:	3302      	adds	r3, #2
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	041b      	lsls	r3, r3, #16
 80044aa:	4313      	orrs	r3, r2
 80044ac:	69ba      	ldr	r2, [r7, #24]
 80044ae:	3201      	adds	r2, #1
 80044b0:	7812      	ldrb	r2, [r2, #0]
 80044b2:	0212      	lsls	r2, r2, #8
 80044b4:	4313      	orrs	r3, r2
 80044b6:	69ba      	ldr	r2, [r7, #24]
 80044b8:	7812      	ldrb	r2, [r2, #0]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 80044c0:	687a      	ldr	r2, [r7, #4]
 80044c2:	4313      	orrs	r3, r2
 80044c4:	607b      	str	r3, [r7, #4]
			ST_DWORD(p, val);
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	b2da      	uxtb	r2, r3
 80044ca:	69bb      	ldr	r3, [r7, #24]
 80044cc:	701a      	strb	r2, [r3, #0]
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	b29b      	uxth	r3, r3
 80044d2:	0a1b      	lsrs	r3, r3, #8
 80044d4:	b29a      	uxth	r2, r3
 80044d6:	69bb      	ldr	r3, [r7, #24]
 80044d8:	3301      	adds	r3, #1
 80044da:	b2d2      	uxtb	r2, r2
 80044dc:	701a      	strb	r2, [r3, #0]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	0c1a      	lsrs	r2, r3, #16
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	3302      	adds	r3, #2
 80044e6:	b2d2      	uxtb	r2, r2
 80044e8:	701a      	strb	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	0e1a      	lsrs	r2, r3, #24
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	3303      	adds	r3, #3
 80044f2:	b2d2      	uxtb	r2, r2
 80044f4:	701a      	strb	r2, [r3, #0]
			fs->wflag = 1;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	2201      	movs	r2, #1
 80044fa:	711a      	strb	r2, [r3, #4]
			break;
 80044fc:	e009      	b.n	8004512 <put_fat+0x20e>

		default :
			res = FR_INT_ERR;
 80044fe:	2302      	movs	r3, #2
 8004500:	77fb      	strb	r3, [r7, #31]
 8004502:	e006      	b.n	8004512 <put_fat+0x20e>
			if (res != FR_OK) break;
 8004504:	bf00      	nop
 8004506:	e004      	b.n	8004512 <put_fat+0x20e>
			if (res != FR_OK) break;
 8004508:	bf00      	nop
 800450a:	e002      	b.n	8004512 <put_fat+0x20e>
			if (res != FR_OK) break;
 800450c:	bf00      	nop
 800450e:	e000      	b.n	8004512 <put_fat+0x20e>
			if (res != FR_OK) break;
 8004510:	bf00      	nop
		}
	}

	return res;
 8004512:	7ffb      	ldrb	r3, [r7, #31]
}
 8004514:	4618      	mov	r0, r3
 8004516:	3720      	adds	r7, #32
 8004518:	46bd      	mov	sp, r7
 800451a:	bd80      	pop	{r7, pc}

0800451c <remove_chain>:
static
FRESULT remove_chain (
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to remove a chain from */
)
{
 800451c:	b580      	push	{r7, lr}
 800451e:	b084      	sub	sp, #16
 8004520:	af00      	add	r7, sp, #0
 8004522:	6078      	str	r0, [r7, #4]
 8004524:	6039      	str	r1, [r7, #0]
	DWORD nxt;
#if _USE_TRIM
	DWORD scl = clst, ecl = clst, rt[2];
#endif

	if (clst < 2 || clst >= fs->n_fatent) {	/* Check range */
 8004526:	683b      	ldr	r3, [r7, #0]
 8004528:	2b01      	cmp	r3, #1
 800452a:	d904      	bls.n	8004536 <remove_chain+0x1a>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	699b      	ldr	r3, [r3, #24]
 8004530:	683a      	ldr	r2, [r7, #0]
 8004532:	429a      	cmp	r2, r3
 8004534:	d302      	bcc.n	800453c <remove_chain+0x20>
		res = FR_INT_ERR;
 8004536:	2302      	movs	r3, #2
 8004538:	73fb      	strb	r3, [r7, #15]
 800453a:	e03d      	b.n	80045b8 <remove_chain+0x9c>

	} else {
		res = FR_OK;
 800453c:	2300      	movs	r3, #0
 800453e:	73fb      	strb	r3, [r7, #15]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 8004540:	e031      	b.n	80045a6 <remove_chain+0x8a>
			nxt = get_fat(fs, clst);			/* Get cluster status */
 8004542:	6839      	ldr	r1, [r7, #0]
 8004544:	6878      	ldr	r0, [r7, #4]
 8004546:	f7ff fe21 	bl	800418c <get_fat>
 800454a:	60b8      	str	r0, [r7, #8]
			if (nxt == 0) break;				/* Empty cluster? */
 800454c:	68bb      	ldr	r3, [r7, #8]
 800454e:	2b00      	cmp	r3, #0
 8004550:	d02f      	beq.n	80045b2 <remove_chain+0x96>
			if (nxt == 1) { res = FR_INT_ERR; break; }	/* Internal error? */
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	2b01      	cmp	r3, #1
 8004556:	d102      	bne.n	800455e <remove_chain+0x42>
 8004558:	2302      	movs	r3, #2
 800455a:	73fb      	strb	r3, [r7, #15]
 800455c:	e02c      	b.n	80045b8 <remove_chain+0x9c>
			if (nxt == 0xFFFFFFFF) { res = FR_DISK_ERR; break; }	/* Disk error? */
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004564:	d102      	bne.n	800456c <remove_chain+0x50>
 8004566:	2301      	movs	r3, #1
 8004568:	73fb      	strb	r3, [r7, #15]
 800456a:	e025      	b.n	80045b8 <remove_chain+0x9c>
			res = put_fat(fs, clst, 0);			/* Mark the cluster "empty" */
 800456c:	2200      	movs	r2, #0
 800456e:	6839      	ldr	r1, [r7, #0]
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	f7ff fec7 	bl	8004304 <put_fat>
 8004576:	4603      	mov	r3, r0
 8004578:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 800457a:	7bfb      	ldrb	r3, [r7, #15]
 800457c:	2b00      	cmp	r3, #0
 800457e:	d11a      	bne.n	80045b6 <remove_chain+0x9a>
			if (fs->free_clust != 0xFFFFFFFF) {	/* Update FSINFO */
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	691b      	ldr	r3, [r3, #16]
 8004584:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004588:	d00b      	beq.n	80045a2 <remove_chain+0x86>
				fs->free_clust++;
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	691b      	ldr	r3, [r3, #16]
 800458e:	1c5a      	adds	r2, r3, #1
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	611a      	str	r2, [r3, #16]
				fs->fsi_flag |= 1;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	795b      	ldrb	r3, [r3, #5]
 8004598:	f043 0301 	orr.w	r3, r3, #1
 800459c:	b2da      	uxtb	r2, r3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	715a      	strb	r2, [r3, #5]
				rt[1] = clust2sect(fs, ecl) + fs->csize - 1;	/* End sector */
				disk_ioctl(fs->drv, CTRL_TRIM, rt);				/* Erase the block */
				scl = ecl = nxt;
			}
#endif
			clst = nxt;	/* Next cluster */
 80045a2:	68bb      	ldr	r3, [r7, #8]
 80045a4:	603b      	str	r3, [r7, #0]
		while (clst < fs->n_fatent) {			/* Not a last link? */
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	699b      	ldr	r3, [r3, #24]
 80045aa:	683a      	ldr	r2, [r7, #0]
 80045ac:	429a      	cmp	r2, r3
 80045ae:	d3c8      	bcc.n	8004542 <remove_chain+0x26>
 80045b0:	e002      	b.n	80045b8 <remove_chain+0x9c>
			if (nxt == 0) break;				/* Empty cluster? */
 80045b2:	bf00      	nop
 80045b4:	e000      	b.n	80045b8 <remove_chain+0x9c>
			if (res != FR_OK) break;
 80045b6:	bf00      	nop
		}
	}

	return res;
 80045b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80045ba:	4618      	mov	r0, r3
 80045bc:	3710      	adds	r7, #16
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <create_chain>:
static
DWORD create_chain (	/* 0:No free cluster, 1:Internal error, 0xFFFFFFFF:Disk error, >=2:New cluster# */
	FATFS* fs,			/* File system object */
	DWORD clst			/* Cluster# to stretch. 0 means create a new chain. */
)
{
 80045c2:	b580      	push	{r7, lr}
 80045c4:	b086      	sub	sp, #24
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
 80045ca:	6039      	str	r1, [r7, #0]
	DWORD cs, ncl, scl;
	FRESULT res;


	if (clst == 0) {		/* Create a new chain */
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d10d      	bne.n	80045ee <create_chain+0x2c>
		scl = fs->last_clust;			/* Get suggested start point */
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	68db      	ldr	r3, [r3, #12]
 80045d6:	613b      	str	r3, [r7, #16]
		if (!scl || scl >= fs->n_fatent) scl = 1;
 80045d8:	693b      	ldr	r3, [r7, #16]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d004      	beq.n	80045e8 <create_chain+0x26>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	693a      	ldr	r2, [r7, #16]
 80045e4:	429a      	cmp	r2, r3
 80045e6:	d31b      	bcc.n	8004620 <create_chain+0x5e>
 80045e8:	2301      	movs	r3, #1
 80045ea:	613b      	str	r3, [r7, #16]
 80045ec:	e018      	b.n	8004620 <create_chain+0x5e>
	}
	else {					/* Stretch the current chain */
		cs = get_fat(fs, clst);			/* Check the cluster status */
 80045ee:	6839      	ldr	r1, [r7, #0]
 80045f0:	6878      	ldr	r0, [r7, #4]
 80045f2:	f7ff fdcb 	bl	800418c <get_fat>
 80045f6:	60b8      	str	r0, [r7, #8]
		if (cs < 2) return 1;			/* Invalid value */
 80045f8:	68bb      	ldr	r3, [r7, #8]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d801      	bhi.n	8004602 <create_chain+0x40>
 80045fe:	2301      	movs	r3, #1
 8004600:	e06e      	b.n	80046e0 <create_chain+0x11e>
		if (cs == 0xFFFFFFFF) return cs;	/* A disk error occurred */
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004608:	d101      	bne.n	800460e <create_chain+0x4c>
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	e068      	b.n	80046e0 <create_chain+0x11e>
		if (cs < fs->n_fatent) return cs;	/* It is already followed by next cluster */
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	699b      	ldr	r3, [r3, #24]
 8004612:	68ba      	ldr	r2, [r7, #8]
 8004614:	429a      	cmp	r2, r3
 8004616:	d201      	bcs.n	800461c <create_chain+0x5a>
 8004618:	68bb      	ldr	r3, [r7, #8]
 800461a:	e061      	b.n	80046e0 <create_chain+0x11e>
		scl = clst;
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	613b      	str	r3, [r7, #16]
	}

	ncl = scl;				/* Start cluster */
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	617b      	str	r3, [r7, #20]
	for (;;) {
		ncl++;							/* Next cluster */
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	3301      	adds	r3, #1
 8004628:	617b      	str	r3, [r7, #20]
		if (ncl >= fs->n_fatent) {		/* Check wrap around */
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	699b      	ldr	r3, [r3, #24]
 800462e:	697a      	ldr	r2, [r7, #20]
 8004630:	429a      	cmp	r2, r3
 8004632:	d307      	bcc.n	8004644 <create_chain+0x82>
			ncl = 2;
 8004634:	2302      	movs	r3, #2
 8004636:	617b      	str	r3, [r7, #20]
			if (ncl > scl) return 0;	/* No free cluster */
 8004638:	697a      	ldr	r2, [r7, #20]
 800463a:	693b      	ldr	r3, [r7, #16]
 800463c:	429a      	cmp	r2, r3
 800463e:	d901      	bls.n	8004644 <create_chain+0x82>
 8004640:	2300      	movs	r3, #0
 8004642:	e04d      	b.n	80046e0 <create_chain+0x11e>
		}
		cs = get_fat(fs, ncl);			/* Get the cluster status */
 8004644:	6979      	ldr	r1, [r7, #20]
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f7ff fda0 	bl	800418c <get_fat>
 800464c:	60b8      	str	r0, [r7, #8]
		if (cs == 0) break;				/* Found a free cluster */
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00e      	beq.n	8004672 <create_chain+0xb0>
		if (cs == 0xFFFFFFFF || cs == 1)/* An error occurred */
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	f1b3 3fff 	cmp.w	r3, #4294967295
 800465a:	d002      	beq.n	8004662 <create_chain+0xa0>
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	2b01      	cmp	r3, #1
 8004660:	d101      	bne.n	8004666 <create_chain+0xa4>
			return cs;
 8004662:	68bb      	ldr	r3, [r7, #8]
 8004664:	e03c      	b.n	80046e0 <create_chain+0x11e>
		if (ncl == scl) return 0;		/* No free cluster */
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	429a      	cmp	r2, r3
 800466c:	d1da      	bne.n	8004624 <create_chain+0x62>
 800466e:	2300      	movs	r3, #0
 8004670:	e036      	b.n	80046e0 <create_chain+0x11e>
		if (cs == 0) break;				/* Found a free cluster */
 8004672:	bf00      	nop
	}

	res = put_fat(fs, ncl, 0x0FFFFFFF);	/* Mark the new cluster "last link" */
 8004674:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 8004678:	6979      	ldr	r1, [r7, #20]
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f7ff fe42 	bl	8004304 <put_fat>
 8004680:	4603      	mov	r3, r0
 8004682:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK && clst != 0) {
 8004684:	7bfb      	ldrb	r3, [r7, #15]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d109      	bne.n	800469e <create_chain+0xdc>
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b00      	cmp	r3, #0
 800468e:	d006      	beq.n	800469e <create_chain+0xdc>
		res = put_fat(fs, clst, ncl);	/* Link it to the previous one if needed */
 8004690:	697a      	ldr	r2, [r7, #20]
 8004692:	6839      	ldr	r1, [r7, #0]
 8004694:	6878      	ldr	r0, [r7, #4]
 8004696:	f7ff fe35 	bl	8004304 <put_fat>
 800469a:	4603      	mov	r3, r0
 800469c:	73fb      	strb	r3, [r7, #15]
	}
	if (res == FR_OK) {
 800469e:	7bfb      	ldrb	r3, [r7, #15]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d114      	bne.n	80046ce <create_chain+0x10c>
		fs->last_clust = ncl;			/* Update FSINFO */
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	60da      	str	r2, [r3, #12]
		if (fs->free_clust != 0xFFFFFFFF) {
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	691b      	ldr	r3, [r3, #16]
 80046ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046b2:	d014      	beq.n	80046de <create_chain+0x11c>
			fs->free_clust--;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	1e5a      	subs	r2, r3, #1
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	611a      	str	r2, [r3, #16]
			fs->fsi_flag |= 1;
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	795b      	ldrb	r3, [r3, #5]
 80046c2:	f043 0301 	orr.w	r3, r3, #1
 80046c6:	b2da      	uxtb	r2, r3
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	715a      	strb	r2, [r3, #5]
 80046cc:	e007      	b.n	80046de <create_chain+0x11c>
		}
	} else {
		ncl = (res == FR_DISK_ERR) ? 0xFFFFFFFF : 1;
 80046ce:	7bfb      	ldrb	r3, [r7, #15]
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d102      	bne.n	80046da <create_chain+0x118>
 80046d4:	f04f 33ff 	mov.w	r3, #4294967295
 80046d8:	e000      	b.n	80046dc <create_chain+0x11a>
 80046da:	2301      	movs	r3, #1
 80046dc:	617b      	str	r3, [r7, #20]
	}

	return ncl;		/* Return new cluster number or error code */
 80046de:	697b      	ldr	r3, [r7, #20]
}
 80046e0:	4618      	mov	r0, r3
 80046e2:	3718      	adds	r7, #24
 80046e4:	46bd      	mov	sp, r7
 80046e6:	bd80      	pop	{r7, pc}

080046e8 <dir_sdi>:
static
FRESULT dir_sdi (
	DIR* dp,		/* Pointer to directory object */
	UINT idx		/* Index of directory table */
)
{
 80046e8:	b580      	push	{r7, lr}
 80046ea:	b086      	sub	sp, #24
 80046ec:	af00      	add	r7, sp, #0
 80046ee:	6078      	str	r0, [r7, #4]
 80046f0:	6039      	str	r1, [r7, #0]
	DWORD clst, sect;
	UINT ic;


	dp->index = (WORD)idx;	/* Current index */
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	b29a      	uxth	r2, r3
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	80da      	strh	r2, [r3, #6]
	clst = dp->sclust;		/* Table start cluster (0:root) */
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	689b      	ldr	r3, [r3, #8]
 80046fe:	617b      	str	r3, [r7, #20]
	if (clst == 1 || clst >= dp->fs->n_fatent)	/* Check start cluster range */
 8004700:	697b      	ldr	r3, [r7, #20]
 8004702:	2b01      	cmp	r3, #1
 8004704:	d005      	beq.n	8004712 <dir_sdi+0x2a>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	697a      	ldr	r2, [r7, #20]
 800470e:	429a      	cmp	r2, r3
 8004710:	d301      	bcc.n	8004716 <dir_sdi+0x2e>
		return FR_INT_ERR;
 8004712:	2302      	movs	r3, #2
 8004714:	e063      	b.n	80047de <dir_sdi+0xf6>
	if (!clst && dp->fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
 8004716:	697b      	ldr	r3, [r7, #20]
 8004718:	2b00      	cmp	r3, #0
 800471a:	d108      	bne.n	800472e <dir_sdi+0x46>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	781b      	ldrb	r3, [r3, #0]
 8004722:	2b03      	cmp	r3, #3
 8004724:	d103      	bne.n	800472e <dir_sdi+0x46>
		clst = dp->fs->dirbase;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472c:	617b      	str	r3, [r7, #20]

	if (clst == 0) {	/* Static table (root-directory in FAT12/16) */
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	2b00      	cmp	r3, #0
 8004732:	d10d      	bne.n	8004750 <dir_sdi+0x68>
		if (idx >= dp->fs->n_rootdir)	/* Is index out of range? */
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	891b      	ldrh	r3, [r3, #8]
 800473a:	461a      	mov	r2, r3
 800473c:	683b      	ldr	r3, [r7, #0]
 800473e:	4293      	cmp	r3, r2
 8004740:	d301      	bcc.n	8004746 <dir_sdi+0x5e>
			return FR_INT_ERR;
 8004742:	2302      	movs	r3, #2
 8004744:	e04b      	b.n	80047de <dir_sdi+0xf6>
		sect = dp->fs->dirbase;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800474c:	613b      	str	r3, [r7, #16]
 800474e:	e02c      	b.n	80047aa <dir_sdi+0xc2>
	}
	else {				/* Dynamic table (root-directory in FAT32 or sub-directory) */
		ic = SS(dp->fs) / SZ_DIRE * dp->fs->csize;	/* Entries per cluster */
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	789b      	ldrb	r3, [r3, #2]
 8004756:	011b      	lsls	r3, r3, #4
 8004758:	60fb      	str	r3, [r7, #12]
		while (idx >= ic) {	/* Follow cluster chain */
 800475a:	e01b      	b.n	8004794 <dir_sdi+0xac>
			clst = get_fat(dp->fs, clst);				/* Get next cluster */
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	6979      	ldr	r1, [r7, #20]
 8004762:	4618      	mov	r0, r3
 8004764:	f7ff fd12 	bl	800418c <get_fat>
 8004768:	6178      	str	r0, [r7, #20]
			if (clst == 0xFFFFFFFF) return FR_DISK_ERR;	/* Disk error */
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004770:	d101      	bne.n	8004776 <dir_sdi+0x8e>
 8004772:	2301      	movs	r3, #1
 8004774:	e033      	b.n	80047de <dir_sdi+0xf6>
			if (clst < 2 || clst >= dp->fs->n_fatent)	/* Reached to end of table or internal error */
 8004776:	697b      	ldr	r3, [r7, #20]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d905      	bls.n	8004788 <dir_sdi+0xa0>
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	699b      	ldr	r3, [r3, #24]
 8004782:	697a      	ldr	r2, [r7, #20]
 8004784:	429a      	cmp	r2, r3
 8004786:	d301      	bcc.n	800478c <dir_sdi+0xa4>
				return FR_INT_ERR;
 8004788:	2302      	movs	r3, #2
 800478a:	e028      	b.n	80047de <dir_sdi+0xf6>
			idx -= ic;
 800478c:	683a      	ldr	r2, [r7, #0]
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	1ad3      	subs	r3, r2, r3
 8004792:	603b      	str	r3, [r7, #0]
		while (idx >= ic) {	/* Follow cluster chain */
 8004794:	683a      	ldr	r2, [r7, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	429a      	cmp	r2, r3
 800479a:	d2df      	bcs.n	800475c <dir_sdi+0x74>
		}
		sect = clust2sect(dp->fs, clst);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	6979      	ldr	r1, [r7, #20]
 80047a2:	4618      	mov	r0, r3
 80047a4:	f7ff fcd3 	bl	800414e <clust2sect>
 80047a8:	6138      	str	r0, [r7, #16]
	}
	dp->clust = clst;	/* Current cluster# */
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	697a      	ldr	r2, [r7, #20]
 80047ae:	60da      	str	r2, [r3, #12]
	if (!sect) return FR_INT_ERR;
 80047b0:	693b      	ldr	r3, [r7, #16]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d101      	bne.n	80047ba <dir_sdi+0xd2>
 80047b6:	2302      	movs	r3, #2
 80047b8:	e011      	b.n	80047de <dir_sdi+0xf6>
	dp->sect = sect + idx / (SS(dp->fs) / SZ_DIRE);					/* Sector# of the directory entry */
 80047ba:	683b      	ldr	r3, [r7, #0]
 80047bc:	091a      	lsrs	r2, r3, #4
 80047be:	693b      	ldr	r3, [r7, #16]
 80047c0:	441a      	add	r2, r3
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	611a      	str	r2, [r3, #16]
	dp->dir = dp->fs->win + (idx % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Ptr to the entry in the sector */
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	f103 0234 	add.w	r2, r3, #52	; 0x34
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	f003 030f 	and.w	r3, r3, #15
 80047d4:	015b      	lsls	r3, r3, #5
 80047d6:	441a      	add	r2, r3
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	615a      	str	r2, [r3, #20]

	return FR_OK;
 80047dc:	2300      	movs	r3, #0
}
 80047de:	4618      	mov	r0, r3
 80047e0:	3718      	adds	r7, #24
 80047e2:	46bd      	mov	sp, r7
 80047e4:	bd80      	pop	{r7, pc}

080047e6 <dir_next>:
static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table, FR_DENIED:Could not stretch */
	DIR* dp,		/* Pointer to the directory object */
	int stretch		/* 0: Do not stretch table, 1: Stretch table if needed */
)
{
 80047e6:	b590      	push	{r4, r7, lr}
 80047e8:	b087      	sub	sp, #28
 80047ea:	af00      	add	r7, sp, #0
 80047ec:	6078      	str	r0, [r7, #4]
 80047ee:	6039      	str	r1, [r7, #0]
#if !_FS_READONLY
	UINT c;
#endif


	i = dp->index + 1;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	88db      	ldrh	r3, [r3, #6]
 80047f4:	3301      	adds	r3, #1
 80047f6:	60fb      	str	r3, [r7, #12]
	if (!(i & 0xFFFF) || !dp->sect)	/* Report EOT when index has reached 65535 */
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	b29b      	uxth	r3, r3
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d003      	beq.n	8004808 <dir_next+0x22>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d101      	bne.n	800480c <dir_next+0x26>
		return FR_NO_FILE;
 8004808:	2304      	movs	r3, #4
 800480a:	e0bb      	b.n	8004984 <dir_next+0x19e>

	if (!(i % (SS(dp->fs) / SZ_DIRE))) {	/* Sector changed? */
 800480c:	68fb      	ldr	r3, [r7, #12]
 800480e:	f003 030f 	and.w	r3, r3, #15
 8004812:	2b00      	cmp	r3, #0
 8004814:	f040 80a6 	bne.w	8004964 <dir_next+0x17e>
		dp->sect++;					/* Next sector */
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	691b      	ldr	r3, [r3, #16]
 800481c:	1c5a      	adds	r2, r3, #1
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	611a      	str	r2, [r3, #16]

		if (!dp->clust) {		/* Static table */
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	68db      	ldr	r3, [r3, #12]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d109      	bne.n	800483e <dir_next+0x58>
			if (i >= dp->fs->n_rootdir)	/* Report EOT if it reached end of static table */
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	891b      	ldrh	r3, [r3, #8]
 8004830:	461a      	mov	r2, r3
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	4293      	cmp	r3, r2
 8004836:	f0c0 8095 	bcc.w	8004964 <dir_next+0x17e>
				return FR_NO_FILE;
 800483a:	2304      	movs	r3, #4
 800483c:	e0a2      	b.n	8004984 <dir_next+0x19e>
		}
		else {					/* Dynamic table */
			if (((i / (SS(dp->fs) / SZ_DIRE)) & (dp->fs->csize - 1)) == 0) {	/* Cluster changed? */
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	091b      	lsrs	r3, r3, #4
 8004842:	687a      	ldr	r2, [r7, #4]
 8004844:	6812      	ldr	r2, [r2, #0]
 8004846:	7892      	ldrb	r2, [r2, #2]
 8004848:	3a01      	subs	r2, #1
 800484a:	4013      	ands	r3, r2
 800484c:	2b00      	cmp	r3, #0
 800484e:	f040 8089 	bne.w	8004964 <dir_next+0x17e>
				clst = get_fat(dp->fs, dp->clust);				/* Get next cluster */
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681a      	ldr	r2, [r3, #0]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	68db      	ldr	r3, [r3, #12]
 800485a:	4619      	mov	r1, r3
 800485c:	4610      	mov	r0, r2
 800485e:	f7ff fc95 	bl	800418c <get_fat>
 8004862:	6178      	str	r0, [r7, #20]
				if (clst <= 1) return FR_INT_ERR;
 8004864:	697b      	ldr	r3, [r7, #20]
 8004866:	2b01      	cmp	r3, #1
 8004868:	d801      	bhi.n	800486e <dir_next+0x88>
 800486a:	2302      	movs	r3, #2
 800486c:	e08a      	b.n	8004984 <dir_next+0x19e>
				if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004874:	d101      	bne.n	800487a <dir_next+0x94>
 8004876:	2301      	movs	r3, #1
 8004878:	e084      	b.n	8004984 <dir_next+0x19e>
				if (clst >= dp->fs->n_fatent) {					/* If it reached end of dynamic table, */
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	699b      	ldr	r3, [r3, #24]
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	429a      	cmp	r2, r3
 8004884:	d362      	bcc.n	800494c <dir_next+0x166>
#if !_FS_READONLY
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT */
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	2b00      	cmp	r3, #0
 800488a:	d101      	bne.n	8004890 <dir_next+0xaa>
 800488c:	2304      	movs	r3, #4
 800488e:	e079      	b.n	8004984 <dir_next+0x19e>
					clst = create_chain(dp->fs, dp->clust);		/* Stretch cluster chain */
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	68db      	ldr	r3, [r3, #12]
 8004898:	4619      	mov	r1, r3
 800489a:	4610      	mov	r0, r2
 800489c:	f7ff fe91 	bl	80045c2 <create_chain>
 80048a0:	6178      	str	r0, [r7, #20]
					if (clst == 0) return FR_DENIED;			/* No free cluster */
 80048a2:	697b      	ldr	r3, [r7, #20]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d101      	bne.n	80048ac <dir_next+0xc6>
 80048a8:	2307      	movs	r3, #7
 80048aa:	e06b      	b.n	8004984 <dir_next+0x19e>
					if (clst == 1) return FR_INT_ERR;
 80048ac:	697b      	ldr	r3, [r7, #20]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d101      	bne.n	80048b6 <dir_next+0xd0>
 80048b2:	2302      	movs	r3, #2
 80048b4:	e066      	b.n	8004984 <dir_next+0x19e>
					if (clst == 0xFFFFFFFF) return FR_DISK_ERR;
 80048b6:	697b      	ldr	r3, [r7, #20]
 80048b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048bc:	d101      	bne.n	80048c2 <dir_next+0xdc>
 80048be:	2301      	movs	r3, #1
 80048c0:	e060      	b.n	8004984 <dir_next+0x19e>
					/* Clean-up stretched table */
					if (sync_window(dp->fs)) return FR_DISK_ERR;/* Flush disk access window */
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	4618      	mov	r0, r3
 80048c8:	f7ff fb2e 	bl	8003f28 <sync_window>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d001      	beq.n	80048d6 <dir_next+0xf0>
 80048d2:	2301      	movs	r3, #1
 80048d4:	e056      	b.n	8004984 <dir_next+0x19e>
					mem_set(dp->fs->win, 0, SS(dp->fs));		/* Clear window buffer */
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	3334      	adds	r3, #52	; 0x34
 80048dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80048e0:	2100      	movs	r1, #0
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7ff fac3 	bl	8003e6e <mem_set>
					dp->fs->winsect = clust2sect(dp->fs, clst);	/* Cluster start sector */
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681a      	ldr	r2, [r3, #0]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681c      	ldr	r4, [r3, #0]
 80048f0:	6979      	ldr	r1, [r7, #20]
 80048f2:	4610      	mov	r0, r2
 80048f4:	f7ff fc2b 	bl	800414e <clust2sect>
 80048f8:	4603      	mov	r3, r0
 80048fa:	6323      	str	r3, [r4, #48]	; 0x30
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 80048fc:	2300      	movs	r3, #0
 80048fe:	613b      	str	r3, [r7, #16]
 8004900:	e015      	b.n	800492e <dir_next+0x148>
						dp->fs->wflag = 1;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2201      	movs	r2, #1
 8004908:	711a      	strb	r2, [r3, #4]
						if (sync_window(dp->fs)) return FR_DISK_ERR;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4618      	mov	r0, r3
 8004910:	f7ff fb0a 	bl	8003f28 <sync_window>
 8004914:	4603      	mov	r3, r0
 8004916:	2b00      	cmp	r3, #0
 8004918:	d001      	beq.n	800491e <dir_next+0x138>
 800491a:	2301      	movs	r3, #1
 800491c:	e032      	b.n	8004984 <dir_next+0x19e>
						dp->fs->winsect++;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004924:	3201      	adds	r2, #1
 8004926:	631a      	str	r2, [r3, #48]	; 0x30
					for (c = 0; c < dp->fs->csize; c++) {		/* Fill the new cluster with 0 */
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	3301      	adds	r3, #1
 800492c:	613b      	str	r3, [r7, #16]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	789b      	ldrb	r3, [r3, #2]
 8004934:	461a      	mov	r2, r3
 8004936:	693b      	ldr	r3, [r7, #16]
 8004938:	4293      	cmp	r3, r2
 800493a:	d3e2      	bcc.n	8004902 <dir_next+0x11c>
					}
					dp->fs->winsect -= c;						/* Rewind window offset */
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	1a8a      	subs	r2, r1, r2
 800494a:	631a      	str	r2, [r3, #48]	; 0x30
#else
					if (!stretch) return FR_NO_FILE;			/* If do not stretch, report EOT (this is to suppress warning) */
					return FR_NO_FILE;							/* Report EOT */
#endif
				}
				dp->clust = clst;				/* Initialize data for new cluster */
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	697a      	ldr	r2, [r7, #20]
 8004950:	60da      	str	r2, [r3, #12]
				dp->sect = clust2sect(dp->fs, clst);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	6979      	ldr	r1, [r7, #20]
 8004958:	4618      	mov	r0, r3
 800495a:	f7ff fbf8 	bl	800414e <clust2sect>
 800495e:	4602      	mov	r2, r0
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	611a      	str	r2, [r3, #16]
			}
		}
	}

	dp->index = (WORD)i;	/* Current index */
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	b29a      	uxth	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	80da      	strh	r2, [r3, #6]
	dp->dir = dp->fs->win + (i % (SS(dp->fs) / SZ_DIRE)) * SZ_DIRE;	/* Current entry in the window */
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f003 030f 	and.w	r3, r3, #15
 800497a:	015b      	lsls	r3, r3, #5
 800497c:	441a      	add	r2, r3
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	615a      	str	r2, [r3, #20]

	return FR_OK;
 8004982:	2300      	movs	r3, #0
}
 8004984:	4618      	mov	r0, r3
 8004986:	371c      	adds	r7, #28
 8004988:	46bd      	mov	sp, r7
 800498a:	bd90      	pop	{r4, r7, pc}

0800498c <dir_alloc>:
static
FRESULT dir_alloc (
	DIR* dp,	/* Pointer to the directory object */
	UINT nent	/* Number of contiguous entries to allocate (1-21) */
)
{
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
	FRESULT res;
	UINT n;


	res = dir_sdi(dp, 0);
 8004996:	2100      	movs	r1, #0
 8004998:	6878      	ldr	r0, [r7, #4]
 800499a:	f7ff fea5 	bl	80046e8 <dir_sdi>
 800499e:	4603      	mov	r3, r0
 80049a0:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80049a2:	7bfb      	ldrb	r3, [r7, #15]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d12d      	bne.n	8004a04 <dir_alloc+0x78>
		n = 0;
 80049a8:	2300      	movs	r3, #0
 80049aa:	60bb      	str	r3, [r7, #8]
		do {
			res = move_window(dp->fs, dp->sect);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	691b      	ldr	r3, [r3, #16]
 80049b4:	4619      	mov	r1, r3
 80049b6:	4610      	mov	r0, r2
 80049b8:	f7ff fafa 	bl	8003fb0 <move_window>
 80049bc:	4603      	mov	r3, r0
 80049be:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 80049c0:	7bfb      	ldrb	r3, [r7, #15]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d11d      	bne.n	8004a02 <dir_alloc+0x76>
			if (dp->dir[0] == DDEM || dp->dir[0] == 0) {	/* Is it a free entry? */
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	695b      	ldr	r3, [r3, #20]
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	2be5      	cmp	r3, #229	; 0xe5
 80049ce:	d004      	beq.n	80049da <dir_alloc+0x4e>
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	695b      	ldr	r3, [r3, #20]
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d107      	bne.n	80049ea <dir_alloc+0x5e>
				if (++n == nent) break;	/* A block of contiguous free entries is found */
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	3301      	adds	r3, #1
 80049de:	60bb      	str	r3, [r7, #8]
 80049e0:	68ba      	ldr	r2, [r7, #8]
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	429a      	cmp	r2, r3
 80049e6:	d102      	bne.n	80049ee <dir_alloc+0x62>
 80049e8:	e00c      	b.n	8004a04 <dir_alloc+0x78>
			} else {
				n = 0;					/* Not a blank entry. Restart to search */
 80049ea:	2300      	movs	r3, #0
 80049ec:	60bb      	str	r3, [r7, #8]
			}
			res = dir_next(dp, 1);		/* Next entry with table stretch enabled */
 80049ee:	2101      	movs	r1, #1
 80049f0:	6878      	ldr	r0, [r7, #4]
 80049f2:	f7ff fef8 	bl	80047e6 <dir_next>
 80049f6:	4603      	mov	r3, r0
 80049f8:	73fb      	strb	r3, [r7, #15]
		} while (res == FR_OK);
 80049fa:	7bfb      	ldrb	r3, [r7, #15]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d0d5      	beq.n	80049ac <dir_alloc+0x20>
 8004a00:	e000      	b.n	8004a04 <dir_alloc+0x78>
			if (res != FR_OK) break;
 8004a02:	bf00      	nop
	}
	if (res == FR_NO_FILE) res = FR_DENIED;	/* No directory entry to allocate */
 8004a04:	7bfb      	ldrb	r3, [r7, #15]
 8004a06:	2b04      	cmp	r3, #4
 8004a08:	d101      	bne.n	8004a0e <dir_alloc+0x82>
 8004a0a:	2307      	movs	r3, #7
 8004a0c:	73fb      	strb	r3, [r7, #15]
	return res;
 8004a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004a10:	4618      	mov	r0, r3
 8004a12:	3710      	adds	r7, #16
 8004a14:	46bd      	mov	sp, r7
 8004a16:	bd80      	pop	{r7, pc}

08004a18 <ld_clust>:
static
DWORD ld_clust (
	FATFS* fs,	/* Pointer to the fs object */
	BYTE* dir	/* Pointer to the directory entry */
)
{
 8004a18:	b480      	push	{r7}
 8004a1a:	b085      	sub	sp, #20
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
 8004a20:	6039      	str	r1, [r7, #0]
	DWORD cl;

	cl = LD_WORD(dir + DIR_FstClusLO);
 8004a22:	683b      	ldr	r3, [r7, #0]
 8004a24:	331b      	adds	r3, #27
 8004a26:	781b      	ldrb	r3, [r3, #0]
 8004a28:	021b      	lsls	r3, r3, #8
 8004a2a:	b21a      	sxth	r2, r3
 8004a2c:	683b      	ldr	r3, [r7, #0]
 8004a2e:	331a      	adds	r3, #26
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	b21b      	sxth	r3, r3
 8004a34:	4313      	orrs	r3, r2
 8004a36:	b21b      	sxth	r3, r3
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	60fb      	str	r3, [r7, #12]
	if (fs->fs_type == FS_FAT32)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	781b      	ldrb	r3, [r3, #0]
 8004a40:	2b03      	cmp	r3, #3
 8004a42:	d10f      	bne.n	8004a64 <ld_clust+0x4c>
		cl |= (DWORD)LD_WORD(dir + DIR_FstClusHI) << 16;
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	3315      	adds	r3, #21
 8004a48:	781b      	ldrb	r3, [r3, #0]
 8004a4a:	021b      	lsls	r3, r3, #8
 8004a4c:	b21a      	sxth	r2, r3
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	3314      	adds	r3, #20
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	b21b      	sxth	r3, r3
 8004a56:	4313      	orrs	r3, r2
 8004a58:	b21b      	sxth	r3, r3
 8004a5a:	b29b      	uxth	r3, r3
 8004a5c:	041b      	lsls	r3, r3, #16
 8004a5e:	68fa      	ldr	r2, [r7, #12]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60fb      	str	r3, [r7, #12]

	return cl;
 8004a64:	68fb      	ldr	r3, [r7, #12]
}
 8004a66:	4618      	mov	r0, r3
 8004a68:	3714      	adds	r7, #20
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a70:	4770      	bx	lr

08004a72 <st_clust>:
static
void st_clust (
	BYTE* dir,	/* Pointer to the directory entry */
	DWORD cl	/* Value to be set */
)
{
 8004a72:	b480      	push	{r7}
 8004a74:	b083      	sub	sp, #12
 8004a76:	af00      	add	r7, sp, #0
 8004a78:	6078      	str	r0, [r7, #4]
 8004a7a:	6039      	str	r1, [r7, #0]
	ST_WORD(dir + DIR_FstClusLO, cl);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	331a      	adds	r3, #26
 8004a80:	683a      	ldr	r2, [r7, #0]
 8004a82:	b2d2      	uxtb	r2, r2
 8004a84:	701a      	strb	r2, [r3, #0]
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	b29b      	uxth	r3, r3
 8004a8a:	0a1b      	lsrs	r3, r3, #8
 8004a8c:	b29a      	uxth	r2, r3
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	331b      	adds	r3, #27
 8004a92:	b2d2      	uxtb	r2, r2
 8004a94:	701a      	strb	r2, [r3, #0]
	ST_WORD(dir + DIR_FstClusHI, cl >> 16);
 8004a96:	683b      	ldr	r3, [r7, #0]
 8004a98:	0c1a      	lsrs	r2, r3, #16
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	3314      	adds	r3, #20
 8004a9e:	b2d2      	uxtb	r2, r2
 8004aa0:	701a      	strb	r2, [r3, #0]
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	0c1b      	lsrs	r3, r3, #16
 8004aa6:	b29b      	uxth	r3, r3
 8004aa8:	0a1b      	lsrs	r3, r3, #8
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	3315      	adds	r3, #21
 8004ab0:	b2d2      	uxtb	r2, r2
 8004ab2:	701a      	strb	r2, [r3, #0]
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abe:	4770      	bx	lr

08004ac0 <dir_find>:

static
FRESULT dir_find (
	DIR* dp			/* Pointer to the directory object linked to the file name */
)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b086      	sub	sp, #24
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]
	BYTE c, *dir;
#if _USE_LFN
	BYTE a, ord, sum;
#endif

	res = dir_sdi(dp, 0);			/* Rewind directory object */
 8004ac8:	2100      	movs	r1, #0
 8004aca:	6878      	ldr	r0, [r7, #4]
 8004acc:	f7ff fe0c 	bl	80046e8 <dir_sdi>
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) return res;
 8004ad4:	7dfb      	ldrb	r3, [r7, #23]
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d001      	beq.n	8004ade <dir_find+0x1e>
 8004ada:	7dfb      	ldrb	r3, [r7, #23]
 8004adc:	e037      	b.n	8004b4e <dir_find+0x8e>

#if _USE_LFN
	ord = sum = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
#endif
	do {
		res = move_window(dp->fs, dp->sect);
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	691b      	ldr	r3, [r3, #16]
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4610      	mov	r0, r2
 8004aea:	f7ff fa61 	bl	8003fb0 <move_window>
 8004aee:	4603      	mov	r3, r0
 8004af0:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004af2:	7dfb      	ldrb	r3, [r7, #23]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d126      	bne.n	8004b46 <dir_find+0x86>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	695b      	ldr	r3, [r3, #20]
 8004afc:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	781b      	ldrb	r3, [r3, #0]
 8004b02:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004b04:	7bfb      	ldrb	r3, [r7, #15]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d102      	bne.n	8004b10 <dir_find+0x50>
 8004b0a:	2304      	movs	r3, #4
 8004b0c:	75fb      	strb	r3, [r7, #23]
 8004b0e:	e01d      	b.n	8004b4c <dir_find+0x8c>
				if (!(dp->fn[NSFLAG] & NS_LOSS) && !mem_cmp(dir, dp->fn, 11)) break;	/* SFN matched? */
				ord = 0xFF; dp->lfn_idx = 0xFFFF;	/* Reset LFN sequence */
			}
		}
#else		/* Non LFN configuration */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dp->fn, 11)) /* Is it a valid entry? */
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	330b      	adds	r3, #11
 8004b14:	781b      	ldrb	r3, [r3, #0]
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d109      	bne.n	8004b32 <dir_find+0x72>
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	220b      	movs	r2, #11
 8004b24:	4619      	mov	r1, r3
 8004b26:	6938      	ldr	r0, [r7, #16]
 8004b28:	f7ff f9bc 	bl	8003ea4 <mem_cmp>
 8004b2c:	4603      	mov	r3, r0
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d00b      	beq.n	8004b4a <dir_find+0x8a>
			break;
#endif
		res = dir_next(dp, 0);		/* Next entry */
 8004b32:	2100      	movs	r1, #0
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f7ff fe56 	bl	80047e6 <dir_next>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	75fb      	strb	r3, [r7, #23]
	} while (res == FR_OK);
 8004b3e:	7dfb      	ldrb	r3, [r7, #23]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d0cc      	beq.n	8004ade <dir_find+0x1e>
 8004b44:	e002      	b.n	8004b4c <dir_find+0x8c>
		if (res != FR_OK) break;
 8004b46:	bf00      	nop
 8004b48:	e000      	b.n	8004b4c <dir_find+0x8c>
			break;
 8004b4a:	bf00      	nop

	return res;
 8004b4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b4e:	4618      	mov	r0, r3
 8004b50:	3718      	adds	r7, #24
 8004b52:	46bd      	mov	sp, r7
 8004b54:	bd80      	pop	{r7, pc}

08004b56 <dir_read>:
static
FRESULT dir_read (
	DIR* dp,		/* Pointer to the directory object */
	int vol			/* Filtered by 0:file/directory or 1:volume label */
)
{
 8004b56:	b580      	push	{r7, lr}
 8004b58:	b086      	sub	sp, #24
 8004b5a:	af00      	add	r7, sp, #0
 8004b5c:	6078      	str	r0, [r7, #4]
 8004b5e:	6039      	str	r1, [r7, #0]
	BYTE a, c, *dir;
#if _USE_LFN
	BYTE ord = 0xFF, sum = 0xFF;
#endif

	res = FR_NO_FILE;
 8004b60:	2304      	movs	r3, #4
 8004b62:	75fb      	strb	r3, [r7, #23]
	while (dp->sect) {
 8004b64:	e039      	b.n	8004bda <dir_read+0x84>
		res = move_window(dp->fs, dp->sect);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	4619      	mov	r1, r3
 8004b70:	4610      	mov	r0, r2
 8004b72:	f7ff fa1d 	bl	8003fb0 <move_window>
 8004b76:	4603      	mov	r3, r0
 8004b78:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004b7a:	7dfb      	ldrb	r3, [r7, #23]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d131      	bne.n	8004be4 <dir_read+0x8e>
		dir = dp->dir;					/* Ptr to the directory entry of current index */
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	695b      	ldr	r3, [r3, #20]
 8004b84:	613b      	str	r3, [r7, #16]
		c = dir[DIR_Name];
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	781b      	ldrb	r3, [r3, #0]
 8004b8a:	73fb      	strb	r3, [r7, #15]
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
 8004b8c:	7bfb      	ldrb	r3, [r7, #15]
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d102      	bne.n	8004b98 <dir_read+0x42>
 8004b92:	2304      	movs	r3, #4
 8004b94:	75fb      	strb	r3, [r7, #23]
 8004b96:	e02a      	b.n	8004bee <dir_read+0x98>
		a = dir[DIR_Attr] & AM_MASK;
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	330b      	adds	r3, #11
 8004b9c:	781b      	ldrb	r3, [r3, #0]
 8004b9e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004ba2:	73bb      	strb	r3, [r7, #14]
					dp->lfn_idx = 0xFFFF;		/* It has no LFN. */
				break;
			}
		}
#else		/* Non LFN configuration */
		if (c != DDEM && (_FS_RPATH || c != '.') && a != AM_LFN && (int)((a & ~AM_ARC) == AM_VOL) == vol)	/* Is it a valid entry? */
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
 8004ba6:	2be5      	cmp	r3, #229	; 0xe5
 8004ba8:	d00e      	beq.n	8004bc8 <dir_read+0x72>
 8004baa:	7bbb      	ldrb	r3, [r7, #14]
 8004bac:	2b0f      	cmp	r3, #15
 8004bae:	d00b      	beq.n	8004bc8 <dir_read+0x72>
 8004bb0:	7bbb      	ldrb	r3, [r7, #14]
 8004bb2:	f023 0320 	bic.w	r3, r3, #32
 8004bb6:	2b08      	cmp	r3, #8
 8004bb8:	bf0c      	ite	eq
 8004bba:	2301      	moveq	r3, #1
 8004bbc:	2300      	movne	r3, #0
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	683b      	ldr	r3, [r7, #0]
 8004bc4:	4293      	cmp	r3, r2
 8004bc6:	d00f      	beq.n	8004be8 <dir_read+0x92>
			break;
#endif
		res = dir_next(dp, 0);				/* Next entry */
 8004bc8:	2100      	movs	r1, #0
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7ff fe0b 	bl	80047e6 <dir_next>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	75fb      	strb	r3, [r7, #23]
		if (res != FR_OK) break;
 8004bd4:	7dfb      	ldrb	r3, [r7, #23]
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d108      	bne.n	8004bec <dir_read+0x96>
	while (dp->sect) {
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	691b      	ldr	r3, [r3, #16]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1c1      	bne.n	8004b66 <dir_read+0x10>
 8004be2:	e004      	b.n	8004bee <dir_read+0x98>
		if (res != FR_OK) break;
 8004be4:	bf00      	nop
 8004be6:	e002      	b.n	8004bee <dir_read+0x98>
			break;
 8004be8:	bf00      	nop
 8004bea:	e000      	b.n	8004bee <dir_read+0x98>
		if (res != FR_OK) break;
 8004bec:	bf00      	nop
	}

	if (res != FR_OK) dp->sect = 0;
 8004bee:	7dfb      	ldrb	r3, [r7, #23]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d002      	beq.n	8004bfa <dir_read+0xa4>
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	611a      	str	r2, [r3, #16]

	return res;
 8004bfa:	7dfb      	ldrb	r3, [r7, #23]
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3718      	adds	r7, #24
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}

08004c04 <dir_register>:
#if !_FS_READONLY
static
FRESULT dir_register (	/* FR_OK:Successful, FR_DENIED:No free entry or too many SFN collision, FR_DISK_ERR:Disk error */
	DIR* dp				/* Target directory with object name to be created */
)
{
 8004c04:	b580      	push	{r7, lr}
 8004c06:	b084      	sub	sp, #16
 8004c08:	af00      	add	r7, sp, #0
 8004c0a:	6078      	str	r0, [r7, #4]
				res = dir_next(dp, 0);	/* Next entry */
			} while (res == FR_OK && --nent);
		}
	}
#else	/* Non LFN configuration */
	res = dir_alloc(dp, 1);		/* Allocate an entry for SFN */
 8004c0c:	2101      	movs	r1, #1
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f7ff febc 	bl	800498c <dir_alloc>
 8004c14:	4603      	mov	r3, r0
 8004c16:	73fb      	strb	r3, [r7, #15]
#endif

	if (res == FR_OK) {				/* Set SFN entry */
 8004c18:	7bfb      	ldrb	r3, [r7, #15]
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d11f      	bne.n	8004c5e <dir_register+0x5a>
		res = move_window(dp->fs, dp->sect);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	4619      	mov	r1, r3
 8004c28:	4610      	mov	r0, r2
 8004c2a:	f7ff f9c1 	bl	8003fb0 <move_window>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004c32:	7bfb      	ldrb	r3, [r7, #15]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d112      	bne.n	8004c5e <dir_register+0x5a>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clean the entry */
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	695b      	ldr	r3, [r3, #20]
 8004c3c:	2220      	movs	r2, #32
 8004c3e:	2100      	movs	r1, #0
 8004c40:	4618      	mov	r0, r3
 8004c42:	f7ff f914 	bl	8003e6e <mem_set>
			mem_cpy(dp->dir, dp->fn, 11);	/* Put SFN */
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6958      	ldr	r0, [r3, #20]
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	699b      	ldr	r3, [r3, #24]
 8004c4e:	220b      	movs	r2, #11
 8004c50:	4619      	mov	r1, r3
 8004c52:	f7ff f8ed 	bl	8003e30 <mem_cpy>
#if _USE_LFN
			dp->dir[DIR_NTres] = dp->fn[NSFLAG] & (NS_BODY | NS_EXT);	/* Put NT flag */
#endif
			dp->fs->wflag = 1;
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	2201      	movs	r2, #1
 8004c5c:	711a      	strb	r2, [r3, #4]
		}
	}

	return res;
 8004c5e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}

08004c68 <dir_remove>:
#if !_FS_READONLY && !_FS_MINIMIZE
static
FRESULT dir_remove (	/* FR_OK: Successful, FR_DISK_ERR: A disk error */
	DIR* dp				/* Directory object pointing the entry to be removed */
)
{
 8004c68:	b580      	push	{r7, lr}
 8004c6a:	b084      	sub	sp, #16
 8004c6c:	af00      	add	r7, sp, #0
 8004c6e:	6078      	str	r0, [r7, #4]
		} while (res == FR_OK);
		if (res == FR_NO_FILE) res = FR_INT_ERR;
	}

#else			/* Non LFN configuration */
	res = dir_sdi(dp, dp->index);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	88db      	ldrh	r3, [r3, #6]
 8004c74:	4619      	mov	r1, r3
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f7ff fd36 	bl	80046e8 <dir_sdi>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8004c80:	7bfb      	ldrb	r3, [r7, #15]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d11b      	bne.n	8004cbe <dir_remove+0x56>
		res = move_window(dp->fs, dp->sect);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	4619      	mov	r1, r3
 8004c90:	4610      	mov	r0, r2
 8004c92:	f7ff f98d 	bl	8003fb0 <move_window>
 8004c96:	4603      	mov	r3, r0
 8004c98:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 8004c9a:	7bfb      	ldrb	r3, [r7, #15]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10e      	bne.n	8004cbe <dir_remove+0x56>
			mem_set(dp->dir, 0, SZ_DIRE);	/* Clear and mark the entry "deleted" */
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	695b      	ldr	r3, [r3, #20]
 8004ca4:	2220      	movs	r2, #32
 8004ca6:	2100      	movs	r1, #0
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7ff f8e0 	bl	8003e6e <mem_set>
			*dp->dir = DDEM;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	695b      	ldr	r3, [r3, #20]
 8004cb2:	22e5      	movs	r2, #229	; 0xe5
 8004cb4:	701a      	strb	r2, [r3, #0]
			dp->fs->wflag = 1;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	2201      	movs	r2, #1
 8004cbc:	711a      	strb	r2, [r3, #4]
		}
	}
#endif

	return res;
 8004cbe:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cc0:	4618      	mov	r0, r3
 8004cc2:	3710      	adds	r7, #16
 8004cc4:	46bd      	mov	sp, r7
 8004cc6:	bd80      	pop	{r7, pc}

08004cc8 <get_fileinfo>:
static
void get_fileinfo (		/* No return code */
	DIR* dp,			/* Pointer to the directory object */
	FILINFO* fno	 	/* Pointer to the file information to be filled */
)
{
 8004cc8:	b480      	push	{r7}
 8004cca:	b087      	sub	sp, #28
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
	BYTE *dir;
#if _USE_LFN
	WCHAR w, *lfn;
#endif

	p = fno->fname;
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	3309      	adds	r3, #9
 8004cd6:	613b      	str	r3, [r7, #16]
	if (dp->sect) {		/* Get SFN */
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d059      	beq.n	8004d94 <get_fileinfo+0xcc>
		dir = dp->dir;
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	695b      	ldr	r3, [r3, #20]
 8004ce4:	60bb      	str	r3, [r7, #8]
		i = 0;
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	617b      	str	r3, [r7, #20]
		while (i < 11) {		/* Copy name body and extension */
 8004cea:	e01c      	b.n	8004d26 <get_fileinfo+0x5e>
			c = (TCHAR)dir[i++];
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	1c5a      	adds	r2, r3, #1
 8004cf0:	617a      	str	r2, [r7, #20]
 8004cf2:	68ba      	ldr	r2, [r7, #8]
 8004cf4:	4413      	add	r3, r2
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	73fb      	strb	r3, [r7, #15]
			if (c == ' ') continue;				/* Skip padding spaces */
 8004cfa:	7bfb      	ldrb	r3, [r7, #15]
 8004cfc:	2b20      	cmp	r3, #32
 8004cfe:	d100      	bne.n	8004d02 <get_fileinfo+0x3a>
 8004d00:	e011      	b.n	8004d26 <get_fileinfo+0x5e>
			if (c == RDDEM) c = (TCHAR)DDEM;	/* Restore replaced DDEM character */
 8004d02:	7bfb      	ldrb	r3, [r7, #15]
 8004d04:	2b05      	cmp	r3, #5
 8004d06:	d101      	bne.n	8004d0c <get_fileinfo+0x44>
 8004d08:	23e5      	movs	r3, #229	; 0xe5
 8004d0a:	73fb      	strb	r3, [r7, #15]
			if (i == 9) *p++ = '.';				/* Insert a . if extension is exist */
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	2b09      	cmp	r3, #9
 8004d10:	d104      	bne.n	8004d1c <get_fileinfo+0x54>
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1c5a      	adds	r2, r3, #1
 8004d16:	613a      	str	r2, [r7, #16]
 8004d18:	222e      	movs	r2, #46	; 0x2e
 8004d1a:	701a      	strb	r2, [r3, #0]
				c = c << 8 | dir[i++];
			c = ff_convert(c, 1);	/* OEM -> Unicode */
			if (!c) c = '?';
#endif
#endif
			*p++ = c;
 8004d1c:	693b      	ldr	r3, [r7, #16]
 8004d1e:	1c5a      	adds	r2, r3, #1
 8004d20:	613a      	str	r2, [r7, #16]
 8004d22:	7bfa      	ldrb	r2, [r7, #15]
 8004d24:	701a      	strb	r2, [r3, #0]
		while (i < 11) {		/* Copy name body and extension */
 8004d26:	697b      	ldr	r3, [r7, #20]
 8004d28:	2b0a      	cmp	r3, #10
 8004d2a:	d9df      	bls.n	8004cec <get_fileinfo+0x24>
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	7ada      	ldrb	r2, [r3, #11]
 8004d30:	683b      	ldr	r3, [r7, #0]
 8004d32:	721a      	strb	r2, [r3, #8]
		fno->fsize = LD_DWORD(dir + DIR_FileSize);	/* Size */
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	331f      	adds	r3, #31
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	061a      	lsls	r2, r3, #24
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	331e      	adds	r3, #30
 8004d40:	781b      	ldrb	r3, [r3, #0]
 8004d42:	041b      	lsls	r3, r3, #16
 8004d44:	4313      	orrs	r3, r2
 8004d46:	68ba      	ldr	r2, [r7, #8]
 8004d48:	321d      	adds	r2, #29
 8004d4a:	7812      	ldrb	r2, [r2, #0]
 8004d4c:	0212      	lsls	r2, r2, #8
 8004d4e:	4313      	orrs	r3, r2
 8004d50:	68ba      	ldr	r2, [r7, #8]
 8004d52:	321c      	adds	r2, #28
 8004d54:	7812      	ldrb	r2, [r2, #0]
 8004d56:	431a      	orrs	r2, r3
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	601a      	str	r2, [r3, #0]
		fno->fdate = LD_WORD(dir + DIR_WrtDate);	/* Date */
 8004d5c:	68bb      	ldr	r3, [r7, #8]
 8004d5e:	3319      	adds	r3, #25
 8004d60:	781b      	ldrb	r3, [r3, #0]
 8004d62:	021b      	lsls	r3, r3, #8
 8004d64:	b21a      	sxth	r2, r3
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	3318      	adds	r3, #24
 8004d6a:	781b      	ldrb	r3, [r3, #0]
 8004d6c:	b21b      	sxth	r3, r3
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	b21b      	sxth	r3, r3
 8004d72:	b29a      	uxth	r2, r3
 8004d74:	683b      	ldr	r3, [r7, #0]
 8004d76:	809a      	strh	r2, [r3, #4]
		fno->ftime = LD_WORD(dir + DIR_WrtTime);	/* Time */
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	3317      	adds	r3, #23
 8004d7c:	781b      	ldrb	r3, [r3, #0]
 8004d7e:	021b      	lsls	r3, r3, #8
 8004d80:	b21a      	sxth	r2, r3
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	3316      	adds	r3, #22
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	b21b      	sxth	r3, r3
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	b21b      	sxth	r3, r3
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	80da      	strh	r2, [r3, #6]
	}
	*p = 0;		/* Terminate SFN string by a \0 */
 8004d94:	693b      	ldr	r3, [r7, #16]
 8004d96:	2200      	movs	r2, #0
 8004d98:	701a      	strb	r2, [r3, #0]
			}
		}
		p[i] = 0;	/* Terminate LFN string by a \0 */
	}
#endif
}
 8004d9a:	bf00      	nop
 8004d9c:	371c      	adds	r7, #28
 8004d9e:	46bd      	mov	sp, r7
 8004da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da4:	4770      	bx	lr
	...

08004da8 <create_name>:
static
FRESULT create_name (
	DIR* dp,			/* Pointer to the directory object */
	const TCHAR** path	/* Pointer to pointer to the segment in the path string */
)
{
 8004da8:	b580      	push	{r7, lr}
 8004daa:	b088      	sub	sp, #32
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
 8004db0:	6039      	str	r1, [r7, #0]
	BYTE b, c, d, *sfn;
	UINT ni, si, i;
	const char *p;

	/* Create file name in directory form */
	for (p = *path; *p == '/' || *p == '\\'; p++) ;	/* Strip duplicated separator */
 8004db2:	683b      	ldr	r3, [r7, #0]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	60fb      	str	r3, [r7, #12]
 8004db8:	e002      	b.n	8004dc0 <create_name+0x18>
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	3301      	adds	r3, #1
 8004dbe:	60fb      	str	r3, [r7, #12]
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	2b2f      	cmp	r3, #47	; 0x2f
 8004dc6:	d0f8      	beq.n	8004dba <create_name+0x12>
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	2b5c      	cmp	r3, #92	; 0x5c
 8004dce:	d0f4      	beq.n	8004dba <create_name+0x12>
	sfn = dp->fn;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	60bb      	str	r3, [r7, #8]
	mem_set(sfn, ' ', 11);
 8004dd6:	220b      	movs	r2, #11
 8004dd8:	2120      	movs	r1, #32
 8004dda:	68b8      	ldr	r0, [r7, #8]
 8004ddc:	f7ff f847 	bl	8003e6e <mem_set>
	si = i = b = 0; ni = 8;
 8004de0:	2300      	movs	r3, #0
 8004de2:	77fb      	strb	r3, [r7, #31]
 8004de4:	2300      	movs	r3, #0
 8004de6:	613b      	str	r3, [r7, #16]
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	617b      	str	r3, [r7, #20]
 8004dec:	2308      	movs	r3, #8
 8004dee:	61bb      	str	r3, [r7, #24]
#if _FS_RPATH
	if (p[si] == '.') { /* Is this a dot entry? */
 8004df0:	68fa      	ldr	r2, [r7, #12]
 8004df2:	697b      	ldr	r3, [r7, #20]
 8004df4:	4413      	add	r3, r2
 8004df6:	781b      	ldrb	r3, [r3, #0]
 8004df8:	2b2e      	cmp	r3, #46	; 0x2e
 8004dfa:	d12f      	bne.n	8004e5c <create_name+0xb4>
		for (;;) {
			c = (BYTE)p[si++];
 8004dfc:	697b      	ldr	r3, [r7, #20]
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	617a      	str	r2, [r7, #20]
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	4413      	add	r3, r2
 8004e06:	781b      	ldrb	r3, [r3, #0]
 8004e08:	77bb      	strb	r3, [r7, #30]
			if (c != '.' || si >= 3) break;
 8004e0a:	7fbb      	ldrb	r3, [r7, #30]
 8004e0c:	2b2e      	cmp	r3, #46	; 0x2e
 8004e0e:	d10a      	bne.n	8004e26 <create_name+0x7e>
 8004e10:	697b      	ldr	r3, [r7, #20]
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d807      	bhi.n	8004e26 <create_name+0x7e>
			sfn[i++] = c;
 8004e16:	693b      	ldr	r3, [r7, #16]
 8004e18:	1c5a      	adds	r2, r3, #1
 8004e1a:	613a      	str	r2, [r7, #16]
 8004e1c:	68ba      	ldr	r2, [r7, #8]
 8004e1e:	4413      	add	r3, r2
 8004e20:	7fba      	ldrb	r2, [r7, #30]
 8004e22:	701a      	strb	r2, [r3, #0]
			c = (BYTE)p[si++];
 8004e24:	e7ea      	b.n	8004dfc <create_name+0x54>
		}
		if (c != '/' && c != '\\' && c > ' ') return FR_INVALID_NAME;
 8004e26:	7fbb      	ldrb	r3, [r7, #30]
 8004e28:	2b2f      	cmp	r3, #47	; 0x2f
 8004e2a:	d007      	beq.n	8004e3c <create_name+0x94>
 8004e2c:	7fbb      	ldrb	r3, [r7, #30]
 8004e2e:	2b5c      	cmp	r3, #92	; 0x5c
 8004e30:	d004      	beq.n	8004e3c <create_name+0x94>
 8004e32:	7fbb      	ldrb	r3, [r7, #30]
 8004e34:	2b20      	cmp	r3, #32
 8004e36:	d901      	bls.n	8004e3c <create_name+0x94>
 8004e38:	2306      	movs	r3, #6
 8004e3a:	e0a2      	b.n	8004f82 <create_name+0x1da>
		*path = &p[si];									/* Return pointer to the next segment */
 8004e3c:	68fa      	ldr	r2, [r7, #12]
 8004e3e:	697b      	ldr	r3, [r7, #20]
 8004e40:	441a      	add	r2, r3
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	601a      	str	r2, [r3, #0]
		sfn[NSFLAG] = (c <= ' ') ? NS_LAST | NS_DOT : NS_DOT;	/* Set last segment flag if end of path */
 8004e46:	7fbb      	ldrb	r3, [r7, #30]
 8004e48:	2b20      	cmp	r3, #32
 8004e4a:	d801      	bhi.n	8004e50 <create_name+0xa8>
 8004e4c:	2224      	movs	r2, #36	; 0x24
 8004e4e:	e000      	b.n	8004e52 <create_name+0xaa>
 8004e50:	2220      	movs	r2, #32
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	330b      	adds	r3, #11
 8004e56:	701a      	strb	r2, [r3, #0]
		return FR_OK;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	e092      	b.n	8004f82 <create_name+0x1da>
	}
#endif
	for (;;) {
		c = (BYTE)p[si++];
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	1c5a      	adds	r2, r3, #1
 8004e60:	617a      	str	r2, [r7, #20]
 8004e62:	68fa      	ldr	r2, [r7, #12]
 8004e64:	4413      	add	r3, r2
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	77bb      	strb	r3, [r7, #30]
		if (c <= ' ' || c == '/' || c == '\\') break;	/* Break on end of segment */
 8004e6a:	7fbb      	ldrb	r3, [r7, #30]
 8004e6c:	2b20      	cmp	r3, #32
 8004e6e:	d953      	bls.n	8004f18 <create_name+0x170>
 8004e70:	7fbb      	ldrb	r3, [r7, #30]
 8004e72:	2b2f      	cmp	r3, #47	; 0x2f
 8004e74:	d050      	beq.n	8004f18 <create_name+0x170>
 8004e76:	7fbb      	ldrb	r3, [r7, #30]
 8004e78:	2b5c      	cmp	r3, #92	; 0x5c
 8004e7a:	d04d      	beq.n	8004f18 <create_name+0x170>
		if (c == '.' || i >= ni) {
 8004e7c:	7fbb      	ldrb	r3, [r7, #30]
 8004e7e:	2b2e      	cmp	r3, #46	; 0x2e
 8004e80:	d003      	beq.n	8004e8a <create_name+0xe2>
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	429a      	cmp	r2, r3
 8004e88:	d30f      	bcc.n	8004eaa <create_name+0x102>
			if (ni != 8 || c != '.') return FR_INVALID_NAME;
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	2b08      	cmp	r3, #8
 8004e8e:	d102      	bne.n	8004e96 <create_name+0xee>
 8004e90:	7fbb      	ldrb	r3, [r7, #30]
 8004e92:	2b2e      	cmp	r3, #46	; 0x2e
 8004e94:	d001      	beq.n	8004e9a <create_name+0xf2>
 8004e96:	2306      	movs	r3, #6
 8004e98:	e073      	b.n	8004f82 <create_name+0x1da>
			i = 8; ni = 11;
 8004e9a:	2308      	movs	r3, #8
 8004e9c:	613b      	str	r3, [r7, #16]
 8004e9e:	230b      	movs	r3, #11
 8004ea0:	61bb      	str	r3, [r7, #24]
			b <<= 2; continue;
 8004ea2:	7ffb      	ldrb	r3, [r7, #31]
 8004ea4:	009b      	lsls	r3, r3, #2
 8004ea6:	77fb      	strb	r3, [r7, #31]
 8004ea8:	e035      	b.n	8004f16 <create_name+0x16e>
		}
		if (c >= 0x80) {				/* Extended character? */
 8004eaa:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	da08      	bge.n	8004ec4 <create_name+0x11c>
			b |= 3;						/* Eliminate NT flag */
 8004eb2:	7ffb      	ldrb	r3, [r7, #31]
 8004eb4:	f043 0303 	orr.w	r3, r3, #3
 8004eb8:	77fb      	strb	r3, [r7, #31]
#ifdef _EXCVT
			c = ExCvt[c - 0x80];		/* To upper extended characters (SBCS cfg) */
 8004eba:	7fbb      	ldrb	r3, [r7, #30]
 8004ebc:	3b80      	subs	r3, #128	; 0x80
 8004ebe:	4a33      	ldr	r2, [pc, #204]	; (8004f8c <create_name+0x1e4>)
 8004ec0:	5cd3      	ldrb	r3, [r2, r3]
 8004ec2:	77bb      	strb	r3, [r7, #30]
			if (!IsDBCS2(d) || i >= ni - 1)	/* Reject invalid DBC */
				return FR_INVALID_NAME;
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* SBC */
			if (chk_chr("\"*+,:;<=>\?[]|\x7F", c))	/* Reject illegal chrs for SFN */
 8004ec4:	7fbb      	ldrb	r3, [r7, #30]
 8004ec6:	4619      	mov	r1, r3
 8004ec8:	4831      	ldr	r0, [pc, #196]	; (8004f90 <create_name+0x1e8>)
 8004eca:	f7ff f812 	bl	8003ef2 <chk_chr>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <create_name+0x130>
				return FR_INVALID_NAME;
 8004ed4:	2306      	movs	r3, #6
 8004ed6:	e054      	b.n	8004f82 <create_name+0x1da>
			if (IsUpper(c)) {			/* ASCII large capital? */
 8004ed8:	7fbb      	ldrb	r3, [r7, #30]
 8004eda:	2b40      	cmp	r3, #64	; 0x40
 8004edc:	d907      	bls.n	8004eee <create_name+0x146>
 8004ede:	7fbb      	ldrb	r3, [r7, #30]
 8004ee0:	2b5a      	cmp	r3, #90	; 0x5a
 8004ee2:	d804      	bhi.n	8004eee <create_name+0x146>
				b |= 2;
 8004ee4:	7ffb      	ldrb	r3, [r7, #31]
 8004ee6:	f043 0302 	orr.w	r3, r3, #2
 8004eea:	77fb      	strb	r3, [r7, #31]
 8004eec:	e00c      	b.n	8004f08 <create_name+0x160>
			} else {
				if (IsLower(c)) {		/* ASCII small capital? */
 8004eee:	7fbb      	ldrb	r3, [r7, #30]
 8004ef0:	2b60      	cmp	r3, #96	; 0x60
 8004ef2:	d909      	bls.n	8004f08 <create_name+0x160>
 8004ef4:	7fbb      	ldrb	r3, [r7, #30]
 8004ef6:	2b7a      	cmp	r3, #122	; 0x7a
 8004ef8:	d806      	bhi.n	8004f08 <create_name+0x160>
					b |= 1; c -= 0x20;
 8004efa:	7ffb      	ldrb	r3, [r7, #31]
 8004efc:	f043 0301 	orr.w	r3, r3, #1
 8004f00:	77fb      	strb	r3, [r7, #31]
 8004f02:	7fbb      	ldrb	r3, [r7, #30]
 8004f04:	3b20      	subs	r3, #32
 8004f06:	77bb      	strb	r3, [r7, #30]
				}
			}
			sfn[i++] = c;
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	1c5a      	adds	r2, r3, #1
 8004f0c:	613a      	str	r2, [r7, #16]
 8004f0e:	68ba      	ldr	r2, [r7, #8]
 8004f10:	4413      	add	r3, r2
 8004f12:	7fba      	ldrb	r2, [r7, #30]
 8004f14:	701a      	strb	r2, [r3, #0]
		c = (BYTE)p[si++];
 8004f16:	e7a1      	b.n	8004e5c <create_name+0xb4>
		}
	}
	*path = &p[si];						/* Return pointer to the next segment */
 8004f18:	68fa      	ldr	r2, [r7, #12]
 8004f1a:	697b      	ldr	r3, [r7, #20]
 8004f1c:	441a      	add	r2, r3
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	601a      	str	r2, [r3, #0]
	c = (c <= ' ') ? NS_LAST : 0;		/* Set last segment flag if end of path */
 8004f22:	7fbb      	ldrb	r3, [r7, #30]
 8004f24:	2b20      	cmp	r3, #32
 8004f26:	d801      	bhi.n	8004f2c <create_name+0x184>
 8004f28:	2304      	movs	r3, #4
 8004f2a:	e000      	b.n	8004f2e <create_name+0x186>
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	77bb      	strb	r3, [r7, #30]

	if (!i) return FR_INVALID_NAME;		/* Reject nul string */
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d101      	bne.n	8004f3a <create_name+0x192>
 8004f36:	2306      	movs	r3, #6
 8004f38:	e023      	b.n	8004f82 <create_name+0x1da>
	if (sfn[0] == DDEM) sfn[0] = RDDEM;	/* When first character collides with DDEM, replace it with RDDEM */
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	2be5      	cmp	r3, #229	; 0xe5
 8004f40:	d102      	bne.n	8004f48 <create_name+0x1a0>
 8004f42:	68bb      	ldr	r3, [r7, #8]
 8004f44:	2205      	movs	r2, #5
 8004f46:	701a      	strb	r2, [r3, #0]

	if (ni == 8) b <<= 2;
 8004f48:	69bb      	ldr	r3, [r7, #24]
 8004f4a:	2b08      	cmp	r3, #8
 8004f4c:	d102      	bne.n	8004f54 <create_name+0x1ac>
 8004f4e:	7ffb      	ldrb	r3, [r7, #31]
 8004f50:	009b      	lsls	r3, r3, #2
 8004f52:	77fb      	strb	r3, [r7, #31]
	if ((b & 0x03) == 0x01) c |= NS_EXT;	/* NT flag (Name extension has only small capital) */
 8004f54:	7ffb      	ldrb	r3, [r7, #31]
 8004f56:	f003 0303 	and.w	r3, r3, #3
 8004f5a:	2b01      	cmp	r3, #1
 8004f5c:	d103      	bne.n	8004f66 <create_name+0x1be>
 8004f5e:	7fbb      	ldrb	r3, [r7, #30]
 8004f60:	f043 0310 	orr.w	r3, r3, #16
 8004f64:	77bb      	strb	r3, [r7, #30]
	if ((b & 0x0C) == 0x04) c |= NS_BODY;	/* NT flag (Name body has only small capital) */
 8004f66:	7ffb      	ldrb	r3, [r7, #31]
 8004f68:	f003 030c 	and.w	r3, r3, #12
 8004f6c:	2b04      	cmp	r3, #4
 8004f6e:	d103      	bne.n	8004f78 <create_name+0x1d0>
 8004f70:	7fbb      	ldrb	r3, [r7, #30]
 8004f72:	f043 0308 	orr.w	r3, r3, #8
 8004f76:	77bb      	strb	r3, [r7, #30]

	sfn[NSFLAG] = c;		/* Store NT flag, File name is created */
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	330b      	adds	r3, #11
 8004f7c:	7fba      	ldrb	r2, [r7, #30]
 8004f7e:	701a      	strb	r2, [r3, #0]

	return FR_OK;
 8004f80:	2300      	movs	r3, #0
#endif
}
 8004f82:	4618      	mov	r0, r3
 8004f84:	3720      	adds	r7, #32
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	08019358 	.word	0x08019358
 8004f90:	08018c74 	.word	0x08018c74

08004f94 <follow_path>:
static
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR* dp,			/* Directory object to return last directory and found object */
	const TCHAR* path	/* Full-path string to find a file or directory */
)
{
 8004f94:	b580      	push	{r7, lr}
 8004f96:	b084      	sub	sp, #16
 8004f98:	af00      	add	r7, sp, #0
 8004f9a:	6078      	str	r0, [r7, #4]
 8004f9c:	6039      	str	r1, [r7, #0]
	FRESULT res;
	BYTE *dir, ns;


#if _FS_RPATH
	if (*path == '/' || *path == '\\') {	/* There is a heading separator */
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	781b      	ldrb	r3, [r3, #0]
 8004fa2:	2b2f      	cmp	r3, #47	; 0x2f
 8004fa4:	d003      	beq.n	8004fae <follow_path+0x1a>
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b5c      	cmp	r3, #92	; 0x5c
 8004fac:	d106      	bne.n	8004fbc <follow_path+0x28>
		path++;	dp->sclust = 0;				/* Strip it and start from the root directory */
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	3301      	adds	r3, #1
 8004fb2:	603b      	str	r3, [r7, #0]
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	609a      	str	r2, [r3, #8]
 8004fba:	e004      	b.n	8004fc6 <follow_path+0x32>
	} else {								/* No heading separator */
		dp->sclust = dp->fs->cdir;			/* Start from the current directory */
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	695a      	ldr	r2, [r3, #20]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	609a      	str	r2, [r3, #8]
	if (*path == '/' || *path == '\\')		/* Strip heading separator if exist */
		path++;
	dp->sclust = 0;							/* Always start from the root directory */
#endif

	if ((UINT)*path < ' ') {				/* Null path name is the origin directory itself */
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	2b1f      	cmp	r3, #31
 8004fcc:	d809      	bhi.n	8004fe2 <follow_path+0x4e>
		res = dir_sdi(dp, 0);
 8004fce:	2100      	movs	r1, #0
 8004fd0:	6878      	ldr	r0, [r7, #4]
 8004fd2:	f7ff fb89 	bl	80046e8 <dir_sdi>
 8004fd6:	4603      	mov	r3, r0
 8004fd8:	73fb      	strb	r3, [r7, #15]
		dp->dir = 0;
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	2200      	movs	r2, #0
 8004fde:	615a      	str	r2, [r3, #20]
 8004fe0:	e056      	b.n	8005090 <follow_path+0xfc>
	} else {								/* Follow path */
		for (;;) {
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8004fe2:	463b      	mov	r3, r7
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	6878      	ldr	r0, [r7, #4]
 8004fe8:	f7ff fede 	bl	8004da8 <create_name>
 8004fec:	4603      	mov	r3, r0
 8004fee:	73fb      	strb	r3, [r7, #15]
			if (res != FR_OK) break;
 8004ff0:	7bfb      	ldrb	r3, [r7, #15]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d147      	bne.n	8005086 <follow_path+0xf2>
			res = dir_find(dp);				/* Find an object with the sagment name */
 8004ff6:	6878      	ldr	r0, [r7, #4]
 8004ff8:	f7ff fd62 	bl	8004ac0 <dir_find>
 8004ffc:	4603      	mov	r3, r0
 8004ffe:	73fb      	strb	r3, [r7, #15]
			ns = dp->fn[NSFLAG];
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	699b      	ldr	r3, [r3, #24]
 8005004:	7adb      	ldrb	r3, [r3, #11]
 8005006:	73bb      	strb	r3, [r7, #14]
			if (res != FR_OK) {				/* Failed to find the object */
 8005008:	7bfb      	ldrb	r3, [r7, #15]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d01d      	beq.n	800504a <follow_path+0xb6>
				if (res == FR_NO_FILE) {	/* Object is not found */
 800500e:	7bfb      	ldrb	r3, [r7, #15]
 8005010:	2b04      	cmp	r3, #4
 8005012:	d13a      	bne.n	800508a <follow_path+0xf6>
					if (_FS_RPATH && (ns & NS_DOT)) {	/* If dot entry is not exist, */
 8005014:	7bbb      	ldrb	r3, [r7, #14]
 8005016:	f003 0320 	and.w	r3, r3, #32
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00d      	beq.n	800503a <follow_path+0xa6>
						dp->sclust = 0; dp->dir = 0;	/* it is the root directory and stay there */
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	2200      	movs	r2, #0
 8005022:	609a      	str	r2, [r3, #8]
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2200      	movs	r2, #0
 8005028:	615a      	str	r2, [r3, #20]
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 800502a:	7bbb      	ldrb	r3, [r7, #14]
 800502c:	f003 0304 	and.w	r3, r3, #4
 8005030:	2b00      	cmp	r3, #0
 8005032:	d026      	beq.n	8005082 <follow_path+0xee>
						res = FR_OK;					/* Ended at the root directroy. Function completed. */
 8005034:	2300      	movs	r3, #0
 8005036:	73fb      	strb	r3, [r7, #15]
					} else {							/* Could not find the object */
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
					}
				}
				break;
 8005038:	e027      	b.n	800508a <follow_path+0xf6>
						if (!(ns & NS_LAST)) res = FR_NO_PATH;	/* Adjust error code if not last segment */
 800503a:	7bbb      	ldrb	r3, [r7, #14]
 800503c:	f003 0304 	and.w	r3, r3, #4
 8005040:	2b00      	cmp	r3, #0
 8005042:	d122      	bne.n	800508a <follow_path+0xf6>
 8005044:	2305      	movs	r3, #5
 8005046:	73fb      	strb	r3, [r7, #15]
				break;
 8005048:	e01f      	b.n	800508a <follow_path+0xf6>
			}
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800504a:	7bbb      	ldrb	r3, [r7, #14]
 800504c:	f003 0304 	and.w	r3, r3, #4
 8005050:	2b00      	cmp	r3, #0
 8005052:	d11c      	bne.n	800508e <follow_path+0xfa>
			dir = dp->dir;						/* Follow the sub-directory */
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	695b      	ldr	r3, [r3, #20]
 8005058:	60bb      	str	r3, [r7, #8]
			if (!(dir[DIR_Attr] & AM_DIR)) {	/* It is not a sub-directory and cannot follow */
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	330b      	adds	r3, #11
 800505e:	781b      	ldrb	r3, [r3, #0]
 8005060:	f003 0310 	and.w	r3, r3, #16
 8005064:	2b00      	cmp	r3, #0
 8005066:	d102      	bne.n	800506e <follow_path+0xda>
				res = FR_NO_PATH; break;
 8005068:	2305      	movs	r3, #5
 800506a:	73fb      	strb	r3, [r7, #15]
 800506c:	e010      	b.n	8005090 <follow_path+0xfc>
			}
			dp->sclust = ld_clust(dp->fs, dir);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68b9      	ldr	r1, [r7, #8]
 8005074:	4618      	mov	r0, r3
 8005076:	f7ff fccf 	bl	8004a18 <ld_clust>
 800507a:	4602      	mov	r2, r0
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	609a      	str	r2, [r3, #8]
 8005080:	e7af      	b.n	8004fe2 <follow_path+0x4e>
						if (!(ns & NS_LAST)) continue;	/* Continue to follow if not last segment */
 8005082:	bf00      	nop
			res = create_name(dp, &path);	/* Get a segment name of the path */
 8005084:	e7ad      	b.n	8004fe2 <follow_path+0x4e>
			if (res != FR_OK) break;
 8005086:	bf00      	nop
 8005088:	e002      	b.n	8005090 <follow_path+0xfc>
				break;
 800508a:	bf00      	nop
 800508c:	e000      	b.n	8005090 <follow_path+0xfc>
			if (ns & NS_LAST) break;			/* Last segment matched. Function completed. */
 800508e:	bf00      	nop
		}
	}

	return res;
 8005090:	7bfb      	ldrb	r3, [r7, #15]
}
 8005092:	4618      	mov	r0, r3
 8005094:	3710      	adds	r7, #16
 8005096:	46bd      	mov	sp, r7
 8005098:	bd80      	pop	{r7, pc}
	...

0800509c <get_ldnumber>:

static
int get_ldnumber (		/* Returns logical drive number (-1:invalid drive) */
	const TCHAR** path	/* Pointer to pointer to the path name */
)
{
 800509c:	b480      	push	{r7}
 800509e:	b089      	sub	sp, #36	; 0x24
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
	const TCHAR *tp, *tt;
	UINT i;
	int vol = -1;
 80050a4:	f04f 33ff 	mov.w	r3, #4294967295
 80050a8:	613b      	str	r3, [r7, #16]
	char c;
	TCHAR tc;
#endif


	if (*path) {	/* If the pointer is not a null */
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d06f      	beq.n	8005192 <get_ldnumber+0xf6>
		for (tt = *path; (UINT)*tt >= (_USE_LFN ? ' ' : '!') && *tt != ':'; tt++) ;	/* Find ':' in the path */
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	61bb      	str	r3, [r7, #24]
 80050b8:	e002      	b.n	80050c0 <get_ldnumber+0x24>
 80050ba:	69bb      	ldr	r3, [r7, #24]
 80050bc:	3301      	adds	r3, #1
 80050be:	61bb      	str	r3, [r7, #24]
 80050c0:	69bb      	ldr	r3, [r7, #24]
 80050c2:	781b      	ldrb	r3, [r3, #0]
 80050c4:	2b20      	cmp	r3, #32
 80050c6:	d903      	bls.n	80050d0 <get_ldnumber+0x34>
 80050c8:	69bb      	ldr	r3, [r7, #24]
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	2b3a      	cmp	r3, #58	; 0x3a
 80050ce:	d1f4      	bne.n	80050ba <get_ldnumber+0x1e>
		if (*tt == ':') {	/* If a ':' is exist in the path name */
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	781b      	ldrb	r3, [r3, #0]
 80050d4:	2b3a      	cmp	r3, #58	; 0x3a
 80050d6:	d159      	bne.n	800518c <get_ldnumber+0xf0>
			tp = *path;
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	61fb      	str	r3, [r7, #28]
			i = *tp++ - '0'; 
 80050de:	69fb      	ldr	r3, [r7, #28]
 80050e0:	1c5a      	adds	r2, r3, #1
 80050e2:	61fa      	str	r2, [r7, #28]
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	3b30      	subs	r3, #48	; 0x30
 80050e8:	617b      	str	r3, [r7, #20]
			if (i < 10 && tp == tt) {	/* Is there a numeric drive id? */
 80050ea:	697b      	ldr	r3, [r7, #20]
 80050ec:	2b09      	cmp	r3, #9
 80050ee:	d80f      	bhi.n	8005110 <get_ldnumber+0x74>
 80050f0:	69fa      	ldr	r2, [r7, #28]
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d10b      	bne.n	8005110 <get_ldnumber+0x74>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 80050f8:	697b      	ldr	r3, [r7, #20]
 80050fa:	2b08      	cmp	r3, #8
 80050fc:	d844      	bhi.n	8005188 <get_ldnumber+0xec>
					vol = (int)i;
 80050fe:	697b      	ldr	r3, [r7, #20]
 8005100:	613b      	str	r3, [r7, #16]
					*path = ++tt;
 8005102:	69bb      	ldr	r3, [r7, #24]
 8005104:	3301      	adds	r3, #1
 8005106:	61bb      	str	r3, [r7, #24]
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	69ba      	ldr	r2, [r7, #24]
 800510c:	601a      	str	r2, [r3, #0]
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 800510e:	e03b      	b.n	8005188 <get_ldnumber+0xec>
				}
			}
#if _STR_VOLUME_ID
			 else {	/* No numeric drive number, find string drive id */
				i = 0; tt++;
 8005110:	2300      	movs	r3, #0
 8005112:	617b      	str	r3, [r7, #20]
 8005114:	69bb      	ldr	r3, [r7, #24]
 8005116:	3301      	adds	r3, #1
 8005118:	61bb      	str	r3, [r7, #24]
				do {
					sp = str[i]; tp = *path;
 800511a:	4a21      	ldr	r2, [pc, #132]	; (80051a0 <get_ldnumber+0x104>)
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005122:	60fb      	str	r3, [r7, #12]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	61fb      	str	r3, [r7, #28]
					do {	/* Compare a string drive id with path name */
						c = *sp++; tc = *tp++;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	1c5a      	adds	r2, r3, #1
 800512e:	60fa      	str	r2, [r7, #12]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	72bb      	strb	r3, [r7, #10]
 8005134:	69fb      	ldr	r3, [r7, #28]
 8005136:	1c5a      	adds	r2, r3, #1
 8005138:	61fa      	str	r2, [r7, #28]
 800513a:	781b      	ldrb	r3, [r3, #0]
 800513c:	72fb      	strb	r3, [r7, #11]
						if (IsLower(tc)) tc -= 0x20;
 800513e:	7afb      	ldrb	r3, [r7, #11]
 8005140:	2b60      	cmp	r3, #96	; 0x60
 8005142:	d905      	bls.n	8005150 <get_ldnumber+0xb4>
 8005144:	7afb      	ldrb	r3, [r7, #11]
 8005146:	2b7a      	cmp	r3, #122	; 0x7a
 8005148:	d802      	bhi.n	8005150 <get_ldnumber+0xb4>
 800514a:	7afb      	ldrb	r3, [r7, #11]
 800514c:	3b20      	subs	r3, #32
 800514e:	72fb      	strb	r3, [r7, #11]
					} while (c && (TCHAR)c == tc);
 8005150:	7abb      	ldrb	r3, [r7, #10]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d003      	beq.n	800515e <get_ldnumber+0xc2>
 8005156:	7aba      	ldrb	r2, [r7, #10]
 8005158:	7afb      	ldrb	r3, [r7, #11]
 800515a:	429a      	cmp	r2, r3
 800515c:	d0e5      	beq.n	800512a <get_ldnumber+0x8e>
				} while ((c || tp != tt) && ++i < _VOLUMES);	/* Repeat for each id until pattern match */
 800515e:	7abb      	ldrb	r3, [r7, #10]
 8005160:	2b00      	cmp	r3, #0
 8005162:	d103      	bne.n	800516c <get_ldnumber+0xd0>
 8005164:	69fa      	ldr	r2, [r7, #28]
 8005166:	69bb      	ldr	r3, [r7, #24]
 8005168:	429a      	cmp	r2, r3
 800516a:	d005      	beq.n	8005178 <get_ldnumber+0xdc>
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	3301      	adds	r3, #1
 8005170:	617b      	str	r3, [r7, #20]
 8005172:	697b      	ldr	r3, [r7, #20]
 8005174:	2b08      	cmp	r3, #8
 8005176:	d9d0      	bls.n	800511a <get_ldnumber+0x7e>
				if (i < _VOLUMES) {	/* If a drive id is found, get the value and strip it */
 8005178:	697b      	ldr	r3, [r7, #20]
 800517a:	2b08      	cmp	r3, #8
 800517c:	d804      	bhi.n	8005188 <get_ldnumber+0xec>
					vol = (int)i;
 800517e:	697b      	ldr	r3, [r7, #20]
 8005180:	613b      	str	r3, [r7, #16]
					*path = tt;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	69ba      	ldr	r2, [r7, #24]
 8005186:	601a      	str	r2, [r3, #0]
				}
			}
#endif
			return vol;
 8005188:	693b      	ldr	r3, [r7, #16]
 800518a:	e003      	b.n	8005194 <get_ldnumber+0xf8>
		}
#if _FS_RPATH && _VOLUMES >= 2
		vol = CurrVol;	/* Current drive */
 800518c:	4b05      	ldr	r3, [pc, #20]	; (80051a4 <get_ldnumber+0x108>)
 800518e:	781b      	ldrb	r3, [r3, #0]
 8005190:	613b      	str	r3, [r7, #16]
#else
		vol = 0;		/* Drive 0 */
#endif
	}
	return vol;
 8005192:	693b      	ldr	r3, [r7, #16]
}
 8005194:	4618      	mov	r0, r3
 8005196:	3724      	adds	r7, #36	; 0x24
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	080193d8 	.word	0x080193d8
 80051a4:	200011ea 	.word	0x200011ea

080051a8 <check_fs>:
static
BYTE check_fs (	/* 0:FAT boor sector, 1:Valid boor sector but not FAT, 2:Not a boot sector, 3:Disk error */
	FATFS* fs,	/* File system object */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b082      	sub	sp, #8
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]
 80051b0:	6039      	str	r1, [r7, #0]
	fs->wflag = 0; fs->winsect = 0xFFFFFFFF;	/* Invaidate window */
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	2200      	movs	r2, #0
 80051b6:	711a      	strb	r2, [r3, #4]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	f04f 32ff 	mov.w	r2, #4294967295
 80051be:	631a      	str	r2, [r3, #48]	; 0x30
	if (move_window(fs, sect) != FR_OK)			/* Load boot record */
 80051c0:	6839      	ldr	r1, [r7, #0]
 80051c2:	6878      	ldr	r0, [r7, #4]
 80051c4:	f7fe fef4 	bl	8003fb0 <move_window>
 80051c8:	4603      	mov	r3, r0
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d001      	beq.n	80051d2 <check_fs+0x2a>
		return 3;
 80051ce:	2303      	movs	r3, #3
 80051d0:	e04a      	b.n	8005268 <check_fs+0xc0>

	if (LD_WORD(&fs->win[BS_55AA]) != 0xAA55)	/* Check boot record signature (always placed at offset 510 even if the sector size is >512) */
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f203 2332 	addw	r3, r3, #562	; 0x232
 80051d8:	3301      	adds	r3, #1
 80051da:	781b      	ldrb	r3, [r3, #0]
 80051dc:	021b      	lsls	r3, r3, #8
 80051de:	b21a      	sxth	r2, r3
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
 80051e6:	b21b      	sxth	r3, r3
 80051e8:	4313      	orrs	r3, r2
 80051ea:	b21b      	sxth	r3, r3
 80051ec:	4a20      	ldr	r2, [pc, #128]	; (8005270 <check_fs+0xc8>)
 80051ee:	4293      	cmp	r3, r2
 80051f0:	d001      	beq.n	80051f6 <check_fs+0x4e>
		return 2;
 80051f2:	2302      	movs	r3, #2
 80051f4:	e038      	b.n	8005268 <check_fs+0xc0>

	if ((LD_DWORD(&fs->win[BS_FilSysType]) & 0xFFFFFF) == 0x544146)		/* Check "FAT" string */
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	336a      	adds	r3, #106	; 0x6a
 80051fa:	3303      	adds	r3, #3
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	061a      	lsls	r2, r3, #24
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	336a      	adds	r3, #106	; 0x6a
 8005204:	3302      	adds	r3, #2
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	041b      	lsls	r3, r3, #16
 800520a:	4313      	orrs	r3, r2
 800520c:	687a      	ldr	r2, [r7, #4]
 800520e:	326a      	adds	r2, #106	; 0x6a
 8005210:	3201      	adds	r2, #1
 8005212:	7812      	ldrb	r2, [r2, #0]
 8005214:	0212      	lsls	r2, r2, #8
 8005216:	4313      	orrs	r3, r2
 8005218:	687a      	ldr	r2, [r7, #4]
 800521a:	f892 206a 	ldrb.w	r2, [r2, #106]	; 0x6a
 800521e:	4313      	orrs	r3, r2
 8005220:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005224:	4a13      	ldr	r2, [pc, #76]	; (8005274 <check_fs+0xcc>)
 8005226:	4293      	cmp	r3, r2
 8005228:	d101      	bne.n	800522e <check_fs+0x86>
		return 0;
 800522a:	2300      	movs	r3, #0
 800522c:	e01c      	b.n	8005268 <check_fs+0xc0>
	if ((LD_DWORD(&fs->win[BS_FilSysType32]) & 0xFFFFFF) == 0x544146)	/* Check "FAT" string */
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	3386      	adds	r3, #134	; 0x86
 8005232:	3303      	adds	r3, #3
 8005234:	781b      	ldrb	r3, [r3, #0]
 8005236:	061a      	lsls	r2, r3, #24
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	3386      	adds	r3, #134	; 0x86
 800523c:	3302      	adds	r3, #2
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	041b      	lsls	r3, r3, #16
 8005242:	4313      	orrs	r3, r2
 8005244:	687a      	ldr	r2, [r7, #4]
 8005246:	3286      	adds	r2, #134	; 0x86
 8005248:	3201      	adds	r2, #1
 800524a:	7812      	ldrb	r2, [r2, #0]
 800524c:	0212      	lsls	r2, r2, #8
 800524e:	4313      	orrs	r3, r2
 8005250:	687a      	ldr	r2, [r7, #4]
 8005252:	f892 2086 	ldrb.w	r2, [r2, #134]	; 0x86
 8005256:	4313      	orrs	r3, r2
 8005258:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800525c:	4a05      	ldr	r2, [pc, #20]	; (8005274 <check_fs+0xcc>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d101      	bne.n	8005266 <check_fs+0xbe>
		return 0;
 8005262:	2300      	movs	r3, #0
 8005264:	e000      	b.n	8005268 <check_fs+0xc0>

	return 1;
 8005266:	2301      	movs	r3, #1
}
 8005268:	4618      	mov	r0, r3
 800526a:	3708      	adds	r7, #8
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	ffffaa55 	.word	0xffffaa55
 8005274:	00544146 	.word	0x00544146

08005278 <find_volume>:
FRESULT find_volume (	/* FR_OK(0): successful, !=0: any error occurred */
	FATFS** rfs,		/* Pointer to pointer to the found file system object */
	const TCHAR** path,	/* Pointer to pointer to the path name (drive number) */
	BYTE wmode			/* !=0: Check write protection for write access */
)
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b096      	sub	sp, #88	; 0x58
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	4613      	mov	r3, r2
 8005284:	71fb      	strb	r3, [r7, #7]
	FATFS *fs;
	UINT i;


	/* Get logical drive number from the path name */
	*rfs = 0;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	2200      	movs	r2, #0
 800528a:	601a      	str	r2, [r3, #0]
	vol = get_ldnumber(path);
 800528c:	68b8      	ldr	r0, [r7, #8]
 800528e:	f7ff ff05 	bl	800509c <get_ldnumber>
 8005292:	63f8      	str	r0, [r7, #60]	; 0x3c
	if (vol < 0) return FR_INVALID_DRIVE;
 8005294:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005296:	2b00      	cmp	r3, #0
 8005298:	da01      	bge.n	800529e <find_volume+0x26>
 800529a:	230b      	movs	r3, #11
 800529c:	e291      	b.n	80057c2 <find_volume+0x54a>

	/* Check if the file system object is valid or not */
	fs = FatFs[vol];					/* Get pointer to the file system object */
 800529e:	4a9a      	ldr	r2, [pc, #616]	; (8005508 <find_volume+0x290>)
 80052a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80052a6:	63bb      	str	r3, [r7, #56]	; 0x38
	if (!fs) return FR_NOT_ENABLED;		/* Is the file system object available? */
 80052a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <find_volume+0x3a>
 80052ae:	230c      	movs	r3, #12
 80052b0:	e287      	b.n	80057c2 <find_volume+0x54a>

	ENTER_FF(fs);						/* Lock the volume */
	*rfs = fs;							/* Return pointer to the file system object */
 80052b2:	68fb      	ldr	r3, [r7, #12]
 80052b4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80052b6:	601a      	str	r2, [r3, #0]

	if (fs->fs_type) {					/* If the volume has been mounted */
 80052b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052ba:	781b      	ldrb	r3, [r3, #0]
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d01a      	beq.n	80052f6 <find_volume+0x7e>
		stat = disk_status(fs->drv);
 80052c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c2:	785b      	ldrb	r3, [r3, #1]
 80052c4:	4618      	mov	r0, r3
 80052c6:	f7fd fabf 	bl	8002848 <disk_status>
 80052ca:	4603      	mov	r3, r0
 80052cc:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
		if (!(stat & STA_NOINIT)) {		/* and the physical drive is kept initialized */
 80052d0:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80052d4:	f003 0301 	and.w	r3, r3, #1
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d10c      	bne.n	80052f6 <find_volume+0x7e>
			if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check write protection if needed */
 80052dc:	79fb      	ldrb	r3, [r7, #7]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d007      	beq.n	80052f2 <find_volume+0x7a>
 80052e2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80052e6:	f003 0304 	and.w	r3, r3, #4
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d001      	beq.n	80052f2 <find_volume+0x7a>
				return FR_WRITE_PROTECTED;
 80052ee:	230a      	movs	r3, #10
 80052f0:	e267      	b.n	80057c2 <find_volume+0x54a>
			return FR_OK;				/* The file system object is valid */
 80052f2:	2300      	movs	r3, #0
 80052f4:	e265      	b.n	80057c2 <find_volume+0x54a>
	}

	/* The file system object is not valid. */
	/* Following code attempts to mount the volume. (analyze BPB and initialize the fs object) */

	fs->fs_type = 0;					/* Clear the file system object */
 80052f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052f8:	2200      	movs	r2, #0
 80052fa:	701a      	strb	r2, [r3, #0]
	fs->drv = LD2PD(vol);				/* Bind the logical drive and a physical drive */
 80052fc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80052fe:	b2da      	uxtb	r2, r3
 8005300:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005302:	705a      	strb	r2, [r3, #1]
	stat = disk_initialize(fs->drv);	/* Initialize the physical drive */
 8005304:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005306:	785b      	ldrb	r3, [r3, #1]
 8005308:	4618      	mov	r0, r3
 800530a:	f7fd fa7b 	bl	8002804 <disk_initialize>
 800530e:	4603      	mov	r3, r0
 8005310:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	if (stat & STA_NOINIT)				/* Check if the initialization succeeded */
 8005314:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8005318:	f003 0301 	and.w	r3, r3, #1
 800531c:	2b00      	cmp	r3, #0
 800531e:	d001      	beq.n	8005324 <find_volume+0xac>
		return FR_NOT_READY;			/* Failed to initialize due to no medium or hard error */
 8005320:	2303      	movs	r3, #3
 8005322:	e24e      	b.n	80057c2 <find_volume+0x54a>
	if (!_FS_READONLY && wmode && (stat & STA_PROTECT))	/* Check disk write protection if needed */
 8005324:	79fb      	ldrb	r3, [r7, #7]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d007      	beq.n	800533a <find_volume+0xc2>
 800532a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 800532e:	f003 0304 	and.w	r3, r3, #4
 8005332:	2b00      	cmp	r3, #0
 8005334:	d001      	beq.n	800533a <find_volume+0xc2>
		return FR_WRITE_PROTECTED;
 8005336:	230a      	movs	r3, #10
 8005338:	e243      	b.n	80057c2 <find_volume+0x54a>
#if _MAX_SS != _MIN_SS						/* Get sector size (multiple sector size cfg only) */
	if (disk_ioctl(fs->drv, GET_SECTOR_SIZE, &SS(fs)) != RES_OK
		|| SS(fs) < _MIN_SS || SS(fs) > _MAX_SS) return FR_DISK_ERR;
#endif
	/* Find an FAT partition on the drive. Supports only generic partitioning, FDISK and SFD. */
	bsect = 0;
 800533a:	2300      	movs	r3, #0
 800533c:	653b      	str	r3, [r7, #80]	; 0x50
	fmt = check_fs(fs, bsect);					/* Load sector 0 and check if it is an FAT boot sector as SFD */
 800533e:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8005340:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005342:	f7ff ff31 	bl	80051a8 <check_fs>
 8005346:	4603      	mov	r3, r0
 8005348:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (fmt == 1 || (!fmt && (LD2PT(vol)))) {	/* Not an FAT boot sector or forced partition number */
 800534c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005350:	2b01      	cmp	r3, #1
 8005352:	d155      	bne.n	8005400 <find_volume+0x188>
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 8005354:	2300      	movs	r3, #0
 8005356:	643b      	str	r3, [r7, #64]	; 0x40
 8005358:	e02a      	b.n	80053b0 <find_volume+0x138>
			pt = fs->win + MBR_Table + i * SZ_PTE;
 800535a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800535c:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005360:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005362:	011b      	lsls	r3, r3, #4
 8005364:	f503 73df 	add.w	r3, r3, #446	; 0x1be
 8005368:	4413      	add	r3, r2
 800536a:	633b      	str	r3, [r7, #48]	; 0x30
			br[i] = pt[4] ? LD_DWORD(&pt[8]) : 0;
 800536c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800536e:	3304      	adds	r3, #4
 8005370:	781b      	ldrb	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d012      	beq.n	800539c <find_volume+0x124>
 8005376:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005378:	330b      	adds	r3, #11
 800537a:	781b      	ldrb	r3, [r3, #0]
 800537c:	061a      	lsls	r2, r3, #24
 800537e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005380:	330a      	adds	r3, #10
 8005382:	781b      	ldrb	r3, [r3, #0]
 8005384:	041b      	lsls	r3, r3, #16
 8005386:	4313      	orrs	r3, r2
 8005388:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800538a:	3209      	adds	r2, #9
 800538c:	7812      	ldrb	r2, [r2, #0]
 800538e:	0212      	lsls	r2, r2, #8
 8005390:	4313      	orrs	r3, r2
 8005392:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005394:	3208      	adds	r2, #8
 8005396:	7812      	ldrb	r2, [r2, #0]
 8005398:	431a      	orrs	r2, r3
 800539a:	e000      	b.n	800539e <find_volume+0x126>
 800539c:	2200      	movs	r2, #0
 800539e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a0:	009b      	lsls	r3, r3, #2
 80053a2:	3358      	adds	r3, #88	; 0x58
 80053a4:	443b      	add	r3, r7
 80053a6:	f843 2c44 	str.w	r2, [r3, #-68]
		for (i = 0; i < 4; i++) {			/* Get partition offset */
 80053aa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053ac:	3301      	adds	r3, #1
 80053ae:	643b      	str	r3, [r7, #64]	; 0x40
 80053b0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053b2:	2b03      	cmp	r3, #3
 80053b4:	d9d1      	bls.n	800535a <find_volume+0xe2>
		}
		i = LD2PT(vol);						/* Partition number: 0:auto, 1-4:forced */
 80053b6:	2300      	movs	r3, #0
 80053b8:	643b      	str	r3, [r7, #64]	; 0x40
		if (i) i--;
 80053ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d002      	beq.n	80053c6 <find_volume+0x14e>
 80053c0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053c2:	3b01      	subs	r3, #1
 80053c4:	643b      	str	r3, [r7, #64]	; 0x40
		do {								/* Find an FAT volume */
			bsect = br[i];
 80053c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053c8:	009b      	lsls	r3, r3, #2
 80053ca:	3358      	adds	r3, #88	; 0x58
 80053cc:	443b      	add	r3, r7
 80053ce:	f853 3c44 	ldr.w	r3, [r3, #-68]
 80053d2:	653b      	str	r3, [r7, #80]	; 0x50
			fmt = bsect ? check_fs(fs, bsect) : 2;	/* Check the partition */
 80053d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d005      	beq.n	80053e6 <find_volume+0x16e>
 80053da:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80053dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80053de:	f7ff fee3 	bl	80051a8 <check_fs>
 80053e2:	4603      	mov	r3, r0
 80053e4:	e000      	b.n	80053e8 <find_volume+0x170>
 80053e6:	2302      	movs	r3, #2
 80053e8:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
		} while (!LD2PT(vol) && fmt && ++i < 4);
 80053ec:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d005      	beq.n	8005400 <find_volume+0x188>
 80053f4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053f6:	3301      	adds	r3, #1
 80053f8:	643b      	str	r3, [r7, #64]	; 0x40
 80053fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053fc:	2b03      	cmp	r3, #3
 80053fe:	d9e2      	bls.n	80053c6 <find_volume+0x14e>
	}
	if (fmt == 3) return FR_DISK_ERR;		/* An error occured in the disk I/O layer */
 8005400:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005404:	2b03      	cmp	r3, #3
 8005406:	d101      	bne.n	800540c <find_volume+0x194>
 8005408:	2301      	movs	r3, #1
 800540a:	e1da      	b.n	80057c2 <find_volume+0x54a>
	if (fmt) return FR_NO_FILESYSTEM;		/* No FAT volume is found */
 800540c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005410:	2b00      	cmp	r3, #0
 8005412:	d001      	beq.n	8005418 <find_volume+0x1a0>
 8005414:	230d      	movs	r3, #13
 8005416:	e1d4      	b.n	80057c2 <find_volume+0x54a>

	/* An FAT volume is found. Following code initializes the file system object */

	if (LD_WORD(fs->win + BPB_BytsPerSec) != SS(fs))	/* (BPB_BytsPerSec must be equal to the physical sector size) */
 8005418:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800541a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800541e:	021b      	lsls	r3, r3, #8
 8005420:	b21a      	sxth	r2, r3
 8005422:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005424:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005428:	b21b      	sxth	r3, r3
 800542a:	4313      	orrs	r3, r2
 800542c:	b21b      	sxth	r3, r3
 800542e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005432:	d001      	beq.n	8005438 <find_volume+0x1c0>
		return FR_NO_FILESYSTEM;
 8005434:	230d      	movs	r3, #13
 8005436:	e1c4      	b.n	80057c2 <find_volume+0x54a>

	fasize = LD_WORD(fs->win + BPB_FATSz16);			/* Number of sectors per FAT */
 8005438:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800543a:	f893 304b 	ldrb.w	r3, [r3, #75]	; 0x4b
 800543e:	021b      	lsls	r3, r3, #8
 8005440:	b21a      	sxth	r2, r3
 8005442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005444:	f893 304a 	ldrb.w	r3, [r3, #74]	; 0x4a
 8005448:	b21b      	sxth	r3, r3
 800544a:	4313      	orrs	r3, r2
 800544c:	b21b      	sxth	r3, r3
 800544e:	b29b      	uxth	r3, r3
 8005450:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (!fasize) fasize = LD_DWORD(fs->win + BPB_FATSz32);
 8005452:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005454:	2b00      	cmp	r3, #0
 8005456:	d112      	bne.n	800547e <find_volume+0x206>
 8005458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800545a:	f893 305b 	ldrb.w	r3, [r3, #91]	; 0x5b
 800545e:	061a      	lsls	r2, r3, #24
 8005460:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005462:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8005466:	041b      	lsls	r3, r3, #16
 8005468:	4313      	orrs	r3, r2
 800546a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800546c:	f892 2059 	ldrb.w	r2, [r2, #89]	; 0x59
 8005470:	0212      	lsls	r2, r2, #8
 8005472:	4313      	orrs	r3, r2
 8005474:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005476:	f892 2058 	ldrb.w	r2, [r2, #88]	; 0x58
 800547a:	4313      	orrs	r3, r2
 800547c:	64fb      	str	r3, [r7, #76]	; 0x4c
	fs->fsize = fasize;
 800547e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005480:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005482:	61da      	str	r2, [r3, #28]

	fs->n_fats = fs->win[BPB_NumFATs];					/* Number of FAT copies */
 8005484:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005486:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800548a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800548c:	70da      	strb	r2, [r3, #3]
	if (fs->n_fats != 1 && fs->n_fats != 2)				/* (Must be 1 or 2) */
 800548e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005490:	78db      	ldrb	r3, [r3, #3]
 8005492:	2b01      	cmp	r3, #1
 8005494:	d005      	beq.n	80054a2 <find_volume+0x22a>
 8005496:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005498:	78db      	ldrb	r3, [r3, #3]
 800549a:	2b02      	cmp	r3, #2
 800549c:	d001      	beq.n	80054a2 <find_volume+0x22a>
		return FR_NO_FILESYSTEM;
 800549e:	230d      	movs	r3, #13
 80054a0:	e18f      	b.n	80057c2 <find_volume+0x54a>
	fasize *= fs->n_fats;								/* Number of sectors for FAT area */
 80054a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054a4:	78db      	ldrb	r3, [r3, #3]
 80054a6:	461a      	mov	r2, r3
 80054a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80054aa:	fb02 f303 	mul.w	r3, r2, r3
 80054ae:	64fb      	str	r3, [r7, #76]	; 0x4c

	fs->csize = fs->win[BPB_SecPerClus];				/* Number of sectors per cluster */
 80054b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b2:	f893 2041 	ldrb.w	r2, [r3, #65]	; 0x41
 80054b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054b8:	709a      	strb	r2, [r3, #2]
	if (!fs->csize || (fs->csize & (fs->csize - 1)))	/* (Must be power of 2) */
 80054ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054bc:	789b      	ldrb	r3, [r3, #2]
 80054be:	2b00      	cmp	r3, #0
 80054c0:	d008      	beq.n	80054d4 <find_volume+0x25c>
 80054c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054c4:	789b      	ldrb	r3, [r3, #2]
 80054c6:	461a      	mov	r2, r3
 80054c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054ca:	789b      	ldrb	r3, [r3, #2]
 80054cc:	3b01      	subs	r3, #1
 80054ce:	4013      	ands	r3, r2
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d001      	beq.n	80054d8 <find_volume+0x260>
		return FR_NO_FILESYSTEM;
 80054d4:	230d      	movs	r3, #13
 80054d6:	e174      	b.n	80057c2 <find_volume+0x54a>

	fs->n_rootdir = LD_WORD(fs->win + BPB_RootEntCnt);	/* Number of root directory entries */
 80054d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054da:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80054de:	021b      	lsls	r3, r3, #8
 80054e0:	b21a      	sxth	r2, r3
 80054e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054e4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80054e8:	b21b      	sxth	r3, r3
 80054ea:	4313      	orrs	r3, r2
 80054ec:	b21b      	sxth	r3, r3
 80054ee:	b29a      	uxth	r2, r3
 80054f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f2:	811a      	strh	r2, [r3, #8]
	if (fs->n_rootdir % (SS(fs) / SZ_DIRE))				/* (Must be sector aligned) */
 80054f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80054f6:	891b      	ldrh	r3, [r3, #8]
 80054f8:	f003 030f 	and.w	r3, r3, #15
 80054fc:	b29b      	uxth	r3, r3
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d004      	beq.n	800550c <find_volume+0x294>
		return FR_NO_FILESYSTEM;
 8005502:	230d      	movs	r3, #13
 8005504:	e15d      	b.n	80057c2 <find_volume+0x54a>
 8005506:	bf00      	nop
 8005508:	200011c4 	.word	0x200011c4

	tsect = LD_WORD(fs->win + BPB_TotSec16);			/* Number of sectors on the volume */
 800550c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800550e:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8005512:	021b      	lsls	r3, r3, #8
 8005514:	b21a      	sxth	r2, r3
 8005516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005518:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800551c:	b21b      	sxth	r3, r3
 800551e:	4313      	orrs	r3, r2
 8005520:	b21b      	sxth	r3, r3
 8005522:	b29b      	uxth	r3, r3
 8005524:	64bb      	str	r3, [r7, #72]	; 0x48
	if (!tsect) tsect = LD_DWORD(fs->win + BPB_TotSec32);
 8005526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005528:	2b00      	cmp	r3, #0
 800552a:	d112      	bne.n	8005552 <find_volume+0x2da>
 800552c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800552e:	f893 3057 	ldrb.w	r3, [r3, #87]	; 0x57
 8005532:	061a      	lsls	r2, r3, #24
 8005534:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005536:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 800553a:	041b      	lsls	r3, r3, #16
 800553c:	4313      	orrs	r3, r2
 800553e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005540:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8005544:	0212      	lsls	r2, r2, #8
 8005546:	4313      	orrs	r3, r2
 8005548:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800554a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 800554e:	4313      	orrs	r3, r2
 8005550:	64bb      	str	r3, [r7, #72]	; 0x48

	nrsv = LD_WORD(fs->win + BPB_RsvdSecCnt);			/* Number of reserved sectors */
 8005552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005554:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005558:	021b      	lsls	r3, r3, #8
 800555a:	b21a      	sxth	r2, r3
 800555c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800555e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005562:	b21b      	sxth	r3, r3
 8005564:	4313      	orrs	r3, r2
 8005566:	b21b      	sxth	r3, r3
 8005568:	85fb      	strh	r3, [r7, #46]	; 0x2e
	if (!nrsv) return FR_NO_FILESYSTEM;					/* (Must not be 0) */
 800556a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800556c:	2b00      	cmp	r3, #0
 800556e:	d101      	bne.n	8005574 <find_volume+0x2fc>
 8005570:	230d      	movs	r3, #13
 8005572:	e126      	b.n	80057c2 <find_volume+0x54a>

	/* Determine the FAT sub type */
	sysect = nrsv + fasize + fs->n_rootdir / (SS(fs) / SZ_DIRE);	/* RSV + FAT + DIR */
 8005574:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8005576:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005578:	4413      	add	r3, r2
 800557a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800557c:	8912      	ldrh	r2, [r2, #8]
 800557e:	0912      	lsrs	r2, r2, #4
 8005580:	b292      	uxth	r2, r2
 8005582:	4413      	add	r3, r2
 8005584:	62bb      	str	r3, [r7, #40]	; 0x28
	if (tsect < sysect) return FR_NO_FILESYSTEM;		/* (Invalid volume size) */
 8005586:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558a:	429a      	cmp	r2, r3
 800558c:	d201      	bcs.n	8005592 <find_volume+0x31a>
 800558e:	230d      	movs	r3, #13
 8005590:	e117      	b.n	80057c2 <find_volume+0x54a>
	nclst = (tsect - sysect) / fs->csize;				/* Number of clusters */
 8005592:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005594:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005596:	1ad3      	subs	r3, r2, r3
 8005598:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800559a:	7892      	ldrb	r2, [r2, #2]
 800559c:	fbb3 f3f2 	udiv	r3, r3, r2
 80055a0:	627b      	str	r3, [r7, #36]	; 0x24
	if (!nclst) return FR_NO_FILESYSTEM;				/* (Invalid volume size) */
 80055a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <find_volume+0x334>
 80055a8:	230d      	movs	r3, #13
 80055aa:	e10a      	b.n	80057c2 <find_volume+0x54a>
	fmt = FS_FAT12;
 80055ac:	2301      	movs	r3, #1
 80055ae:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT16) fmt = FS_FAT16;
 80055b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b4:	f640 72f5 	movw	r2, #4085	; 0xff5
 80055b8:	4293      	cmp	r3, r2
 80055ba:	d902      	bls.n	80055c2 <find_volume+0x34a>
 80055bc:	2302      	movs	r3, #2
 80055be:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
	if (nclst >= MIN_FAT32) fmt = FS_FAT32;
 80055c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055c4:	f64f 72f5 	movw	r2, #65525	; 0xfff5
 80055c8:	4293      	cmp	r3, r2
 80055ca:	d902      	bls.n	80055d2 <find_volume+0x35a>
 80055cc:	2303      	movs	r3, #3
 80055ce:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57

	/* Boundaries and Limits */
	fs->n_fatent = nclst + 2;							/* Number of FAT entries */
 80055d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d4:	1c9a      	adds	r2, r3, #2
 80055d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055d8:	619a      	str	r2, [r3, #24]
	fs->volbase = bsect;								/* Volume start sector */
 80055da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055dc:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80055de:	621a      	str	r2, [r3, #32]
	fs->fatbase = bsect + nrsv; 						/* FAT start sector */
 80055e0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 80055e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80055e4:	441a      	add	r2, r3
 80055e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055e8:	625a      	str	r2, [r3, #36]	; 0x24
	fs->database = bsect + sysect;						/* Data start sector */
 80055ea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ee:	441a      	add	r2, r3
 80055f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055f2:	62da      	str	r2, [r3, #44]	; 0x2c
	if (fmt == FS_FAT32) {
 80055f4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80055f8:	2b03      	cmp	r3, #3
 80055fa:	d11e      	bne.n	800563a <find_volume+0x3c2>
		if (fs->n_rootdir) return FR_NO_FILESYSTEM;		/* (BPB_RootEntCnt must be 0) */
 80055fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80055fe:	891b      	ldrh	r3, [r3, #8]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <find_volume+0x390>
 8005604:	230d      	movs	r3, #13
 8005606:	e0dc      	b.n	80057c2 <find_volume+0x54a>
		fs->dirbase = LD_DWORD(fs->win + BPB_RootClus);	/* Root directory start cluster */
 8005608:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800560a:	f893 3063 	ldrb.w	r3, [r3, #99]	; 0x63
 800560e:	061a      	lsls	r2, r3, #24
 8005610:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005612:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 8005616:	041b      	lsls	r3, r3, #16
 8005618:	4313      	orrs	r3, r2
 800561a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800561c:	f892 2061 	ldrb.w	r2, [r2, #97]	; 0x61
 8005620:	0212      	lsls	r2, r2, #8
 8005622:	4313      	orrs	r3, r2
 8005624:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005626:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 800562a:	431a      	orrs	r2, r3
 800562c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800562e:	629a      	str	r2, [r3, #40]	; 0x28
		szbfat = fs->n_fatent * 4;						/* (Needed FAT size) */
 8005630:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005632:	699b      	ldr	r3, [r3, #24]
 8005634:	009b      	lsls	r3, r3, #2
 8005636:	647b      	str	r3, [r7, #68]	; 0x44
 8005638:	e01f      	b.n	800567a <find_volume+0x402>
	} else {
		if (!fs->n_rootdir)	return FR_NO_FILESYSTEM;	/* (BPB_RootEntCnt must not be 0) */
 800563a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800563c:	891b      	ldrh	r3, [r3, #8]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d101      	bne.n	8005646 <find_volume+0x3ce>
 8005642:	230d      	movs	r3, #13
 8005644:	e0bd      	b.n	80057c2 <find_volume+0x54a>
		fs->dirbase = fs->fatbase + fasize;				/* Root directory start sector */
 8005646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005648:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800564a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800564c:	441a      	add	r2, r3
 800564e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005650:	629a      	str	r2, [r3, #40]	; 0x28
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
			fs->n_fatent * 2 : fs->n_fatent * 3 / 2 + (fs->n_fatent & 1);
 8005652:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8005656:	2b02      	cmp	r3, #2
 8005658:	d103      	bne.n	8005662 <find_volume+0x3ea>
 800565a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800565c:	699b      	ldr	r3, [r3, #24]
 800565e:	005b      	lsls	r3, r3, #1
 8005660:	e00a      	b.n	8005678 <find_volume+0x400>
 8005662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005664:	699a      	ldr	r2, [r3, #24]
 8005666:	4613      	mov	r3, r2
 8005668:	005b      	lsls	r3, r3, #1
 800566a:	4413      	add	r3, r2
 800566c:	085a      	lsrs	r2, r3, #1
 800566e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005670:	699b      	ldr	r3, [r3, #24]
 8005672:	f003 0301 	and.w	r3, r3, #1
 8005676:	4413      	add	r3, r2
		szbfat = (fmt == FS_FAT16) ?					/* (Needed FAT size) */
 8005678:	647b      	str	r3, [r7, #68]	; 0x44
	}
	if (fs->fsize < (szbfat + (SS(fs) - 1)) / SS(fs))	/* (BPB_FATSz must not be less than the size needed) */
 800567a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800567c:	69da      	ldr	r2, [r3, #28]
 800567e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005680:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8005684:	0a5b      	lsrs	r3, r3, #9
 8005686:	429a      	cmp	r2, r3
 8005688:	d201      	bcs.n	800568e <find_volume+0x416>
		return FR_NO_FILESYSTEM;
 800568a:	230d      	movs	r3, #13
 800568c:	e099      	b.n	80057c2 <find_volume+0x54a>

#if !_FS_READONLY
	/* Initialize cluster allocation information */
	fs->last_clust = fs->free_clust = 0xFFFFFFFF;
 800568e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005690:	f04f 32ff 	mov.w	r2, #4294967295
 8005694:	611a      	str	r2, [r3, #16]
 8005696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005698:	691a      	ldr	r2, [r3, #16]
 800569a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800569c:	60da      	str	r2, [r3, #12]

	/* Get fsinfo if available */
	fs->fsi_flag = 0x80;
 800569e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056a0:	2280      	movs	r2, #128	; 0x80
 80056a2:	715a      	strb	r2, [r3, #5]
#if (_FS_NOFSINFO & 3) != 3
	if (fmt == FS_FAT32				/* Enable FSINFO only if FAT32 and BPB_FSInfo is 1 */
 80056a4:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 80056a8:	2b03      	cmp	r3, #3
 80056aa:	d178      	bne.n	800579e <find_volume+0x526>
		&& LD_WORD(fs->win + BPB_FSInfo) == 1
 80056ac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ae:	f893 3065 	ldrb.w	r3, [r3, #101]	; 0x65
 80056b2:	021b      	lsls	r3, r3, #8
 80056b4:	b21a      	sxth	r2, r3
 80056b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056b8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
 80056bc:	b21b      	sxth	r3, r3
 80056be:	4313      	orrs	r3, r2
 80056c0:	b21b      	sxth	r3, r3
 80056c2:	2b01      	cmp	r3, #1
 80056c4:	d16b      	bne.n	800579e <find_volume+0x526>
		&& move_window(fs, bsect + 1) == FR_OK)
 80056c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056c8:	3301      	adds	r3, #1
 80056ca:	4619      	mov	r1, r3
 80056cc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80056ce:	f7fe fc6f 	bl	8003fb0 <move_window>
 80056d2:	4603      	mov	r3, r0
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d162      	bne.n	800579e <find_volume+0x526>
	{
		fs->fsi_flag = 0;
 80056d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056da:	2200      	movs	r2, #0
 80056dc:	715a      	strb	r2, [r3, #5]
		if (LD_WORD(fs->win + BS_55AA) == 0xAA55	/* Load FSINFO data if available */
 80056de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e0:	f893 3233 	ldrb.w	r3, [r3, #563]	; 0x233
 80056e4:	021b      	lsls	r3, r3, #8
 80056e6:	b21a      	sxth	r2, r3
 80056e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056ea:	f893 3232 	ldrb.w	r3, [r3, #562]	; 0x232
 80056ee:	b21b      	sxth	r3, r3
 80056f0:	4313      	orrs	r3, r2
 80056f2:	b21b      	sxth	r3, r3
 80056f4:	4a35      	ldr	r2, [pc, #212]	; (80057cc <find_volume+0x554>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d151      	bne.n	800579e <find_volume+0x526>
			&& LD_DWORD(fs->win + FSI_LeadSig) == 0x41615252
 80056fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fc:	f893 3037 	ldrb.w	r3, [r3, #55]	; 0x37
 8005700:	061a      	lsls	r2, r3, #24
 8005702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005704:	f893 3036 	ldrb.w	r3, [r3, #54]	; 0x36
 8005708:	041b      	lsls	r3, r3, #16
 800570a:	4313      	orrs	r3, r2
 800570c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800570e:	f892 2035 	ldrb.w	r2, [r2, #53]	; 0x35
 8005712:	0212      	lsls	r2, r2, #8
 8005714:	4313      	orrs	r3, r2
 8005716:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005718:	f892 2034 	ldrb.w	r2, [r2, #52]	; 0x34
 800571c:	4313      	orrs	r3, r2
 800571e:	4a2c      	ldr	r2, [pc, #176]	; (80057d0 <find_volume+0x558>)
 8005720:	4293      	cmp	r3, r2
 8005722:	d13c      	bne.n	800579e <find_volume+0x526>
			&& LD_DWORD(fs->win + FSI_StrucSig) == 0x61417272)
 8005724:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005726:	f893 321b 	ldrb.w	r3, [r3, #539]	; 0x21b
 800572a:	061a      	lsls	r2, r3, #24
 800572c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800572e:	f893 321a 	ldrb.w	r3, [r3, #538]	; 0x21a
 8005732:	041b      	lsls	r3, r3, #16
 8005734:	4313      	orrs	r3, r2
 8005736:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005738:	f892 2219 	ldrb.w	r2, [r2, #537]	; 0x219
 800573c:	0212      	lsls	r2, r2, #8
 800573e:	4313      	orrs	r3, r2
 8005740:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005742:	f892 2218 	ldrb.w	r2, [r2, #536]	; 0x218
 8005746:	4313      	orrs	r3, r2
 8005748:	4a22      	ldr	r2, [pc, #136]	; (80057d4 <find_volume+0x55c>)
 800574a:	4293      	cmp	r3, r2
 800574c:	d127      	bne.n	800579e <find_volume+0x526>
		{
#if (_FS_NOFSINFO & 1) == 0
			fs->free_clust = LD_DWORD(fs->win + FSI_Free_Count);
 800574e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005750:	f893 321f 	ldrb.w	r3, [r3, #543]	; 0x21f
 8005754:	061a      	lsls	r2, r3, #24
 8005756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005758:	f893 321e 	ldrb.w	r3, [r3, #542]	; 0x21e
 800575c:	041b      	lsls	r3, r3, #16
 800575e:	4313      	orrs	r3, r2
 8005760:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005762:	f892 221d 	ldrb.w	r2, [r2, #541]	; 0x21d
 8005766:	0212      	lsls	r2, r2, #8
 8005768:	4313      	orrs	r3, r2
 800576a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800576c:	f892 221c 	ldrb.w	r2, [r2, #540]	; 0x21c
 8005770:	431a      	orrs	r2, r3
 8005772:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005774:	611a      	str	r2, [r3, #16]
#endif
#if (_FS_NOFSINFO & 2) == 0
			fs->last_clust = LD_DWORD(fs->win + FSI_Nxt_Free);
 8005776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005778:	f893 3223 	ldrb.w	r3, [r3, #547]	; 0x223
 800577c:	061a      	lsls	r2, r3, #24
 800577e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005780:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
 8005784:	041b      	lsls	r3, r3, #16
 8005786:	4313      	orrs	r3, r2
 8005788:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800578a:	f892 2221 	ldrb.w	r2, [r2, #545]	; 0x221
 800578e:	0212      	lsls	r2, r2, #8
 8005790:	4313      	orrs	r3, r2
 8005792:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005794:	f892 2220 	ldrb.w	r2, [r2, #544]	; 0x220
 8005798:	431a      	orrs	r2, r3
 800579a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800579c:	60da      	str	r2, [r3, #12]
#endif
		}
	}
#endif
#endif
	fs->fs_type = fmt;	/* FAT sub-type */
 800579e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057a0:	f897 2057 	ldrb.w	r2, [r7, #87]	; 0x57
 80057a4:	701a      	strb	r2, [r3, #0]
	fs->id = ++Fsid;	/* File system mount ID */
 80057a6:	4b0c      	ldr	r3, [pc, #48]	; (80057d8 <find_volume+0x560>)
 80057a8:	881b      	ldrh	r3, [r3, #0]
 80057aa:	3301      	adds	r3, #1
 80057ac:	b29a      	uxth	r2, r3
 80057ae:	4b0a      	ldr	r3, [pc, #40]	; (80057d8 <find_volume+0x560>)
 80057b0:	801a      	strh	r2, [r3, #0]
 80057b2:	4b09      	ldr	r3, [pc, #36]	; (80057d8 <find_volume+0x560>)
 80057b4:	881a      	ldrh	r2, [r3, #0]
 80057b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057b8:	80da      	strh	r2, [r3, #6]
#if _FS_RPATH
	fs->cdir = 0;		/* Set current directory to root */
 80057ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80057bc:	2200      	movs	r2, #0
 80057be:	615a      	str	r2, [r3, #20]
#endif
#if _FS_LOCK			/* Clear file lock semaphores */
	clear_lock(fs);
#endif

	return FR_OK;
 80057c0:	2300      	movs	r3, #0
}
 80057c2:	4618      	mov	r0, r3
 80057c4:	3758      	adds	r7, #88	; 0x58
 80057c6:	46bd      	mov	sp, r7
 80057c8:	bd80      	pop	{r7, pc}
 80057ca:	bf00      	nop
 80057cc:	ffffaa55 	.word	0xffffaa55
 80057d0:	41615252 	.word	0x41615252
 80057d4:	61417272 	.word	0x61417272
 80057d8:	200011e8 	.word	0x200011e8

080057dc <validate>:

static
FRESULT validate (	/* FR_OK(0): The object is valid, !=0: Invalid */
	void* obj		/* Pointer to the object FIL/DIR to check validity */
)
{
 80057dc:	b580      	push	{r7, lr}
 80057de:	b084      	sub	sp, #16
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
	FIL *fil = (FIL*)obj;	/* Assuming offset of .fs and .id in the FIL/DIR structure is identical */
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	60fb      	str	r3, [r7, #12]


	if (!fil || !fil->fs || !fil->fs->fs_type || fil->fs->id != fil->id)
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d00f      	beq.n	800580e <validate+0x32>
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00b      	beq.n	800580e <validate+0x32>
 80057f6:	68fb      	ldr	r3, [r7, #12]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	781b      	ldrb	r3, [r3, #0]
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d006      	beq.n	800580e <validate+0x32>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	88da      	ldrh	r2, [r3, #6]
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	889b      	ldrh	r3, [r3, #4]
 800580a:	429a      	cmp	r2, r3
 800580c:	d001      	beq.n	8005812 <validate+0x36>
		return FR_INVALID_OBJECT;
 800580e:	2309      	movs	r3, #9
 8005810:	e00d      	b.n	800582e <validate+0x52>

	ENTER_FF(fil->fs);		/* Lock file system */

	if (disk_status(fil->fs->drv) & STA_NOINIT)
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	785b      	ldrb	r3, [r3, #1]
 8005818:	4618      	mov	r0, r3
 800581a:	f7fd f815 	bl	8002848 <disk_status>
 800581e:	4603      	mov	r3, r0
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	2b00      	cmp	r3, #0
 8005826:	d001      	beq.n	800582c <validate+0x50>
		return FR_NOT_READY;
 8005828:	2303      	movs	r3, #3
 800582a:	e000      	b.n	800582e <validate+0x52>

	return FR_OK;
 800582c:	2300      	movs	r3, #0
}
 800582e:	4618      	mov	r0, r3
 8005830:	3710      	adds	r7, #16
 8005832:	46bd      	mov	sp, r7
 8005834:	bd80      	pop	{r7, pc}
	...

08005838 <f_mount>:
FRESULT f_mount (
	FATFS* fs,			/* Pointer to the file system object (NULL:unmount)*/
	const TCHAR* path,	/* Logical drive number to be mounted/unmounted */
	BYTE opt			/* 0:Do not mount (delayed mount), 1:Mount immediately */
)
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b088      	sub	sp, #32
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	4613      	mov	r3, r2
 8005844:	71fb      	strb	r3, [r7, #7]
	FATFS *cfs;
	int vol;
	FRESULT res;
	const TCHAR *rp = path;
 8005846:	68bb      	ldr	r3, [r7, #8]
 8005848:	613b      	str	r3, [r7, #16]


	vol = get_ldnumber(&rp);
 800584a:	f107 0310 	add.w	r3, r7, #16
 800584e:	4618      	mov	r0, r3
 8005850:	f7ff fc24 	bl	800509c <get_ldnumber>
 8005854:	61f8      	str	r0, [r7, #28]
	if (vol < 0) return FR_INVALID_DRIVE;
 8005856:	69fb      	ldr	r3, [r7, #28]
 8005858:	2b00      	cmp	r3, #0
 800585a:	da01      	bge.n	8005860 <f_mount+0x28>
 800585c:	230b      	movs	r3, #11
 800585e:	e028      	b.n	80058b2 <f_mount+0x7a>
	cfs = FatFs[vol];					/* Pointer to fs object */
 8005860:	4a16      	ldr	r2, [pc, #88]	; (80058bc <f_mount+0x84>)
 8005862:	69fb      	ldr	r3, [r7, #28]
 8005864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005868:	61bb      	str	r3, [r7, #24]

	if (cfs) {
 800586a:	69bb      	ldr	r3, [r7, #24]
 800586c:	2b00      	cmp	r3, #0
 800586e:	d002      	beq.n	8005876 <f_mount+0x3e>
		clear_lock(cfs);
#endif
#if _FS_REENTRANT						/* Discard sync object of the current volume */
		if (!ff_del_syncobj(cfs->sobj)) return FR_INT_ERR;
#endif
		cfs->fs_type = 0;				/* Clear old fs object */
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	2200      	movs	r2, #0
 8005874:	701a      	strb	r2, [r3, #0]
	}

	if (fs) {
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d002      	beq.n	8005882 <f_mount+0x4a>
		fs->fs_type = 0;				/* Clear new fs object */
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2200      	movs	r2, #0
 8005880:	701a      	strb	r2, [r3, #0]
#if _FS_REENTRANT						/* Create sync object for the new volume */
		if (!ff_cre_syncobj((BYTE)vol, &fs->sobj)) return FR_INT_ERR;
#endif
	}
	FatFs[vol] = fs;					/* Register new fs object */
 8005882:	68fa      	ldr	r2, [r7, #12]
 8005884:	490d      	ldr	r1, [pc, #52]	; (80058bc <f_mount+0x84>)
 8005886:	69fb      	ldr	r3, [r7, #28]
 8005888:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

	if (!fs || opt != 1) return FR_OK;	/* Do not mount now, it will be mounted later */
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2b00      	cmp	r3, #0
 8005890:	d002      	beq.n	8005898 <f_mount+0x60>
 8005892:	79fb      	ldrb	r3, [r7, #7]
 8005894:	2b01      	cmp	r3, #1
 8005896:	d001      	beq.n	800589c <f_mount+0x64>
 8005898:	2300      	movs	r3, #0
 800589a:	e00a      	b.n	80058b2 <f_mount+0x7a>

	res = find_volume(&fs, &path, 0);	/* Force mounted the volume */
 800589c:	f107 0108 	add.w	r1, r7, #8
 80058a0:	f107 030c 	add.w	r3, r7, #12
 80058a4:	2200      	movs	r2, #0
 80058a6:	4618      	mov	r0, r3
 80058a8:	f7ff fce6 	bl	8005278 <find_volume>
 80058ac:	4603      	mov	r3, r0
 80058ae:	75fb      	strb	r3, [r7, #23]
	LEAVE_FF(fs, res);
 80058b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3720      	adds	r7, #32
 80058b6:	46bd      	mov	sp, r7
 80058b8:	bd80      	pop	{r7, pc}
 80058ba:	bf00      	nop
 80058bc:	200011c4 	.word	0x200011c4

080058c0 <f_open>:
FRESULT f_open (
	FIL* fp,			/* Pointer to the blank file object */
	const TCHAR* path,	/* Pointer to the file name */
	BYTE mode			/* Access mode and file open mode flags */
)
{
 80058c0:	b580      	push	{r7, lr}
 80058c2:	b094      	sub	sp, #80	; 0x50
 80058c4:	af00      	add	r7, sp, #0
 80058c6:	60f8      	str	r0, [r7, #12]
 80058c8:	60b9      	str	r1, [r7, #8]
 80058ca:	4613      	mov	r3, r2
 80058cc:	71fb      	strb	r3, [r7, #7]
#if !_FS_READONLY
	DWORD dw, cl;
#endif


	if (!fp) return FR_INVALID_OBJECT;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d101      	bne.n	80058d8 <f_open+0x18>
 80058d4:	2309      	movs	r3, #9
 80058d6:	e12f      	b.n	8005b38 <f_open+0x278>
	fp->fs = 0;			/* Clear file object */
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	601a      	str	r2, [r3, #0]

	/* Get logical drive number */
#if !_FS_READONLY
	mode &= FA_READ | FA_WRITE | FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW;
 80058de:	79fb      	ldrb	r3, [r7, #7]
 80058e0:	f003 031f 	and.w	r3, r3, #31
 80058e4:	71fb      	strb	r3, [r7, #7]
	res = find_volume(&dj.fs, &path, (BYTE)(mode & ~FA_READ));
 80058e6:	79fb      	ldrb	r3, [r7, #7]
 80058e8:	f023 0301 	bic.w	r3, r3, #1
 80058ec:	b2da      	uxtb	r2, r3
 80058ee:	f107 0108 	add.w	r1, r7, #8
 80058f2:	f107 0320 	add.w	r3, r7, #32
 80058f6:	4618      	mov	r0, r3
 80058f8:	f7ff fcbe 	bl	8005278 <find_volume>
 80058fc:	4603      	mov	r3, r0
 80058fe:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#else
	mode &= FA_READ;
	res = find_volume(&dj.fs, &path, 0);
#endif
	if (res == FR_OK) {
 8005902:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005906:	2b00      	cmp	r3, #0
 8005908:	f040 8114 	bne.w	8005b34 <f_open+0x274>
		INIT_BUF(dj);
 800590c:	f107 0314 	add.w	r3, r7, #20
 8005910:	63bb      	str	r3, [r7, #56]	; 0x38
		res = follow_path(&dj, path);	/* Follow the file path */
 8005912:	68ba      	ldr	r2, [r7, #8]
 8005914:	f107 0320 	add.w	r3, r7, #32
 8005918:	4611      	mov	r1, r2
 800591a:	4618      	mov	r0, r3
 800591c:	f7ff fb3a 	bl	8004f94 <follow_path>
 8005920:	4603      	mov	r3, r0
 8005922:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
		dir = dj.dir;
 8005926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005928:	64bb      	str	r3, [r7, #72]	; 0x48
#if !_FS_READONLY	/* R/W configuration */
		if (res == FR_OK) {
 800592a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800592e:	2b00      	cmp	r3, #0
 8005930:	d105      	bne.n	800593e <f_open+0x7e>
			if (!dir)	/* Default directory itself */
 8005932:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005934:	2b00      	cmp	r3, #0
 8005936:	d102      	bne.n	800593e <f_open+0x7e>
				res = FR_INVALID_NAME;
 8005938:	2306      	movs	r3, #6
 800593a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
			else
				res = chk_lock(&dj, (mode & ~FA_READ) ? 1 : 0);
#endif
		}
		/* Create or Open a file */
		if (mode & (FA_CREATE_ALWAYS | FA_OPEN_ALWAYS | FA_CREATE_NEW)) {
 800593e:	79fb      	ldrb	r3, [r7, #7]
 8005940:	f003 031c 	and.w	r3, r3, #28
 8005944:	2b00      	cmp	r3, #0
 8005946:	f000 808f 	beq.w	8005a68 <f_open+0x1a8>
			if (res != FR_OK) {					/* No file, create new */
 800594a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800594e:	2b00      	cmp	r3, #0
 8005950:	d012      	beq.n	8005978 <f_open+0xb8>
				if (res == FR_NO_FILE)			/* There is no file to open, create a new entry */
 8005952:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005956:	2b04      	cmp	r3, #4
 8005958:	d107      	bne.n	800596a <f_open+0xaa>
#if _FS_LOCK
					res = enq_lock() ? dir_register(&dj) : FR_TOO_MANY_OPEN_FILES;
#else
					res = dir_register(&dj);
 800595a:	f107 0320 	add.w	r3, r7, #32
 800595e:	4618      	mov	r0, r3
 8005960:	f7ff f950 	bl	8004c04 <dir_register>
 8005964:	4603      	mov	r3, r0
 8005966:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
#endif
				mode |= FA_CREATE_ALWAYS;		/* File is created */
 800596a:	79fb      	ldrb	r3, [r7, #7]
 800596c:	f043 0308 	orr.w	r3, r3, #8
 8005970:	71fb      	strb	r3, [r7, #7]
				dir = dj.dir;					/* New entry */
 8005972:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005974:	64bb      	str	r3, [r7, #72]	; 0x48
 8005976:	e012      	b.n	800599e <f_open+0xde>
			}
			else {								/* Any object is already existing */
				if (dir[DIR_Attr] & (AM_RDO | AM_DIR)) {	/* Cannot overwrite it (R/O or DIR) */
 8005978:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800597a:	330b      	adds	r3, #11
 800597c:	781b      	ldrb	r3, [r3, #0]
 800597e:	f003 0311 	and.w	r3, r3, #17
 8005982:	2b00      	cmp	r3, #0
 8005984:	d003      	beq.n	800598e <f_open+0xce>
					res = FR_DENIED;
 8005986:	2307      	movs	r3, #7
 8005988:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 800598c:	e007      	b.n	800599e <f_open+0xde>
				} else {
					if (mode & FA_CREATE_NEW)	/* Cannot create as new file */
 800598e:	79fb      	ldrb	r3, [r7, #7]
 8005990:	f003 0304 	and.w	r3, r3, #4
 8005994:	2b00      	cmp	r3, #0
 8005996:	d002      	beq.n	800599e <f_open+0xde>
						res = FR_EXIST;
 8005998:	2308      	movs	r3, #8
 800599a:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				}
			}
			if (res == FR_OK && (mode & FA_CREATE_ALWAYS)) {	/* Truncate it if overwrite mode */
 800599e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d17e      	bne.n	8005aa4 <f_open+0x1e4>
 80059a6:	79fb      	ldrb	r3, [r7, #7]
 80059a8:	f003 0308 	and.w	r3, r3, #8
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	d079      	beq.n	8005aa4 <f_open+0x1e4>
				dw = GET_FATTIME();				/* Created time */
 80059b0:	f7fc fff4 	bl	800299c <get_fattime>
 80059b4:	6478      	str	r0, [r7, #68]	; 0x44
				ST_DWORD(dir + DIR_CrtTime, dw);
 80059b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059b8:	330e      	adds	r3, #14
 80059ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059bc:	b2d2      	uxtb	r2, r2
 80059be:	701a      	strb	r2, [r3, #0]
 80059c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059c2:	b29b      	uxth	r3, r3
 80059c4:	0a1b      	lsrs	r3, r3, #8
 80059c6:	b29a      	uxth	r2, r3
 80059c8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ca:	330f      	adds	r3, #15
 80059cc:	b2d2      	uxtb	r2, r2
 80059ce:	701a      	strb	r2, [r3, #0]
 80059d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059d2:	0c1a      	lsrs	r2, r3, #16
 80059d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059d6:	3310      	adds	r3, #16
 80059d8:	b2d2      	uxtb	r2, r2
 80059da:	701a      	strb	r2, [r3, #0]
 80059dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80059de:	0e1a      	lsrs	r2, r3, #24
 80059e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059e2:	3311      	adds	r3, #17
 80059e4:	b2d2      	uxtb	r2, r2
 80059e6:	701a      	strb	r2, [r3, #0]
				dir[DIR_Attr] = 0;				/* Reset attribute */
 80059e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059ea:	330b      	adds	r3, #11
 80059ec:	2200      	movs	r2, #0
 80059ee:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, 0);/* size = 0 */
 80059f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059f2:	331c      	adds	r3, #28
 80059f4:	2200      	movs	r2, #0
 80059f6:	701a      	strb	r2, [r3, #0]
 80059f8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80059fa:	331d      	adds	r3, #29
 80059fc:	2200      	movs	r2, #0
 80059fe:	701a      	strb	r2, [r3, #0]
 8005a00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a02:	331e      	adds	r3, #30
 8005a04:	2200      	movs	r2, #0
 8005a06:	701a      	strb	r2, [r3, #0]
 8005a08:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a0a:	331f      	adds	r3, #31
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	701a      	strb	r2, [r3, #0]
				cl = ld_clust(dj.fs, dir);		/* Get start cluster */
 8005a10:	6a3b      	ldr	r3, [r7, #32]
 8005a12:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005a14:	4618      	mov	r0, r3
 8005a16:	f7fe ffff 	bl	8004a18 <ld_clust>
 8005a1a:	6438      	str	r0, [r7, #64]	; 0x40
				st_clust(dir, 0);				/* cluster = 0 */
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 8005a20:	f7ff f827 	bl	8004a72 <st_clust>
				dj.fs->wflag = 1;
 8005a24:	6a3b      	ldr	r3, [r7, #32]
 8005a26:	2201      	movs	r2, #1
 8005a28:	711a      	strb	r2, [r3, #4]
				if (cl) {						/* Remove the cluster chain if exist */
 8005a2a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d039      	beq.n	8005aa4 <f_open+0x1e4>
					dw = dj.fs->winsect;
 8005a30:	6a3b      	ldr	r3, [r7, #32]
 8005a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a34:	647b      	str	r3, [r7, #68]	; 0x44
					res = remove_chain(dj.fs, cl);
 8005a36:	6a3b      	ldr	r3, [r7, #32]
 8005a38:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005a3a:	4618      	mov	r0, r3
 8005a3c:	f7fe fd6e 	bl	800451c <remove_chain>
 8005a40:	4603      	mov	r3, r0
 8005a42:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
					if (res == FR_OK) {
 8005a46:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d12a      	bne.n	8005aa4 <f_open+0x1e4>
						dj.fs->last_clust = cl - 1;	/* Reuse the cluster hole */
 8005a4e:	6a3b      	ldr	r3, [r7, #32]
 8005a50:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005a52:	3a01      	subs	r2, #1
 8005a54:	60da      	str	r2, [r3, #12]
						res = move_window(dj.fs, dw);
 8005a56:	6a3b      	ldr	r3, [r7, #32]
 8005a58:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	f7fe faa8 	bl	8003fb0 <move_window>
 8005a60:	4603      	mov	r3, r0
 8005a62:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005a66:	e01d      	b.n	8005aa4 <f_open+0x1e4>
					}
				}
			}
		}
		else {	/* Open an existing file */
			if (res == FR_OK) {					/* Follow succeeded */
 8005a68:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d119      	bne.n	8005aa4 <f_open+0x1e4>
				if (dir[DIR_Attr] & AM_DIR) {	/* It is a directory */
 8005a70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a72:	330b      	adds	r3, #11
 8005a74:	781b      	ldrb	r3, [r3, #0]
 8005a76:	f003 0310 	and.w	r3, r3, #16
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <f_open+0x1c6>
					res = FR_NO_FILE;
 8005a7e:	2304      	movs	r3, #4
 8005a80:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8005a84:	e00e      	b.n	8005aa4 <f_open+0x1e4>
				} else {
					if ((mode & FA_WRITE) && (dir[DIR_Attr] & AM_RDO)) /* R/O violation */
 8005a86:	79fb      	ldrb	r3, [r7, #7]
 8005a88:	f003 0302 	and.w	r3, r3, #2
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d009      	beq.n	8005aa4 <f_open+0x1e4>
 8005a90:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a92:	330b      	adds	r3, #11
 8005a94:	781b      	ldrb	r3, [r3, #0]
 8005a96:	f003 0301 	and.w	r3, r3, #1
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d002      	beq.n	8005aa4 <f_open+0x1e4>
						res = FR_DENIED;
 8005a9e:	2307      	movs	r3, #7
 8005aa0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
				}
			}
		}
		if (res == FR_OK) {
 8005aa4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10f      	bne.n	8005acc <f_open+0x20c>
			if (mode & FA_CREATE_ALWAYS)		/* Set file change flag if created or overwritten */
 8005aac:	79fb      	ldrb	r3, [r7, #7]
 8005aae:	f003 0308 	and.w	r3, r3, #8
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d003      	beq.n	8005abe <f_open+0x1fe>
				mode |= FA__WRITTEN;
 8005ab6:	79fb      	ldrb	r3, [r7, #7]
 8005ab8:	f043 0320 	orr.w	r3, r3, #32
 8005abc:	71fb      	strb	r3, [r7, #7]
			fp->dir_sect = dj.fs->winsect;		/* Pointer to the directory entry */
 8005abe:	6a3b      	ldr	r3, [r7, #32]
 8005ac0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	61da      	str	r2, [r3, #28]
			fp->dir_ptr = dir;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005aca:	621a      	str	r2, [r3, #32]
			}
		}
#endif
		FREE_BUF();

		if (res == FR_OK) {
 8005acc:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d12f      	bne.n	8005b34 <f_open+0x274>
			fp->flag = mode;					/* File access mode */
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	79fa      	ldrb	r2, [r7, #7]
 8005ad8:	719a      	strb	r2, [r3, #6]
			fp->err = 0;						/* Clear error flag */
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	71da      	strb	r2, [r3, #7]
			fp->sclust = ld_clust(dj.fs, dir);	/* File start cluster */
 8005ae0:	6a3b      	ldr	r3, [r7, #32]
 8005ae2:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8005ae4:	4618      	mov	r0, r3
 8005ae6:	f7fe ff97 	bl	8004a18 <ld_clust>
 8005aea:	4602      	mov	r2, r0
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	611a      	str	r2, [r3, #16]
			fp->fsize = LD_DWORD(dir + DIR_FileSize);	/* File size */
 8005af0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005af2:	331f      	adds	r3, #31
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	061a      	lsls	r2, r3, #24
 8005af8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005afa:	331e      	adds	r3, #30
 8005afc:	781b      	ldrb	r3, [r3, #0]
 8005afe:	041b      	lsls	r3, r3, #16
 8005b00:	4313      	orrs	r3, r2
 8005b02:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b04:	321d      	adds	r2, #29
 8005b06:	7812      	ldrb	r2, [r2, #0]
 8005b08:	0212      	lsls	r2, r2, #8
 8005b0a:	4313      	orrs	r3, r2
 8005b0c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b0e:	321c      	adds	r2, #28
 8005b10:	7812      	ldrb	r2, [r2, #0]
 8005b12:	431a      	orrs	r2, r3
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	60da      	str	r2, [r3, #12]
			fp->fptr = 0;						/* File pointer */
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	2200      	movs	r2, #0
 8005b1c:	609a      	str	r2, [r3, #8]
			fp->dsect = 0;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	2200      	movs	r2, #0
 8005b22:	619a      	str	r2, [r3, #24]
#if _USE_FASTSEEK
			fp->cltbl = 0;						/* Normal seek mode */
#endif
			fp->fs = dj.fs;	 					/* Validate file object */
 8005b24:	6a3a      	ldr	r2, [r7, #32]
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	601a      	str	r2, [r3, #0]
			fp->id = fp->fs->id;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	88da      	ldrh	r2, [r3, #6]
 8005b30:	68fb      	ldr	r3, [r7, #12]
 8005b32:	809a      	strh	r2, [r3, #4]
		}
	}

	LEAVE_FF(dj.fs, res);
 8005b34:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
}
 8005b38:	4618      	mov	r0, r3
 8005b3a:	3750      	adds	r7, #80	; 0x50
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}

08005b40 <f_read>:
	FIL* fp, 		/* Pointer to the file object */
	void* buff,		/* Pointer to data buffer */
	UINT btr,		/* Number of bytes to read */
	UINT* br		/* Pointer to number of bytes read */
)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08c      	sub	sp, #48	; 0x30
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	607a      	str	r2, [r7, #4]
 8005b4c:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect, remain;
	UINT rcnt, cc;
	BYTE csect, *rbuff = (BYTE*)buff;
 8005b4e:	68bb      	ldr	r3, [r7, #8]
 8005b50:	623b      	str	r3, [r7, #32]


	*br = 0;	/* Clear read byte counter */
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	2200      	movs	r2, #0
 8005b56:	601a      	str	r2, [r3, #0]

	res = validate(fp);							/* Check validity */
 8005b58:	68f8      	ldr	r0, [r7, #12]
 8005b5a:	f7ff fe3f 	bl	80057dc <validate>
 8005b5e:	4603      	mov	r3, r0
 8005b60:	77fb      	strb	r3, [r7, #31]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8005b62:	7ffb      	ldrb	r3, [r7, #31]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d001      	beq.n	8005b6c <f_read+0x2c>
 8005b68:	7ffb      	ldrb	r3, [r7, #31]
 8005b6a:	e11c      	b.n	8005da6 <f_read+0x266>
	if (fp->err)								/* Check error */
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	79db      	ldrb	r3, [r3, #7]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d002      	beq.n	8005b7a <f_read+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	79db      	ldrb	r3, [r3, #7]
 8005b78:	e115      	b.n	8005da6 <f_read+0x266>
	if (!(fp->flag & FA_READ)) 					/* Check access mode */
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	799b      	ldrb	r3, [r3, #6]
 8005b7e:	f003 0301 	and.w	r3, r3, #1
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d101      	bne.n	8005b8a <f_read+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 8005b86:	2307      	movs	r3, #7
 8005b88:	e10d      	b.n	8005da6 <f_read+0x266>
	remain = fp->fsize - fp->fptr;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	68da      	ldr	r2, [r3, #12]
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	1ad3      	subs	r3, r2, r3
 8005b94:	61bb      	str	r3, [r7, #24]
	if (btr > remain) btr = (UINT)remain;		/* Truncate btr by remaining bytes */
 8005b96:	687a      	ldr	r2, [r7, #4]
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	429a      	cmp	r2, r3
 8005b9c:	f240 80fe 	bls.w	8005d9c <f_read+0x25c>
 8005ba0:	69bb      	ldr	r3, [r7, #24]
 8005ba2:	607b      	str	r3, [r7, #4]

	for ( ;  btr;								/* Repeat until all data read */
 8005ba4:	e0fa      	b.n	8005d9c <f_read+0x25c>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {		/* On the sector boundary? */
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	689b      	ldr	r3, [r3, #8]
 8005baa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	f040 80c6 	bne.w	8005d40 <f_read+0x200>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	0a5b      	lsrs	r3, r3, #9
 8005bba:	b2da      	uxtb	r2, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	789b      	ldrb	r3, [r3, #2]
 8005bc2:	3b01      	subs	r3, #1
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	4013      	ands	r3, r2
 8005bc8:	75fb      	strb	r3, [r7, #23]
			if (!csect) {						/* On the cluster boundary? */
 8005bca:	7dfb      	ldrb	r3, [r7, #23]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d124      	bne.n	8005c1a <f_read+0xda>
				if (fp->fptr == 0) {			/* On the top of the file? */
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	689b      	ldr	r3, [r3, #8]
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d103      	bne.n	8005be0 <f_read+0xa0>
					clst = fp->sclust;			/* Follow from the origin */
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	691b      	ldr	r3, [r3, #16]
 8005bdc:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005bde:	e008      	b.n	8005bf2 <f_read+0xb2>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = get_fat(fp->fs, fp->clust);	/* Follow cluster chain on the FAT */
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	681a      	ldr	r2, [r3, #0]
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	695b      	ldr	r3, [r3, #20]
 8005be8:	4619      	mov	r1, r3
 8005bea:	4610      	mov	r0, r2
 8005bec:	f7fe face 	bl	800418c <get_fat>
 8005bf0:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				if (clst < 2) ABORT(fp->fs, FR_INT_ERR);
 8005bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005bf4:	2b01      	cmp	r3, #1
 8005bf6:	d804      	bhi.n	8005c02 <f_read+0xc2>
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	2202      	movs	r2, #2
 8005bfc:	71da      	strb	r2, [r3, #7]
 8005bfe:	2302      	movs	r3, #2
 8005c00:	e0d1      	b.n	8005da6 <f_read+0x266>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c08:	d104      	bne.n	8005c14 <f_read+0xd4>
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	71da      	strb	r2, [r3, #7]
 8005c10:	2301      	movs	r3, #1
 8005c12:	e0c8      	b.n	8005da6 <f_read+0x266>
				fp->clust = clst;				/* Update current cluster */
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005c18:	615a      	str	r2, [r3, #20]
			}
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	681a      	ldr	r2, [r3, #0]
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	4619      	mov	r1, r3
 8005c24:	4610      	mov	r0, r2
 8005c26:	f7fe fa92 	bl	800414e <clust2sect>
 8005c2a:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8005c2c:	693b      	ldr	r3, [r7, #16]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d104      	bne.n	8005c3c <f_read+0xfc>
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	2202      	movs	r2, #2
 8005c36:	71da      	strb	r2, [r3, #7]
 8005c38:	2302      	movs	r3, #2
 8005c3a:	e0b4      	b.n	8005da6 <f_read+0x266>
			sect += csect;
 8005c3c:	7dfb      	ldrb	r3, [r7, #23]
 8005c3e:	693a      	ldr	r2, [r7, #16]
 8005c40:	4413      	add	r3, r2
 8005c42:	613b      	str	r3, [r7, #16]
			cc = btr / SS(fp->fs);				/* When remaining bytes >= sector size, */
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	0a5b      	lsrs	r3, r3, #9
 8005c48:	627b      	str	r3, [r7, #36]	; 0x24
			if (cc) {							/* Read maximum contiguous sectors directly */
 8005c4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d03d      	beq.n	8005ccc <f_read+0x18c>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8005c50:	7dfa      	ldrb	r2, [r7, #23]
 8005c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c54:	4413      	add	r3, r2
 8005c56:	68fa      	ldr	r2, [r7, #12]
 8005c58:	6812      	ldr	r2, [r2, #0]
 8005c5a:	7892      	ldrb	r2, [r2, #2]
 8005c5c:	4293      	cmp	r3, r2
 8005c5e:	d906      	bls.n	8005c6e <f_read+0x12e>
					cc = fp->fs->csize - csect;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	789b      	ldrb	r3, [r3, #2]
 8005c66:	461a      	mov	r2, r3
 8005c68:	7dfb      	ldrb	r3, [r7, #23]
 8005c6a:	1ad3      	subs	r3, r2, r3
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
				if (disk_read(fp->fs->drv, rbuff, sect, cc) != RES_OK)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	7858      	ldrb	r0, [r3, #1]
 8005c74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	6a39      	ldr	r1, [r7, #32]
 8005c7a:	f7fc fe09 	bl	8002890 <disk_read>
 8005c7e:	4603      	mov	r3, r0
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d004      	beq.n	8005c8e <f_read+0x14e>
					ABORT(fp->fs, FR_DISK_ERR);
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	2201      	movs	r2, #1
 8005c88:	71da      	strb	r2, [r3, #7]
 8005c8a:	2301      	movs	r3, #1
 8005c8c:	e08b      	b.n	8005da6 <f_read+0x266>
#if !_FS_READONLY && _FS_MINIMIZE <= 2			/* Replace one of the read sectors with cached data if it contains a dirty sector */
#if _FS_TINY
				if (fp->fs->wflag && fp->fs->winsect - sect < cc)
					mem_cpy(rbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), fp->fs->win, SS(fp->fs));
#else
				if ((fp->flag & FA__DIRTY) && fp->dsect - sect < cc)
 8005c8e:	68fb      	ldr	r3, [r7, #12]
 8005c90:	799b      	ldrb	r3, [r3, #6]
 8005c92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d014      	beq.n	8005cc4 <f_read+0x184>
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	699a      	ldr	r2, [r3, #24]
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d90d      	bls.n	8005cc4 <f_read+0x184>
					mem_cpy(rbuff + ((fp->dsect - sect) * SS(fp->fs)), fp->buf, SS(fp->fs));
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	699a      	ldr	r2, [r3, #24]
 8005cac:	693b      	ldr	r3, [r7, #16]
 8005cae:	1ad3      	subs	r3, r2, r3
 8005cb0:	025b      	lsls	r3, r3, #9
 8005cb2:	6a3a      	ldr	r2, [r7, #32]
 8005cb4:	18d0      	adds	r0, r2, r3
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	3324      	adds	r3, #36	; 0x24
 8005cba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005cbe:	4619      	mov	r1, r3
 8005cc0:	f7fe f8b6 	bl	8003e30 <mem_cpy>
#endif
#endif
				rcnt = SS(fp->fs) * cc;			/* Number of bytes transferred */
 8005cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005cc6:	025b      	lsls	r3, r3, #9
 8005cc8:	62bb      	str	r3, [r7, #40]	; 0x28
				continue;
 8005cca:	e053      	b.n	8005d74 <f_read+0x234>
			}
#if !_FS_TINY
			if (fp->dsect != sect) {			/* Load data sector if not in cache */
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	699b      	ldr	r3, [r3, #24]
 8005cd0:	693a      	ldr	r2, [r7, #16]
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d031      	beq.n	8005d3a <f_read+0x1fa>
#if !_FS_READONLY
				if (fp->flag & FA__DIRTY) {		/* Write-back dirty sector cache */
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	799b      	ldrb	r3, [r3, #6]
 8005cda:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d019      	beq.n	8005d16 <f_read+0x1d6>
					if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	7858      	ldrb	r0, [r3, #1]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	699a      	ldr	r2, [r3, #24]
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	f7fc fdfa 	bl	80028ec <disk_write>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d004      	beq.n	8005d08 <f_read+0x1c8>
						ABORT(fp->fs, FR_DISK_ERR);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	2201      	movs	r2, #1
 8005d02:	71da      	strb	r2, [r3, #7]
 8005d04:	2301      	movs	r3, #1
 8005d06:	e04e      	b.n	8005da6 <f_read+0x266>
					fp->flag &= ~FA__DIRTY;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	799b      	ldrb	r3, [r3, #6]
 8005d0c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005d10:	b2da      	uxtb	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	719a      	strb	r2, [r3, #6]
				}
#endif
				if (disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)	/* Fill sector cache */
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	7858      	ldrb	r0, [r3, #1]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005d22:	2301      	movs	r3, #1
 8005d24:	693a      	ldr	r2, [r7, #16]
 8005d26:	f7fc fdb3 	bl	8002890 <disk_read>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d004      	beq.n	8005d3a <f_read+0x1fa>
					ABORT(fp->fs, FR_DISK_ERR);
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	2201      	movs	r2, #1
 8005d34:	71da      	strb	r2, [r3, #7]
 8005d36:	2301      	movs	r3, #1
 8005d38:	e035      	b.n	8005da6 <f_read+0x266>
			}
#endif
			fp->dsect = sect;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	693a      	ldr	r2, [r7, #16]
 8005d3e:	619a      	str	r2, [r3, #24]
		}
		rcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));	/* Get partial sector data from sector buffer */
 8005d40:	68fb      	ldr	r3, [r7, #12]
 8005d42:	689b      	ldr	r3, [r3, #8]
 8005d44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d48:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005d4c:	62bb      	str	r3, [r7, #40]	; 0x28
		if (rcnt > btr) rcnt = btr;
 8005d4e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	429a      	cmp	r2, r3
 8005d54:	d901      	bls.n	8005d5a <f_read+0x21a>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	62bb      	str	r3, [r7, #40]	; 0x28
#if _FS_TINY
		if (move_window(fp->fs, fp->dsect) != FR_OK)		/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(rbuff, &fp->fs->win[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
#else
		mem_cpy(rbuff, &fp->buf[fp->fptr % SS(fp->fs)], rcnt);	/* Pick partial sector */
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	689b      	ldr	r3, [r3, #8]
 8005d5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d62:	3320      	adds	r3, #32
 8005d64:	68fa      	ldr	r2, [r7, #12]
 8005d66:	4413      	add	r3, r2
 8005d68:	3304      	adds	r3, #4
 8005d6a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d6c:	4619      	mov	r1, r3
 8005d6e:	6a38      	ldr	r0, [r7, #32]
 8005d70:	f7fe f85e 	bl	8003e30 <mem_cpy>
		rbuff += rcnt, fp->fptr += rcnt, *br += rcnt, btr -= rcnt) {
 8005d74:	6a3a      	ldr	r2, [r7, #32]
 8005d76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d78:	4413      	add	r3, r2
 8005d7a:	623b      	str	r3, [r7, #32]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	689a      	ldr	r2, [r3, #8]
 8005d80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d82:	441a      	add	r2, r3
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	609a      	str	r2, [r3, #8]
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d8e:	441a      	add	r2, r3
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	601a      	str	r2, [r3, #0]
 8005d94:	687a      	ldr	r2, [r7, #4]
 8005d96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	607b      	str	r3, [r7, #4]
	for ( ;  btr;								/* Repeat until all data read */
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f47f af01 	bne.w	8005ba6 <f_read+0x66>
#endif
	}

	LEAVE_FF(fp->fs, FR_OK);
 8005da4:	2300      	movs	r3, #0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3730      	adds	r7, #48	; 0x30
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}

08005dae <f_write>:
	FIL* fp,			/* Pointer to the file object */
	const void *buff,	/* Pointer to the data to be written */
	UINT btw,			/* Number of bytes to write */
	UINT* bw			/* Pointer to number of bytes written */
)
{
 8005dae:	b580      	push	{r7, lr}
 8005db0:	b08a      	sub	sp, #40	; 0x28
 8005db2:	af00      	add	r7, sp, #0
 8005db4:	60f8      	str	r0, [r7, #12]
 8005db6:	60b9      	str	r1, [r7, #8]
 8005db8:	607a      	str	r2, [r7, #4]
 8005dba:	603b      	str	r3, [r7, #0]
	FRESULT res;
	DWORD clst, sect;
	UINT wcnt, cc;
	const BYTE *wbuff = (const BYTE*)buff;
 8005dbc:	68bb      	ldr	r3, [r7, #8]
 8005dbe:	61bb      	str	r3, [r7, #24]
	BYTE csect;


	*bw = 0;	/* Clear write byte counter */
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	2200      	movs	r2, #0
 8005dc4:	601a      	str	r2, [r3, #0]

	res = validate(fp);						/* Check validity */
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f7ff fd08 	bl	80057dc <validate>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8005dd0:	7dfb      	ldrb	r3, [r7, #23]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d001      	beq.n	8005dda <f_write+0x2c>
 8005dd6:	7dfb      	ldrb	r3, [r7, #23]
 8005dd8:	e151      	b.n	800607e <f_write+0x2d0>
	if (fp->err)							/* Check error */
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	79db      	ldrb	r3, [r3, #7]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d002      	beq.n	8005de8 <f_write+0x3a>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	79db      	ldrb	r3, [r3, #7]
 8005de6:	e14a      	b.n	800607e <f_write+0x2d0>
	if (!(fp->flag & FA_WRITE))				/* Check access mode */
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	799b      	ldrb	r3, [r3, #6]
 8005dec:	f003 0302 	and.w	r3, r3, #2
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d101      	bne.n	8005df8 <f_write+0x4a>
		LEAVE_FF(fp->fs, FR_DENIED);
 8005df4:	2307      	movs	r3, #7
 8005df6:	e142      	b.n	800607e <f_write+0x2d0>
	if (fp->fptr + btw < fp->fptr) btw = 0;	/* File size cannot reach 4GB */
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	689a      	ldr	r2, [r3, #8]
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	441a      	add	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	689b      	ldr	r3, [r3, #8]
 8005e04:	429a      	cmp	r2, r3
 8005e06:	f080 8122 	bcs.w	800604e <f_write+0x2a0>
 8005e0a:	2300      	movs	r3, #0
 8005e0c:	607b      	str	r3, [r7, #4]

	for ( ;  btw;							/* Repeat until all data written */
 8005e0e:	e11e      	b.n	800604e <f_write+0x2a0>
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
		if ((fp->fptr % SS(fp->fs)) == 0) {	/* On the sector boundary? */
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	689b      	ldr	r3, [r3, #8]
 8005e14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	f040 80e3 	bne.w	8005fe4 <f_write+0x236>
			csect = (BYTE)(fp->fptr / SS(fp->fs) & (fp->fs->csize - 1));	/* Sector offset in the cluster */
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	689b      	ldr	r3, [r3, #8]
 8005e22:	0a5b      	lsrs	r3, r3, #9
 8005e24:	b2da      	uxtb	r2, r3
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	789b      	ldrb	r3, [r3, #2]
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	4013      	ands	r3, r2
 8005e32:	75bb      	strb	r3, [r7, #22]
			if (!csect) {					/* On the cluster boundary? */
 8005e34:	7dbb      	ldrb	r3, [r7, #22]
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d139      	bne.n	8005eae <f_write+0x100>
				if (fp->fptr == 0) {		/* On the top of the file? */
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d10d      	bne.n	8005e5e <f_write+0xb0>
					clst = fp->sclust;		/* Follow from the origin */
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	691b      	ldr	r3, [r3, #16]
 8005e46:	627b      	str	r3, [r7, #36]	; 0x24
					if (clst == 0)			/* When no cluster is allocated, */
 8005e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4a:	2b00      	cmp	r3, #0
 8005e4c:	d110      	bne.n	8005e70 <f_write+0xc2>
						clst = create_chain(fp->fs, 0);	/* Create a new cluster chain */
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2100      	movs	r1, #0
 8005e54:	4618      	mov	r0, r3
 8005e56:	f7fe fbb4 	bl	80045c2 <create_chain>
 8005e5a:	6278      	str	r0, [r7, #36]	; 0x24
 8005e5c:	e008      	b.n	8005e70 <f_write+0xc2>
#if _USE_FASTSEEK
					if (fp->cltbl)
						clst = clmt_clust(fp, fp->fptr);	/* Get cluster# from the CLMT */
					else
#endif
						clst = create_chain(fp->fs, fp->clust);	/* Follow or stretch cluster chain on the FAT */
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681a      	ldr	r2, [r3, #0]
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	695b      	ldr	r3, [r3, #20]
 8005e66:	4619      	mov	r1, r3
 8005e68:	4610      	mov	r0, r2
 8005e6a:	f7fe fbaa 	bl	80045c2 <create_chain>
 8005e6e:	6278      	str	r0, [r7, #36]	; 0x24
				}
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8005e70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	f000 80f0 	beq.w	8006058 <f_write+0x2aa>
				if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 8005e78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e7a:	2b01      	cmp	r3, #1
 8005e7c:	d104      	bne.n	8005e88 <f_write+0xda>
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	2202      	movs	r2, #2
 8005e82:	71da      	strb	r2, [r3, #7]
 8005e84:	2302      	movs	r3, #2
 8005e86:	e0fa      	b.n	800607e <f_write+0x2d0>
				if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8005e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e8e:	d104      	bne.n	8005e9a <f_write+0xec>
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	2201      	movs	r2, #1
 8005e94:	71da      	strb	r2, [r3, #7]
 8005e96:	2301      	movs	r3, #1
 8005e98:	e0f1      	b.n	800607e <f_write+0x2d0>
				fp->clust = clst;			/* Update current cluster */
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e9e:	615a      	str	r2, [r3, #20]
				if (fp->sclust == 0) fp->sclust = clst;	/* Set start cluster if the first write */
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	691b      	ldr	r3, [r3, #16]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d102      	bne.n	8005eae <f_write+0x100>
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005eac:	611a      	str	r2, [r3, #16]
			}
#if _FS_TINY
			if (fp->fs->winsect == fp->dsect && sync_window(fp->fs))	/* Write-back sector cache */
				ABORT(fp->fs, FR_DISK_ERR);
#else
			if (fp->flag & FA__DIRTY) {		/* Write-back sector cache */
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	799b      	ldrb	r3, [r3, #6]
 8005eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d019      	beq.n	8005eee <f_write+0x140>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	7858      	ldrb	r0, [r3, #1]
 8005ec0:	68fb      	ldr	r3, [r7, #12]
 8005ec2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	699a      	ldr	r2, [r3, #24]
 8005eca:	2301      	movs	r3, #1
 8005ecc:	f7fc fd0e 	bl	80028ec <disk_write>
 8005ed0:	4603      	mov	r3, r0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d004      	beq.n	8005ee0 <f_write+0x132>
					ABORT(fp->fs, FR_DISK_ERR);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	2201      	movs	r2, #1
 8005eda:	71da      	strb	r2, [r3, #7]
 8005edc:	2301      	movs	r3, #1
 8005ede:	e0ce      	b.n	800607e <f_write+0x2d0>
				fp->flag &= ~FA__DIRTY;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	799b      	ldrb	r3, [r3, #6]
 8005ee4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ee8:	b2da      	uxtb	r2, r3
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	719a      	strb	r2, [r3, #6]
			}
#endif
			sect = clust2sect(fp->fs, fp->clust);	/* Get current sector */
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	681a      	ldr	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	4619      	mov	r1, r3
 8005ef8:	4610      	mov	r0, r2
 8005efa:	f7fe f928 	bl	800414e <clust2sect>
 8005efe:	6138      	str	r0, [r7, #16]
			if (!sect) ABORT(fp->fs, FR_INT_ERR);
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d104      	bne.n	8005f10 <f_write+0x162>
 8005f06:	68fb      	ldr	r3, [r7, #12]
 8005f08:	2202      	movs	r2, #2
 8005f0a:	71da      	strb	r2, [r3, #7]
 8005f0c:	2302      	movs	r3, #2
 8005f0e:	e0b6      	b.n	800607e <f_write+0x2d0>
			sect += csect;
 8005f10:	7dbb      	ldrb	r3, [r7, #22]
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	4413      	add	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]
			cc = btw / SS(fp->fs);			/* When remaining bytes >= sector size, */
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	0a5b      	lsrs	r3, r3, #9
 8005f1c:	61fb      	str	r3, [r7, #28]
			if (cc) {						/* Write maximum contiguous sectors directly */
 8005f1e:	69fb      	ldr	r3, [r7, #28]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d03f      	beq.n	8005fa4 <f_write+0x1f6>
				if (csect + cc > fp->fs->csize)	/* Clip at cluster boundary */
 8005f24:	7dba      	ldrb	r2, [r7, #22]
 8005f26:	69fb      	ldr	r3, [r7, #28]
 8005f28:	4413      	add	r3, r2
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	6812      	ldr	r2, [r2, #0]
 8005f2e:	7892      	ldrb	r2, [r2, #2]
 8005f30:	4293      	cmp	r3, r2
 8005f32:	d906      	bls.n	8005f42 <f_write+0x194>
					cc = fp->fs->csize - csect;
 8005f34:	68fb      	ldr	r3, [r7, #12]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	789b      	ldrb	r3, [r3, #2]
 8005f3a:	461a      	mov	r2, r3
 8005f3c:	7dbb      	ldrb	r3, [r7, #22]
 8005f3e:	1ad3      	subs	r3, r2, r3
 8005f40:	61fb      	str	r3, [r7, #28]
				if (disk_write(fp->fs->drv, wbuff, sect, cc) != RES_OK)
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	7858      	ldrb	r0, [r3, #1]
 8005f48:	69fb      	ldr	r3, [r7, #28]
 8005f4a:	693a      	ldr	r2, [r7, #16]
 8005f4c:	69b9      	ldr	r1, [r7, #24]
 8005f4e:	f7fc fccd 	bl	80028ec <disk_write>
 8005f52:	4603      	mov	r3, r0
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d004      	beq.n	8005f62 <f_write+0x1b4>
					ABORT(fp->fs, FR_DISK_ERR);
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	71da      	strb	r2, [r3, #7]
 8005f5e:	2301      	movs	r3, #1
 8005f60:	e08d      	b.n	800607e <f_write+0x2d0>
				if (fp->fs->winsect - sect < cc) {	/* Refill sector cache if it gets invalidated by the direct write */
					mem_cpy(fp->fs->win, wbuff + ((fp->fs->winsect - sect) * SS(fp->fs)), SS(fp->fs));
					fp->fs->wflag = 0;
				}
#else
				if (fp->dsect - sect < cc) { /* Refill sector cache if it gets invalidated by the direct write */
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	699a      	ldr	r2, [r3, #24]
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	1ad3      	subs	r3, r2, r3
 8005f6a:	69fa      	ldr	r2, [r7, #28]
 8005f6c:	429a      	cmp	r2, r3
 8005f6e:	d915      	bls.n	8005f9c <f_write+0x1ee>
					mem_cpy(fp->buf, wbuff + ((fp->dsect - sect) * SS(fp->fs)), SS(fp->fs));
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	f103 0024 	add.w	r0, r3, #36	; 0x24
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	699a      	ldr	r2, [r3, #24]
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	1ad3      	subs	r3, r2, r3
 8005f7e:	025b      	lsls	r3, r3, #9
 8005f80:	69ba      	ldr	r2, [r7, #24]
 8005f82:	4413      	add	r3, r2
 8005f84:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f88:	4619      	mov	r1, r3
 8005f8a:	f7fd ff51 	bl	8003e30 <mem_cpy>
					fp->flag &= ~FA__DIRTY;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	799b      	ldrb	r3, [r3, #6]
 8005f92:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f96:	b2da      	uxtb	r2, r3
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	719a      	strb	r2, [r3, #6]
				}
#endif
#endif
				wcnt = SS(fp->fs) * cc;		/* Number of bytes transferred */
 8005f9c:	69fb      	ldr	r3, [r7, #28]
 8005f9e:	025b      	lsls	r3, r3, #9
 8005fa0:	623b      	str	r3, [r7, #32]
				continue;
 8005fa2:	e040      	b.n	8006026 <f_write+0x278>
			if (fp->fptr >= fp->fsize) {	/* Avoid silly cache filling at growing edge */
				if (sync_window(fp->fs)) ABORT(fp->fs, FR_DISK_ERR);
				fp->fs->winsect = sect;
			}
#else
			if (fp->dsect != sect) {		/* Fill sector cache with file data */
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	699b      	ldr	r3, [r3, #24]
 8005fa8:	693a      	ldr	r2, [r7, #16]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d017      	beq.n	8005fde <f_write+0x230>
				if (fp->fptr < fp->fsize &&
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	689a      	ldr	r2, [r3, #8]
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	429a      	cmp	r2, r3
 8005fb8:	d211      	bcs.n	8005fde <f_write+0x230>
					disk_read(fp->fs->drv, fp->buf, sect, 1) != RES_OK)
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	7858      	ldrb	r0, [r3, #1]
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8005fc6:	2301      	movs	r3, #1
 8005fc8:	693a      	ldr	r2, [r7, #16]
 8005fca:	f7fc fc61 	bl	8002890 <disk_read>
 8005fce:	4603      	mov	r3, r0
				if (fp->fptr < fp->fsize &&
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d004      	beq.n	8005fde <f_write+0x230>
						ABORT(fp->fs, FR_DISK_ERR);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	2201      	movs	r2, #1
 8005fd8:	71da      	strb	r2, [r3, #7]
 8005fda:	2301      	movs	r3, #1
 8005fdc:	e04f      	b.n	800607e <f_write+0x2d0>
			}
#endif
			fp->dsect = sect;
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	693a      	ldr	r2, [r7, #16]
 8005fe2:	619a      	str	r2, [r3, #24]
		}
		wcnt = SS(fp->fs) - ((UINT)fp->fptr % SS(fp->fs));/* Put partial sector into file I/O buffer */
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005fec:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8005ff0:	623b      	str	r3, [r7, #32]
		if (wcnt > btw) wcnt = btw;
 8005ff2:	6a3a      	ldr	r2, [r7, #32]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	429a      	cmp	r2, r3
 8005ff8:	d901      	bls.n	8005ffe <f_write+0x250>
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	623b      	str	r3, [r7, #32]
		if (move_window(fp->fs, fp->dsect) != FR_OK)	/* Move sector window */
			ABORT(fp->fs, FR_DISK_ERR);
		mem_cpy(&fp->fs->win[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
		fp->fs->wflag = 1;
#else
		mem_cpy(&fp->buf[fp->fptr % SS(fp->fs)], wbuff, wcnt);	/* Fit partial sector */
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	689b      	ldr	r3, [r3, #8]
 8006002:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006006:	3320      	adds	r3, #32
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	4413      	add	r3, r2
 800600c:	3304      	adds	r3, #4
 800600e:	6a3a      	ldr	r2, [r7, #32]
 8006010:	69b9      	ldr	r1, [r7, #24]
 8006012:	4618      	mov	r0, r3
 8006014:	f7fd ff0c 	bl	8003e30 <mem_cpy>
		fp->flag |= FA__DIRTY;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	799b      	ldrb	r3, [r3, #6]
 800601c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006020:	b2da      	uxtb	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	719a      	strb	r2, [r3, #6]
		wbuff += wcnt, fp->fptr += wcnt, *bw += wcnt, btw -= wcnt) {
 8006026:	69ba      	ldr	r2, [r7, #24]
 8006028:	6a3b      	ldr	r3, [r7, #32]
 800602a:	4413      	add	r3, r2
 800602c:	61bb      	str	r3, [r7, #24]
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	689a      	ldr	r2, [r3, #8]
 8006032:	6a3b      	ldr	r3, [r7, #32]
 8006034:	441a      	add	r2, r3
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	609a      	str	r2, [r3, #8]
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	681a      	ldr	r2, [r3, #0]
 800603e:	6a3b      	ldr	r3, [r7, #32]
 8006040:	441a      	add	r2, r3
 8006042:	683b      	ldr	r3, [r7, #0]
 8006044:	601a      	str	r2, [r3, #0]
 8006046:	687a      	ldr	r2, [r7, #4]
 8006048:	6a3b      	ldr	r3, [r7, #32]
 800604a:	1ad3      	subs	r3, r2, r3
 800604c:	607b      	str	r3, [r7, #4]
	for ( ;  btw;							/* Repeat until all data written */
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2b00      	cmp	r3, #0
 8006052:	f47f aedd 	bne.w	8005e10 <f_write+0x62>
 8006056:	e000      	b.n	800605a <f_write+0x2ac>
				if (clst == 0) break;		/* Could not allocate a new cluster (disk full) */
 8006058:	bf00      	nop
#endif
	}

	if (fp->fptr > fp->fsize) fp->fsize = fp->fptr;	/* Update file size if needed */
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	689a      	ldr	r2, [r3, #8]
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	68db      	ldr	r3, [r3, #12]
 8006062:	429a      	cmp	r2, r3
 8006064:	d903      	bls.n	800606e <f_write+0x2c0>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	689a      	ldr	r2, [r3, #8]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	60da      	str	r2, [r3, #12]
	fp->flag |= FA__WRITTEN;						/* Set file change flag */
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	799b      	ldrb	r3, [r3, #6]
 8006072:	f043 0320 	orr.w	r3, r3, #32
 8006076:	b2da      	uxtb	r2, r3
 8006078:	68fb      	ldr	r3, [r7, #12]
 800607a:	719a      	strb	r2, [r3, #6]

	LEAVE_FF(fp->fs, FR_OK);
 800607c:	2300      	movs	r3, #0
}
 800607e:	4618      	mov	r0, r3
 8006080:	3728      	adds	r7, #40	; 0x28
 8006082:	46bd      	mov	sp, r7
 8006084:	bd80      	pop	{r7, pc}

08006086 <f_sync>:
/*-----------------------------------------------------------------------*/

FRESULT f_sync (
	FIL* fp		/* Pointer to the file object */
)
{
 8006086:	b580      	push	{r7, lr}
 8006088:	b086      	sub	sp, #24
 800608a:	af00      	add	r7, sp, #0
 800608c:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD tm;
	BYTE *dir;


	res = validate(fp);					/* Check validity of the object */
 800608e:	6878      	ldr	r0, [r7, #4]
 8006090:	f7ff fba4 	bl	80057dc <validate>
 8006094:	4603      	mov	r3, r0
 8006096:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006098:	7dfb      	ldrb	r3, [r7, #23]
 800609a:	2b00      	cmp	r3, #0
 800609c:	f040 8096 	bne.w	80061cc <f_sync+0x146>
		if (fp->flag & FA__WRITTEN) {	/* Has the file been written? */
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	799b      	ldrb	r3, [r3, #6]
 80060a4:	f003 0320 	and.w	r3, r3, #32
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 808f 	beq.w	80061cc <f_sync+0x146>
			/* Write-back dirty buffer */
#if !_FS_TINY
			if (fp->flag & FA__DIRTY) {
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	799b      	ldrb	r3, [r3, #6]
 80060b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d016      	beq.n	80060e8 <f_sync+0x62>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	7858      	ldrb	r0, [r3, #1]
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	699a      	ldr	r2, [r3, #24]
 80060ca:	2301      	movs	r3, #1
 80060cc:	f7fc fc0e 	bl	80028ec <disk_write>
 80060d0:	4603      	mov	r3, r0
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d001      	beq.n	80060da <f_sync+0x54>
					LEAVE_FF(fp->fs, FR_DISK_ERR);
 80060d6:	2301      	movs	r3, #1
 80060d8:	e079      	b.n	80061ce <f_sync+0x148>
				fp->flag &= ~FA__DIRTY;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	799b      	ldrb	r3, [r3, #6]
 80060de:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060e2:	b2da      	uxtb	r2, r3
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	719a      	strb	r2, [r3, #6]
			}
#endif
			/* Update the directory entry */
			res = move_window(fp->fs, fp->dir_sect);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	681a      	ldr	r2, [r3, #0]
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	69db      	ldr	r3, [r3, #28]
 80060f0:	4619      	mov	r1, r3
 80060f2:	4610      	mov	r0, r2
 80060f4:	f7fd ff5c 	bl	8003fb0 <move_window>
 80060f8:	4603      	mov	r3, r0
 80060fa:	75fb      	strb	r3, [r7, #23]
			if (res == FR_OK) {
 80060fc:	7dfb      	ldrb	r3, [r7, #23]
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d164      	bne.n	80061cc <f_sync+0x146>
				dir = fp->dir_ptr;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	613b      	str	r3, [r7, #16]
				dir[DIR_Attr] |= AM_ARC;					/* Set archive bit */
 8006108:	693b      	ldr	r3, [r7, #16]
 800610a:	330b      	adds	r3, #11
 800610c:	781a      	ldrb	r2, [r3, #0]
 800610e:	693b      	ldr	r3, [r7, #16]
 8006110:	330b      	adds	r3, #11
 8006112:	f042 0220 	orr.w	r2, r2, #32
 8006116:	b2d2      	uxtb	r2, r2
 8006118:	701a      	strb	r2, [r3, #0]
				ST_DWORD(dir + DIR_FileSize, fp->fsize);	/* Update file size */
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	68da      	ldr	r2, [r3, #12]
 800611e:	693b      	ldr	r3, [r7, #16]
 8006120:	331c      	adds	r3, #28
 8006122:	b2d2      	uxtb	r2, r2
 8006124:	701a      	strb	r2, [r3, #0]
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	68db      	ldr	r3, [r3, #12]
 800612a:	b29b      	uxth	r3, r3
 800612c:	0a1b      	lsrs	r3, r3, #8
 800612e:	b29a      	uxth	r2, r3
 8006130:	693b      	ldr	r3, [r7, #16]
 8006132:	331d      	adds	r3, #29
 8006134:	b2d2      	uxtb	r2, r2
 8006136:	701a      	strb	r2, [r3, #0]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	68db      	ldr	r3, [r3, #12]
 800613c:	0c1a      	lsrs	r2, r3, #16
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	331e      	adds	r3, #30
 8006142:	b2d2      	uxtb	r2, r2
 8006144:	701a      	strb	r2, [r3, #0]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	68db      	ldr	r3, [r3, #12]
 800614a:	0e1a      	lsrs	r2, r3, #24
 800614c:	693b      	ldr	r3, [r7, #16]
 800614e:	331f      	adds	r3, #31
 8006150:	b2d2      	uxtb	r2, r2
 8006152:	701a      	strb	r2, [r3, #0]
				st_clust(dir, fp->sclust);					/* Update start cluster */
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	691b      	ldr	r3, [r3, #16]
 8006158:	4619      	mov	r1, r3
 800615a:	6938      	ldr	r0, [r7, #16]
 800615c:	f7fe fc89 	bl	8004a72 <st_clust>
				tm = GET_FATTIME();							/* Update updated time */
 8006160:	f7fc fc1c 	bl	800299c <get_fattime>
 8006164:	60f8      	str	r0, [r7, #12]
				ST_DWORD(dir + DIR_WrtTime, tm);
 8006166:	693b      	ldr	r3, [r7, #16]
 8006168:	3316      	adds	r3, #22
 800616a:	68fa      	ldr	r2, [r7, #12]
 800616c:	b2d2      	uxtb	r2, r2
 800616e:	701a      	strb	r2, [r3, #0]
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	b29b      	uxth	r3, r3
 8006174:	0a1b      	lsrs	r3, r3, #8
 8006176:	b29a      	uxth	r2, r3
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	3317      	adds	r3, #23
 800617c:	b2d2      	uxtb	r2, r2
 800617e:	701a      	strb	r2, [r3, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	0c1a      	lsrs	r2, r3, #16
 8006184:	693b      	ldr	r3, [r7, #16]
 8006186:	3318      	adds	r3, #24
 8006188:	b2d2      	uxtb	r2, r2
 800618a:	701a      	strb	r2, [r3, #0]
 800618c:	68fb      	ldr	r3, [r7, #12]
 800618e:	0e1a      	lsrs	r2, r3, #24
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	3319      	adds	r3, #25
 8006194:	b2d2      	uxtb	r2, r2
 8006196:	701a      	strb	r2, [r3, #0]
				ST_WORD(dir + DIR_LstAccDate, 0);
 8006198:	693b      	ldr	r3, [r7, #16]
 800619a:	3312      	adds	r3, #18
 800619c:	2200      	movs	r2, #0
 800619e:	701a      	strb	r2, [r3, #0]
 80061a0:	693b      	ldr	r3, [r7, #16]
 80061a2:	3313      	adds	r3, #19
 80061a4:	2200      	movs	r2, #0
 80061a6:	701a      	strb	r2, [r3, #0]
				fp->flag &= ~FA__WRITTEN;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	799b      	ldrb	r3, [r3, #6]
 80061ac:	f023 0320 	bic.w	r3, r3, #32
 80061b0:	b2da      	uxtb	r2, r3
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	719a      	strb	r2, [r3, #6]
				fp->fs->wflag = 1;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	2201      	movs	r2, #1
 80061bc:	711a      	strb	r2, [r3, #4]
				res = sync_fs(fp->fs);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4618      	mov	r0, r3
 80061c4:	f7fd ff21 	bl	800400a <sync_fs>
 80061c8:	4603      	mov	r3, r0
 80061ca:	75fb      	strb	r3, [r7, #23]
			}
		}
	}

	LEAVE_FF(fp->fs, res);
 80061cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80061ce:	4618      	mov	r0, r3
 80061d0:	3718      	adds	r7, #24
 80061d2:	46bd      	mov	sp, r7
 80061d4:	bd80      	pop	{r7, pc}

080061d6 <f_close>:
/*-----------------------------------------------------------------------*/

FRESULT f_close (
	FIL *fp		/* Pointer to the file object to be closed */
)
{
 80061d6:	b580      	push	{r7, lr}
 80061d8:	b084      	sub	sp, #16
 80061da:	af00      	add	r7, sp, #0
 80061dc:	6078      	str	r0, [r7, #4]
	FRESULT res;


#if !_FS_READONLY
	res = f_sync(fp);					/* Flush cached data */
 80061de:	6878      	ldr	r0, [r7, #4]
 80061e0:	f7ff ff51 	bl	8006086 <f_sync>
 80061e4:	4603      	mov	r3, r0
 80061e6:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK)
 80061e8:	7bfb      	ldrb	r3, [r7, #15]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d10a      	bne.n	8006204 <f_close+0x2e>
#endif
	{
		res = validate(fp);				/* Lock volume */
 80061ee:	6878      	ldr	r0, [r7, #4]
 80061f0:	f7ff faf4 	bl	80057dc <validate>
 80061f4:	4603      	mov	r3, r0
 80061f6:	73fb      	strb	r3, [r7, #15]
		if (res == FR_OK) {
 80061f8:	7bfb      	ldrb	r3, [r7, #15]
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d102      	bne.n	8006204 <f_close+0x2e>
#endif
#if _FS_LOCK
			res = dec_lock(fp->lockid);	/* Decrement file open counter */
			if (res == FR_OK)
#endif
				fp->fs = 0;				/* Invalidate file object */
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
			unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
		}
	}
	return res;
 8006204:	7bfb      	ldrb	r3, [r7, #15]
}
 8006206:	4618      	mov	r0, r3
 8006208:	3710      	adds	r7, #16
 800620a:	46bd      	mov	sp, r7
 800620c:	bd80      	pop	{r7, pc}
	...

08006210 <f_getcwd>:
#if _FS_RPATH >= 2
FRESULT f_getcwd (
	TCHAR* buff,	/* Pointer to the directory path */
	UINT len		/* Size of path */
)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b098      	sub	sp, #96	; 0x60
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
 8006218:	6039      	str	r1, [r7, #0]
	TCHAR *tp;
	FILINFO fno;
	DEFINE_NAMEBUF;


	*buff = 0;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	701a      	strb	r2, [r3, #0]
	/* Get logical drive number */
	res = find_volume(&dj.fs, (const TCHAR**)&buff, 0);	/* Get current volume */
 8006220:	1d39      	adds	r1, r7, #4
 8006222:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006226:	2200      	movs	r2, #0
 8006228:	4618      	mov	r0, r3
 800622a:	f7ff f825 	bl	8005278 <find_volume>
 800622e:	4603      	mov	r3, r0
 8006230:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006234:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006238:	2b00      	cmp	r3, #0
 800623a:	f040 80e3 	bne.w	8006404 <f_getcwd+0x1f4>
		INIT_BUF(dj);
 800623e:	f107 0308 	add.w	r3, r7, #8
 8006242:	647b      	str	r3, [r7, #68]	; 0x44
		i = len;			/* Bottom of buffer (directory stack base) */
 8006244:	683b      	ldr	r3, [r7, #0]
 8006246:	65bb      	str	r3, [r7, #88]	; 0x58
		dj.sclust = dj.fs->cdir;			/* Start to follow upper directory from current directory */
 8006248:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800624a:	695b      	ldr	r3, [r3, #20]
 800624c:	637b      	str	r3, [r7, #52]	; 0x34
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
 800624e:	e09d      	b.n	800638c <f_getcwd+0x17c>
			res = dir_sdi(&dj, 1);			/* Get parent directory */
 8006250:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006254:	2101      	movs	r1, #1
 8006256:	4618      	mov	r0, r3
 8006258:	f7fe fa46 	bl	80046e8 <dir_sdi>
 800625c:	4603      	mov	r3, r0
 800625e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res != FR_OK) break;
 8006262:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006266:	2b00      	cmp	r3, #0
 8006268:	f040 8097 	bne.w	800639a <f_getcwd+0x18a>
			res = dir_read(&dj, 0);
 800626c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006270:	2100      	movs	r1, #0
 8006272:	4618      	mov	r0, r3
 8006274:	f7fe fc6f 	bl	8004b56 <dir_read>
 8006278:	4603      	mov	r3, r0
 800627a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res != FR_OK) break;
 800627e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006282:	2b00      	cmp	r3, #0
 8006284:	f040 808b 	bne.w	800639e <f_getcwd+0x18e>
			dj.sclust = ld_clust(dj.fs, dj.dir);	/* Goto parent directory */
 8006288:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800628a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800628c:	4611      	mov	r1, r2
 800628e:	4618      	mov	r0, r3
 8006290:	f7fe fbc2 	bl	8004a18 <ld_clust>
 8006294:	4603      	mov	r3, r0
 8006296:	637b      	str	r3, [r7, #52]	; 0x34
			res = dir_sdi(&dj, 0);
 8006298:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800629c:	2100      	movs	r1, #0
 800629e:	4618      	mov	r0, r3
 80062a0:	f7fe fa22 	bl	80046e8 <dir_sdi>
 80062a4:	4603      	mov	r3, r0
 80062a6:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res != FR_OK) break;
 80062aa:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062ae:	2b00      	cmp	r3, #0
 80062b0:	d177      	bne.n	80063a2 <f_getcwd+0x192>
			do {							/* Find the entry links to the child directory */
				res = dir_read(&dj, 0);
 80062b2:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80062b6:	2100      	movs	r1, #0
 80062b8:	4618      	mov	r0, r3
 80062ba:	f7fe fc4c 	bl	8004b56 <dir_read>
 80062be:	4603      	mov	r3, r0
 80062c0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				if (res != FR_OK) break;
 80062c4:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d117      	bne.n	80062fc <f_getcwd+0xec>
				if (ccl == ld_clust(dj.fs, dj.dir)) break;	/* Found the entry */
 80062cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062ce:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80062d0:	4611      	mov	r1, r2
 80062d2:	4618      	mov	r0, r3
 80062d4:	f7fe fba0 	bl	8004a18 <ld_clust>
 80062d8:	4602      	mov	r2, r0
 80062da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80062dc:	4293      	cmp	r3, r2
 80062de:	d00f      	beq.n	8006300 <f_getcwd+0xf0>
				res = dir_next(&dj, 0);	
 80062e0:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80062e4:	2100      	movs	r1, #0
 80062e6:	4618      	mov	r0, r3
 80062e8:	f7fe fa7d 	bl	80047e6 <dir_next>
 80062ec:	4603      	mov	r3, r0
 80062ee:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			} while (res == FR_OK);
 80062f2:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d0db      	beq.n	80062b2 <f_getcwd+0xa2>
 80062fa:	e002      	b.n	8006302 <f_getcwd+0xf2>
				if (res != FR_OK) break;
 80062fc:	bf00      	nop
 80062fe:	e000      	b.n	8006302 <f_getcwd+0xf2>
				if (ccl == ld_clust(dj.fs, dj.dir)) break;	/* Found the entry */
 8006300:	bf00      	nop
			if (res == FR_NO_FILE) res = FR_INT_ERR;/* It cannot be 'not found'. */
 8006302:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006306:	2b04      	cmp	r3, #4
 8006308:	d102      	bne.n	8006310 <f_getcwd+0x100>
 800630a:	2302      	movs	r3, #2
 800630c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			if (res != FR_OK) break;
 8006310:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006314:	2b00      	cmp	r3, #0
 8006316:	d146      	bne.n	80063a6 <f_getcwd+0x196>
#if _USE_LFN
			fno.lfname = buff;
			fno.lfsize = i;
#endif
			get_fileinfo(&dj, &fno);		/* Get the directory name and push it to the buffer */
 8006318:	f107 0214 	add.w	r2, r7, #20
 800631c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8006320:	4611      	mov	r1, r2
 8006322:	4618      	mov	r0, r3
 8006324:	f7fe fcd0 	bl	8004cc8 <get_fileinfo>
			tp = fno.fname;
 8006328:	f107 0314 	add.w	r3, r7, #20
 800632c:	3309      	adds	r3, #9
 800632e:	653b      	str	r3, [r7, #80]	; 0x50
#if _USE_LFN
			if (*buff) tp = buff;
#endif
			for (n = 0; tp[n]; n++) ;
 8006330:	2300      	movs	r3, #0
 8006332:	657b      	str	r3, [r7, #84]	; 0x54
 8006334:	e002      	b.n	800633c <f_getcwd+0x12c>
 8006336:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006338:	3301      	adds	r3, #1
 800633a:	657b      	str	r3, [r7, #84]	; 0x54
 800633c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800633e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006340:	4413      	add	r3, r2
 8006342:	781b      	ldrb	r3, [r3, #0]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d1f6      	bne.n	8006336 <f_getcwd+0x126>
			if (i < n + 3) {
 8006348:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800634a:	3303      	adds	r3, #3
 800634c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800634e:	429a      	cmp	r2, r3
 8006350:	d211      	bcs.n	8006376 <f_getcwd+0x166>
				res = FR_NOT_ENOUGH_CORE; break;
 8006352:	2311      	movs	r3, #17
 8006354:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 8006358:	e026      	b.n	80063a8 <f_getcwd+0x198>
			}
			while (n) buff[--i] = tp[--n];
 800635a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800635c:	3b01      	subs	r3, #1
 800635e:	657b      	str	r3, [r7, #84]	; 0x54
 8006360:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006362:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006364:	441a      	add	r2, r3
 8006366:	6879      	ldr	r1, [r7, #4]
 8006368:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800636a:	3b01      	subs	r3, #1
 800636c:	65bb      	str	r3, [r7, #88]	; 0x58
 800636e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006370:	440b      	add	r3, r1
 8006372:	7812      	ldrb	r2, [r2, #0]
 8006374:	701a      	strb	r2, [r3, #0]
 8006376:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006378:	2b00      	cmp	r3, #0
 800637a:	d1ee      	bne.n	800635a <f_getcwd+0x14a>
			buff[--i] = '/';
 800637c:	687a      	ldr	r2, [r7, #4]
 800637e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006380:	3b01      	subs	r3, #1
 8006382:	65bb      	str	r3, [r7, #88]	; 0x58
 8006384:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006386:	4413      	add	r3, r2
 8006388:	222f      	movs	r2, #47	; 0x2f
 800638a:	701a      	strb	r2, [r3, #0]
		while ((ccl = dj.sclust) != 0) {	/* Repeat while current directory is a sub-directory */
 800638c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800638e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006390:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006392:	2b00      	cmp	r3, #0
 8006394:	f47f af5c 	bne.w	8006250 <f_getcwd+0x40>
 8006398:	e006      	b.n	80063a8 <f_getcwd+0x198>
			if (res != FR_OK) break;
 800639a:	bf00      	nop
 800639c:	e004      	b.n	80063a8 <f_getcwd+0x198>
			if (res != FR_OK) break;
 800639e:	bf00      	nop
 80063a0:	e002      	b.n	80063a8 <f_getcwd+0x198>
			if (res != FR_OK) break;
 80063a2:	bf00      	nop
 80063a4:	e000      	b.n	80063a8 <f_getcwd+0x198>
			if (res != FR_OK) break;
 80063a6:	bf00      	nop
		}
		tp = buff;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	653b      	str	r3, [r7, #80]	; 0x50
		if (res == FR_OK) {
 80063ac:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d124      	bne.n	80063fe <f_getcwd+0x1ee>
#if _VOLUMES >= 2
			*tp++ = '0' + CurrVol;			/* Put drive number */
 80063b4:	4b16      	ldr	r3, [pc, #88]	; (8006410 <f_getcwd+0x200>)
 80063b6:	781a      	ldrb	r2, [r3, #0]
 80063b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063ba:	1c59      	adds	r1, r3, #1
 80063bc:	6539      	str	r1, [r7, #80]	; 0x50
 80063be:	3230      	adds	r2, #48	; 0x30
 80063c0:	b2d2      	uxtb	r2, r2
 80063c2:	701a      	strb	r2, [r3, #0]
			*tp++ = ':';
 80063c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063c6:	1c5a      	adds	r2, r3, #1
 80063c8:	653a      	str	r2, [r7, #80]	; 0x50
 80063ca:	223a      	movs	r2, #58	; 0x3a
 80063cc:	701a      	strb	r2, [r3, #0]
#endif
			if (i == len) {					/* Root-directory */
 80063ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063d0:	683b      	ldr	r3, [r7, #0]
 80063d2:	429a      	cmp	r2, r3
 80063d4:	d105      	bne.n	80063e2 <f_getcwd+0x1d2>
				*tp++ = '/';
 80063d6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063d8:	1c5a      	adds	r2, r3, #1
 80063da:	653a      	str	r2, [r7, #80]	; 0x50
 80063dc:	222f      	movs	r2, #47	; 0x2f
 80063de:	701a      	strb	r2, [r3, #0]
 80063e0:	e00d      	b.n	80063fe <f_getcwd+0x1ee>
			} else {						/* Sub-directroy */
				do		/* Add stacked path str */
					*tp++ = buff[i++];
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80063e6:	1c59      	adds	r1, r3, #1
 80063e8:	65b9      	str	r1, [r7, #88]	; 0x58
 80063ea:	441a      	add	r2, r3
 80063ec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80063ee:	1c59      	adds	r1, r3, #1
 80063f0:	6539      	str	r1, [r7, #80]	; 0x50
 80063f2:	7812      	ldrb	r2, [r2, #0]
 80063f4:	701a      	strb	r2, [r3, #0]
				while (i < len);
 80063f6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	429a      	cmp	r2, r3
 80063fc:	d3f1      	bcc.n	80063e2 <f_getcwd+0x1d2>
			}
		}
		*tp = 0;
 80063fe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006400:	2200      	movs	r2, #0
 8006402:	701a      	strb	r2, [r3, #0]
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 8006404:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8006408:	4618      	mov	r0, r3
 800640a:	3760      	adds	r7, #96	; 0x60
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}
 8006410:	200011ea 	.word	0x200011ea

08006414 <f_lseek>:

FRESULT f_lseek (
	FIL* fp,		/* Pointer to the file object */
	DWORD ofs		/* File pointer from top of file */
)
{
 8006414:	b580      	push	{r7, lr}
 8006416:	b088      	sub	sp, #32
 8006418:	af00      	add	r7, sp, #0
 800641a:	6078      	str	r0, [r7, #4]
 800641c:	6039      	str	r1, [r7, #0]
#if _USE_FASTSEEK
	DWORD cl, pcl, ncl, tcl, dsc, tlen, ulen, *tbl;
#endif


	res = validate(fp);					/* Check validity of the object */
 800641e:	6878      	ldr	r0, [r7, #4]
 8006420:	f7ff f9dc 	bl	80057dc <validate>
 8006424:	4603      	mov	r3, r0
 8006426:	75fb      	strb	r3, [r7, #23]
	if (res != FR_OK) LEAVE_FF(fp->fs, res);
 8006428:	7dfb      	ldrb	r3, [r7, #23]
 800642a:	2b00      	cmp	r3, #0
 800642c:	d001      	beq.n	8006432 <f_lseek+0x1e>
 800642e:	7dfb      	ldrb	r3, [r7, #23]
 8006430:	e11f      	b.n	8006672 <f_lseek+0x25e>
	if (fp->err)						/* Check error */
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	79db      	ldrb	r3, [r3, #7]
 8006436:	2b00      	cmp	r3, #0
 8006438:	d002      	beq.n	8006440 <f_lseek+0x2c>
		LEAVE_FF(fp->fs, (FRESULT)fp->err);
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	79db      	ldrb	r3, [r3, #7]
 800643e:	e118      	b.n	8006672 <f_lseek+0x25e>
	} else
#endif

	/* Normal Seek */
	{
		if (ofs > fp->fsize					/* In read-only mode, clip offset with the file size */
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	68db      	ldr	r3, [r3, #12]
 8006444:	683a      	ldr	r2, [r7, #0]
 8006446:	429a      	cmp	r2, r3
 8006448:	d908      	bls.n	800645c <f_lseek+0x48>
#if !_FS_READONLY
			 && !(fp->flag & FA_WRITE)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	799b      	ldrb	r3, [r3, #6]
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	2b00      	cmp	r3, #0
 8006454:	d102      	bne.n	800645c <f_lseek+0x48>
#endif
			) ofs = fp->fsize;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	603b      	str	r3, [r7, #0]

		ifptr = fp->fptr;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	689b      	ldr	r3, [r3, #8]
 8006460:	613b      	str	r3, [r7, #16]
		fp->fptr = nsect = 0;
 8006462:	2300      	movs	r3, #0
 8006464:	61bb      	str	r3, [r7, #24]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	69ba      	ldr	r2, [r7, #24]
 800646a:	609a      	str	r2, [r3, #8]
		if (ofs) {
 800646c:	683b      	ldr	r3, [r7, #0]
 800646e:	2b00      	cmp	r3, #0
 8006470:	f000 80ad 	beq.w	80065ce <f_lseek+0x1ba>
			bcs = (DWORD)fp->fs->csize * SS(fp->fs);	/* Cluster size (byte) */
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	789b      	ldrb	r3, [r3, #2]
 800647a:	025b      	lsls	r3, r3, #9
 800647c:	60fb      	str	r3, [r7, #12]
			if (ifptr > 0 &&
 800647e:	693b      	ldr	r3, [r7, #16]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d01b      	beq.n	80064bc <f_lseek+0xa8>
				(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	1e5a      	subs	r2, r3, #1
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	fbb2 f2f3 	udiv	r2, r2, r3
 800648e:	693b      	ldr	r3, [r7, #16]
 8006490:	1e59      	subs	r1, r3, #1
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	fbb1 f3f3 	udiv	r3, r1, r3
			if (ifptr > 0 &&
 8006498:	429a      	cmp	r2, r3
 800649a:	d30f      	bcc.n	80064bc <f_lseek+0xa8>
				fp->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
 800649c:	693b      	ldr	r3, [r7, #16]
 800649e:	1e5a      	subs	r2, r3, #1
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	425b      	negs	r3, r3
 80064a4:	401a      	ands	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	609a      	str	r2, [r3, #8]
				ofs -= fp->fptr;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	689b      	ldr	r3, [r3, #8]
 80064ae:	683a      	ldr	r2, [r7, #0]
 80064b0:	1ad3      	subs	r3, r2, r3
 80064b2:	603b      	str	r3, [r7, #0]
				clst = fp->clust;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	695b      	ldr	r3, [r3, #20]
 80064b8:	61fb      	str	r3, [r7, #28]
 80064ba:	e023      	b.n	8006504 <f_lseek+0xf0>
			} else {									/* When seek to back cluster, */
				clst = fp->sclust;						/* start from the first cluster */
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	691b      	ldr	r3, [r3, #16]
 80064c0:	61fb      	str	r3, [r7, #28]
#if !_FS_READONLY
				if (clst == 0) {						/* If no cluster chain, create a new chain */
 80064c2:	69fb      	ldr	r3, [r7, #28]
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d11a      	bne.n	80064fe <f_lseek+0xea>
					clst = create_chain(fp->fs, 0);
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	2100      	movs	r1, #0
 80064ce:	4618      	mov	r0, r3
 80064d0:	f7fe f877 	bl	80045c2 <create_chain>
 80064d4:	61f8      	str	r0, [r7, #28]
					if (clst == 1) ABORT(fp->fs, FR_INT_ERR);
 80064d6:	69fb      	ldr	r3, [r7, #28]
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d104      	bne.n	80064e6 <f_lseek+0xd2>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2202      	movs	r2, #2
 80064e0:	71da      	strb	r2, [r3, #7]
 80064e2:	2302      	movs	r3, #2
 80064e4:	e0c5      	b.n	8006672 <f_lseek+0x25e>
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 80064e6:	69fb      	ldr	r3, [r7, #28]
 80064e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80064ec:	d104      	bne.n	80064f8 <f_lseek+0xe4>
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2201      	movs	r2, #1
 80064f2:	71da      	strb	r2, [r3, #7]
 80064f4:	2301      	movs	r3, #1
 80064f6:	e0bc      	b.n	8006672 <f_lseek+0x25e>
					fp->sclust = clst;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	69fa      	ldr	r2, [r7, #28]
 80064fc:	611a      	str	r2, [r3, #16]
				}
#endif
				fp->clust = clst;
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	69fa      	ldr	r2, [r7, #28]
 8006502:	615a      	str	r2, [r3, #20]
			}
			if (clst != 0) {
 8006504:	69fb      	ldr	r3, [r7, #28]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d061      	beq.n	80065ce <f_lseek+0x1ba>
				while (ofs > bcs) {						/* Cluster following loop */
 800650a:	e03d      	b.n	8006588 <f_lseek+0x174>
#if !_FS_READONLY
					if (fp->flag & FA_WRITE) {			/* Check if in write mode or not */
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	799b      	ldrb	r3, [r3, #6]
 8006510:	f003 0302 	and.w	r3, r3, #2
 8006514:	2b00      	cmp	r3, #0
 8006516:	d00c      	beq.n	8006532 <f_lseek+0x11e>
						clst = create_chain(fp->fs, clst);	/* Force stretch if in write mode */
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	69f9      	ldr	r1, [r7, #28]
 800651e:	4618      	mov	r0, r3
 8006520:	f7fe f84f 	bl	80045c2 <create_chain>
 8006524:	61f8      	str	r0, [r7, #28]
						if (clst == 0) {				/* When disk gets full, clip file size */
 8006526:	69fb      	ldr	r3, [r7, #28]
 8006528:	2b00      	cmp	r3, #0
 800652a:	d109      	bne.n	8006540 <f_lseek+0x12c>
							ofs = bcs; break;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	603b      	str	r3, [r7, #0]
 8006530:	e02e      	b.n	8006590 <f_lseek+0x17c>
						}
					} else
#endif
						clst = get_fat(fp->fs, clst);	/* Follow cluster chain if not in write mode */
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	69f9      	ldr	r1, [r7, #28]
 8006538:	4618      	mov	r0, r3
 800653a:	f7fd fe27 	bl	800418c <get_fat>
 800653e:	61f8      	str	r0, [r7, #28]
					if (clst == 0xFFFFFFFF) ABORT(fp->fs, FR_DISK_ERR);
 8006540:	69fb      	ldr	r3, [r7, #28]
 8006542:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006546:	d104      	bne.n	8006552 <f_lseek+0x13e>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2201      	movs	r2, #1
 800654c:	71da      	strb	r2, [r3, #7]
 800654e:	2301      	movs	r3, #1
 8006550:	e08f      	b.n	8006672 <f_lseek+0x25e>
					if (clst <= 1 || clst >= fp->fs->n_fatent) ABORT(fp->fs, FR_INT_ERR);
 8006552:	69fb      	ldr	r3, [r7, #28]
 8006554:	2b01      	cmp	r3, #1
 8006556:	d905      	bls.n	8006564 <f_lseek+0x150>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	699b      	ldr	r3, [r3, #24]
 800655e:	69fa      	ldr	r2, [r7, #28]
 8006560:	429a      	cmp	r2, r3
 8006562:	d304      	bcc.n	800656e <f_lseek+0x15a>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2202      	movs	r2, #2
 8006568:	71da      	strb	r2, [r3, #7]
 800656a:	2302      	movs	r3, #2
 800656c:	e081      	b.n	8006672 <f_lseek+0x25e>
					fp->clust = clst;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	69fa      	ldr	r2, [r7, #28]
 8006572:	615a      	str	r2, [r3, #20]
					fp->fptr += bcs;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	689a      	ldr	r2, [r3, #8]
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	441a      	add	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	609a      	str	r2, [r3, #8]
					ofs -= bcs;
 8006580:	683a      	ldr	r2, [r7, #0]
 8006582:	68fb      	ldr	r3, [r7, #12]
 8006584:	1ad3      	subs	r3, r2, r3
 8006586:	603b      	str	r3, [r7, #0]
				while (ofs > bcs) {						/* Cluster following loop */
 8006588:	683a      	ldr	r2, [r7, #0]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	429a      	cmp	r2, r3
 800658e:	d8bd      	bhi.n	800650c <f_lseek+0xf8>
				}
				fp->fptr += ofs;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	689a      	ldr	r2, [r3, #8]
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	441a      	add	r2, r3
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	609a      	str	r2, [r3, #8]
				if (ofs % SS(fp->fs)) {
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d013      	beq.n	80065ce <f_lseek+0x1ba>
					nsect = clust2sect(fp->fs, clst);	/* Current sector */
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	69f9      	ldr	r1, [r7, #28]
 80065ac:	4618      	mov	r0, r3
 80065ae:	f7fd fdce 	bl	800414e <clust2sect>
 80065b2:	61b8      	str	r0, [r7, #24]
					if (!nsect) ABORT(fp->fs, FR_INT_ERR);
 80065b4:	69bb      	ldr	r3, [r7, #24]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d104      	bne.n	80065c4 <f_lseek+0x1b0>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	2202      	movs	r2, #2
 80065be:	71da      	strb	r2, [r3, #7]
 80065c0:	2302      	movs	r3, #2
 80065c2:	e056      	b.n	8006672 <f_lseek+0x25e>
					nsect += ofs / SS(fp->fs);
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	0a5b      	lsrs	r3, r3, #9
 80065c8:	69ba      	ldr	r2, [r7, #24]
 80065ca:	4413      	add	r3, r2
 80065cc:	61bb      	str	r3, [r7, #24]
				}
			}
		}
		if (fp->fptr % SS(fp->fs) && nsect != fp->dsect) {	/* Fill sector cache if needed */
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	689b      	ldr	r3, [r3, #8]
 80065d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d039      	beq.n	800664e <f_lseek+0x23a>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	699b      	ldr	r3, [r3, #24]
 80065de:	69ba      	ldr	r2, [r7, #24]
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d034      	beq.n	800664e <f_lseek+0x23a>
#if !_FS_TINY
#if !_FS_READONLY
			if (fp->flag & FA__DIRTY) {			/* Write-back dirty sector cache */
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	799b      	ldrb	r3, [r3, #6]
 80065e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ec:	2b00      	cmp	r3, #0
 80065ee:	d019      	beq.n	8006624 <f_lseek+0x210>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	7858      	ldrb	r0, [r3, #1]
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	699a      	ldr	r2, [r3, #24]
 8006600:	2301      	movs	r3, #1
 8006602:	f7fc f973 	bl	80028ec <disk_write>
 8006606:	4603      	mov	r3, r0
 8006608:	2b00      	cmp	r3, #0
 800660a:	d004      	beq.n	8006616 <f_lseek+0x202>
					ABORT(fp->fs, FR_DISK_ERR);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	71da      	strb	r2, [r3, #7]
 8006612:	2301      	movs	r3, #1
 8006614:	e02d      	b.n	8006672 <f_lseek+0x25e>
				fp->flag &= ~FA__DIRTY;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	799b      	ldrb	r3, [r3, #6]
 800661a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800661e:	b2da      	uxtb	r2, r3
 8006620:	687b      	ldr	r3, [r7, #4]
 8006622:	719a      	strb	r2, [r3, #6]
			}
#endif
			if (disk_read(fp->fs->drv, fp->buf, nsect, 1) != RES_OK)	/* Fill sector cache */
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	7858      	ldrb	r0, [r3, #1]
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	f103 0124 	add.w	r1, r3, #36	; 0x24
 8006630:	2301      	movs	r3, #1
 8006632:	69ba      	ldr	r2, [r7, #24]
 8006634:	f7fc f92c 	bl	8002890 <disk_read>
 8006638:	4603      	mov	r3, r0
 800663a:	2b00      	cmp	r3, #0
 800663c:	d004      	beq.n	8006648 <f_lseek+0x234>
				ABORT(fp->fs, FR_DISK_ERR);
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2201      	movs	r2, #1
 8006642:	71da      	strb	r2, [r3, #7]
 8006644:	2301      	movs	r3, #1
 8006646:	e014      	b.n	8006672 <f_lseek+0x25e>
#endif
			fp->dsect = nsect;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	69ba      	ldr	r2, [r7, #24]
 800664c:	619a      	str	r2, [r3, #24]
		}
#if !_FS_READONLY
		if (fp->fptr > fp->fsize) {			/* Set file change flag if the file size is extended */
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	689a      	ldr	r2, [r3, #8]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	68db      	ldr	r3, [r3, #12]
 8006656:	429a      	cmp	r2, r3
 8006658:	d90a      	bls.n	8006670 <f_lseek+0x25c>
			fp->fsize = fp->fptr;
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	689a      	ldr	r2, [r3, #8]
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	60da      	str	r2, [r3, #12]
			fp->flag |= FA__WRITTEN;
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	799b      	ldrb	r3, [r3, #6]
 8006666:	f043 0320 	orr.w	r3, r3, #32
 800666a:	b2da      	uxtb	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	719a      	strb	r2, [r3, #6]
		}
#endif
	}

	LEAVE_FF(fp->fs, res);
 8006670:	7dfb      	ldrb	r3, [r7, #23]
}
 8006672:	4618      	mov	r0, r3
 8006674:	3720      	adds	r7, #32
 8006676:	46bd      	mov	sp, r7
 8006678:	bd80      	pop	{r7, pc}

0800667a <f_opendir>:

FRESULT f_opendir (
	DIR* dp,			/* Pointer to directory object to create */
	const TCHAR* path	/* Pointer to the directory path */
)
{
 800667a:	b580      	push	{r7, lr}
 800667c:	b088      	sub	sp, #32
 800667e:	af00      	add	r7, sp, #0
 8006680:	6078      	str	r0, [r7, #4]
 8006682:	6039      	str	r1, [r7, #0]
	FRESULT res;
	FATFS* fs;
	DEFINE_NAMEBUF;


	if (!dp) return FR_INVALID_OBJECT;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <f_opendir+0x14>
 800668a:	2309      	movs	r3, #9
 800668c:	e04e      	b.n	800672c <f_opendir+0xb2>

	/* Get logical drive number */
	res = find_volume(&fs, &path, 0);
 800668e:	4639      	mov	r1, r7
 8006690:	f107 0318 	add.w	r3, r7, #24
 8006694:	2200      	movs	r2, #0
 8006696:	4618      	mov	r0, r3
 8006698:	f7fe fdee 	bl	8005278 <find_volume>
 800669c:	4603      	mov	r3, r0
 800669e:	77fb      	strb	r3, [r7, #31]
	if (res == FR_OK) {
 80066a0:	7ffb      	ldrb	r3, [r7, #31]
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d13b      	bne.n	800671e <f_opendir+0xa4>
		dp->fs = fs;
 80066a6:	69ba      	ldr	r2, [r7, #24]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	601a      	str	r2, [r3, #0]
		INIT_BUF(*dp);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	f107 020c 	add.w	r2, r7, #12
 80066b2:	619a      	str	r2, [r3, #24]
		res = follow_path(dp, path);			/* Follow the path to the directory */
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	4619      	mov	r1, r3
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7fe fc6b 	bl	8004f94 <follow_path>
 80066be:	4603      	mov	r3, r0
 80066c0:	77fb      	strb	r3, [r7, #31]
		FREE_BUF();
		if (res == FR_OK) {						/* Follow completed */
 80066c2:	7ffb      	ldrb	r3, [r7, #31]
 80066c4:	2b00      	cmp	r3, #0
 80066c6:	d125      	bne.n	8006714 <f_opendir+0x9a>
			if (dp->dir) {						/* It is not the origin directory itself */
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	695b      	ldr	r3, [r3, #20]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d014      	beq.n	80066fa <f_opendir+0x80>
				if (dp->dir[DIR_Attr] & AM_DIR)	/* The object is a sub directory */
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	330b      	adds	r3, #11
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	f003 0310 	and.w	r3, r3, #16
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d00a      	beq.n	80066f6 <f_opendir+0x7c>
					dp->sclust = ld_clust(fs, dp->dir);
 80066e0:	69ba      	ldr	r2, [r7, #24]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	4619      	mov	r1, r3
 80066e8:	4610      	mov	r0, r2
 80066ea:	f7fe f995 	bl	8004a18 <ld_clust>
 80066ee:	4602      	mov	r2, r0
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	609a      	str	r2, [r3, #8]
 80066f4:	e001      	b.n	80066fa <f_opendir+0x80>
				else							/* The object is a file */
					res = FR_NO_PATH;
 80066f6:	2305      	movs	r3, #5
 80066f8:	77fb      	strb	r3, [r7, #31]
			}
			if (res == FR_OK) {
 80066fa:	7ffb      	ldrb	r3, [r7, #31]
 80066fc:	2b00      	cmp	r3, #0
 80066fe:	d109      	bne.n	8006714 <f_opendir+0x9a>
				dp->id = fs->id;
 8006700:	69bb      	ldr	r3, [r7, #24]
 8006702:	88da      	ldrh	r2, [r3, #6]
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	809a      	strh	r2, [r3, #4]
				res = dir_sdi(dp, 0);			/* Rewind directory */
 8006708:	2100      	movs	r1, #0
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f7fd ffec 	bl	80046e8 <dir_sdi>
 8006710:	4603      	mov	r3, r0
 8006712:	77fb      	strb	r3, [r7, #31]
					}
				}
#endif
			}
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
 8006714:	7ffb      	ldrb	r3, [r7, #31]
 8006716:	2b04      	cmp	r3, #4
 8006718:	d101      	bne.n	800671e <f_opendir+0xa4>
 800671a:	2305      	movs	r3, #5
 800671c:	77fb      	strb	r3, [r7, #31]
	}
	if (res != FR_OK) dp->fs = 0;		/* Invalidate the directory object if function faild */
 800671e:	7ffb      	ldrb	r3, [r7, #31]
 8006720:	2b00      	cmp	r3, #0
 8006722:	d002      	beq.n	800672a <f_opendir+0xb0>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	2200      	movs	r2, #0
 8006728:	601a      	str	r2, [r3, #0]

	LEAVE_FF(fs, res);
 800672a:	7ffb      	ldrb	r3, [r7, #31]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3720      	adds	r7, #32
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <f_closedir>:
/*-----------------------------------------------------------------------*/

FRESULT f_closedir (
	DIR *dp		/* Pointer to the directory object to be closed */
)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b084      	sub	sp, #16
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
	FRESULT res;


	res = validate(dp);
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f7ff f84d 	bl	80057dc <validate>
 8006742:	4603      	mov	r3, r0
 8006744:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 8006746:	7bfb      	ldrb	r3, [r7, #15]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d102      	bne.n	8006752 <f_closedir+0x1e>
#if _FS_LOCK
		if (dp->lockid)				/* Decrement sub-directory open counter */
			res = dec_lock(dp->lockid);
		if (res == FR_OK)
#endif
			dp->fs = 0;				/* Invalidate directory object */
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2200      	movs	r2, #0
 8006750:	601a      	str	r2, [r3, #0]
#if _FS_REENTRANT
		unlock_fs(fs, FR_OK);		/* Unlock volume */
#endif
	}
	return res;
 8006752:	7bfb      	ldrb	r3, [r7, #15]
}
 8006754:	4618      	mov	r0, r3
 8006756:	3710      	adds	r7, #16
 8006758:	46bd      	mov	sp, r7
 800675a:	bd80      	pop	{r7, pc}

0800675c <f_readdir>:

FRESULT f_readdir (
	DIR* dp,			/* Pointer to the open directory object */
	FILINFO* fno		/* Pointer to file information to return */
)
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b086      	sub	sp, #24
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
	FRESULT res;
	DEFINE_NAMEBUF;


	res = validate(dp);						/* Check validity of the object */
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f7ff f838 	bl	80057dc <validate>
 800676c:	4603      	mov	r3, r0
 800676e:	75fb      	strb	r3, [r7, #23]
	if (res == FR_OK) {
 8006770:	7dfb      	ldrb	r3, [r7, #23]
 8006772:	2b00      	cmp	r3, #0
 8006774:	d130      	bne.n	80067d8 <f_readdir+0x7c>
		if (!fno) {
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	2b00      	cmp	r3, #0
 800677a:	d106      	bne.n	800678a <f_readdir+0x2e>
			res = dir_sdi(dp, 0);			/* Rewind the directory object */
 800677c:	2100      	movs	r1, #0
 800677e:	6878      	ldr	r0, [r7, #4]
 8006780:	f7fd ffb2 	bl	80046e8 <dir_sdi>
 8006784:	4603      	mov	r3, r0
 8006786:	75fb      	strb	r3, [r7, #23]
 8006788:	e026      	b.n	80067d8 <f_readdir+0x7c>
		} else {
			INIT_BUF(*dp);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f107 0208 	add.w	r2, r7, #8
 8006790:	619a      	str	r2, [r3, #24]
			res = dir_read(dp, 0);			/* Read an item */
 8006792:	2100      	movs	r1, #0
 8006794:	6878      	ldr	r0, [r7, #4]
 8006796:	f7fe f9de 	bl	8004b56 <dir_read>
 800679a:	4603      	mov	r3, r0
 800679c:	75fb      	strb	r3, [r7, #23]
			if (res == FR_NO_FILE) {		/* Reached end of directory */
 800679e:	7dfb      	ldrb	r3, [r7, #23]
 80067a0:	2b04      	cmp	r3, #4
 80067a2:	d104      	bne.n	80067ae <f_readdir+0x52>
				dp->sect = 0;
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	2200      	movs	r2, #0
 80067a8:	611a      	str	r2, [r3, #16]
				res = FR_OK;
 80067aa:	2300      	movs	r3, #0
 80067ac:	75fb      	strb	r3, [r7, #23]
			}
			if (res == FR_OK) {				/* A valid entry is found */
 80067ae:	7dfb      	ldrb	r3, [r7, #23]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d111      	bne.n	80067d8 <f_readdir+0x7c>
				get_fileinfo(dp, fno);		/* Get the object information */
 80067b4:	6839      	ldr	r1, [r7, #0]
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f7fe fa86 	bl	8004cc8 <get_fileinfo>
				res = dir_next(dp, 0);		/* Increment index for next */
 80067bc:	2100      	movs	r1, #0
 80067be:	6878      	ldr	r0, [r7, #4]
 80067c0:	f7fe f811 	bl	80047e6 <dir_next>
 80067c4:	4603      	mov	r3, r0
 80067c6:	75fb      	strb	r3, [r7, #23]
				if (res == FR_NO_FILE) {
 80067c8:	7dfb      	ldrb	r3, [r7, #23]
 80067ca:	2b04      	cmp	r3, #4
 80067cc:	d104      	bne.n	80067d8 <f_readdir+0x7c>
					dp->sect = 0;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	611a      	str	r2, [r3, #16]
					res = FR_OK;
 80067d4:	2300      	movs	r3, #0
 80067d6:	75fb      	strb	r3, [r7, #23]
			}
			FREE_BUF();
		}
	}

	LEAVE_FF(dp->fs, res);
 80067d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3718      	adds	r7, #24
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}

080067e2 <f_truncate>:
/*-----------------------------------------------------------------------*/

FRESULT f_truncate (
	FIL* fp		/* Pointer to the file object */
)
{
 80067e2:	b580      	push	{r7, lr}
 80067e4:	b084      	sub	sp, #16
 80067e6:	af00      	add	r7, sp, #0
 80067e8:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DWORD ncl;


	res = validate(fp);						/* Check validity of the object */
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f7fe fff6 	bl	80057dc <validate>
 80067f0:	4603      	mov	r3, r0
 80067f2:	73fb      	strb	r3, [r7, #15]
	if (res == FR_OK) {
 80067f4:	7bfb      	ldrb	r3, [r7, #15]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d10f      	bne.n	800681a <f_truncate+0x38>
		if (fp->err) {						/* Check error */
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	79db      	ldrb	r3, [r3, #7]
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d003      	beq.n	800680a <f_truncate+0x28>
			res = (FRESULT)fp->err;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	79db      	ldrb	r3, [r3, #7]
 8006806:	73fb      	strb	r3, [r7, #15]
 8006808:	e007      	b.n	800681a <f_truncate+0x38>
		} else {
			if (!(fp->flag & FA_WRITE))		/* Check access mode */
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	799b      	ldrb	r3, [r3, #6]
 800680e:	f003 0302 	and.w	r3, r3, #2
 8006812:	2b00      	cmp	r3, #0
 8006814:	d101      	bne.n	800681a <f_truncate+0x38>
				res = FR_DENIED;
 8006816:	2307      	movs	r3, #7
 8006818:	73fb      	strb	r3, [r7, #15]
		}
	}
	if (res == FR_OK) {
 800681a:	7bfb      	ldrb	r3, [r7, #15]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d17e      	bne.n	800691e <f_truncate+0x13c>
		if (fp->fsize > fp->fptr) {
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	68da      	ldr	r2, [r3, #12]
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	689b      	ldr	r3, [r3, #8]
 8006828:	429a      	cmp	r2, r3
 800682a:	d972      	bls.n	8006912 <f_truncate+0x130>
			fp->fsize = fp->fptr;	/* Set file size to current R/W point */
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	689a      	ldr	r2, [r3, #8]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	60da      	str	r2, [r3, #12]
			fp->flag |= FA__WRITTEN;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	799b      	ldrb	r3, [r3, #6]
 8006838:	f043 0320 	orr.w	r3, r3, #32
 800683c:	b2da      	uxtb	r2, r3
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	719a      	strb	r2, [r3, #6]
			if (fp->fptr == 0) {	/* When set file size to zero, remove entire cluster chain */
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	689b      	ldr	r3, [r3, #8]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d10d      	bne.n	8006866 <f_truncate+0x84>
				res = remove_chain(fp->fs, fp->sclust);
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	681a      	ldr	r2, [r3, #0]
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	691b      	ldr	r3, [r3, #16]
 8006852:	4619      	mov	r1, r3
 8006854:	4610      	mov	r0, r2
 8006856:	f7fd fe61 	bl	800451c <remove_chain>
 800685a:	4603      	mov	r3, r0
 800685c:	73fb      	strb	r3, [r7, #15]
				fp->sclust = 0;
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	2200      	movs	r2, #0
 8006862:	611a      	str	r2, [r3, #16]
 8006864:	e034      	b.n	80068d0 <f_truncate+0xee>
			} else {				/* When truncate a part of the file, remove remaining clusters */
				ncl = get_fat(fp->fs, fp->clust);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	695b      	ldr	r3, [r3, #20]
 800686e:	4619      	mov	r1, r3
 8006870:	4610      	mov	r0, r2
 8006872:	f7fd fc8b 	bl	800418c <get_fat>
 8006876:	60b8      	str	r0, [r7, #8]
				res = FR_OK;
 8006878:	2300      	movs	r3, #0
 800687a:	73fb      	strb	r3, [r7, #15]
				if (ncl == 0xFFFFFFFF) res = FR_DISK_ERR;
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006882:	d101      	bne.n	8006888 <f_truncate+0xa6>
 8006884:	2301      	movs	r3, #1
 8006886:	73fb      	strb	r3, [r7, #15]
				if (ncl == 1) res = FR_INT_ERR;
 8006888:	68bb      	ldr	r3, [r7, #8]
 800688a:	2b01      	cmp	r3, #1
 800688c:	d101      	bne.n	8006892 <f_truncate+0xb0>
 800688e:	2302      	movs	r3, #2
 8006890:	73fb      	strb	r3, [r7, #15]
				if (res == FR_OK && ncl < fp->fs->n_fatent) {
 8006892:	7bfb      	ldrb	r3, [r7, #15]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d11b      	bne.n	80068d0 <f_truncate+0xee>
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	699b      	ldr	r3, [r3, #24]
 800689e:	68ba      	ldr	r2, [r7, #8]
 80068a0:	429a      	cmp	r2, r3
 80068a2:	d215      	bcs.n	80068d0 <f_truncate+0xee>
					res = put_fat(fp->fs, fp->clust, 0x0FFFFFFF);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	6818      	ldr	r0, [r3, #0]
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	695b      	ldr	r3, [r3, #20]
 80068ac:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
 80068b0:	4619      	mov	r1, r3
 80068b2:	f7fd fd27 	bl	8004304 <put_fat>
 80068b6:	4603      	mov	r3, r0
 80068b8:	73fb      	strb	r3, [r7, #15]
					if (res == FR_OK) res = remove_chain(fp->fs, ncl);
 80068ba:	7bfb      	ldrb	r3, [r7, #15]
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d107      	bne.n	80068d0 <f_truncate+0xee>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	68b9      	ldr	r1, [r7, #8]
 80068c6:	4618      	mov	r0, r3
 80068c8:	f7fd fe28 	bl	800451c <remove_chain>
 80068cc:	4603      	mov	r3, r0
 80068ce:	73fb      	strb	r3, [r7, #15]
				}
			}
#if !_FS_TINY
			if (res == FR_OK && (fp->flag & FA__DIRTY)) {
 80068d0:	7bfb      	ldrb	r3, [r7, #15]
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d11d      	bne.n	8006912 <f_truncate+0x130>
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	799b      	ldrb	r3, [r3, #6]
 80068da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d017      	beq.n	8006912 <f_truncate+0x130>
				if (disk_write(fp->fs->drv, fp->buf, fp->dsect, 1) != RES_OK)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	7858      	ldrb	r0, [r3, #1]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	f103 0124 	add.w	r1, r3, #36	; 0x24
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	699a      	ldr	r2, [r3, #24]
 80068f2:	2301      	movs	r3, #1
 80068f4:	f7fb fffa 	bl	80028ec <disk_write>
 80068f8:	4603      	mov	r3, r0
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d002      	beq.n	8006904 <f_truncate+0x122>
					res = FR_DISK_ERR;
 80068fe:	2301      	movs	r3, #1
 8006900:	73fb      	strb	r3, [r7, #15]
 8006902:	e006      	b.n	8006912 <f_truncate+0x130>
				else
					fp->flag &= ~FA__DIRTY;
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	799b      	ldrb	r3, [r3, #6]
 8006908:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800690c:	b2da      	uxtb	r2, r3
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	719a      	strb	r2, [r3, #6]
			}
#endif
		}
		if (res != FR_OK) fp->err = (FRESULT)res;
 8006912:	7bfb      	ldrb	r3, [r7, #15]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d002      	beq.n	800691e <f_truncate+0x13c>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	7bfa      	ldrb	r2, [r7, #15]
 800691c:	71da      	strb	r2, [r3, #7]
	}

	LEAVE_FF(fp->fs, res);
 800691e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006920:	4618      	mov	r0, r3
 8006922:	3710      	adds	r7, #16
 8006924:	46bd      	mov	sp, r7
 8006926:	bd80      	pop	{r7, pc}

08006928 <f_unlink>:
/*-----------------------------------------------------------------------*/

FRESULT f_unlink (
	const TCHAR* path		/* Pointer to the file or directory path */
)
{
 8006928:	b580      	push	{r7, lr}
 800692a:	b098      	sub	sp, #96	; 0x60
 800692c:	af00      	add	r7, sp, #0
 800692e:	6078      	str	r0, [r7, #4]
	FRESULT res;
	DIR dj, sdj;
	BYTE *dir;
	DWORD dclst = 0;
 8006930:	2300      	movs	r3, #0
 8006932:	65bb      	str	r3, [r7, #88]	; 0x58
	DEFINE_NAMEBUF;


	/* Get logical drive number */
	res = find_volume(&dj.fs, &path, 1);
 8006934:	1d39      	adds	r1, r7, #4
 8006936:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800693a:	2201      	movs	r2, #1
 800693c:	4618      	mov	r0, r3
 800693e:	f7fe fc9b 	bl	8005278 <find_volume>
 8006942:	4603      	mov	r3, r0
 8006944:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	if (res == FR_OK) {
 8006948:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800694c:	2b00      	cmp	r3, #0
 800694e:	f040 80a4 	bne.w	8006a9a <f_unlink+0x172>
		INIT_BUF(dj);
 8006952:	f107 0308 	add.w	r3, r7, #8
 8006956:	64fb      	str	r3, [r7, #76]	; 0x4c
		res = follow_path(&dj, path);		/* Follow the file path */
 8006958:	687a      	ldr	r2, [r7, #4]
 800695a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 800695e:	4611      	mov	r1, r2
 8006960:	4618      	mov	r0, r3
 8006962:	f7fe fb17 	bl	8004f94 <follow_path>
 8006966:	4603      	mov	r3, r0
 8006968:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
		if (_FS_RPATH && res == FR_OK && (dj.fn[NSFLAG] & NS_DOT))
 800696c:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006970:	2b00      	cmp	r3, #0
 8006972:	d109      	bne.n	8006988 <f_unlink+0x60>
 8006974:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006976:	330b      	adds	r3, #11
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	f003 0320 	and.w	r3, r3, #32
 800697e:	2b00      	cmp	r3, #0
 8006980:	d002      	beq.n	8006988 <f_unlink+0x60>
			res = FR_INVALID_NAME;			/* Cannot remove dot entry */
 8006982:	2306      	movs	r3, #6
 8006984:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
#if _FS_LOCK
		if (res == FR_OK) res = chk_lock(&dj, 2);	/* Cannot remove open object */
#endif
		if (res == FR_OK) {					/* The object is accessible */
 8006988:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 800698c:	2b00      	cmp	r3, #0
 800698e:	f040 8084 	bne.w	8006a9a <f_unlink+0x172>
			dir = dj.dir;
 8006992:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006994:	657b      	str	r3, [r7, #84]	; 0x54
			if (!dir) {
 8006996:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006998:	2b00      	cmp	r3, #0
 800699a:	d103      	bne.n	80069a4 <f_unlink+0x7c>
				res = FR_INVALID_NAME;		/* Cannot remove the origin directory */
 800699c:	2306      	movs	r3, #6
 800699e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80069a2:	e009      	b.n	80069b8 <f_unlink+0x90>
			} else {
				if (dir[DIR_Attr] & AM_RDO)
 80069a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069a6:	330b      	adds	r3, #11
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	f003 0301 	and.w	r3, r3, #1
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d002      	beq.n	80069b8 <f_unlink+0x90>
					res = FR_DENIED;		/* Cannot remove R/O object */
 80069b2:	2307      	movs	r3, #7
 80069b4:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
			if (res == FR_OK) {
 80069b8:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d146      	bne.n	8006a4e <f_unlink+0x126>
				dclst = ld_clust(dj.fs, dir);
 80069c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069c2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80069c4:	4618      	mov	r0, r3
 80069c6:	f7fe f827 	bl	8004a18 <ld_clust>
 80069ca:	65b8      	str	r0, [r7, #88]	; 0x58
				if (dclst && (dir[DIR_Attr] & AM_DIR)) {	/* Is it a sub-directory ? */
 80069cc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d03d      	beq.n	8006a4e <f_unlink+0x126>
 80069d2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80069d4:	330b      	adds	r3, #11
 80069d6:	781b      	ldrb	r3, [r3, #0]
 80069d8:	f003 0310 	and.w	r3, r3, #16
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d036      	beq.n	8006a4e <f_unlink+0x126>
#if _FS_RPATH
					if (dclst == dj.fs->cdir) {		 		/* Is it the current directory? */
 80069e0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80069e2:	695b      	ldr	r3, [r3, #20]
 80069e4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d103      	bne.n	80069f2 <f_unlink+0xca>
						res = FR_DENIED;
 80069ea:	2307      	movs	r3, #7
 80069ec:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80069f0:	e02d      	b.n	8006a4e <f_unlink+0x126>
					} else
#endif
					{
						mem_cpy(&sdj, &dj, sizeof (DIR));	/* Open the sub-directory */
 80069f2:	f107 0134 	add.w	r1, r7, #52	; 0x34
 80069f6:	f107 0314 	add.w	r3, r7, #20
 80069fa:	2220      	movs	r2, #32
 80069fc:	4618      	mov	r0, r3
 80069fe:	f7fd fa17 	bl	8003e30 <mem_cpy>
						sdj.sclust = dclst;
 8006a02:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a04:	61fb      	str	r3, [r7, #28]
						res = dir_sdi(&sdj, 2);
 8006a06:	f107 0314 	add.w	r3, r7, #20
 8006a0a:	2102      	movs	r1, #2
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	f7fd fe6b 	bl	80046e8 <dir_sdi>
 8006a12:	4603      	mov	r3, r0
 8006a14:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						if (res == FR_OK) {
 8006a18:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d116      	bne.n	8006a4e <f_unlink+0x126>
							res = dir_read(&sdj, 0);			/* Read an item (excluding dot entries) */
 8006a20:	f107 0314 	add.w	r3, r7, #20
 8006a24:	2100      	movs	r1, #0
 8006a26:	4618      	mov	r0, r3
 8006a28:	f7fe f895 	bl	8004b56 <dir_read>
 8006a2c:	4603      	mov	r3, r0
 8006a2e:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							if (res == FR_OK) res = FR_DENIED;	/* Not empty? (cannot remove) */
 8006a32:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d102      	bne.n	8006a40 <f_unlink+0x118>
 8006a3a:	2307      	movs	r3, #7
 8006a3c:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
							if (res == FR_NO_FILE) res = FR_OK;	/* Empty? (can remove) */
 8006a40:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a44:	2b04      	cmp	r3, #4
 8006a46:	d102      	bne.n	8006a4e <f_unlink+0x126>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
						}
					}
				}
			}
			if (res == FR_OK) {
 8006a4e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d121      	bne.n	8006a9a <f_unlink+0x172>
				res = dir_remove(&dj);		/* Remove the directory entry */
 8006a56:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f7fe f904 	bl	8004c68 <dir_remove>
 8006a60:	4603      	mov	r3, r0
 8006a62:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				if (res == FR_OK && dclst)	/* Remove the cluster chain if exist */
 8006a66:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d10a      	bne.n	8006a84 <f_unlink+0x15c>
 8006a6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	d007      	beq.n	8006a84 <f_unlink+0x15c>
					res = remove_chain(dj.fs, dclst);
 8006a74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a76:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006a78:	4618      	mov	r0, r3
 8006a7a:	f7fd fd4f 	bl	800451c <remove_chain>
 8006a7e:	4603      	mov	r3, r0
 8006a80:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
				if (res == FR_OK) res = sync_fs(dj.fs);
 8006a84:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d106      	bne.n	8006a9a <f_unlink+0x172>
 8006a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f7fd fabb 	bl	800400a <sync_fs>
 8006a94:	4603      	mov	r3, r0
 8006a96:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
			}
		}
		FREE_BUF();
	}

	LEAVE_FF(dj.fs, res);
 8006a9a:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
}
 8006a9e:	4618      	mov	r0, r3
 8006aa0:	3760      	adds	r7, #96	; 0x60
 8006aa2:	46bd      	mov	sp, r7
 8006aa4:	bd80      	pop	{r7, pc}
	...

08006aa8 <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram2;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b088      	sub	sp, #32
 8006aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_Init 0 */

  /* USER CODE END FMC_Init 0 */

  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8006aae:	1d3b      	adds	r3, r7, #4
 8006ab0:	2200      	movs	r2, #0
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	605a      	str	r2, [r3, #4]
 8006ab6:	609a      	str	r2, [r3, #8]
 8006ab8:	60da      	str	r2, [r3, #12]
 8006aba:	611a      	str	r2, [r3, #16]
 8006abc:	615a      	str	r2, [r3, #20]
 8006abe:	619a      	str	r2, [r3, #24]

  /* USER CODE END FMC_Init 1 */

  /** Perform the SDRAM2 memory initialization sequence
  */
  hsdram2.Instance = FMC_SDRAM_DEVICE;
 8006ac0:	4b1e      	ldr	r3, [pc, #120]	; (8006b3c <MX_FMC_Init+0x94>)
 8006ac2:	4a1f      	ldr	r2, [pc, #124]	; (8006b40 <MX_FMC_Init+0x98>)
 8006ac4:	601a      	str	r2, [r3, #0]
  /* hsdram2.Init */
  hsdram2.Init.SDBank = FMC_SDRAM_BANK2;
 8006ac6:	4b1d      	ldr	r3, [pc, #116]	; (8006b3c <MX_FMC_Init+0x94>)
 8006ac8:	2201      	movs	r2, #1
 8006aca:	605a      	str	r2, [r3, #4]
  hsdram2.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8006acc:	4b1b      	ldr	r3, [pc, #108]	; (8006b3c <MX_FMC_Init+0x94>)
 8006ace:	2200      	movs	r2, #0
 8006ad0:	609a      	str	r2, [r3, #8]
  hsdram2.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8006ad2:	4b1a      	ldr	r3, [pc, #104]	; (8006b3c <MX_FMC_Init+0x94>)
 8006ad4:	2204      	movs	r2, #4
 8006ad6:	60da      	str	r2, [r3, #12]
  hsdram2.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_8;
 8006ad8:	4b18      	ldr	r3, [pc, #96]	; (8006b3c <MX_FMC_Init+0x94>)
 8006ada:	2200      	movs	r2, #0
 8006adc:	611a      	str	r2, [r3, #16]
  hsdram2.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_2;
 8006ade:	4b17      	ldr	r3, [pc, #92]	; (8006b3c <MX_FMC_Init+0x94>)
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	615a      	str	r2, [r3, #20]
  hsdram2.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_1;
 8006ae4:	4b15      	ldr	r3, [pc, #84]	; (8006b3c <MX_FMC_Init+0x94>)
 8006ae6:	2280      	movs	r2, #128	; 0x80
 8006ae8:	619a      	str	r2, [r3, #24]
  hsdram2.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8006aea:	4b14      	ldr	r3, [pc, #80]	; (8006b3c <MX_FMC_Init+0x94>)
 8006aec:	2200      	movs	r2, #0
 8006aee:	61da      	str	r2, [r3, #28]
  hsdram2.Init.SDClockPeriod = FMC_SDRAM_CLOCK_DISABLE;
 8006af0:	4b12      	ldr	r3, [pc, #72]	; (8006b3c <MX_FMC_Init+0x94>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	621a      	str	r2, [r3, #32]
  hsdram2.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 8006af6:	4b11      	ldr	r3, [pc, #68]	; (8006b3c <MX_FMC_Init+0x94>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	625a      	str	r2, [r3, #36]	; 0x24
  hsdram2.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8006afc:	4b0f      	ldr	r3, [pc, #60]	; (8006b3c <MX_FMC_Init+0x94>)
 8006afe:	2200      	movs	r2, #0
 8006b00:	629a      	str	r2, [r3, #40]	; 0x28
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 16;
 8006b02:	2310      	movs	r3, #16
 8006b04:	607b      	str	r3, [r7, #4]
  SdramTiming.ExitSelfRefreshDelay = 16;
 8006b06:	2310      	movs	r3, #16
 8006b08:	60bb      	str	r3, [r7, #8]
  SdramTiming.SelfRefreshTime = 16;
 8006b0a:	2310      	movs	r3, #16
 8006b0c:	60fb      	str	r3, [r7, #12]
  SdramTiming.RowCycleDelay = 16;
 8006b0e:	2310      	movs	r3, #16
 8006b10:	613b      	str	r3, [r7, #16]
  SdramTiming.WriteRecoveryTime = 16;
 8006b12:	2310      	movs	r3, #16
 8006b14:	617b      	str	r3, [r7, #20]
  SdramTiming.RPDelay = 16;
 8006b16:	2310      	movs	r3, #16
 8006b18:	61bb      	str	r3, [r7, #24]
  SdramTiming.RCDDelay = 16;
 8006b1a:	2310      	movs	r3, #16
 8006b1c:	61fb      	str	r3, [r7, #28]

  if (HAL_SDRAM_Init(&hsdram2, &SdramTiming) != HAL_OK)
 8006b1e:	1d3b      	adds	r3, r7, #4
 8006b20:	4619      	mov	r1, r3
 8006b22:	4806      	ldr	r0, [pc, #24]	; (8006b3c <MX_FMC_Init+0x94>)
 8006b24:	f00a fa04 	bl	8010f30 <HAL_SDRAM_Init>
 8006b28:	4603      	mov	r3, r0
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d001      	beq.n	8006b32 <MX_FMC_Init+0x8a>
  {
    Error_Handler( );
 8006b2e:	f001 f829 	bl	8007b84 <Error_Handler>
  }

  /* USER CODE BEGIN FMC_Init 2 */

  /* USER CODE END FMC_Init 2 */
}
 8006b32:	bf00      	nop
 8006b34:	3720      	adds	r7, #32
 8006b36:	46bd      	mov	sp, r7
 8006b38:	bd80      	pop	{r7, pc}
 8006b3a:	bf00      	nop
 8006b3c:	200011ec 	.word	0x200011ec
 8006b40:	a0000140 	.word	0xa0000140

08006b44 <HAL_FMC_MspInit>:

static uint32_t FMC_Initialized = 0;

static void HAL_FMC_MspInit(void){
 8006b44:	b580      	push	{r7, lr}
 8006b46:	b086      	sub	sp, #24
 8006b48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FMC_MspInit 0 */

  /* USER CODE END FMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006b4a:	1d3b      	adds	r3, r7, #4
 8006b4c:	2200      	movs	r2, #0
 8006b4e:	601a      	str	r2, [r3, #0]
 8006b50:	605a      	str	r2, [r3, #4]
 8006b52:	609a      	str	r2, [r3, #8]
 8006b54:	60da      	str	r2, [r3, #12]
 8006b56:	611a      	str	r2, [r3, #16]
  if (FMC_Initialized) {
 8006b58:	4b3b      	ldr	r3, [pc, #236]	; (8006c48 <HAL_FMC_MspInit+0x104>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d16f      	bne.n	8006c40 <HAL_FMC_MspInit+0xfc>
    return;
  }
  FMC_Initialized = 1;
 8006b60:	4b39      	ldr	r3, [pc, #228]	; (8006c48 <HAL_FMC_MspInit+0x104>)
 8006b62:	2201      	movs	r2, #1
 8006b64:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FMC_CLK_ENABLE();
 8006b66:	2300      	movs	r3, #0
 8006b68:	603b      	str	r3, [r7, #0]
 8006b6a:	4b38      	ldr	r3, [pc, #224]	; (8006c4c <HAL_FMC_MspInit+0x108>)
 8006b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b6e:	4a37      	ldr	r2, [pc, #220]	; (8006c4c <HAL_FMC_MspInit+0x108>)
 8006b70:	f043 0301 	orr.w	r3, r3, #1
 8006b74:	6393      	str	r3, [r2, #56]	; 0x38
 8006b76:	4b35      	ldr	r3, [pc, #212]	; (8006c4c <HAL_FMC_MspInit+0x108>)
 8006b78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b7a:	f003 0301 	and.w	r3, r3, #1
 8006b7e:	603b      	str	r3, [r7, #0]
 8006b80:	683b      	ldr	r3, [r7, #0]
  PB5   ------> FMC_SDCKE1
  PB6   ------> FMC_SDNE1
  PE1   ------> FMC_NBL1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 8006b82:	f64f 033f 	movw	r3, #63551	; 0xf83f
 8006b86:	607b      	str	r3, [r7, #4]
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006b88:	2302      	movs	r3, #2
 8006b8a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006b8c:	2300      	movs	r3, #0
 8006b8e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006b90:	2303      	movs	r3, #3
 8006b92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006b94:	230c      	movs	r3, #12
 8006b96:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006b98:	1d3b      	adds	r3, r7, #4
 8006b9a:	4619      	mov	r1, r3
 8006b9c:	482c      	ldr	r0, [pc, #176]	; (8006c50 <HAL_FMC_MspInit+0x10c>)
 8006b9e:	f008 f8a1 	bl	800ece4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006ba6:	2302      	movs	r3, #2
 8006ba8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006baa:	2300      	movs	r3, #0
 8006bac:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bae:	2303      	movs	r3, #3
 8006bb0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006bb2:	230c      	movs	r3, #12
 8006bb4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8006bb6:	1d3b      	adds	r3, r7, #4
 8006bb8:	4619      	mov	r1, r3
 8006bba:	4826      	ldr	r0, [pc, #152]	; (8006c54 <HAL_FMC_MspInit+0x110>)
 8006bbc:	f008 f892 	bl	800ece4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|SDCLK_Pin
 8006bc0:	f248 1313 	movw	r3, #33043	; 0x8113
 8006bc4:	607b      	str	r3, [r7, #4]
                          |SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bca:	2300      	movs	r3, #0
 8006bcc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bce:	2303      	movs	r3, #3
 8006bd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006bd2:	230c      	movs	r3, #12
 8006bd4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006bd6:	1d3b      	adds	r3, r7, #4
 8006bd8:	4619      	mov	r1, r3
 8006bda:	481f      	ldr	r0, [pc, #124]	; (8006c58 <HAL_FMC_MspInit+0x114>)
 8006bdc:	f008 f882 	bl	800ece4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8006be0:	f64f 7382 	movw	r3, #65410	; 0xff82
 8006be4:	607b      	str	r3, [r7, #4]
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006be6:	2302      	movs	r3, #2
 8006be8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006bea:	2300      	movs	r3, #0
 8006bec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006bee:	2303      	movs	r3, #3
 8006bf0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006bf2:	230c      	movs	r3, #12
 8006bf4:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006bf6:	1d3b      	adds	r3, r7, #4
 8006bf8:	4619      	mov	r1, r3
 8006bfa:	4818      	ldr	r0, [pc, #96]	; (8006c5c <HAL_FMC_MspInit+0x118>)
 8006bfc:	f008 f872 	bl	800ece4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = D15_Pin|D0_Pin|D1_Pin|GPIO_PIN_0
 8006c00:	f24c 4303 	movw	r3, #50179	; 0xc403
 8006c04:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_1;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c06:	2302      	movs	r3, #2
 8006c08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c0e:	2303      	movs	r3, #3
 8006c10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006c12:	230c      	movs	r3, #12
 8006c14:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006c16:	1d3b      	adds	r3, r7, #4
 8006c18:	4619      	mov	r1, r3
 8006c1a:	4811      	ldr	r0, [pc, #68]	; (8006c60 <HAL_FMC_MspInit+0x11c>)
 8006c1c:	f008 f862 	bl	800ece4 <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8006c20:	2360      	movs	r3, #96	; 0x60
 8006c22:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006c24:	2302      	movs	r3, #2
 8006c26:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006c28:	2300      	movs	r3, #0
 8006c2a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006c2c:	2303      	movs	r3, #3
 8006c2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8006c30:	230c      	movs	r3, #12
 8006c32:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006c34:	1d3b      	adds	r3, r7, #4
 8006c36:	4619      	mov	r1, r3
 8006c38:	480a      	ldr	r0, [pc, #40]	; (8006c64 <HAL_FMC_MspInit+0x120>)
 8006c3a:	f008 f853 	bl	800ece4 <HAL_GPIO_Init>
 8006c3e:	e000      	b.n	8006c42 <HAL_FMC_MspInit+0xfe>
    return;
 8006c40:	bf00      	nop

  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}
 8006c42:	3718      	adds	r7, #24
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}
 8006c48:	20001220 	.word	0x20001220
 8006c4c:	40023800 	.word	0x40023800
 8006c50:	40021400 	.word	0x40021400
 8006c54:	40020800 	.word	0x40020800
 8006c58:	40021800 	.word	0x40021800
 8006c5c:	40021000 	.word	0x40021000
 8006c60:	40020c00 	.word	0x40020c00
 8006c64:	40020400 	.word	0x40020400

08006c68 <HAL_SDRAM_MspInit>:

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 8006c68:	b580      	push	{r7, lr}
 8006c6a:	b082      	sub	sp, #8
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SDRAM_MspInit 0 */

  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
 8006c70:	f7ff ff68 	bl	8006b44 <HAL_FMC_MspInit>
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 8006c74:	bf00      	nop
 8006c76:	3708      	adds	r7, #8
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <MX_GPIO_Init>:
        * EXTI
     PA11   ------> USB_OTG_FS_DM
     PD6   ------> LTDC_B2
*/
void MX_GPIO_Init(void)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b08e      	sub	sp, #56	; 0x38
 8006c80:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006c82:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006c86:	2200      	movs	r2, #0
 8006c88:	601a      	str	r2, [r3, #0]
 8006c8a:	605a      	str	r2, [r3, #4]
 8006c8c:	609a      	str	r2, [r3, #8]
 8006c8e:	60da      	str	r2, [r3, #12]
 8006c90:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006c92:	2300      	movs	r3, #0
 8006c94:	623b      	str	r3, [r7, #32]
 8006c96:	4bb5      	ldr	r3, [pc, #724]	; (8006f6c <MX_GPIO_Init+0x2f0>)
 8006c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9a:	4ab4      	ldr	r2, [pc, #720]	; (8006f6c <MX_GPIO_Init+0x2f0>)
 8006c9c:	f043 0310 	orr.w	r3, r3, #16
 8006ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8006ca2:	4bb2      	ldr	r3, [pc, #712]	; (8006f6c <MX_GPIO_Init+0x2f0>)
 8006ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca6:	f003 0310 	and.w	r3, r3, #16
 8006caa:	623b      	str	r3, [r7, #32]
 8006cac:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006cae:	2300      	movs	r3, #0
 8006cb0:	61fb      	str	r3, [r7, #28]
 8006cb2:	4bae      	ldr	r3, [pc, #696]	; (8006f6c <MX_GPIO_Init+0x2f0>)
 8006cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cb6:	4aad      	ldr	r2, [pc, #692]	; (8006f6c <MX_GPIO_Init+0x2f0>)
 8006cb8:	f043 0304 	orr.w	r3, r3, #4
 8006cbc:	6313      	str	r3, [r2, #48]	; 0x30
 8006cbe:	4bab      	ldr	r3, [pc, #684]	; (8006f6c <MX_GPIO_Init+0x2f0>)
 8006cc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cc2:	f003 0304 	and.w	r3, r3, #4
 8006cc6:	61fb      	str	r3, [r7, #28]
 8006cc8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8006cca:	2300      	movs	r3, #0
 8006ccc:	61bb      	str	r3, [r7, #24]
 8006cce:	4ba7      	ldr	r3, [pc, #668]	; (8006f6c <MX_GPIO_Init+0x2f0>)
 8006cd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cd2:	4aa6      	ldr	r2, [pc, #664]	; (8006f6c <MX_GPIO_Init+0x2f0>)
 8006cd4:	f043 0320 	orr.w	r3, r3, #32
 8006cd8:	6313      	str	r3, [r2, #48]	; 0x30
 8006cda:	4ba4      	ldr	r3, [pc, #656]	; (8006f6c <MX_GPIO_Init+0x2f0>)
 8006cdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cde:	f003 0320 	and.w	r3, r3, #32
 8006ce2:	61bb      	str	r3, [r7, #24]
 8006ce4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	617b      	str	r3, [r7, #20]
 8006cea:	4ba0      	ldr	r3, [pc, #640]	; (8006f6c <MX_GPIO_Init+0x2f0>)
 8006cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cee:	4a9f      	ldr	r2, [pc, #636]	; (8006f6c <MX_GPIO_Init+0x2f0>)
 8006cf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006cf4:	6313      	str	r3, [r2, #48]	; 0x30
 8006cf6:	4b9d      	ldr	r3, [pc, #628]	; (8006f6c <MX_GPIO_Init+0x2f0>)
 8006cf8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006cfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cfe:	617b      	str	r3, [r7, #20]
 8006d00:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d02:	2300      	movs	r3, #0
 8006d04:	613b      	str	r3, [r7, #16]
 8006d06:	4b99      	ldr	r3, [pc, #612]	; (8006f6c <MX_GPIO_Init+0x2f0>)
 8006d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d0a:	4a98      	ldr	r2, [pc, #608]	; (8006f6c <MX_GPIO_Init+0x2f0>)
 8006d0c:	f043 0301 	orr.w	r3, r3, #1
 8006d10:	6313      	str	r3, [r2, #48]	; 0x30
 8006d12:	4b96      	ldr	r3, [pc, #600]	; (8006f6c <MX_GPIO_Init+0x2f0>)
 8006d14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d16:	f003 0301 	and.w	r3, r3, #1
 8006d1a:	613b      	str	r3, [r7, #16]
 8006d1c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d1e:	2300      	movs	r3, #0
 8006d20:	60fb      	str	r3, [r7, #12]
 8006d22:	4b92      	ldr	r3, [pc, #584]	; (8006f6c <MX_GPIO_Init+0x2f0>)
 8006d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d26:	4a91      	ldr	r2, [pc, #580]	; (8006f6c <MX_GPIO_Init+0x2f0>)
 8006d28:	f043 0302 	orr.w	r3, r3, #2
 8006d2c:	6313      	str	r3, [r2, #48]	; 0x30
 8006d2e:	4b8f      	ldr	r3, [pc, #572]	; (8006f6c <MX_GPIO_Init+0x2f0>)
 8006d30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d32:	f003 0302 	and.w	r3, r3, #2
 8006d36:	60fb      	str	r3, [r7, #12]
 8006d38:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8006d3a:	2300      	movs	r3, #0
 8006d3c:	60bb      	str	r3, [r7, #8]
 8006d3e:	4b8b      	ldr	r3, [pc, #556]	; (8006f6c <MX_GPIO_Init+0x2f0>)
 8006d40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d42:	4a8a      	ldr	r2, [pc, #552]	; (8006f6c <MX_GPIO_Init+0x2f0>)
 8006d44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006d48:	6313      	str	r3, [r2, #48]	; 0x30
 8006d4a:	4b88      	ldr	r3, [pc, #544]	; (8006f6c <MX_GPIO_Init+0x2f0>)
 8006d4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d52:	60bb      	str	r3, [r7, #8]
 8006d54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006d56:	2300      	movs	r3, #0
 8006d58:	607b      	str	r3, [r7, #4]
 8006d5a:	4b84      	ldr	r3, [pc, #528]	; (8006f6c <MX_GPIO_Init+0x2f0>)
 8006d5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d5e:	4a83      	ldr	r2, [pc, #524]	; (8006f6c <MX_GPIO_Init+0x2f0>)
 8006d60:	f043 0308 	orr.w	r3, r3, #8
 8006d64:	6313      	str	r3, [r2, #48]	; 0x30
 8006d66:	4b81      	ldr	r3, [pc, #516]	; (8006f6c <MX_GPIO_Init+0x2f0>)
 8006d68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d6a:	f003 0308 	and.w	r3, r3, #8
 8006d6e:	607b      	str	r3, [r7, #4]
 8006d70:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, SF3_CS_Pin|KEYPAD_COLUMN_1_Pin|KEYPAD_COLUMN_2_Pin|KEYPAD_COLUMN_3_Pin, GPIO_PIN_RESET);
 8006d72:	2200      	movs	r2, #0
 8006d74:	2174      	movs	r1, #116	; 0x74
 8006d76:	487e      	ldr	r0, [pc, #504]	; (8006f70 <MX_GPIO_Init+0x2f4>)
 8006d78:	f008 f978 	bl	800f06c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(VS1053_RESET_GPIO_Port, VS1053_RESET_Pin, GPIO_PIN_SET);
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	2108      	movs	r1, #8
 8006d80:	487b      	ldr	r0, [pc, #492]	; (8006f70 <MX_GPIO_Init+0x2f4>)
 8006d82:	f008 f973 	bl	800f06c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, KEYPAD_COLUMN_4_Pin|SRAM_3_CS_Pin|ILI9341_CS_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8006d86:	2200      	movs	r2, #0
 8006d88:	f242 0116 	movw	r1, #8214	; 0x2016
 8006d8c:	4879      	ldr	r0, [pc, #484]	; (8006f74 <MX_GPIO_Init+0x2f8>)
 8006d8e:	f008 f96d 	bl	800f06c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, uSD_CS_Pin|HD44780_D6_Pin|HD44780_D5_Pin|HD44780_D4_Pin
 8006d92:	2201      	movs	r2, #1
 8006d94:	f44f 61f9 	mov.w	r1, #1992	; 0x7c8
 8006d98:	4876      	ldr	r0, [pc, #472]	; (8006f74 <MX_GPIO_Init+0x2f8>)
 8006d9a:	f008 f967 	bl	800f06c <HAL_GPIO_WritePin>
                          |HD44780_E_Pin|ADS1256_CS_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, SRAM_2_CS_Pin|SRAM_4_CS_Pin|HD44780_RS_Pin, GPIO_PIN_SET);
 8006d9e:	2201      	movs	r2, #1
 8006da0:	f44f 71a4 	mov.w	r1, #328	; 0x148
 8006da4:	4874      	ldr	r0, [pc, #464]	; (8006f78 <MX_GPIO_Init+0x2fc>)
 8006da6:	f008 f961 	bl	800f06c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 8006daa:	2200      	movs	r2, #0
 8006dac:	2180      	movs	r1, #128	; 0x80
 8006dae:	4872      	ldr	r0, [pc, #456]	; (8006f78 <MX_GPIO_Init+0x2fc>)
 8006db0:	f008 f95c 	bl	800f06c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, SRAM_5_CS_Pin|SRAM_6_CS_Pin|SRAM_7_CS_Pin, GPIO_PIN_SET);
 8006db4:	2201      	movs	r2, #1
 8006db6:	f240 4103 	movw	r1, #1027	; 0x403
 8006dba:	4870      	ldr	r0, [pc, #448]	; (8006f7c <MX_GPIO_Init+0x300>)
 8006dbc:	f008 f956 	bl	800f06c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ILI9341_RST_Pin|ILI9341_WRX_Pin|DAC8552_CS_Pin, GPIO_PIN_RESET);
 8006dc0:	2200      	movs	r2, #0
 8006dc2:	f243 0120 	movw	r1, #12320	; 0x3020
 8006dc6:	486e      	ldr	r0, [pc, #440]	; (8006f80 <MX_GPIO_Init+0x304>)
 8006dc8:	f008 f950 	bl	800f06c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, SRAM_1_CS_Pin|SRAM_0_CS_Pin|LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8006dcc:	2200      	movs	r2, #0
 8006dce:	f246 010c 	movw	r1, #24588	; 0x600c
 8006dd2:	486c      	ldr	r0, [pc, #432]	; (8006f84 <MX_GPIO_Init+0x308>)
 8006dd4:	f008 f94a 	bl	800f06c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(HD44780_D7_GPIO_Port, HD44780_D7_Pin, GPIO_PIN_SET);
 8006dd8:	2201      	movs	r2, #1
 8006dda:	2180      	movs	r1, #128	; 0x80
 8006ddc:	4869      	ldr	r0, [pc, #420]	; (8006f84 <MX_GPIO_Init+0x308>)
 8006dde:	f008 f945 	bl	800f06c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, ADS1256_SYNC_Pin|ADS1256_RESET_Pin, GPIO_PIN_SET);
 8006de2:	2201      	movs	r2, #1
 8006de4:	2118      	movs	r1, #24
 8006de6:	4866      	ldr	r0, [pc, #408]	; (8006f80 <MX_GPIO_Init+0x304>)
 8006de8:	f008 f940 	bl	800f06c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = SF3_CS_Pin|KEYPAD_COLUMN_1_Pin|KEYPAD_COLUMN_2_Pin|KEYPAD_COLUMN_3_Pin;
 8006dec:	2374      	movs	r3, #116	; 0x74
 8006dee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006df0:	2301      	movs	r3, #1
 8006df2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006df4:	2300      	movs	r3, #0
 8006df6:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006df8:	2300      	movs	r3, #0
 8006dfa:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006dfc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e00:	4619      	mov	r1, r3
 8006e02:	485b      	ldr	r0, [pc, #364]	; (8006f70 <MX_GPIO_Init+0x2f4>)
 8006e04:	f007 ff6e 	bl	800ece4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = VS1053_RESET_Pin;
 8006e08:	2308      	movs	r3, #8
 8006e0a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e10:	2300      	movs	r3, #0
 8006e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006e14:	2301      	movs	r3, #1
 8006e16:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(VS1053_RESET_GPIO_Port, &GPIO_InitStruct);
 8006e18:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e1c:	4619      	mov	r1, r3
 8006e1e:	4854      	ldr	r0, [pc, #336]	; (8006f70 <MX_GPIO_Init+0x2f4>)
 8006e20:	f007 ff60 	bl	800ece4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = KEYPAD_COLUMN_4_Pin|SRAM_3_CS_Pin|ILI9341_CS_Pin|OTG_FS_PSO_Pin;
 8006e24:	f242 0316 	movw	r3, #8214	; 0x2016
 8006e28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e2a:	2301      	movs	r3, #1
 8006e2c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e2e:	2300      	movs	r3, #0
 8006e30:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006e32:	2300      	movs	r3, #0
 8006e34:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e36:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e3a:	4619      	mov	r1, r3
 8006e3c:	484d      	ldr	r0, [pc, #308]	; (8006f74 <MX_GPIO_Init+0x2f8>)
 8006e3e:	f007 ff51 	bl	800ece4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PFPin PFPin */
  GPIO_InitStruct.Pin = Recording_Pin|AD_KBD_BUT_DOWN_Pin;
 8006e42:	f44f 6388 	mov.w	r3, #1088	; 0x440
 8006e46:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006e48:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8006e4c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e4e:	2300      	movs	r3, #0
 8006e50:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8006e52:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e56:	4619      	mov	r1, r3
 8006e58:	484b      	ldr	r0, [pc, #300]	; (8006f88 <MX_GPIO_Init+0x30c>)
 8006e5a:	f007 ff43 	bl	800ece4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = uSD_CS_Pin|ADS1256_CS_Pin;
 8006e5e:	f44f 6381 	mov.w	r3, #1032	; 0x408
 8006e62:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e64:	2301      	movs	r3, #1
 8006e66:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e68:	2300      	movs	r3, #0
 8006e6a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006e6c:	2302      	movs	r3, #2
 8006e6e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006e70:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e74:	4619      	mov	r1, r3
 8006e76:	483f      	ldr	r0, [pc, #252]	; (8006f74 <MX_GPIO_Init+0x2f8>)
 8006e78:	f007 ff34 	bl	800ece4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin */
  GPIO_InitStruct.Pin = SRAM_2_CS_Pin|SRAM_4_CS_Pin;
 8006e7c:	2348      	movs	r3, #72	; 0x48
 8006e7e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e80:	2301      	movs	r3, #1
 8006e82:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e84:	2300      	movs	r3, #0
 8006e86:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006e88:	2302      	movs	r3, #2
 8006e8a:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006e8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006e90:	4619      	mov	r1, r3
 8006e92:	4839      	ldr	r0, [pc, #228]	; (8006f78 <MX_GPIO_Init+0x2fc>)
 8006e94:	f007 ff26 	bl	800ece4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8006e98:	2380      	movs	r3, #128	; 0x80
 8006e9a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006e9c:	2301      	movs	r3, #1
 8006e9e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8006ea8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006eac:	4619      	mov	r1, r3
 8006eae:	4832      	ldr	r0, [pc, #200]	; (8006f78 <MX_GPIO_Init+0x2fc>)
 8006eb0:	f007 ff18 	bl	800ece4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = SRAM_5_CS_Pin|SRAM_6_CS_Pin|SRAM_7_CS_Pin;
 8006eb4:	f240 4303 	movw	r3, #1027	; 0x403
 8006eb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006eba:	2301      	movs	r3, #1
 8006ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ebe:	2300      	movs	r3, #0
 8006ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006ec2:	2302      	movs	r3, #2
 8006ec4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006eca:	4619      	mov	r1, r3
 8006ecc:	482b      	ldr	r0, [pc, #172]	; (8006f7c <MX_GPIO_Init+0x300>)
 8006ece:	f007 ff09 	bl	800ece4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8006ed2:	2304      	movs	r3, #4
 8006ed4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006eda:	2300      	movs	r3, #0
 8006edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8006ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	4825      	ldr	r0, [pc, #148]	; (8006f7c <MX_GPIO_Init+0x300>)
 8006ee6:	f007 fefd 	bl	800ece4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8006eea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006eee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ef4:	2300      	movs	r3, #0
 8006ef6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8006ef8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006efc:	4619      	mov	r1, r3
 8006efe:	4820      	ldr	r0, [pc, #128]	; (8006f80 <MX_GPIO_Init+0x304>)
 8006f00:	f007 fef0 	bl	800ece4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin PDPin */
  GPIO_InitStruct.Pin = ILI9341_RST_Pin|ILI9341_WRX_Pin|DAC8552_CS_Pin;
 8006f04:	f243 0320 	movw	r3, #12320	; 0x3020
 8006f08:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f0a:	2301      	movs	r3, #1
 8006f0c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f12:	2300      	movs	r3, #0
 8006f14:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006f16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f1a:	4619      	mov	r1, r3
 8006f1c:	4818      	ldr	r0, [pc, #96]	; (8006f80 <MX_GPIO_Init+0x304>)
 8006f1e:	f007 fee1 	bl	800ece4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin PGPin PGPin */
  GPIO_InitStruct.Pin = SRAM_1_CS_Pin|SRAM_0_CS_Pin|LD3_Pin|LD4_Pin;
 8006f22:	f246 030c 	movw	r3, #24588	; 0x600c
 8006f26:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f2c:	2300      	movs	r3, #0
 8006f2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f30:	2300      	movs	r3, #0
 8006f32:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8006f34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f38:	4619      	mov	r1, r3
 8006f3a:	4812      	ldr	r0, [pc, #72]	; (8006f84 <MX_GPIO_Init+0x308>)
 8006f3c:	f007 fed2 	bl	800ece4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HD44780_D7_Pin;
 8006f40:	2380      	movs	r3, #128	; 0x80
 8006f42:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f44:	2301      	movs	r3, #1
 8006f46:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006f4c:	2301      	movs	r3, #1
 8006f4e:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HD44780_D7_GPIO_Port, &GPIO_InitStruct);
 8006f50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f54:	4619      	mov	r1, r3
 8006f56:	480b      	ldr	r0, [pc, #44]	; (8006f84 <MX_GPIO_Init+0x308>)
 8006f58:	f007 fec4 	bl	800ece4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin PCPin PCPin */
  GPIO_InitStruct.Pin = HD44780_D6_Pin|HD44780_D5_Pin|HD44780_D4_Pin|HD44780_E_Pin;
 8006f5c:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8006f60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006f62:	2301      	movs	r3, #1
 8006f64:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f66:	2300      	movs	r3, #0
 8006f68:	e010      	b.n	8006f8c <MX_GPIO_Init+0x310>
 8006f6a:	bf00      	nop
 8006f6c:	40023800 	.word	0x40023800
 8006f70:	40021000 	.word	0x40021000
 8006f74:	40020800 	.word	0x40020800
 8006f78:	40020000 	.word	0x40020000
 8006f7c:	40020400 	.word	0x40020400
 8006f80:	40020c00 	.word	0x40020c00
 8006f84:	40021800 	.word	0x40021800
 8006f88:	40021400 	.word	0x40021400
 8006f8c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006f8e:	2301      	movs	r3, #1
 8006f90:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006f92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006f96:	4619      	mov	r1, r3
 8006f98:	486e      	ldr	r0, [pc, #440]	; (8007154 <MX_GPIO_Init+0x4d8>)
 8006f9a:	f007 fea3 	bl	800ece4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = HD44780_RS_Pin;
 8006f9e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fa2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fa8:	2300      	movs	r3, #0
 8006faa:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006fac:	2301      	movs	r3, #1
 8006fae:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(HD44780_RS_GPIO_Port, &GPIO_InitStruct);
 8006fb0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fb4:	4619      	mov	r1, r3
 8006fb6:	4868      	ldr	r0, [pc, #416]	; (8007158 <MX_GPIO_Init+0x4dc>)
 8006fb8:	f007 fe94 	bl	800ece4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA11 */
  GPIO_InitStruct.Pin = GPIO_PIN_11;
 8006fbc:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006fc0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006fc2:	2302      	movs	r3, #2
 8006fc4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fc6:	2300      	movs	r3, #0
 8006fc8:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8006fca:	2302      	movs	r3, #2
 8006fcc:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006fce:	230a      	movs	r3, #10
 8006fd0:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006fd2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006fd6:	4619      	mov	r1, r3
 8006fd8:	485f      	ldr	r0, [pc, #380]	; (8007158 <MX_GPIO_Init+0x4dc>)
 8006fda:	f007 fe83 	bl	800ece4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Joystick_SW_Pin;
 8006fde:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006fe2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006fe4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8006fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fea:	2300      	movs	r3, #0
 8006fec:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Joystick_SW_GPIO_Port, &GPIO_InitStruct);
 8006fee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006ff2:	4619      	mov	r1, r3
 8006ff4:	4858      	ldr	r0, [pc, #352]	; (8007158 <MX_GPIO_Init+0x4dc>)
 8006ff6:	f007 fe75 	bl	800ece4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ADS1256_DRDY_Pin;
 8006ffa:	2304      	movs	r3, #4
 8006ffc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006ffe:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8007002:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007004:	2301      	movs	r3, #1
 8007006:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ADS1256_DRDY_GPIO_Port, &GPIO_InitStruct);
 8007008:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800700c:	4619      	mov	r1, r3
 800700e:	4853      	ldr	r0, [pc, #332]	; (800715c <MX_GPIO_Init+0x4e0>)
 8007010:	f007 fe68 	bl	800ece4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = ADS1256_SYNC_Pin|ADS1256_RESET_Pin;
 8007014:	2318      	movs	r3, #24
 8007016:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007018:	2301      	movs	r3, #1
 800701a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800701c:	2300      	movs	r3, #0
 800701e:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8007020:	2302      	movs	r3, #2
 8007022:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007024:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007028:	4619      	mov	r1, r3
 800702a:	484c      	ldr	r0, [pc, #304]	; (800715c <MX_GPIO_Init+0x4e0>)
 800702c:	f007 fe5a 	bl	800ece4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B2_Pin;
 8007030:	2340      	movs	r3, #64	; 0x40
 8007032:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007034:	2302      	movs	r3, #2
 8007036:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007038:	2300      	movs	r3, #0
 800703a:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800703c:	2300      	movs	r3, #0
 800703e:	633b      	str	r3, [r7, #48]	; 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8007040:	230e      	movs	r3, #14
 8007042:	637b      	str	r3, [r7, #52]	; 0x34
  HAL_GPIO_Init(B2_GPIO_Port, &GPIO_InitStruct);
 8007044:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007048:	4619      	mov	r1, r3
 800704a:	4844      	ldr	r0, [pc, #272]	; (800715c <MX_GPIO_Init+0x4e0>)
 800704c:	f007 fe4a 	bl	800ece4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Overdubbing_Pin;
 8007050:	2380      	movs	r3, #128	; 0x80
 8007052:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007054:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8007058:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800705a:	2300      	movs	r3, #0
 800705c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Overdubbing_GPIO_Port, &GPIO_InitStruct);
 800705e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007062:	4619      	mov	r1, r3
 8007064:	483d      	ldr	r0, [pc, #244]	; (800715c <MX_GPIO_Init+0x4e0>)
 8007066:	f007 fe3d 	bl	800ece4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Playback_Pin;
 800706a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800706e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007070:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8007074:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007076:	2300      	movs	r3, #0
 8007078:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(Playback_GPIO_Port, &GPIO_InitStruct);
 800707a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800707e:	4619      	mov	r1, r3
 8007080:	4837      	ldr	r0, [pc, #220]	; (8007160 <MX_GPIO_Init+0x4e4>)
 8007082:	f007 fe2f 	bl	800ece4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEYPAD_ROW_3_Pin;
 8007086:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800708a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800708c:	2300      	movs	r3, #0
 800708e:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007090:	2301      	movs	r3, #1
 8007092:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(KEYPAD_ROW_3_GPIO_Port, &GPIO_InitStruct);
 8007094:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007098:	4619      	mov	r1, r3
 800709a:	4831      	ldr	r0, [pc, #196]	; (8007160 <MX_GPIO_Init+0x4e4>)
 800709c:	f007 fe22 	bl	800ece4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = AD_KBD_INT_Pin;
 80070a0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80070a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80070a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80070aa:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070ac:	2300      	movs	r3, #0
 80070ae:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(AD_KBD_INT_GPIO_Port, &GPIO_InitStruct);
 80070b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070b4:	4619      	mov	r1, r3
 80070b6:	482a      	ldr	r0, [pc, #168]	; (8007160 <MX_GPIO_Init+0x4e4>)
 80070b8:	f007 fe14 	bl	800ece4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = uSD_CD_Pin;
 80070bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80070c0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80070c2:	2300      	movs	r3, #0
 80070c4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070c6:	2300      	movs	r3, #0
 80070c8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(uSD_CD_GPIO_Port, &GPIO_InitStruct);
 80070ca:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070ce:	4619      	mov	r1, r3
 80070d0:	4823      	ldr	r0, [pc, #140]	; (8007160 <MX_GPIO_Init+0x4e4>)
 80070d2:	f007 fe07 	bl	800ece4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ToggleFunction_Pin;
 80070d6:	2310      	movs	r3, #16
 80070d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80070da:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80070de:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070e0:	2300      	movs	r3, #0
 80070e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(ToggleFunction_GPIO_Port, &GPIO_InitStruct);
 80070e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80070e8:	4619      	mov	r1, r3
 80070ea:	481e      	ldr	r0, [pc, #120]	; (8007164 <MX_GPIO_Init+0x4e8>)
 80070ec:	f007 fdfa 	bl	800ece4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = KEYPAD_ROW_2_Pin|KEYPAD_ROW_1_Pin|KEYPAD_ROW_4_Pin;
 80070f0:	f44f 7360 	mov.w	r3, #896	; 0x380
 80070f4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80070f6:	2300      	movs	r3, #0
 80070f8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80070fa:	2301      	movs	r3, #1
 80070fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070fe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007102:	4619      	mov	r1, r3
 8007104:	4817      	ldr	r0, [pc, #92]	; (8007164 <MX_GPIO_Init+0x4e8>)
 8007106:	f007 fded 	bl	800ece4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 1);
 800710a:	2201      	movs	r2, #1
 800710c:	2100      	movs	r1, #0
 800710e:	2008      	movs	r0, #8
 8007110:	f006 fedb 	bl	800deca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8007114:	2008      	movs	r0, #8
 8007116:	f006 fef4 	bl	800df02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 2, 3);
 800711a:	2203      	movs	r2, #3
 800711c:	2102      	movs	r1, #2
 800711e:	200a      	movs	r0, #10
 8007120:	f006 fed3 	bl	800deca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8007124:	200a      	movs	r0, #10
 8007126:	f006 feec 	bl	800df02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 2, 3);
 800712a:	2203      	movs	r2, #3
 800712c:	2102      	movs	r1, #2
 800712e:	2017      	movs	r0, #23
 8007130:	f006 fecb 	bl	800deca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8007134:	2017      	movs	r0, #23
 8007136:	f006 fee4 	bl	800df02 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 1);
 800713a:	2201      	movs	r2, #1
 800713c:	2100      	movs	r1, #0
 800713e:	2028      	movs	r0, #40	; 0x28
 8007140:	f006 fec3 	bl	800deca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8007144:	2028      	movs	r0, #40	; 0x28
 8007146:	f006 fedc 	bl	800df02 <HAL_NVIC_EnableIRQ>

}
 800714a:	bf00      	nop
 800714c:	3738      	adds	r7, #56	; 0x38
 800714e:	46bd      	mov	sp, r7
 8007150:	bd80      	pop	{r7, pc}
 8007152:	bf00      	nop
 8007154:	40020800 	.word	0x40020800
 8007158:	40020000 	.word	0x40020000
 800715c:	40020c00 	.word	0x40020c00
 8007160:	40021800 	.word	0x40021800
 8007164:	40020400 	.word	0x40020400

08007168 <HAL_GPIO_EXTI_Callback>:


}


void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	4603      	mov	r3, r0
 8007170:	80fb      	strh	r3, [r7, #6]

	switch (GPIO_Pin) {
 8007172:	88fb      	ldrh	r3, [r7, #6]
 8007174:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007178:	d022      	beq.n	80071c0 <HAL_GPIO_EXTI_Callback+0x58>
 800717a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800717e:	f300 828a 	bgt.w	8007696 <HAL_GPIO_EXTI_Callback+0x52e>
 8007182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007186:	f000 814f 	beq.w	8007428 <HAL_GPIO_EXTI_Callback+0x2c0>
 800718a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800718e:	f300 8282 	bgt.w	8007696 <HAL_GPIO_EXTI_Callback+0x52e>
 8007192:	2b80      	cmp	r3, #128	; 0x80
 8007194:	f000 81c8 	beq.w	8007528 <HAL_GPIO_EXTI_Callback+0x3c0>
 8007198:	2b80      	cmp	r3, #128	; 0x80
 800719a:	f300 827c 	bgt.w	8007696 <HAL_GPIO_EXTI_Callback+0x52e>
 800719e:	2b40      	cmp	r3, #64	; 0x40
 80071a0:	f000 80d9 	beq.w	8007356 <HAL_GPIO_EXTI_Callback+0x1ee>
 80071a4:	2b40      	cmp	r3, #64	; 0x40
 80071a6:	f300 8276 	bgt.w	8007696 <HAL_GPIO_EXTI_Callback+0x52e>
 80071aa:	2b10      	cmp	r3, #16
 80071ac:	f000 8224 	beq.w	80075f8 <HAL_GPIO_EXTI_Callback+0x490>
 80071b0:	2b10      	cmp	r3, #16
 80071b2:	f300 8270 	bgt.w	8007696 <HAL_GPIO_EXTI_Callback+0x52e>
 80071b6:	2b01      	cmp	r3, #1
 80071b8:	d031      	beq.n	800721e <HAL_GPIO_EXTI_Callback+0xb6>
 80071ba:	2b04      	cmp	r3, #4
 80071bc:	d036      	beq.n	800722c <HAL_GPIO_EXTI_Callback+0xc4>
 80071be:	e26a      	b.n	8007696 <HAL_GPIO_EXTI_Callback+0x52e>

		case Joystick_SW_Pin:
				if(IS_BUT_DOWN(BUT_JOYSTICK))
 80071c0:	4b91      	ldr	r3, [pc, #580]	; (8007408 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80071c2:	781b      	ldrb	r3, [r3, #0]
 80071c4:	f003 0310 	and.w	r3, r3, #16
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	f300 8247 	bgt.w	800765c <HAL_GPIO_EXTI_Callback+0x4f4>
					return;
				BUT_DOWN(BUT_JOYSTICK);
 80071ce:	4b8e      	ldr	r3, [pc, #568]	; (8007408 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80071d0:	781b      	ldrb	r3, [r3, #0]
 80071d2:	f043 0310 	orr.w	r3, r3, #16
 80071d6:	b2da      	uxtb	r2, r3
 80071d8:	4b8b      	ldr	r3, [pc, #556]	; (8007408 <HAL_GPIO_EXTI_Callback+0x2a0>)
 80071da:	701a      	strb	r2, [r3, #0]
				Update_Joystick();
 80071dc:	f000 faa8 	bl	8007730 <Update_Joystick>
				if(looper.StartLooper == TRUE)
 80071e0:	4b8a      	ldr	r3, [pc, #552]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80071e2:	789b      	ldrb	r3, [r3, #2]
 80071e4:	b2db      	uxtb	r3, r3
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d103      	bne.n	80071f2 <HAL_GPIO_EXTI_Callback+0x8a>
					looper.StartLooper = FALSE;
 80071ea:	4b88      	ldr	r3, [pc, #544]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80071ec:	2200      	movs	r2, #0
 80071ee:	709a      	strb	r2, [r3, #2]
 80071f0:	e002      	b.n	80071f8 <HAL_GPIO_EXTI_Callback+0x90>
				else
					looper.StartLooper = TRUE;
 80071f2:	4b86      	ldr	r3, [pc, #536]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80071f4:	2201      	movs	r2, #1
 80071f6:	709a      	strb	r2, [r3, #2]
				if(looper.DrumState == DRUMS_STARTED)
 80071f8:	4b84      	ldr	r3, [pc, #528]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80071fa:	7f1b      	ldrb	r3, [r3, #28]
 80071fc:	b2db      	uxtb	r3, r3
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d103      	bne.n	800720a <HAL_GPIO_EXTI_Callback+0xa2>
					looper.DrumState = DRUMS_PAUSED;
 8007202:	4b82      	ldr	r3, [pc, #520]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8007204:	2203      	movs	r2, #3
 8007206:	771a      	strb	r2, [r3, #28]
				else if(looper.DrumState == DRUMS_PAUSED)
					looper.DrumState = DRUMS_STARTED;
				break;
 8007208:	e22a      	b.n	8007660 <HAL_GPIO_EXTI_Callback+0x4f8>
				else if(looper.DrumState == DRUMS_PAUSED)
 800720a:	4b80      	ldr	r3, [pc, #512]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 800720c:	7f1b      	ldrb	r3, [r3, #28]
 800720e:	b2db      	uxtb	r3, r3
 8007210:	2b03      	cmp	r3, #3
 8007212:	f040 8225 	bne.w	8007660 <HAL_GPIO_EXTI_Callback+0x4f8>
					looper.DrumState = DRUMS_STARTED;
 8007216:	4b7d      	ldr	r3, [pc, #500]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8007218:	2201      	movs	r2, #1
 800721a:	771a      	strb	r2, [r3, #28]
				break;
 800721c:	e220      	b.n	8007660 <HAL_GPIO_EXTI_Callback+0x4f8>
		case GPIO_PIN_0:	// user button stops everything
				looper.Function = saveFunction;
 800721e:	4b7c      	ldr	r3, [pc, #496]	; (8007410 <HAL_GPIO_EXTI_Callback+0x2a8>)
 8007220:	781a      	ldrb	r2, [r3, #0]
 8007222:	4b7a      	ldr	r3, [pc, #488]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8007224:	775a      	strb	r2, [r3, #29]
				stopAll();
 8007226:	f7fb fa1d 	bl	8002664 <stopAll>
				break;
 800722a:	e234      	b.n	8007696 <HAL_GPIO_EXTI_Callback+0x52e>

		case ADS1256_DRDY_Pin:

			if(looper.StartLooper == FALSE || looper.Function == IDLE)
 800722c:	4b77      	ldr	r3, [pc, #476]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 800722e:	789b      	ldrb	r3, [r3, #2]
 8007230:	b2db      	uxtb	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	f000 8216 	beq.w	8007664 <HAL_GPIO_EXTI_Callback+0x4fc>
 8007238:	4b74      	ldr	r3, [pc, #464]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 800723a:	7f5b      	ldrb	r3, [r3, #29]
 800723c:	b2db      	uxtb	r3, r3
 800723e:	2b00      	cmp	r3, #0
 8007240:	f000 8210 	beq.w	8007664 <HAL_GPIO_EXTI_Callback+0x4fc>
				return;

			sample16s = (int16_t)(ADS1256_ReadData() >> 8);
 8007244:	f7fa fc8c 	bl	8001b60 <ADS1256_ReadData>
 8007248:	4603      	mov	r3, r0
 800724a:	121b      	asrs	r3, r3, #8
 800724c:	b21a      	sxth	r2, r3
 800724e:	4b71      	ldr	r3, [pc, #452]	; (8007414 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8007250:	801a      	strh	r2, [r3, #0]

			if(looper.Playback == TRUE){
 8007252:	4b6e      	ldr	r3, [pc, #440]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8007254:	785b      	ldrb	r3, [r3, #1]
 8007256:	b2db      	uxtb	r3, r3
 8007258:	2b01      	cmp	r3, #1
 800725a:	d132      	bne.n	80072c2 <HAL_GPIO_EXTI_Callback+0x15a>
				if(looper.TwoChannels == FALSE){
 800725c:	4b6b      	ldr	r3, [pc, #428]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 800725e:	78db      	ldrb	r3, [r3, #3]
 8007260:	b2db      	uxtb	r3, r3
 8007262:	2b00      	cmp	r3, #0
 8007264:	d120      	bne.n	80072a8 <HAL_GPIO_EXTI_Callback+0x140>
					read_sample(sample16s,GET_ACTIVE_CHANNEL);
 8007266:	4b6b      	ldr	r3, [pc, #428]	; (8007414 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8007268:	f9b3 2000 	ldrsh.w	r2, [r3]
 800726c:	4b67      	ldr	r3, [pc, #412]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 800726e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007272:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007276:	b2db      	uxtb	r3, r3
 8007278:	2b01      	cmp	r3, #1
 800727a:	d101      	bne.n	8007280 <HAL_GPIO_EXTI_Callback+0x118>
 800727c:	4b66      	ldr	r3, [pc, #408]	; (8007418 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800727e:	e000      	b.n	8007282 <HAL_GPIO_EXTI_Callback+0x11a>
 8007280:	4b66      	ldr	r3, [pc, #408]	; (800741c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8007282:	4619      	mov	r1, r3
 8007284:	4610      	mov	r0, r2
 8007286:	f7fa ff23 	bl	80020d0 <read_sample>
					play_sample(GET_ACTIVE_CHANNEL);
 800728a:	4b60      	ldr	r3, [pc, #384]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 800728c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007290:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007294:	b2db      	uxtb	r3, r3
 8007296:	2b01      	cmp	r3, #1
 8007298:	d101      	bne.n	800729e <HAL_GPIO_EXTI_Callback+0x136>
 800729a:	4b5f      	ldr	r3, [pc, #380]	; (8007418 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800729c:	e000      	b.n	80072a0 <HAL_GPIO_EXTI_Callback+0x138>
 800729e:	4b5f      	ldr	r3, [pc, #380]	; (800741c <HAL_GPIO_EXTI_Callback+0x2b4>)
 80072a0:	4618      	mov	r0, r3
 80072a2:	f7fb f853 	bl	800234c <play_sample>
				else {
					read_samples(sample16s,&looper.ch1,&looper.ch2);
					play_samples(&looper.ch1,&looper.ch2);
				}

				return;
 80072a6:	e1f6      	b.n	8007696 <HAL_GPIO_EXTI_Callback+0x52e>
					read_samples(sample16s,&looper.ch1,&looper.ch2);
 80072a8:	4b5a      	ldr	r3, [pc, #360]	; (8007414 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80072aa:	f9b3 3000 	ldrsh.w	r3, [r3]
 80072ae:	4a5b      	ldr	r2, [pc, #364]	; (800741c <HAL_GPIO_EXTI_Callback+0x2b4>)
 80072b0:	4959      	ldr	r1, [pc, #356]	; (8007418 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80072b2:	4618      	mov	r0, r3
 80072b4:	f7fa fff4 	bl	80022a0 <read_samples>
					play_samples(&looper.ch1,&looper.ch2);
 80072b8:	4958      	ldr	r1, [pc, #352]	; (800741c <HAL_GPIO_EXTI_Callback+0x2b4>)
 80072ba:	4857      	ldr	r0, [pc, #348]	; (8007418 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80072bc:	f7fb f85a 	bl	8002374 <play_samples>
				return;
 80072c0:	e1e9      	b.n	8007696 <HAL_GPIO_EXTI_Callback+0x52e>
			}


			if(looper.Recording == TRUE){
 80072c2:	4b52      	ldr	r3, [pc, #328]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80072c4:	781b      	ldrb	r3, [r3, #0]
 80072c6:	b2db      	uxtb	r3, r3
 80072c8:	2b01      	cmp	r3, #1
 80072ca:	f040 81cd 	bne.w	8007668 <HAL_GPIO_EXTI_Callback+0x500>

				if(looper.TwoChannels == FALSE){
 80072ce:	4b4f      	ldr	r3, [pc, #316]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80072d0:	78db      	ldrb	r3, [r3, #3]
 80072d2:	b2db      	uxtb	r3, r3
 80072d4:	2b00      	cmp	r3, #0
 80072d6:	d112      	bne.n	80072fe <HAL_GPIO_EXTI_Callback+0x196>
					record_sample(sample16s,GET_ACTIVE_CHANNEL);
 80072d8:	4b4e      	ldr	r3, [pc, #312]	; (8007414 <HAL_GPIO_EXTI_Callback+0x2ac>)
 80072da:	f9b3 2000 	ldrsh.w	r2, [r3]
 80072de:	4b4b      	ldr	r3, [pc, #300]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80072e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80072e4:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80072e8:	b2db      	uxtb	r3, r3
 80072ea:	2b01      	cmp	r3, #1
 80072ec:	d101      	bne.n	80072f2 <HAL_GPIO_EXTI_Callback+0x18a>
 80072ee:	4b4a      	ldr	r3, [pc, #296]	; (8007418 <HAL_GPIO_EXTI_Callback+0x2b0>)
 80072f0:	e000      	b.n	80072f4 <HAL_GPIO_EXTI_Callback+0x18c>
 80072f2:	4b4a      	ldr	r3, [pc, #296]	; (800741c <HAL_GPIO_EXTI_Callback+0x2b4>)
 80072f4:	4619      	mov	r1, r3
 80072f6:	4610      	mov	r0, r2
 80072f8:	f7fa fdce 	bl	8001e98 <record_sample>
						play_sample(GET_INACTIVE_CHANNEL);
				}

			}

			break;
 80072fc:	e1b4      	b.n	8007668 <HAL_GPIO_EXTI_Callback+0x500>
					record_samples(sample16s,&looper.ch1,&looper.ch2);
 80072fe:	4b45      	ldr	r3, [pc, #276]	; (8007414 <HAL_GPIO_EXTI_Callback+0x2ac>)
 8007300:	f9b3 3000 	ldrsh.w	r3, [r3]
 8007304:	4a45      	ldr	r2, [pc, #276]	; (800741c <HAL_GPIO_EXTI_Callback+0x2b4>)
 8007306:	4944      	ldr	r1, [pc, #272]	; (8007418 <HAL_GPIO_EXTI_Callback+0x2b0>)
 8007308:	4618      	mov	r0, r3
 800730a:	f7fa fe01 	bl	8001f10 <record_samples>
					if(pattern_audio_map[looper.StartPattern].channel_recorded[INACTIVE_CHANNEL_INDEX] == TRUE)
 800730e:	4b3f      	ldr	r3, [pc, #252]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8007310:	695a      	ldr	r2, [r3, #20]
 8007312:	4b3e      	ldr	r3, [pc, #248]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8007314:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007318:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800731c:	b2db      	uxtb	r3, r3
 800731e:	4618      	mov	r0, r3
 8007320:	493f      	ldr	r1, [pc, #252]	; (8007420 <HAL_GPIO_EXTI_Callback+0x2b8>)
 8007322:	4613      	mov	r3, r2
 8007324:	005b      	lsls	r3, r3, #1
 8007326:	4413      	add	r3, r2
 8007328:	009b      	lsls	r3, r3, #2
 800732a:	440b      	add	r3, r1
 800732c:	4403      	add	r3, r0
 800732e:	3308      	adds	r3, #8
 8007330:	781b      	ldrb	r3, [r3, #0]
 8007332:	2b01      	cmp	r3, #1
 8007334:	f040 8198 	bne.w	8007668 <HAL_GPIO_EXTI_Callback+0x500>
						play_sample(GET_INACTIVE_CHANNEL);
 8007338:	4b34      	ldr	r3, [pc, #208]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 800733a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800733e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007342:	b2db      	uxtb	r3, r3
 8007344:	2b00      	cmp	r3, #0
 8007346:	d101      	bne.n	800734c <HAL_GPIO_EXTI_Callback+0x1e4>
 8007348:	4b33      	ldr	r3, [pc, #204]	; (8007418 <HAL_GPIO_EXTI_Callback+0x2b0>)
 800734a:	e000      	b.n	800734e <HAL_GPIO_EXTI_Callback+0x1e6>
 800734c:	4b33      	ldr	r3, [pc, #204]	; (800741c <HAL_GPIO_EXTI_Callback+0x2b4>)
 800734e:	4618      	mov	r0, r3
 8007350:	f7fa fffc 	bl	800234c <play_sample>
			break;
 8007354:	e188      	b.n	8007668 <HAL_GPIO_EXTI_Callback+0x500>

		case Recording_Pin:
			if(IS_BUT_DOWN(BUT_REC) == TRUE)
 8007356:	4b2c      	ldr	r3, [pc, #176]	; (8007408 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8007358:	781b      	ldrb	r3, [r3, #0]
 800735a:	f003 0301 	and.w	r3, r3, #1
 800735e:	2b00      	cmp	r3, #0
 8007360:	f300 8184 	bgt.w	800766c <HAL_GPIO_EXTI_Callback+0x504>
				return;
			BUT_DOWN(BUT_REC);
 8007364:	4b28      	ldr	r3, [pc, #160]	; (8007408 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8007366:	781b      	ldrb	r3, [r3, #0]
 8007368:	f043 0301 	orr.w	r3, r3, #1
 800736c:	b2da      	uxtb	r2, r3
 800736e:	4b26      	ldr	r3, [pc, #152]	; (8007408 <HAL_GPIO_EXTI_Callback+0x2a0>)
 8007370:	701a      	strb	r2, [r3, #0]
			if(looper.Recording == TRUE || looper.Function == IDLE)
 8007372:	4b26      	ldr	r3, [pc, #152]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b01      	cmp	r3, #1
 800737a:	f000 8179 	beq.w	8007670 <HAL_GPIO_EXTI_Callback+0x508>
 800737e:	4b23      	ldr	r3, [pc, #140]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8007380:	7f5b      	ldrb	r3, [r3, #29]
 8007382:	b2db      	uxtb	r3, r3
 8007384:	2b00      	cmp	r3, #0
 8007386:	f000 8173 	beq.w	8007670 <HAL_GPIO_EXTI_Callback+0x508>
				return;
			if(looper.DrumState == DRUMS_STARTED)
 800738a:	4b20      	ldr	r3, [pc, #128]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 800738c:	7f1b      	ldrb	r3, [r3, #28]
 800738e:	b2db      	uxtb	r3, r3
 8007390:	2b01      	cmp	r3, #1
 8007392:	f000 816f 	beq.w	8007674 <HAL_GPIO_EXTI_Callback+0x50c>
				return;
			looper.StartLooper = FALSE;
 8007396:	4b1d      	ldr	r3, [pc, #116]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 8007398:	2200      	movs	r2, #0
 800739a:	709a      	strb	r2, [r3, #2]
			//if(looper.Function == AUDIO_ONLY)
				//resetChannel(GET_ACTIVE_CHANNEL);

			BSP_LED_On(LED_RED);
 800739c:	2001      	movs	r0, #1
 800739e:	f004 f901 	bl	800b5a4 <BSP_LED_On>
			BSP_LED_Off(LED_GREEN);
 80073a2:	2000      	movs	r0, #0
 80073a4:	f004 f918 	bl	800b5d8 <BSP_LED_Off>
			looper.ch1.Overdub = FALSE;
 80073a8:	4a18      	ldr	r2, [pc, #96]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80073aa:	f892 3020 	ldrb.w	r3, [r2, #32]
 80073ae:	f36f 03c3 	bfc	r3, #3, #1
 80073b2:	f882 3020 	strb.w	r3, [r2, #32]
			looper.ch2.Overdub = FALSE;
 80073b6:	4a15      	ldr	r2, [pc, #84]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80073b8:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80073bc:	f36f 03c3 	bfc	r3, #3, #1
 80073c0:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
			looper.Recording = TRUE;
 80073c4:	4b11      	ldr	r3, [pc, #68]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80073c6:	2201      	movs	r2, #1
 80073c8:	701a      	strb	r2, [r3, #0]
			looper.Playback = FALSE;
 80073ca:	4b10      	ldr	r3, [pc, #64]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80073cc:	2200      	movs	r2, #0
 80073ce:	705a      	strb	r2, [r3, #1]

			// start counting samples from current loop's start
			setSampleCounter(pattern_audio_map[looper.StartPattern].sample_position);
 80073d0:	4b0e      	ldr	r3, [pc, #56]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80073d2:	695a      	ldr	r2, [r3, #20]
 80073d4:	4912      	ldr	r1, [pc, #72]	; (8007420 <HAL_GPIO_EXTI_Callback+0x2b8>)
 80073d6:	4613      	mov	r3, r2
 80073d8:	005b      	lsls	r3, r3, #1
 80073da:	4413      	add	r3, r2
 80073dc:	009b      	lsls	r3, r3, #2
 80073de:	440b      	add	r3, r1
 80073e0:	3304      	adds	r3, #4
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4618      	mov	r0, r3
 80073e6:	f7fa fc9d 	bl	8001d24 <setSampleCounter>
			setStartEndPatterns(looper.StartPattern,looper.EndPattern);
 80073ea:	4b08      	ldr	r3, [pc, #32]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80073ec:	695b      	ldr	r3, [r3, #20]
 80073ee:	4a07      	ldr	r2, [pc, #28]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80073f0:	6992      	ldr	r2, [r2, #24]
 80073f2:	4611      	mov	r1, r2
 80073f4:	4618      	mov	r0, r3
 80073f6:	f7fa fcbd 	bl	8001d74 <setStartEndPatterns>
			looper.StartLooper = TRUE;
 80073fa:	4b04      	ldr	r3, [pc, #16]	; (800740c <HAL_GPIO_EXTI_Callback+0x2a4>)
 80073fc:	2201      	movs	r2, #1
 80073fe:	709a      	strb	r2, [r3, #2]
			show_status_line = TRUE;
 8007400:	4b08      	ldr	r3, [pc, #32]	; (8007424 <HAL_GPIO_EXTI_Callback+0x2bc>)
 8007402:	2201      	movs	r2, #1
 8007404:	701a      	strb	r2, [r3, #0]
			break;
 8007406:	e146      	b.n	8007696 <HAL_GPIO_EXTI_Callback+0x52e>
 8007408:	2000126c 	.word	0x2000126c
 800740c:	20001228 	.word	0x20001228
 8007410:	20001c46 	.word	0x20001c46
 8007414:	200004c4 	.word	0x200004c4
 8007418:	20001248 	.word	0x20001248
 800741c:	20001258 	.word	0x20001258
 8007420:	20000568 	.word	0x20000568
 8007424:	20001c48 	.word	0x20001c48
		case Playback_Pin:
			if(IS_BUT_DOWN(BUT_PLAY) == TRUE)
 8007428:	4b9c      	ldr	r3, [pc, #624]	; (800769c <HAL_GPIO_EXTI_Callback+0x534>)
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	f003 0302 	and.w	r3, r3, #2
 8007430:	2b00      	cmp	r3, #0
 8007432:	f300 8121 	bgt.w	8007678 <HAL_GPIO_EXTI_Callback+0x510>
				return;
			BUT_DOWN(BUT_PLAY);
 8007436:	4b99      	ldr	r3, [pc, #612]	; (800769c <HAL_GPIO_EXTI_Callback+0x534>)
 8007438:	781b      	ldrb	r3, [r3, #0]
 800743a:	f043 0302 	orr.w	r3, r3, #2
 800743e:	b2da      	uxtb	r2, r3
 8007440:	4b96      	ldr	r3, [pc, #600]	; (800769c <HAL_GPIO_EXTI_Callback+0x534>)
 8007442:	701a      	strb	r2, [r3, #0]
			if(looper.Playback == TRUE || looper.Function == IDLE)
 8007444:	4b96      	ldr	r3, [pc, #600]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 8007446:	785b      	ldrb	r3, [r3, #1]
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2b01      	cmp	r3, #1
 800744c:	f000 8116 	beq.w	800767c <HAL_GPIO_EXTI_Callback+0x514>
 8007450:	4b93      	ldr	r3, [pc, #588]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 8007452:	7f5b      	ldrb	r3, [r3, #29]
 8007454:	b2db      	uxtb	r3, r3
 8007456:	2b00      	cmp	r3, #0
 8007458:	f000 8110 	beq.w	800767c <HAL_GPIO_EXTI_Callback+0x514>
				return;
			if(looper.DrumState == DRUMS_STARTED)
 800745c:	4b90      	ldr	r3, [pc, #576]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 800745e:	7f1b      	ldrb	r3, [r3, #28]
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b01      	cmp	r3, #1
 8007464:	f000 810c 	beq.w	8007680 <HAL_GPIO_EXTI_Callback+0x518>
				return;
			looper.StartLooper = FALSE;
 8007468:	4b8d      	ldr	r3, [pc, #564]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 800746a:	2200      	movs	r2, #0
 800746c:	709a      	strb	r2, [r3, #2]
			if(looper.ch1.Active == TRUE){
 800746e:	4b8c      	ldr	r3, [pc, #560]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 8007470:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007474:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8007478:	b2db      	uxtb	r3, r3
 800747a:	2b01      	cmp	r3, #1
 800747c:	d109      	bne.n	8007492 <HAL_GPIO_EXTI_Callback+0x32a>
				looper.ch1.Clipping = FALSE;
 800747e:	4a88      	ldr	r2, [pc, #544]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 8007480:	f892 3020 	ldrb.w	r3, [r2, #32]
 8007484:	f36f 0382 	bfc	r3, #2, #1
 8007488:	f882 3020 	strb.w	r3, [r2, #32]
				//looper.ch1.Overdub = FALSE;
				looper.ch1.CurrentSample = 0;
 800748c:	4b84      	ldr	r3, [pc, #528]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 800748e:	2200      	movs	r2, #0
 8007490:	845a      	strh	r2, [r3, #34]	; 0x22
			}
			if(looper.ch2.Active == TRUE){
 8007492:	4b83      	ldr	r3, [pc, #524]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 8007494:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8007498:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800749c:	b2db      	uxtb	r3, r3
 800749e:	2b01      	cmp	r3, #1
 80074a0:	d109      	bne.n	80074b6 <HAL_GPIO_EXTI_Callback+0x34e>
				looper.ch2.Clipping = FALSE;
 80074a2:	4a7f      	ldr	r2, [pc, #508]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 80074a4:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80074a8:	f36f 0382 	bfc	r3, #2, #1
 80074ac:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
				//looper.ch2.Overdub = FALSE;
				looper.ch2.CurrentSample = 0;
 80074b0:	4b7b      	ldr	r3, [pc, #492]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 80074b2:	2200      	movs	r2, #0
 80074b4:	865a      	strh	r2, [r3, #50]	; 0x32
			}

			// this sequence is important!!
			looper.Playback = TRUE;
 80074b6:	4b7a      	ldr	r3, [pc, #488]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 80074b8:	2201      	movs	r2, #1
 80074ba:	705a      	strb	r2, [r3, #1]
			setStartEndPatterns(looper.StartPattern,looper.EndPattern);
 80074bc:	4b78      	ldr	r3, [pc, #480]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 80074be:	695b      	ldr	r3, [r3, #20]
 80074c0:	4a77      	ldr	r2, [pc, #476]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 80074c2:	6992      	ldr	r2, [r2, #24]
 80074c4:	4611      	mov	r1, r2
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fa fc54 	bl	8001d74 <setStartEndPatterns>
			looper.Recording = FALSE;
 80074cc:	4b74      	ldr	r3, [pc, #464]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 80074ce:	2200      	movs	r2, #0
 80074d0:	701a      	strb	r2, [r3, #0]

			if(looper.SamplesWritten == 0){
 80074d2:	4b73      	ldr	r3, [pc, #460]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 80074d4:	68db      	ldr	r3, [r3, #12]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d103      	bne.n	80074e2 <HAL_GPIO_EXTI_Callback+0x37a>
				looper.Playback = FALSE;
 80074da:	4b71      	ldr	r3, [pc, #452]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 80074dc:	2200      	movs	r2, #0
 80074de:	705a      	strb	r2, [r3, #1]
				return;
 80074e0:	e0d9      	b.n	8007696 <HAL_GPIO_EXTI_Callback+0x52e>
			}
			pattern_audio_map[looper.StartPattern].channel_recorded[ACTIVE_CHANNEL_INDEX] = TRUE;
 80074e2:	4b6f      	ldr	r3, [pc, #444]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 80074e4:	695a      	ldr	r2, [r3, #20]
 80074e6:	4b6e      	ldr	r3, [pc, #440]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 80074e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80074ec:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80074f0:	b2db      	uxtb	r3, r3
 80074f2:	f083 0301 	eor.w	r3, r3, #1
 80074f6:	b2db      	uxtb	r3, r3
 80074f8:	4618      	mov	r0, r3
 80074fa:	496a      	ldr	r1, [pc, #424]	; (80076a4 <HAL_GPIO_EXTI_Callback+0x53c>)
 80074fc:	4613      	mov	r3, r2
 80074fe:	005b      	lsls	r3, r3, #1
 8007500:	4413      	add	r3, r2
 8007502:	009b      	lsls	r3, r3, #2
 8007504:	440b      	add	r3, r1
 8007506:	4403      	add	r3, r0
 8007508:	3308      	adds	r3, #8
 800750a:	2201      	movs	r2, #1
 800750c:	701a      	strb	r2, [r3, #0]

			looper.StartLooper = TRUE;
 800750e:	4b64      	ldr	r3, [pc, #400]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 8007510:	2201      	movs	r2, #1
 8007512:	709a      	strb	r2, [r3, #2]
			show_status_line = TRUE;
 8007514:	4b64      	ldr	r3, [pc, #400]	; (80076a8 <HAL_GPIO_EXTI_Callback+0x540>)
 8007516:	2201      	movs	r2, #1
 8007518:	701a      	strb	r2, [r3, #0]
			BSP_LED_On(LED_GREEN);
 800751a:	2000      	movs	r0, #0
 800751c:	f004 f842 	bl	800b5a4 <BSP_LED_On>
			BSP_LED_Off(LED_RED);
 8007520:	2001      	movs	r0, #1
 8007522:	f004 f859 	bl	800b5d8 <BSP_LED_Off>
			break;
 8007526:	e0b6      	b.n	8007696 <HAL_GPIO_EXTI_Callback+0x52e>
		case Overdubbing_Pin:
			if(IS_BUT_DOWN(BUT_OVERDUB) == TRUE)
 8007528:	4b5c      	ldr	r3, [pc, #368]	; (800769c <HAL_GPIO_EXTI_Callback+0x534>)
 800752a:	781b      	ldrb	r3, [r3, #0]
 800752c:	f003 0304 	and.w	r3, r3, #4
 8007530:	2b00      	cmp	r3, #0
 8007532:	f300 80a7 	bgt.w	8007684 <HAL_GPIO_EXTI_Callback+0x51c>
				return;
			BUT_DOWN(BUT_OVERDUB);
 8007536:	4b59      	ldr	r3, [pc, #356]	; (800769c <HAL_GPIO_EXTI_Callback+0x534>)
 8007538:	781b      	ldrb	r3, [r3, #0]
 800753a:	f043 0304 	orr.w	r3, r3, #4
 800753e:	b2da      	uxtb	r2, r3
 8007540:	4b56      	ldr	r3, [pc, #344]	; (800769c <HAL_GPIO_EXTI_Callback+0x534>)
 8007542:	701a      	strb	r2, [r3, #0]
			if(looper.Recording == TRUE || looper.Function == IDLE)
 8007544:	4b56      	ldr	r3, [pc, #344]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 8007546:	781b      	ldrb	r3, [r3, #0]
 8007548:	b2db      	uxtb	r3, r3
 800754a:	2b01      	cmp	r3, #1
 800754c:	f000 809c 	beq.w	8007688 <HAL_GPIO_EXTI_Callback+0x520>
 8007550:	4b53      	ldr	r3, [pc, #332]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 8007552:	7f5b      	ldrb	r3, [r3, #29]
 8007554:	b2db      	uxtb	r3, r3
 8007556:	2b00      	cmp	r3, #0
 8007558:	f000 8096 	beq.w	8007688 <HAL_GPIO_EXTI_Callback+0x520>
				return;
			if(looper.SamplesWritten == 0)
 800755c:	4b50      	ldr	r3, [pc, #320]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	2b00      	cmp	r3, #0
 8007562:	f000 8093 	beq.w	800768c <HAL_GPIO_EXTI_Callback+0x524>
				return;
			if(looper.TwoChannels == TRUE)
 8007566:	4b4e      	ldr	r3, [pc, #312]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 8007568:	78db      	ldrb	r3, [r3, #3]
 800756a:	b2db      	uxtb	r3, r3
 800756c:	2b01      	cmp	r3, #1
 800756e:	f000 808f 	beq.w	8007690 <HAL_GPIO_EXTI_Callback+0x528>
				return;
			if(looper.ch1.Active == TRUE){
 8007572:	4b4b      	ldr	r3, [pc, #300]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 8007574:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007578:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b01      	cmp	r3, #1
 8007580:	d117      	bne.n	80075b2 <HAL_GPIO_EXTI_Callback+0x44a>
				if(looper.ch1.Overdub == FALSE)
 8007582:	4b47      	ldr	r3, [pc, #284]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 8007584:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007588:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 800758c:	b2db      	uxtb	r3, r3
 800758e:	2b00      	cmp	r3, #0
 8007590:	d107      	bne.n	80075a2 <HAL_GPIO_EXTI_Callback+0x43a>
					looper.ch1.Overdub = TRUE;
 8007592:	4a43      	ldr	r2, [pc, #268]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 8007594:	f892 3020 	ldrb.w	r3, [r2, #32]
 8007598:	f043 0308 	orr.w	r3, r3, #8
 800759c:	f882 3020 	strb.w	r3, [r2, #32]
 80075a0:	e026      	b.n	80075f0 <HAL_GPIO_EXTI_Callback+0x488>
				else
					looper.ch1.Overdub = FALSE;
 80075a2:	4a3f      	ldr	r2, [pc, #252]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 80075a4:	f892 3020 	ldrb.w	r3, [r2, #32]
 80075a8:	f36f 03c3 	bfc	r3, #3, #1
 80075ac:	f882 3020 	strb.w	r3, [r2, #32]
 80075b0:	e01e      	b.n	80075f0 <HAL_GPIO_EXTI_Callback+0x488>
			}
			else if(looper.ch2.Active == TRUE){
 80075b2:	4b3b      	ldr	r3, [pc, #236]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 80075b4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075b8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80075bc:	b2db      	uxtb	r3, r3
 80075be:	2b01      	cmp	r3, #1
 80075c0:	d116      	bne.n	80075f0 <HAL_GPIO_EXTI_Callback+0x488>
				if(looper.ch2.Overdub == FALSE)
 80075c2:	4b37      	ldr	r3, [pc, #220]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 80075c4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80075c8:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 80075cc:	b2db      	uxtb	r3, r3
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d107      	bne.n	80075e2 <HAL_GPIO_EXTI_Callback+0x47a>
					looper.ch2.Overdub = TRUE;
 80075d2:	4a33      	ldr	r2, [pc, #204]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 80075d4:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80075d8:	f043 0308 	orr.w	r3, r3, #8
 80075dc:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
 80075e0:	e006      	b.n	80075f0 <HAL_GPIO_EXTI_Callback+0x488>
				else
					looper.ch2.Overdub = FALSE;
 80075e2:	4a2f      	ldr	r2, [pc, #188]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 80075e4:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80075e8:	f36f 03c3 	bfc	r3, #3, #1
 80075ec:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
			}
			show_status_line = TRUE;
 80075f0:	4b2d      	ldr	r3, [pc, #180]	; (80076a8 <HAL_GPIO_EXTI_Callback+0x540>)
 80075f2:	2201      	movs	r2, #1
 80075f4:	701a      	strb	r2, [r3, #0]
			break;
 80075f6:	e04e      	b.n	8007696 <HAL_GPIO_EXTI_Callback+0x52e>
		case ToggleFunction_Pin:
			if(IS_BUT_DOWN(BUT_TOGFUN) == TRUE)
 80075f8:	4b28      	ldr	r3, [pc, #160]	; (800769c <HAL_GPIO_EXTI_Callback+0x534>)
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	f003 0308 	and.w	r3, r3, #8
 8007600:	2b00      	cmp	r3, #0
 8007602:	dc47      	bgt.n	8007694 <HAL_GPIO_EXTI_Callback+0x52c>
				return;
			BUT_DOWN(BUT_TOGFUN);
 8007604:	4b25      	ldr	r3, [pc, #148]	; (800769c <HAL_GPIO_EXTI_Callback+0x534>)
 8007606:	781b      	ldrb	r3, [r3, #0]
 8007608:	f043 0308 	orr.w	r3, r3, #8
 800760c:	b2da      	uxtb	r2, r3
 800760e:	4b23      	ldr	r3, [pc, #140]	; (800769c <HAL_GPIO_EXTI_Callback+0x534>)
 8007610:	701a      	strb	r2, [r3, #0]
			// finish recording without playing immediately. Allows to switch on overdubbing
			if(looper.Recording == TRUE){
 8007612:	4b23      	ldr	r3, [pc, #140]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	b2db      	uxtb	r3, r3
 8007618:	2b01      	cmp	r3, #1
 800761a:	d114      	bne.n	8007646 <HAL_GPIO_EXTI_Callback+0x4de>
				// this sequence is important!!
				looper.Playback = TRUE;
 800761c:	4b20      	ldr	r3, [pc, #128]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 800761e:	2201      	movs	r2, #1
 8007620:	705a      	strb	r2, [r3, #1]
				setStartEndPatterns(looper.StartPattern,looper.EndPattern);
 8007622:	4b1f      	ldr	r3, [pc, #124]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 8007624:	695b      	ldr	r3, [r3, #20]
 8007626:	4a1e      	ldr	r2, [pc, #120]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 8007628:	6992      	ldr	r2, [r2, #24]
 800762a:	4611      	mov	r1, r2
 800762c:	4618      	mov	r0, r3
 800762e:	f7fa fba1 	bl	8001d74 <setStartEndPatterns>
				looper.Recording = FALSE;
 8007632:	4b1b      	ldr	r3, [pc, #108]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 8007634:	2200      	movs	r2, #0
 8007636:	701a      	strb	r2, [r3, #0]
				looper.Playback = FALSE;
 8007638:	4b19      	ldr	r3, [pc, #100]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 800763a:	2200      	movs	r2, #0
 800763c:	705a      	strb	r2, [r3, #1]
				show_status_line = TRUE;
 800763e:	4b1a      	ldr	r3, [pc, #104]	; (80076a8 <HAL_GPIO_EXTI_Callback+0x540>)
 8007640:	2201      	movs	r2, #1
 8007642:	701a      	strb	r2, [r3, #0]
				return;
 8007644:	e027      	b.n	8007696 <HAL_GPIO_EXTI_Callback+0x52e>
			}
			if(looper.Function == AUDIO_ONLY)
 8007646:	4b16      	ldr	r3, [pc, #88]	; (80076a0 <HAL_GPIO_EXTI_Callback+0x538>)
 8007648:	7f5b      	ldrb	r3, [r3, #29]
 800764a:	b2db      	uxtb	r3, r3
 800764c:	2b01      	cmp	r3, #1
 800764e:	d101      	bne.n	8007654 <HAL_GPIO_EXTI_Callback+0x4ec>
				pauseLoop();
 8007650:	f7fa ffc6 	bl	80025e0 <pauseLoop>
			show_status_line = TRUE;
 8007654:	4b14      	ldr	r3, [pc, #80]	; (80076a8 <HAL_GPIO_EXTI_Callback+0x540>)
 8007656:	2201      	movs	r2, #1
 8007658:	701a      	strb	r2, [r3, #0]
			break;
 800765a:	e01c      	b.n	8007696 <HAL_GPIO_EXTI_Callback+0x52e>
					return;
 800765c:	bf00      	nop
 800765e:	e01a      	b.n	8007696 <HAL_GPIO_EXTI_Callback+0x52e>
				break;
 8007660:	bf00      	nop
 8007662:	e018      	b.n	8007696 <HAL_GPIO_EXTI_Callback+0x52e>
				return;
 8007664:	bf00      	nop
 8007666:	e016      	b.n	8007696 <HAL_GPIO_EXTI_Callback+0x52e>
			break;
 8007668:	bf00      	nop
 800766a:	e014      	b.n	8007696 <HAL_GPIO_EXTI_Callback+0x52e>
				return;
 800766c:	bf00      	nop
 800766e:	e012      	b.n	8007696 <HAL_GPIO_EXTI_Callback+0x52e>
				return;
 8007670:	bf00      	nop
 8007672:	e010      	b.n	8007696 <HAL_GPIO_EXTI_Callback+0x52e>
				return;
 8007674:	bf00      	nop
 8007676:	e00e      	b.n	8007696 <HAL_GPIO_EXTI_Callback+0x52e>
				return;
 8007678:	bf00      	nop
 800767a:	e00c      	b.n	8007696 <HAL_GPIO_EXTI_Callback+0x52e>
				return;
 800767c:	bf00      	nop
 800767e:	e00a      	b.n	8007696 <HAL_GPIO_EXTI_Callback+0x52e>
				return;
 8007680:	bf00      	nop
 8007682:	e008      	b.n	8007696 <HAL_GPIO_EXTI_Callback+0x52e>
				return;
 8007684:	bf00      	nop
 8007686:	e006      	b.n	8007696 <HAL_GPIO_EXTI_Callback+0x52e>
				return;
 8007688:	bf00      	nop
 800768a:	e004      	b.n	8007696 <HAL_GPIO_EXTI_Callback+0x52e>
				return;
 800768c:	bf00      	nop
 800768e:	e002      	b.n	8007696 <HAL_GPIO_EXTI_Callback+0x52e>
				return;
 8007690:	bf00      	nop
 8007692:	e000      	b.n	8007696 <HAL_GPIO_EXTI_Callback+0x52e>
				return;
 8007694:	bf00      	nop


		}

}
 8007696:	3708      	adds	r7, #8
 8007698:	46bd      	mov	sp, r7
 800769a:	bd80      	pop	{r7, pc}
 800769c:	2000126c 	.word	0x2000126c
 80076a0:	20001228 	.word	0x20001228
 80076a4:	20000568 	.word	0x20000568
 80076a8:	20001c48 	.word	0x20001c48

080076ac <Read_Joystick_INT>:
#include "adc.h"
#include "stdlib.h"

static __IO JOYSTICK jstick;

static void Read_Joystick_INT(){
 80076ac:	b580      	push	{r7, lr}
 80076ae:	af00      	add	r7, sp, #0

	jstick.but = (HAL_GPIO_ReadPin(Joystick_SW_GPIO_Port,Joystick_SW_Pin) == GPIO_PIN_RESET);
 80076b0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80076b4:	480c      	ldr	r0, [pc, #48]	; (80076e8 <Read_Joystick_INT+0x3c>)
 80076b6:	f007 fcc1 	bl	800f03c <HAL_GPIO_ReadPin>
 80076ba:	4603      	mov	r3, r0
 80076bc:	2b00      	cmp	r3, #0
 80076be:	bf0c      	ite	eq
 80076c0:	2301      	moveq	r3, #1
 80076c2:	2300      	movne	r3, #0
 80076c4:	b2db      	uxtb	r3, r3
 80076c6:	461a      	mov	r2, r3
 80076c8:	4b08      	ldr	r3, [pc, #32]	; (80076ec <Read_Joystick_INT+0x40>)
 80076ca:	709a      	strb	r2, [r3, #2]
	jstick.xpos = (joystick_data[0] >> 3);
 80076cc:	4b08      	ldr	r3, [pc, #32]	; (80076f0 <Read_Joystick_INT+0x44>)
 80076ce:	681b      	ldr	r3, [r3, #0]
 80076d0:	08db      	lsrs	r3, r3, #3
 80076d2:	b2da      	uxtb	r2, r3
 80076d4:	4b05      	ldr	r3, [pc, #20]	; (80076ec <Read_Joystick_INT+0x40>)
 80076d6:	701a      	strb	r2, [r3, #0]
	jstick.ypos = (joystick_data[1] >> 3);
 80076d8:	4b05      	ldr	r3, [pc, #20]	; (80076f0 <Read_Joystick_INT+0x44>)
 80076da:	685b      	ldr	r3, [r3, #4]
 80076dc:	08db      	lsrs	r3, r3, #3
 80076de:	b2da      	uxtb	r2, r3
 80076e0:	4b02      	ldr	r3, [pc, #8]	; (80076ec <Read_Joystick_INT+0x40>)
 80076e2:	705a      	strb	r2, [r3, #1]
}
 80076e4:	bf00      	nop
 80076e6:	bd80      	pop	{r7, pc}
 80076e8:	40020000 	.word	0x40020000
 80076ec:	20001224 	.word	0x20001224
 80076f0:	20001c4c 	.word	0x20001c4c

080076f4 <Read_Joystick>:

JOYSTICK Read_Joystick(){
 80076f4:	b480      	push	{r7}
 80076f6:	b083      	sub	sp, #12
 80076f8:	af00      	add	r7, sp, #0
	return jstick;
 80076fa:	4a0c      	ldr	r2, [pc, #48]	; (800772c <Read_Joystick+0x38>)
 80076fc:	1d3b      	adds	r3, r7, #4
 80076fe:	6812      	ldr	r2, [r2, #0]
 8007700:	4611      	mov	r1, r2
 8007702:	8019      	strh	r1, [r3, #0]
 8007704:	3302      	adds	r3, #2
 8007706:	0c12      	lsrs	r2, r2, #16
 8007708:	701a      	strb	r2, [r3, #0]
 800770a:	2300      	movs	r3, #0
 800770c:	793a      	ldrb	r2, [r7, #4]
 800770e:	f362 0307 	bfi	r3, r2, #0, #8
 8007712:	797a      	ldrb	r2, [r7, #5]
 8007714:	f362 230f 	bfi	r3, r2, #8, #8
 8007718:	79ba      	ldrb	r2, [r7, #6]
 800771a:	f362 4317 	bfi	r3, r2, #16, #8
}
 800771e:	4618      	mov	r0, r3
 8007720:	370c      	adds	r7, #12
 8007722:	46bd      	mov	sp, r7
 8007724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007728:	4770      	bx	lr
 800772a:	bf00      	nop
 800772c:	20001224 	.word	0x20001224

08007730 <Update_Joystick>:

BOOL Movement_X(){
	return jstick.xpos != CENTER;
}

void Update_Joystick(){
 8007730:	b580      	push	{r7, lr}
 8007732:	af00      	add	r7, sp, #0
	Read_Joystick_INT();
 8007734:	f7ff ffba 	bl	80076ac <Read_Joystick_INT>
}
 8007738:	bf00      	nop
 800773a:	bd80      	pop	{r7, pc}

0800773c <Active_Joystick>:

BOOL Active_Joystick(){
 800773c:	b480      	push	{r7}
 800773e:	af00      	add	r7, sp, #0
	return (jstick.xpos != CENTER || jstick.ypos != CENTER || jstick.but != FALSE);
 8007740:	4b0b      	ldr	r3, [pc, #44]	; (8007770 <Active_Joystick+0x34>)
 8007742:	781b      	ldrb	r3, [r3, #0]
 8007744:	b2db      	uxtb	r3, r3
 8007746:	2b04      	cmp	r3, #4
 8007748:	d109      	bne.n	800775e <Active_Joystick+0x22>
 800774a:	4b09      	ldr	r3, [pc, #36]	; (8007770 <Active_Joystick+0x34>)
 800774c:	785b      	ldrb	r3, [r3, #1]
 800774e:	b2db      	uxtb	r3, r3
 8007750:	2b04      	cmp	r3, #4
 8007752:	d104      	bne.n	800775e <Active_Joystick+0x22>
 8007754:	4b06      	ldr	r3, [pc, #24]	; (8007770 <Active_Joystick+0x34>)
 8007756:	789b      	ldrb	r3, [r3, #2]
 8007758:	b2db      	uxtb	r3, r3
 800775a:	2b00      	cmp	r3, #0
 800775c:	d001      	beq.n	8007762 <Active_Joystick+0x26>
 800775e:	2301      	movs	r3, #1
 8007760:	e000      	b.n	8007764 <Active_Joystick+0x28>
 8007762:	2300      	movs	r3, #0
 8007764:	b2db      	uxtb	r3, r3
}
 8007766:	4618      	mov	r0, r3
 8007768:	46bd      	mov	sp, r7
 800776a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776e:	4770      	bx	lr
 8007770:	20001224 	.word	0x20001224

08007774 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007774:	b580      	push	{r7, lr}
 8007776:	b088      	sub	sp, #32
 8007778:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

	uint32_t data = 0,bytesWritten = 0;
 800777a:	2300      	movs	r3, #0
 800777c:	61fb      	str	r3, [r7, #28]
 800777e:	2300      	movs	r3, #0
 8007780:	61bb      	str	r3, [r7, #24]
	HAL_StatusTypeDef status;
	uint8_t at45db[20];


	CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 8007782:	4b75      	ldr	r3, [pc, #468]	; (8007958 <main+0x1e4>)
 8007784:	68db      	ldr	r3, [r3, #12]
 8007786:	4a74      	ldr	r2, [pc, #464]	; (8007958 <main+0x1e4>)
 8007788:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800778c:	60d3      	str	r3, [r2, #12]
	DWT->CYCCNT = 0;
 800778e:	4b73      	ldr	r3, [pc, #460]	; (800795c <main+0x1e8>)
 8007790:	2200      	movs	r2, #0
 8007792:	605a      	str	r2, [r3, #4]
	DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 8007794:	4b71      	ldr	r3, [pc, #452]	; (800795c <main+0x1e8>)
 8007796:	681b      	ldr	r3, [r3, #0]
 8007798:	4a70      	ldr	r2, [pc, #448]	; (800795c <main+0x1e8>)
 800779a:	f043 0301 	orr.w	r3, r3, #1
 800779e:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80077a0:	f005 fbe0 	bl	800cf64 <HAL_Init>

  /* USER CODE BEGIN Init */
  looper.Function = IDLE;
 80077a4:	4b6e      	ldr	r3, [pc, #440]	; (8007960 <main+0x1ec>)
 80077a6:	2200      	movs	r2, #0
 80077a8:	775a      	strb	r2, [r3, #29]
  looper.TwoChannels = FALSE;
 80077aa:	4b6d      	ldr	r3, [pc, #436]	; (8007960 <main+0x1ec>)
 80077ac:	2200      	movs	r2, #0
 80077ae:	70da      	strb	r2, [r3, #3]
  looper.ch1.Active = TRUE;
 80077b0:	4a6b      	ldr	r2, [pc, #428]	; (8007960 <main+0x1ec>)
 80077b2:	f892 3020 	ldrb.w	r3, [r2, #32]
 80077b6:	f043 0301 	orr.w	r3, r3, #1
 80077ba:	f882 3020 	strb.w	r3, [r2, #32]
  looper.ch1.Monitor = FALSE;
 80077be:	4a68      	ldr	r2, [pc, #416]	; (8007960 <main+0x1ec>)
 80077c0:	f892 3020 	ldrb.w	r3, [r2, #32]
 80077c4:	f36f 0341 	bfc	r3, #1, #1
 80077c8:	f882 3020 	strb.w	r3, [r2, #32]
  looper.ch2.Active = FALSE;
 80077cc:	4a64      	ldr	r2, [pc, #400]	; (8007960 <main+0x1ec>)
 80077ce:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80077d2:	f36f 0300 	bfc	r3, #0, #1
 80077d6:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
  looper.ch2.Monitor = FALSE;
 80077da:	4a61      	ldr	r2, [pc, #388]	; (8007960 <main+0x1ec>)
 80077dc:	f892 3030 	ldrb.w	r3, [r2, #48]	; 0x30
 80077e0:	f36f 0341 	bfc	r3, #1, #1
 80077e4:	f882 3030 	strb.w	r3, [r2, #48]	; 0x30
  looper.timeIncrement = 0;
 80077e8:	4b5d      	ldr	r3, [pc, #372]	; (8007960 <main+0x1ec>)
 80077ea:	2200      	movs	r2, #0
 80077ec:	641a      	str	r2, [r3, #64]	; 0x40
  looper.SampleBytes = 2;
 80077ee:	4b5c      	ldr	r3, [pc, #368]	; (8007960 <main+0x1ec>)
 80077f0:	2202      	movs	r2, #2
 80077f2:	611a      	str	r2, [r3, #16]
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80077f4:	f000 f8ca 	bl	800798c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80077f8:	f7ff fa40 	bl	8006c7c <MX_GPIO_Init>
  MX_DMA_Init();
 80077fc:	f7fb f9b4 	bl	8002b68 <MX_DMA_Init>
  MX_TIM2_Init();
 8007800:	f004 fae0 	bl	800bdc4 <MX_TIM2_Init>
  MX_FMC_Init();
 8007804:	f7ff f950 	bl	8006aa8 <MX_FMC_Init>
  MX_TIM4_Init();
 8007808:	f004 fb28 	bl	800be5c <MX_TIM4_Init>
  MX_SPI3_Init();
 800780c:	f002 fd1e 	bl	800a24c <MX_SPI3_Init>
  MX_USART1_UART_Init();
 8007810:	f005 fb0a 	bl	800ce28 <MX_USART1_UART_Init>
  MX_SPI5_Init();
 8007814:	f002 fd50 	bl	800a2b8 <MX_SPI5_Init>
  MX_DAC_Init();
 8007818:	f7fa ff50 	bl	80026bc <MX_DAC_Init>
  MX_TIM8_Init();
 800781c:	f004 fb6c 	bl	800bef8 <MX_TIM8_Init>
  MX_USB_DEVICE_Init();
 8007820:	f00f f9f0 	bl	8016c04 <MX_USB_DEVICE_Init>
  MX_TIM9_Init();
 8007824:	f004 fbb8 	bl	800bf98 <MX_TIM9_Init>
  MX_ADC3_Init();
 8007828:	f7f9 ff20 	bl	800166c <MX_ADC3_Init>
  MX_ADC1_Init();
 800782c:	f7f9 feca 	bl	80015c4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  sFLASH_Init();
 8007830:	f002 fe90 	bl	800a554 <sFLASH_Init>
  my_spiffs_mount();
 8007834:	f000 f946 	bl	8007ac4 <my_spiffs_mount>
  BSP_SDRAM_Init();
 8007838:	f003 ff3e 	bl	800b6b8 <BSP_SDRAM_Init>
  HAL_NVIC_DisableIRQ(EXTI2_IRQn);
 800783c:	2008      	movs	r0, #8
 800783e:	f006 fb6e 	bl	800df1e <HAL_NVIC_DisableIRQ>
  //HAL_GPIO_WritePin(GPIOC,GPIO_PIN_1,GPIO_PIN_SET);
  TM_ILI9341_Init();
 8007842:	f004 fe33 	bl	800c4ac <TM_ILI9341_Init>
  //Rotate LCD for 90 degrees
  TM_ILI9341_Rotate(TM_ILI9341_Orientation_Landscape_1);
 8007846:	2002      	movs	r0, #2
 8007848:	f005 f90a 	bl	800ca60 <TM_ILI9341_Rotate>
  //FIll lcd with color
  TM_ILI9341_Fill(ILI9341_COLOR_MAGENTA);
 800784c:	f24a 2054 	movw	r0, #41556	; 0xa254
 8007850:	f005 f848 	bl	800c8e4 <TM_ILI9341_Fill>

  status = HAL_TIM_Base_Start_IT(&htim9);
 8007854:	4843      	ldr	r0, [pc, #268]	; (8007964 <main+0x1f0>)
 8007856:	f00a fc87 	bl	8012168 <HAL_TIM_Base_Start_IT>
 800785a:	4603      	mov	r3, r0
 800785c:	75fb      	strb	r3, [r7, #23]

  BSP_LED_Init(LED_GREEN);
 800785e:	2000      	movs	r0, #0
 8007860:	f003 fe4c 	bl	800b4fc <BSP_LED_Init>
  BSP_LED_Init(LED_RED);
 8007864:	2001      	movs	r0, #1
 8007866:	f003 fe49 	bl	800b4fc <BSP_LED_Init>
  BSP_PB_Init(BUTTON_KEY, BUTTON_MODE_EXTI);
 800786a:	2101      	movs	r1, #1
 800786c:	2000      	movs	r0, #0
 800786e:	f003 fecd 	bl	800b60c <BSP_PB_Init>

  status = HAL_TIM_Base_Start_IT(&htim4);
 8007872:	483d      	ldr	r0, [pc, #244]	; (8007968 <main+0x1f4>)
 8007874:	f00a fc78 	bl	8012168 <HAL_TIM_Base_Start_IT>
 8007878:	4603      	mov	r3, r0
 800787a:	75fb      	strb	r3, [r7, #23]
  status = HAL_ADC_Start_IT(&hadc1);
 800787c:	483b      	ldr	r0, [pc, #236]	; (800796c <main+0x1f8>)
 800787e:	f005 fc4b 	bl	800d118 <HAL_ADC_Start_IT>
 8007882:	4603      	mov	r3, r0
 8007884:	75fb      	strb	r3, [r7, #23]

  status = HAL_ADC_Start_DMA(&hadc3,joystick_data,2);
 8007886:	2202      	movs	r2, #2
 8007888:	4939      	ldr	r1, [pc, #228]	; (8007970 <main+0x1fc>)
 800788a:	483a      	ldr	r0, [pc, #232]	; (8007974 <main+0x200>)
 800788c:	f005 fe32 	bl	800d4f4 <HAL_ADC_Start_DMA>
 8007890:	4603      	mov	r3, r0
 8007892:	75fb      	strb	r3, [r7, #23]

  ADS1256_WriteCmd(CMD_RESET);
 8007894:	20fe      	movs	r0, #254	; 0xfe
 8007896:	f7fa f8ef 	bl	8001a78 <ADS1256_WriteCmd>
  ADS1256_WriteCmd(CMD_SDATAC);
 800789a:	200f      	movs	r0, #15
 800789c:	f7fa f8ec 	bl	8001a78 <ADS1256_WriteCmd>
  data = ADS1256_ReadChipID();
 80078a0:	f7fa f906 	bl	8001ab0 <ADS1256_ReadChipID>
 80078a4:	4603      	mov	r3, r0
 80078a6:	61fb      	str	r3, [r7, #28]


  ADS1256_CfgADC(ADS1256_GAIN_2, ADS1256_15000SPS);
 80078a8:	2101      	movs	r1, #1
 80078aa:	2001      	movs	r0, #1
 80078ac:	f7fa f82a 	bl	8001904 <ADS1256_CfgADC>
  ADS1256_SetDiffChannel(0);
 80078b0:	2000      	movs	r0, #0
 80078b2:	f7fa f90e 	bl	8001ad2 <ADS1256_SetDiffChannel>
  ADS1256_WriteCmd(CMD_SELFCAL);
 80078b6:	20f0      	movs	r0, #240	; 0xf0
 80078b8:	f7fa f8de 	bl	8001a78 <ADS1256_WriteCmd>
  ADS1256_WriteCmd(CMD_SELFOCAL);
 80078bc:	20f1      	movs	r0, #241	; 0xf1
 80078be:	f7fa f8db 	bl	8001a78 <ADS1256_WriteCmd>

  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80078c2:	2008      	movs	r0, #8
 80078c4:	f006 fb1d 	bl	800df02 <HAL_NVIC_EnableIRQ>
  ADS1256_WriteCmd(CMD_RDATAC);
 80078c8:	2003      	movs	r0, #3
 80078ca:	f7fa f8d5 	bl	8001a78 <ADS1256_WriteCmd>
  //FATFS_UnLinkDriver(SD_Path);
  TM_KEYPAD_Init();
 80078ce:	f005 fa2f 	bl	800cd30 <TM_KEYPAD_Init>

  setupMidi();
 80078d2:	f002 fc0f 	bl	800a0f4 <setupMidi>
  talkMIDI(0xB0, 0, 0x01); //Default bank GM1
 80078d6:	2201      	movs	r2, #1
 80078d8:	2100      	movs	r1, #0
 80078da:	20b0      	movs	r0, #176	; 0xb0
 80078dc:	f002 fc52 	bl	800a184 <talkMIDI>

  TM_HD44780_Init(20, 4);
 80078e0:	2104      	movs	r1, #4
 80078e2:	2014      	movs	r0, #20
 80078e4:	f004 fc10 	bl	800c108 <TM_HD44780_Init>
  TM_HD44780_Clear();
 80078e8:	f004 fc74 	bl	800c1d4 <TM_HD44780_Clear>
  TM_HD44780_Puts(0,0,"Looper");
 80078ec:	4a22      	ldr	r2, [pc, #136]	; (8007978 <main+0x204>)
 80078ee:	2100      	movs	r1, #0
 80078f0:	2000      	movs	r0, #0
 80078f2:	f004 fc7b 	bl	800c1ec <TM_HD44780_Puts>

  InitSRAM();
 80078f6:	f7f9 fd15 	bl	8001324 <InitSRAM>
  menuInit();
 80078fa:	f000 ff05 	bl	8008708 <menuInit>
  menuShow(0);
 80078fe:	2000      	movs	r0, #0
 8007900:	f000 ffcc 	bl	800889c <menuShow>

  // TODO: write initial rhythm header to SRAM
  SRAM_seekWrite(0,SRAM_SET);
 8007904:	2100      	movs	r1, #0
 8007906:	2000      	movs	r0, #0
 8007908:	f7f9 faf2 	bl	8000ef0 <SRAM_seekWrite>
  writeSRAM((unsigned char *)"\0\0\0\0\0\0\0\0\0\0\0\0",12);
 800790c:	210c      	movs	r1, #12
 800790e:	481b      	ldr	r0, [pc, #108]	; (800797c <main+0x208>)
 8007910:	f7f9 fb86 	bl	8001020 <writeSRAM>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (TRUE)
  {
	  checkSD();
 8007914:	f000 fb24 	bl	8007f60 <checkSD>
	  if(Skip_Read_Button == FALSE)
 8007918:	4b19      	ldr	r3, [pc, #100]	; (8007980 <main+0x20c>)
 800791a:	781b      	ldrb	r3, [r3, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d105      	bne.n	800792c <main+0x1b8>
		  Keypad_Button = TM_KEYPAD_Read();
 8007920:	f005 fa1e 	bl	800cd60 <TM_KEYPAD_Read>
 8007924:	4603      	mov	r3, r0
 8007926:	461a      	mov	r2, r3
 8007928:	4b16      	ldr	r3, [pc, #88]	; (8007984 <main+0x210>)
 800792a:	701a      	strb	r2, [r3, #0]
	  Skip_Read_Button = FALSE;
 800792c:	4b14      	ldr	r3, [pc, #80]	; (8007980 <main+0x20c>)
 800792e:	2200      	movs	r2, #0
 8007930:	701a      	strb	r2, [r3, #0]
	  /* Keypad was pressed */
	  if (Keypad_Button != TM_KEYPAD_Button_NOPRESSED) {/* Keypad is pressed */
 8007932:	4b14      	ldr	r3, [pc, #80]	; (8007984 <main+0x210>)
 8007934:	781b      	ldrb	r3, [r3, #0]
 8007936:	2bff      	cmp	r3, #255	; 0xff
 8007938:	d004      	beq.n	8007944 <main+0x1d0>
		  menuShow(Keypad_Button);
 800793a:	4b12      	ldr	r3, [pc, #72]	; (8007984 <main+0x210>)
 800793c:	781b      	ldrb	r3, [r3, #0]
 800793e:	4618      	mov	r0, r3
 8007940:	f000 ffac 	bl	800889c <menuShow>

	  }// end of key pressed

	  SHOW_STATUS_LINE();
 8007944:	4b10      	ldr	r3, [pc, #64]	; (8007988 <main+0x214>)
 8007946:	781b      	ldrb	r3, [r3, #0]
 8007948:	2b01      	cmp	r3, #1
 800794a:	d1e3      	bne.n	8007914 <main+0x1a0>
 800794c:	f001 f816 	bl	800897c <menuShowStatus>
 8007950:	4b0d      	ldr	r3, [pc, #52]	; (8007988 <main+0x214>)
 8007952:	2200      	movs	r2, #0
 8007954:	701a      	strb	r2, [r3, #0]
	  checkSD();
 8007956:	e7dd      	b.n	8007914 <main+0x1a0>
 8007958:	e000edf0 	.word	0xe000edf0
 800795c:	e0001000 	.word	0xe0001000
 8007960:	20001228 	.word	0x20001228
 8007964:	2000235c 	.word	0x2000235c
 8007968:	200022cc 	.word	0x200022cc
 800796c:	200003a4 	.word	0x200003a4
 8007970:	20001c4c 	.word	0x20001c4c
 8007974:	200003ec 	.word	0x200003ec
 8007978:	08018d0c 	.word	0x08018d0c
 800797c:	08018d14 	.word	0x08018d14
 8007980:	20001c47 	.word	0x20001c47
 8007984:	20001c45 	.word	0x20001c45
 8007988:	20001c48 	.word	0x20001c48

0800798c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b094      	sub	sp, #80	; 0x50
 8007990:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007992:	f107 0320 	add.w	r3, r7, #32
 8007996:	2230      	movs	r2, #48	; 0x30
 8007998:	2100      	movs	r1, #0
 800799a:	4618      	mov	r0, r3
 800799c:	f00f fe8e 	bl	80176bc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80079a0:	f107 030c 	add.w	r3, r7, #12
 80079a4:	2200      	movs	r2, #0
 80079a6:	601a      	str	r2, [r3, #0]
 80079a8:	605a      	str	r2, [r3, #4]
 80079aa:	609a      	str	r2, [r3, #8]
 80079ac:	60da      	str	r2, [r3, #12]
 80079ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80079b0:	2300      	movs	r3, #0
 80079b2:	60bb      	str	r3, [r7, #8]
 80079b4:	4b28      	ldr	r3, [pc, #160]	; (8007a58 <SystemClock_Config+0xcc>)
 80079b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b8:	4a27      	ldr	r2, [pc, #156]	; (8007a58 <SystemClock_Config+0xcc>)
 80079ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079be:	6413      	str	r3, [r2, #64]	; 0x40
 80079c0:	4b25      	ldr	r3, [pc, #148]	; (8007a58 <SystemClock_Config+0xcc>)
 80079c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079c8:	60bb      	str	r3, [r7, #8]
 80079ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80079cc:	2300      	movs	r3, #0
 80079ce:	607b      	str	r3, [r7, #4]
 80079d0:	4b22      	ldr	r3, [pc, #136]	; (8007a5c <SystemClock_Config+0xd0>)
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a21      	ldr	r2, [pc, #132]	; (8007a5c <SystemClock_Config+0xd0>)
 80079d6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80079da:	6013      	str	r3, [r2, #0]
 80079dc:	4b1f      	ldr	r3, [pc, #124]	; (8007a5c <SystemClock_Config+0xd0>)
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80079e4:	607b      	str	r3, [r7, #4]
 80079e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80079e8:	2301      	movs	r3, #1
 80079ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80079ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80079f0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80079f2:	2302      	movs	r3, #2
 80079f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80079f6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80079fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80079fc:	2304      	movs	r3, #4
 80079fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8007a00:	23a8      	movs	r3, #168	; 0xa8
 8007a02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007a04:	2302      	movs	r3, #2
 8007a06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8007a08:	2307      	movs	r3, #7
 8007a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007a0c:	f107 0320 	add.w	r3, r7, #32
 8007a10:	4618      	mov	r0, r3
 8007a12:	f008 fdf5 	bl	8010600 <HAL_RCC_OscConfig>
 8007a16:	4603      	mov	r3, r0
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d001      	beq.n	8007a20 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007a1c:	f000 f8b2 	bl	8007b84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007a20:	230f      	movs	r3, #15
 8007a22:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007a24:	2302      	movs	r3, #2
 8007a26:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007a28:	2300      	movs	r3, #0
 8007a2a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007a2c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007a30:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007a32:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007a36:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007a38:	f107 030c 	add.w	r3, r7, #12
 8007a3c:	2105      	movs	r1, #5
 8007a3e:	4618      	mov	r0, r3
 8007a40:	f009 f856 	bl	8010af0 <HAL_RCC_ClockConfig>
 8007a44:	4603      	mov	r3, r0
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d001      	beq.n	8007a4e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8007a4a:	f000 f89b 	bl	8007b84 <Error_Handler>
  }
}
 8007a4e:	bf00      	nop
 8007a50:	3750      	adds	r7, #80	; 0x50
 8007a52:	46bd      	mov	sp, r7
 8007a54:	bd80      	pop	{r7, pc}
 8007a56:	bf00      	nop
 8007a58:	40023800 	.word	0x40023800
 8007a5c:	40007000 	.word	0x40007000

08007a60 <my_spiffs_read>:

/* USER CODE BEGIN 4 */
static s32_t my_spiffs_read(u32_t addr, u32_t size, u8_t *dst) {
 8007a60:	b580      	push	{r7, lr}
 8007a62:	b084      	sub	sp, #16
 8007a64:	af00      	add	r7, sp, #0
 8007a66:	60f8      	str	r0, [r7, #12]
 8007a68:	60b9      	str	r1, [r7, #8]
 8007a6a:	607a      	str	r2, [r7, #4]
    sFLASH_ReadBuffer(dst,addr,size);
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	b29b      	uxth	r3, r3
 8007a70:	461a      	mov	r2, r3
 8007a72:	68f9      	ldr	r1, [r7, #12]
 8007a74:	6878      	ldr	r0, [r7, #4]
 8007a76:	f002 ff03 	bl	800a880 <sFLASH_ReadBuffer>
    return SPIFFS_OK;
 8007a7a:	2300      	movs	r3, #0
  }
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3710      	adds	r7, #16
 8007a80:	46bd      	mov	sp, r7
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <my_spiffs_write>:

  static s32_t my_spiffs_write(u32_t addr, u32_t size, u8_t *src) {
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	60f8      	str	r0, [r7, #12]
 8007a8c:	60b9      	str	r1, [r7, #8]
 8007a8e:	607a      	str	r2, [r7, #4]
	sFLASH_WriteBuffer(src,addr,size);
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	b29b      	uxth	r3, r3
 8007a94:	461a      	mov	r2, r3
 8007a96:	68f9      	ldr	r1, [r7, #12]
 8007a98:	6878      	ldr	r0, [r7, #4]
 8007a9a:	f002 fe47 	bl	800a72c <sFLASH_WriteBuffer>
    return SPIFFS_OK;
 8007a9e:	2300      	movs	r3, #0
  }
 8007aa0:	4618      	mov	r0, r3
 8007aa2:	3710      	adds	r7, #16
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	bd80      	pop	{r7, pc}

08007aa8 <my_spiffs_erase>:

  static s32_t my_spiffs_erase(u32_t addr, u32_t size) {
 8007aa8:	b580      	push	{r7, lr}
 8007aaa:	b082      	sub	sp, #8
 8007aac:	af00      	add	r7, sp, #0
 8007aae:	6078      	str	r0, [r7, #4]
 8007ab0:	6039      	str	r1, [r7, #0]

    return sFLASH_Erase(addr, size);
 8007ab2:	6839      	ldr	r1, [r7, #0]
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f002 fd5b 	bl	800a570 <sFLASH_Erase>
 8007aba:	4603      	mov	r3, r0
  }
 8007abc:	4618      	mov	r0, r3
 8007abe:	3708      	adds	r7, #8
 8007ac0:	46bd      	mov	sp, r7
 8007ac2:	bd80      	pop	{r7, pc}

08007ac4 <my_spiffs_mount>:

void my_spiffs_mount() {
 8007ac4:	b580      	push	{r7, lr}
 8007ac6:	b08e      	sub	sp, #56	; 0x38
 8007ac8:	af04      	add	r7, sp, #16
    spiffs_config cfg;
    cfg.phys_size = N25Q256A_FLASH_SIZE; // use all spi flash
 8007aca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ace:	613b      	str	r3, [r7, #16]
    cfg.phys_addr = 0; // start spiffs at start of spi flash
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	617b      	str	r3, [r7, #20]
    cfg.phys_erase_block = N25Q256A_SECTOR_SIZE; // according to datasheet
 8007ad4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007ad8:	61bb      	str	r3, [r7, #24]
    cfg.log_block_size = N25Q256A_SECTOR_SIZE; // let us not complicate things
 8007ada:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007ade:	61fb      	str	r3, [r7, #28]
    cfg.log_page_size = N25Q256A_PAGE_SIZE; // as we said
 8007ae0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007ae4:	623b      	str	r3, [r7, #32]

    cfg.hal_read_f = my_spiffs_read;
 8007ae6:	4b0f      	ldr	r3, [pc, #60]	; (8007b24 <my_spiffs_mount+0x60>)
 8007ae8:	607b      	str	r3, [r7, #4]
    cfg.hal_write_f = my_spiffs_write;
 8007aea:	4b0f      	ldr	r3, [pc, #60]	; (8007b28 <my_spiffs_mount+0x64>)
 8007aec:	60bb      	str	r3, [r7, #8]
    cfg.hal_erase_f = my_spiffs_erase;
 8007aee:	4b0f      	ldr	r3, [pc, #60]	; (8007b2c <my_spiffs_mount+0x68>)
 8007af0:	60fb      	str	r3, [r7, #12]

    int res = SPIFFS_mount(&fs,
 8007af2:	1d39      	adds	r1, r7, #4
 8007af4:	2300      	movs	r3, #0
 8007af6:	9303      	str	r3, [sp, #12]
 8007af8:	f44f 6390 	mov.w	r3, #1152	; 0x480
 8007afc:	9302      	str	r3, [sp, #8]
 8007afe:	4b0c      	ldr	r3, [pc, #48]	; (8007b30 <my_spiffs_mount+0x6c>)
 8007b00:	9301      	str	r3, [sp, #4]
 8007b02:	2380      	movs	r3, #128	; 0x80
 8007b04:	9300      	str	r3, [sp, #0]
 8007b06:	4b0b      	ldr	r3, [pc, #44]	; (8007b34 <my_spiffs_mount+0x70>)
 8007b08:	4a0b      	ldr	r2, [pc, #44]	; (8007b38 <my_spiffs_mount+0x74>)
 8007b0a:	480c      	ldr	r0, [pc, #48]	; (8007b3c <my_spiffs_mount+0x78>)
 8007b0c:	f003 f9d2 	bl	800aeb4 <SPIFFS_mount>
 8007b10:	6278      	str	r0, [r7, #36]	; 0x24
      spiffs_fds,
      sizeof(spiffs_fds),
      spiffs_cache_buf,
      sizeof(spiffs_cache_buf),
      0);
    printf("mount res: %i\n", res);
 8007b12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8007b14:	480a      	ldr	r0, [pc, #40]	; (8007b40 <my_spiffs_mount+0x7c>)
 8007b16:	f00f feb9 	bl	801788c <iprintf>
  }
 8007b1a:	bf00      	nop
 8007b1c:	3728      	adds	r7, #40	; 0x28
 8007b1e:	46bd      	mov	sp, r7
 8007b20:	bd80      	pop	{r7, pc}
 8007b22:	bf00      	nop
 8007b24:	08007a61 	.word	0x08007a61
 8007b28:	08007a85 	.word	0x08007a85
 8007b2c:	08007aa9 	.word	0x08007aa9
 8007b30:	200017c4 	.word	0x200017c4
 8007b34:	20001744 	.word	0x20001744
 8007b38:	20001544 	.word	0x20001544
 8007b3c:	200014c4 	.word	0x200014c4
 8007b40:	08018d24 	.word	0x08018d24

08007b44 <set_function>:

	if(IS_BUT_DOWN(BUT_JOYSTICK) && HAL_GPIO_ReadPin(Joystick_SW_GPIO_Port,Joystick_SW_Pin) == GPIO_PIN_SET )
			BUT_UP(BUT_JOYSTICK);
}

void set_function(FUNCTION fun){
 8007b44:	b480      	push	{r7}
 8007b46:	b083      	sub	sp, #12
 8007b48:	af00      	add	r7, sp, #0
 8007b4a:	4603      	mov	r3, r0
 8007b4c:	71fb      	strb	r3, [r7, #7]
	if(looper.Function != fun){
 8007b4e:	4b0a      	ldr	r3, [pc, #40]	; (8007b78 <set_function+0x34>)
 8007b50:	7f5b      	ldrb	r3, [r3, #29]
 8007b52:	b2db      	uxtb	r3, r3
 8007b54:	79fa      	ldrb	r2, [r7, #7]
 8007b56:	429a      	cmp	r2, r3
 8007b58:	d005      	beq.n	8007b66 <set_function+0x22>
		looper.Function = fun;
 8007b5a:	4a07      	ldr	r2, [pc, #28]	; (8007b78 <set_function+0x34>)
 8007b5c:	79fb      	ldrb	r3, [r7, #7]
 8007b5e:	7753      	strb	r3, [r2, #29]
		show_status_line = TRUE;
 8007b60:	4b06      	ldr	r3, [pc, #24]	; (8007b7c <set_function+0x38>)
 8007b62:	2201      	movs	r2, #1
 8007b64:	701a      	strb	r2, [r3, #0]
	}
	saveFunction = fun;
 8007b66:	4a06      	ldr	r2, [pc, #24]	; (8007b80 <set_function+0x3c>)
 8007b68:	79fb      	ldrb	r3, [r7, #7]
 8007b6a:	7013      	strb	r3, [r2, #0]
}
 8007b6c:	bf00      	nop
 8007b6e:	370c      	adds	r7, #12
 8007b70:	46bd      	mov	sp, r7
 8007b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b76:	4770      	bx	lr
 8007b78:	20001228 	.word	0x20001228
 8007b7c:	20001c48 	.word	0x20001c48
 8007b80:	20001c46 	.word	0x20001c46

08007b84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007b84:	b480      	push	{r7}
 8007b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1) 
 8007b88:	e7fe      	b.n	8007b88 <Error_Handler+0x4>
	...

08007b8c <HAL_DACEx_ConvCpltCallbackCh2>:
static UINT bytes_written;
__IO int16_t note;
extern uint32_t sdram_pointer;
extern TM_KEYPAD_Button_t Keypad_Button;

void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef* hdac){
 8007b8c:	b480      	push	{r7}
 8007b8e:	b083      	sub	sp, #12
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
	need_new_data = TRUE;
 8007b94:	4b05      	ldr	r3, [pc, #20]	; (8007bac <HAL_DACEx_ConvCpltCallbackCh2+0x20>)
 8007b96:	2201      	movs	r2, #1
 8007b98:	701a      	strb	r2, [r3, #0]
	play_buffer = 0;
 8007b9a:	4b05      	ldr	r3, [pc, #20]	; (8007bb0 <HAL_DACEx_ConvCpltCallbackCh2+0x24>)
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	701a      	strb	r2, [r3, #0]
	return;
 8007ba0:	bf00      	nop
}
 8007ba2:	370c      	adds	r7, #12
 8007ba4:	46bd      	mov	sp, r7
 8007ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007baa:	4770      	bx	lr
 8007bac:	20001c55 	.word	0x20001c55
 8007bb0:	20001c54 	.word	0x20001c54

08007bb4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:

void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef* hdac){
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
 8007bba:	6078      	str	r0, [r7, #4]
	need_new_data = TRUE;
 8007bbc:	4b05      	ldr	r3, [pc, #20]	; (8007bd4 <HAL_DACEx_ConvHalfCpltCallbackCh2+0x20>)
 8007bbe:	2201      	movs	r2, #1
 8007bc0:	701a      	strb	r2, [r3, #0]
	play_buffer = 1;
 8007bc2:	4b05      	ldr	r3, [pc, #20]	; (8007bd8 <HAL_DACEx_ConvHalfCpltCallbackCh2+0x24>)
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	701a      	strb	r2, [r3, #0]
	return;
 8007bc8:	bf00      	nop
}
 8007bca:	370c      	adds	r7, #12
 8007bcc:	46bd      	mov	sp, r7
 8007bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bd2:	4770      	bx	lr
 8007bd4:	20001c55 	.word	0x20001c55
 8007bd8:	20001c54 	.word	0x20001c54

08007bdc <SD_readSingleTrack>:


void SD_readSingleTrack(FIL *fp){
 8007bdc:	b580      	push	{r7, lr}
 8007bde:	b084      	sub	sp, #16
 8007be0:	af02      	add	r7, sp, #8
 8007be2:	6078      	str	r0, [r7, #4]

	f_read(fp,(uint8_t *)audio_buf,WORD_SIZE,&bytes_read);
 8007be4:	4b53      	ldr	r3, [pc, #332]	; (8007d34 <SD_readSingleTrack+0x158>)
 8007be6:	2280      	movs	r2, #128	; 0x80
 8007be8:	4953      	ldr	r1, [pc, #332]	; (8007d38 <SD_readSingleTrack+0x15c>)
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f7fd ffa8 	bl	8005b40 <f_read>
	f_read(fp,(uint8_t *)audio_buf + WORD_SIZE,WORD_SIZE,&bytes_read);
 8007bf0:	4952      	ldr	r1, [pc, #328]	; (8007d3c <SD_readSingleTrack+0x160>)
 8007bf2:	4b50      	ldr	r3, [pc, #320]	; (8007d34 <SD_readSingleTrack+0x158>)
 8007bf4:	2280      	movs	r2, #128	; 0x80
 8007bf6:	6878      	ldr	r0, [r7, #4]
 8007bf8:	f7fd ffa2 	bl	8005b40 <f_read>
	signed16_unsigned12(audio_buf,0,WORD_SIZE);
 8007bfc:	2280      	movs	r2, #128	; 0x80
 8007bfe:	2100      	movs	r1, #0
 8007c00:	484d      	ldr	r0, [pc, #308]	; (8007d38 <SD_readSingleTrack+0x15c>)
 8007c02:	f7fa f91f 	bl	8001e44 <signed16_unsigned12>
	play_buffer = 0;
 8007c06:	4b4e      	ldr	r3, [pc, #312]	; (8007d40 <SD_readSingleTrack+0x164>)
 8007c08:	2200      	movs	r2, #0
 8007c0a:	701a      	strb	r2, [r3, #0]
	word_count = 0;
 8007c0c:	4b4d      	ldr	r3, [pc, #308]	; (8007d44 <SD_readSingleTrack+0x168>)
 8007c0e:	2200      	movs	r2, #0
 8007c10:	601a      	str	r2, [r3, #0]
	need_new_data = FALSE;
 8007c12:	4b4d      	ldr	r3, [pc, #308]	; (8007d48 <SD_readSingleTrack+0x16c>)
 8007c14:	2200      	movs	r2, #0
 8007c16:	701a      	strb	r2, [r3, #0]
	while(looper.Function != PLAY_SD)	// wait for function switch
 8007c18:	e000      	b.n	8007c1c <SD_readSingleTrack+0x40>
		 continue;
 8007c1a:	bf00      	nop
	while(looper.Function != PLAY_SD)	// wait for function switch
 8007c1c:	4b4b      	ldr	r3, [pc, #300]	; (8007d4c <SD_readSingleTrack+0x170>)
 8007c1e:	7f5b      	ldrb	r3, [r3, #29]
 8007c20:	b2db      	uxtb	r3, r3
 8007c22:	2b06      	cmp	r3, #6
 8007c24:	d1f9      	bne.n	8007c1a <SD_readSingleTrack+0x3e>


	HAL_DAC_Start(&hdac,DAC_CHANNEL_2);
 8007c26:	2110      	movs	r1, #16
 8007c28:	4849      	ldr	r0, [pc, #292]	; (8007d50 <SD_readSingleTrack+0x174>)
 8007c2a:	f006 f9b4 	bl	800df96 <HAL_DAC_Start>
	HAL_DAC_Start_DMA(&hdac,DAC_CHANNEL_2,(uint32_t*)audio_buf,WORD_SIZE,DAC_ALIGN_12B_R);
 8007c2e:	2300      	movs	r3, #0
 8007c30:	9300      	str	r3, [sp, #0]
 8007c32:	2380      	movs	r3, #128	; 0x80
 8007c34:	4a40      	ldr	r2, [pc, #256]	; (8007d38 <SD_readSingleTrack+0x15c>)
 8007c36:	2110      	movs	r1, #16
 8007c38:	4845      	ldr	r0, [pc, #276]	; (8007d50 <SD_readSingleTrack+0x174>)
 8007c3a:	f006 fa1b 	bl	800e074 <HAL_DAC_Start_DMA>
	HAL_TIM_Base_Start_IT(&htim8);
 8007c3e:	4845      	ldr	r0, [pc, #276]	; (8007d54 <SD_readSingleTrack+0x178>)
 8007c40:	f00a fa92 	bl	8012168 <HAL_TIM_Base_Start_IT>

	while(looper.Function == PLAY_SD){
 8007c44:	e06a      	b.n	8007d1c <SD_readSingleTrack+0x140>
		 while(need_new_data == FALSE){
			 if(looper.Function != PLAY_SD){
 8007c46:	4b41      	ldr	r3, [pc, #260]	; (8007d4c <SD_readSingleTrack+0x170>)
 8007c48:	7f5b      	ldrb	r3, [r3, #29]
 8007c4a:	b2db      	uxtb	r3, r3
 8007c4c:	2b06      	cmp	r3, #6
 8007c4e:	d00b      	beq.n	8007c68 <SD_readSingleTrack+0x8c>
				 HAL_DAC_Stop_DMA(&hdac,DAC_CHANNEL_2);
 8007c50:	2110      	movs	r1, #16
 8007c52:	483f      	ldr	r0, [pc, #252]	; (8007d50 <SD_readSingleTrack+0x174>)
 8007c54:	f006 fadc 	bl	800e210 <HAL_DAC_Stop_DMA>
				 HAL_DAC_Stop(&hdac,DAC_CHANNEL_2);
 8007c58:	2110      	movs	r1, #16
 8007c5a:	483d      	ldr	r0, [pc, #244]	; (8007d50 <SD_readSingleTrack+0x174>)
 8007c5c:	f006 f9ed 	bl	800e03a <HAL_DAC_Stop>
				 HAL_TIM_Base_Stop_IT(&htim8);
 8007c60:	483c      	ldr	r0, [pc, #240]	; (8007d54 <SD_readSingleTrack+0x178>)
 8007c62:	f00a faf1 	bl	8012248 <HAL_TIM_Base_Stop_IT>
				 return;
 8007c66:	e061      	b.n	8007d2c <SD_readSingleTrack+0x150>
		 while(need_new_data == FALSE){
 8007c68:	4b37      	ldr	r3, [pc, #220]	; (8007d48 <SD_readSingleTrack+0x16c>)
 8007c6a:	781b      	ldrb	r3, [r3, #0]
 8007c6c:	b2db      	uxtb	r3, r3
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d0e9      	beq.n	8007c46 <SD_readSingleTrack+0x6a>
			 }
		 }

		need_new_data = FALSE;
 8007c72:	4b35      	ldr	r3, [pc, #212]	; (8007d48 <SD_readSingleTrack+0x16c>)
 8007c74:	2200      	movs	r2, #0
 8007c76:	701a      	strb	r2, [r3, #0]
		if(play_buffer == 0)	//play_buffer indicates which buffer is now empty
 8007c78:	4b31      	ldr	r3, [pc, #196]	; (8007d40 <SD_readSingleTrack+0x164>)
 8007c7a:	781b      	ldrb	r3, [r3, #0]
 8007c7c:	b2db      	uxtb	r3, r3
 8007c7e:	2b00      	cmp	r3, #0
 8007c80:	d10b      	bne.n	8007c9a <SD_readSingleTrack+0xbe>
	    {
	   		f_read(fp, (uint8_t *)audio_buf + WORD_SIZE, WORD_SIZE,&bytes_read);
 8007c82:	492e      	ldr	r1, [pc, #184]	; (8007d3c <SD_readSingleTrack+0x160>)
 8007c84:	4b2b      	ldr	r3, [pc, #172]	; (8007d34 <SD_readSingleTrack+0x158>)
 8007c86:	2280      	movs	r2, #128	; 0x80
 8007c88:	6878      	ldr	r0, [r7, #4]
 8007c8a:	f7fd ff59 	bl	8005b40 <f_read>
	   		signed16_unsigned12(audio_buf,WORD_HALF_SIZE,WORD_SIZE);
 8007c8e:	2280      	movs	r2, #128	; 0x80
 8007c90:	2140      	movs	r1, #64	; 0x40
 8007c92:	4829      	ldr	r0, [pc, #164]	; (8007d38 <SD_readSingleTrack+0x15c>)
 8007c94:	f7fa f8d6 	bl	8001e44 <signed16_unsigned12>
 8007c98:	e00a      	b.n	8007cb0 <SD_readSingleTrack+0xd4>
	    }
	     else
	     {
	    	 f_read(fp, (uint8_t *)audio_buf,WORD_SIZE,&bytes_read);
 8007c9a:	4b26      	ldr	r3, [pc, #152]	; (8007d34 <SD_readSingleTrack+0x158>)
 8007c9c:	2280      	movs	r2, #128	; 0x80
 8007c9e:	4926      	ldr	r1, [pc, #152]	; (8007d38 <SD_readSingleTrack+0x15c>)
 8007ca0:	6878      	ldr	r0, [r7, #4]
 8007ca2:	f7fd ff4d 	bl	8005b40 <f_read>
	    	 signed16_unsigned12(audio_buf,0,WORD_HALF_SIZE);
 8007ca6:	2240      	movs	r2, #64	; 0x40
 8007ca8:	2100      	movs	r1, #0
 8007caa:	4823      	ldr	r0, [pc, #140]	; (8007d38 <SD_readSingleTrack+0x15c>)
 8007cac:	f7fa f8ca 	bl	8001e44 <signed16_unsigned12>
	     }	     	//new_buffer_ready flag tells the ISR that the buffer has been filled.
	     //If file_read returns 0 or -1 file is over. Find the next file!
	      if(bytes_read == 0)
 8007cb0:	4b20      	ldr	r3, [pc, #128]	; (8007d34 <SD_readSingleTrack+0x158>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d131      	bne.n	8007d1c <SD_readSingleTrack+0x140>
	      {
	    	HAL_DAC_Stop_DMA(&hdac,DAC_CHANNEL_2);
 8007cb8:	2110      	movs	r1, #16
 8007cba:	4825      	ldr	r0, [pc, #148]	; (8007d50 <SD_readSingleTrack+0x174>)
 8007cbc:	f006 faa8 	bl	800e210 <HAL_DAC_Stop_DMA>
	    	HAL_DAC_Stop(&hdac,DAC_CHANNEL_2);
 8007cc0:	2110      	movs	r1, #16
 8007cc2:	4823      	ldr	r0, [pc, #140]	; (8007d50 <SD_readSingleTrack+0x174>)
 8007cc4:	f006 f9b9 	bl	800e03a <HAL_DAC_Stop>
	    	//HAL_TIM_Base_Stop(&htim8);
	    	f_lseek(fp,SEEK_SET);
 8007cc8:	2100      	movs	r1, #0
 8007cca:	6878      	ldr	r0, [r7, #4]
 8007ccc:	f7fe fba2 	bl	8006414 <f_lseek>
	    	f_read(fp,(uint8_t *)audio_buf,WORD_SIZE,&bytes_read);
 8007cd0:	4b18      	ldr	r3, [pc, #96]	; (8007d34 <SD_readSingleTrack+0x158>)
 8007cd2:	2280      	movs	r2, #128	; 0x80
 8007cd4:	4918      	ldr	r1, [pc, #96]	; (8007d38 <SD_readSingleTrack+0x15c>)
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f7fd ff32 	bl	8005b40 <f_read>
	    	f_read(fp,(uint8_t *)audio_buf + WORD_SIZE,WORD_SIZE,&bytes_read);
 8007cdc:	4917      	ldr	r1, [pc, #92]	; (8007d3c <SD_readSingleTrack+0x160>)
 8007cde:	4b15      	ldr	r3, [pc, #84]	; (8007d34 <SD_readSingleTrack+0x158>)
 8007ce0:	2280      	movs	r2, #128	; 0x80
 8007ce2:	6878      	ldr	r0, [r7, #4]
 8007ce4:	f7fd ff2c 	bl	8005b40 <f_read>
	    	signed16_unsigned12(audio_buf,0,WORD_SIZE);
 8007ce8:	2280      	movs	r2, #128	; 0x80
 8007cea:	2100      	movs	r1, #0
 8007cec:	4812      	ldr	r0, [pc, #72]	; (8007d38 <SD_readSingleTrack+0x15c>)
 8007cee:	f7fa f8a9 	bl	8001e44 <signed16_unsigned12>
	        need_new_data = FALSE;
 8007cf2:	4b15      	ldr	r3, [pc, #84]	; (8007d48 <SD_readSingleTrack+0x16c>)
 8007cf4:	2200      	movs	r2, #0
 8007cf6:	701a      	strb	r2, [r3, #0]
	        word_count = 0;
 8007cf8:	4b12      	ldr	r3, [pc, #72]	; (8007d44 <SD_readSingleTrack+0x168>)
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	601a      	str	r2, [r3, #0]
	        play_buffer = 0;
 8007cfe:	4b10      	ldr	r3, [pc, #64]	; (8007d40 <SD_readSingleTrack+0x164>)
 8007d00:	2200      	movs	r2, #0
 8007d02:	701a      	strb	r2, [r3, #0]
	        //HAL_TIM_Base_Start(&htim8);
	        HAL_DAC_Start(&hdac,DAC_CHANNEL_2);
 8007d04:	2110      	movs	r1, #16
 8007d06:	4812      	ldr	r0, [pc, #72]	; (8007d50 <SD_readSingleTrack+0x174>)
 8007d08:	f006 f945 	bl	800df96 <HAL_DAC_Start>
	        HAL_DAC_Start_DMA(&hdac,DAC_CHANNEL_2,(uint32_t*)audio_buf,WORD_SIZE,DAC_ALIGN_12B_R);
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	9300      	str	r3, [sp, #0]
 8007d10:	2380      	movs	r3, #128	; 0x80
 8007d12:	4a09      	ldr	r2, [pc, #36]	; (8007d38 <SD_readSingleTrack+0x15c>)
 8007d14:	2110      	movs	r1, #16
 8007d16:	480e      	ldr	r0, [pc, #56]	; (8007d50 <SD_readSingleTrack+0x174>)
 8007d18:	f006 f9ac 	bl	800e074 <HAL_DAC_Start_DMA>
	while(looper.Function == PLAY_SD){
 8007d1c:	4b0b      	ldr	r3, [pc, #44]	; (8007d4c <SD_readSingleTrack+0x170>)
 8007d1e:	7f5b      	ldrb	r3, [r3, #29]
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b06      	cmp	r3, #6
 8007d24:	d0a0      	beq.n	8007c68 <SD_readSingleTrack+0x8c>

	      }

	}
	HAL_TIM_Base_Stop_IT(&htim8);
 8007d26:	480b      	ldr	r0, [pc, #44]	; (8007d54 <SD_readSingleTrack+0x178>)
 8007d28:	f00a fa8e 	bl	8012248 <HAL_TIM_Base_Stop_IT>

}
 8007d2c:	3708      	adds	r7, #8
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}
 8007d32:	bf00      	nop
 8007d34:	20001d60 	.word	0x20001d60
 8007d38:	20001c5c 	.word	0x20001c5c
 8007d3c:	20001cdc 	.word	0x20001cdc
 8007d40:	20001c54 	.word	0x20001c54
 8007d44:	20001c58 	.word	0x20001c58
 8007d48:	20001c55 	.word	0x20001c55
 8007d4c:	20001228 	.word	0x20001228
 8007d50:	200004dc 	.word	0x200004dc
 8007d54:	20002314 	.word	0x20002314

08007d58 <SD_ReadAudio>:

uint32_t SD_ReadAudio(uint32_t start,FIL *fp){
 8007d58:	b580      	push	{r7, lr}
 8007d5a:	b08a      	sub	sp, #40	; 0x28
 8007d5c:	af02      	add	r7, sp, #8
 8007d5e:	6078      	str	r0, [r7, #4]
 8007d60:	6039      	str	r1, [r7, #0]
	uint8_t *_buf;
	uint32_t samples = 0;
 8007d62:	2300      	movs	r3, #0
 8007d64:	61fb      	str	r3, [r7, #28]
	uint32_t total_bytes_read = 0;
 8007d66:	2300      	movs	r3, #0
 8007d68:	61bb      	str	r3, [r7, #24]
	uint32_t skip = 0,progress = 0;
 8007d6a:	2300      	movs	r3, #0
 8007d6c:	617b      	str	r3, [r7, #20]
 8007d6e:	2300      	movs	r3, #0
 8007d70:	60fb      	str	r3, [r7, #12]
	DWORD size_bytes = fp->fsize;
 8007d72:	683b      	ldr	r3, [r7, #0]
 8007d74:	68db      	ldr	r3, [r3, #12]
 8007d76:	613b      	str	r3, [r7, #16]
	fil = fp;
 8007d78:	4a46      	ldr	r2, [pc, #280]	; (8007e94 <SD_ReadAudio+0x13c>)
 8007d7a:	683b      	ldr	r3, [r7, #0]
 8007d7c:	6013      	str	r3, [r2, #0]
	_buf = (uint8_t *)malloc(8192);
 8007d7e:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007d82:	f00f fc7d 	bl	8017680 <malloc>
 8007d86:	4603      	mov	r3, r0
 8007d88:	60bb      	str	r3, [r7, #8]
	bytes_read = 0;
 8007d8a:	4b43      	ldr	r3, [pc, #268]	; (8007e98 <SD_ReadAudio+0x140>)
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	601a      	str	r2, [r3, #0]
	sdram_pointer = start * 2;
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	005b      	lsls	r3, r3, #1
 8007d94:	4a41      	ldr	r2, [pc, #260]	; (8007e9c <SD_ReadAudio+0x144>)
 8007d96:	6013      	str	r3, [r2, #0]
	if((size_bytes + sdram_pointer) > SDRAM_SIZE)
 8007d98:	4b40      	ldr	r3, [pc, #256]	; (8007e9c <SD_ReadAudio+0x144>)
 8007d9a:	681a      	ldr	r2, [r3, #0]
 8007d9c:	693b      	ldr	r3, [r7, #16]
 8007d9e:	4413      	add	r3, r2
 8007da0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007da4:	d902      	bls.n	8007dac <SD_ReadAudio+0x54>
		size_bytes = SDRAM_SIZE;
 8007da6:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8007daa:	613b      	str	r3, [r7, #16]

	while(1){
		f_read(fp,(uint8_t *)_buf,8192,&bytes_read);
 8007dac:	4b3a      	ldr	r3, [pc, #232]	; (8007e98 <SD_ReadAudio+0x140>)
 8007dae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007db2:	68b9      	ldr	r1, [r7, #8]
 8007db4:	6838      	ldr	r0, [r7, #0]
 8007db6:	f7fd fec3 	bl	8005b40 <f_read>
		BSP_SDRAM_WriteData16b(SDRAM_DEVICE_ADDR + sdram_pointer,(uint16_t*)_buf,bytes_read / 2);
 8007dba:	4b38      	ldr	r3, [pc, #224]	; (8007e9c <SD_ReadAudio+0x144>)
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	f103 4050 	add.w	r0, r3, #3489660928	; 0xd0000000
 8007dc2:	4b35      	ldr	r3, [pc, #212]	; (8007e98 <SD_ReadAudio+0x140>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	085b      	lsrs	r3, r3, #1
 8007dc8:	461a      	mov	r2, r3
 8007dca:	68b9      	ldr	r1, [r7, #8]
 8007dcc:	f003 fd46 	bl	800b85c <BSP_SDRAM_WriteData16b>
		samples += (bytes_read / looper.SampleBytes);
 8007dd0:	4b31      	ldr	r3, [pc, #196]	; (8007e98 <SD_ReadAudio+0x140>)
 8007dd2:	681a      	ldr	r2, [r3, #0]
 8007dd4:	4b32      	ldr	r3, [pc, #200]	; (8007ea0 <SD_ReadAudio+0x148>)
 8007dd6:	691b      	ldr	r3, [r3, #16]
 8007dd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ddc:	69fa      	ldr	r2, [r7, #28]
 8007dde:	4413      	add	r3, r2
 8007de0:	61fb      	str	r3, [r7, #28]
		total_bytes_read += bytes_read;
 8007de2:	4b2d      	ldr	r3, [pc, #180]	; (8007e98 <SD_ReadAudio+0x140>)
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	69ba      	ldr	r2, [r7, #24]
 8007de8:	4413      	add	r3, r2
 8007dea:	61bb      	str	r3, [r7, #24]
		progress = (uint32_t)(((float)total_bytes_read / (float)size_bytes) * 256.00);
 8007dec:	69bb      	ldr	r3, [r7, #24]
 8007dee:	ee07 3a90 	vmov	s15, r3
 8007df2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007df6:	693b      	ldr	r3, [r7, #16]
 8007df8:	ee07 3a90 	vmov	s15, r3
 8007dfc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8007e00:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8007e04:	ee16 0a90 	vmov	r0, s13
 8007e08:	f7f8 fbae 	bl	8000568 <__aeabi_f2d>
 8007e0c:	f04f 0200 	mov.w	r2, #0
 8007e10:	4b24      	ldr	r3, [pc, #144]	; (8007ea4 <SD_ReadAudio+0x14c>)
 8007e12:	f7f8 fc01 	bl	8000618 <__aeabi_dmul>
 8007e16:	4602      	mov	r2, r0
 8007e18:	460b      	mov	r3, r1
 8007e1a:	4610      	mov	r0, r2
 8007e1c:	4619      	mov	r1, r3
 8007e1e:	f7f8 fe0d 	bl	8000a3c <__aeabi_d2uiz>
 8007e22:	4603      	mov	r3, r0
 8007e24:	60fb      	str	r3, [r7, #12]
		TM_ILI9341_DrawFilledRectangle(10 + skip,120,10 + progress,130,ILI9341_COLOR_YELLOW);
 8007e26:	697b      	ldr	r3, [r7, #20]
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	330a      	adds	r3, #10
 8007e2c:	b298      	uxth	r0, r3
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	330a      	adds	r3, #10
 8007e34:	b29a      	uxth	r2, r3
 8007e36:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8007e3a:	9300      	str	r3, [sp, #0]
 8007e3c:	2382      	movs	r3, #130	; 0x82
 8007e3e:	2178      	movs	r1, #120	; 0x78
 8007e40:	f004 ff3e 	bl	800ccc0 <TM_ILI9341_DrawFilledRectangle>
		skip = progress;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	617b      	str	r3, [r7, #20]
		sdram_pointer += bytes_read;
 8007e48:	4b14      	ldr	r3, [pc, #80]	; (8007e9c <SD_ReadAudio+0x144>)
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	4b12      	ldr	r3, [pc, #72]	; (8007e98 <SD_ReadAudio+0x140>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	4413      	add	r3, r2
 8007e52:	4a12      	ldr	r2, [pc, #72]	; (8007e9c <SD_ReadAudio+0x144>)
 8007e54:	6013      	str	r3, [r2, #0]
		if(f_eof(fp))
 8007e56:	683b      	ldr	r3, [r7, #0]
 8007e58:	689a      	ldr	r2, [r3, #8]
 8007e5a:	683b      	ldr	r3, [r7, #0]
 8007e5c:	68db      	ldr	r3, [r3, #12]
 8007e5e:	429a      	cmp	r2, r3
 8007e60:	d000      	beq.n	8007e64 <SD_ReadAudio+0x10c>
		f_read(fp,(uint8_t *)_buf,8192,&bytes_read);
 8007e62:	e7a3      	b.n	8007dac <SD_ReadAudio+0x54>
			break;
 8007e64:	bf00      	nop
	}
	TM_ILI9341_DrawFilledRectangle(10 + skip,120,10 + progress,130,ILI9341_COLOR_YELLOW);
 8007e66:	697b      	ldr	r3, [r7, #20]
 8007e68:	b29b      	uxth	r3, r3
 8007e6a:	330a      	adds	r3, #10
 8007e6c:	b298      	uxth	r0, r3
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	b29b      	uxth	r3, r3
 8007e72:	330a      	adds	r3, #10
 8007e74:	b29a      	uxth	r2, r3
 8007e76:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8007e7a:	9300      	str	r3, [sp, #0]
 8007e7c:	2382      	movs	r3, #130	; 0x82
 8007e7e:	2178      	movs	r1, #120	; 0x78
 8007e80:	f004 ff1e 	bl	800ccc0 <TM_ILI9341_DrawFilledRectangle>
	free(_buf);
 8007e84:	68b8      	ldr	r0, [r7, #8]
 8007e86:	f00f fc03 	bl	8017690 <free>
	return samples;
 8007e8a:	69fb      	ldr	r3, [r7, #28]
}
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	3720      	adds	r7, #32
 8007e90:	46bd      	mov	sp, r7
 8007e92:	bd80      	pop	{r7, pc}
 8007e94:	20001d5c 	.word	0x20001d5c
 8007e98:	20001d60 	.word	0x20001d60
 8007e9c:	200004c0 	.word	0x200004c0
 8007ea0:	20001228 	.word	0x20001228
 8007ea4:	40700000 	.word	0x40700000

08007ea8 <SD_WriteAudio>:


void SD_WriteAudio(uint32_t start,uint32_t end,FIL *fp){
 8007ea8:	b580      	push	{r7, lr}
 8007eaa:	b086      	sub	sp, #24
 8007eac:	af00      	add	r7, sp, #0
 8007eae:	60f8      	str	r0, [r7, #12]
 8007eb0:	60b9      	str	r1, [r7, #8]
 8007eb2:	607a      	str	r2, [r7, #4]
	uint8_t *_buf;
	uint32_t bytesRemaining = (end - start) * 2;
 8007eb4:	68ba      	ldr	r2, [r7, #8]
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	1ad3      	subs	r3, r2, r3
 8007eba:	005b      	lsls	r3, r3, #1
 8007ebc:	617b      	str	r3, [r7, #20]
	_buf = (uint8_t *)malloc(8192);
 8007ebe:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8007ec2:	f00f fbdd 	bl	8017680 <malloc>
 8007ec6:	4603      	mov	r3, r0
 8007ec8:	613b      	str	r3, [r7, #16]
	bytes_written = 0;
 8007eca:	4b23      	ldr	r3, [pc, #140]	; (8007f58 <SD_WriteAudio+0xb0>)
 8007ecc:	2200      	movs	r2, #0
 8007ece:	601a      	str	r2, [r3, #0]
	sdram_pointer = start * 2;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	005b      	lsls	r3, r3, #1
 8007ed4:	4a21      	ldr	r2, [pc, #132]	; (8007f5c <SD_WriteAudio+0xb4>)
 8007ed6:	6013      	str	r3, [r2, #0]
	f_truncate(fp);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f7fe fc82 	bl	80067e2 <f_truncate>
	while(bytesRemaining > 0){
 8007ede:	e031      	b.n	8007f44 <SD_WriteAudio+0x9c>
		if(bytesRemaining >= 8192){
 8007ee0:	697b      	ldr	r3, [r7, #20]
 8007ee2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ee6:	d311      	bcc.n	8007f0c <SD_WriteAudio+0x64>
			BSP_SDRAM_ReadData16b(SDRAM_DEVICE_ADDR + sdram_pointer,(uint16_t *) _buf, 4096);
 8007ee8:	4b1c      	ldr	r3, [pc, #112]	; (8007f5c <SD_WriteAudio+0xb4>)
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	f103 4350 	add.w	r3, r3, #3489660928	; 0xd0000000
 8007ef0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007ef4:	6939      	ldr	r1, [r7, #16]
 8007ef6:	4618      	mov	r0, r3
 8007ef8:	f003 fc9e 	bl	800b838 <BSP_SDRAM_ReadData16b>
			f_write(fp,_buf,8192,&bytes_written);
 8007efc:	4b16      	ldr	r3, [pc, #88]	; (8007f58 <SD_WriteAudio+0xb0>)
 8007efe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007f02:	6939      	ldr	r1, [r7, #16]
 8007f04:	6878      	ldr	r0, [r7, #4]
 8007f06:	f7fd ff52 	bl	8005dae <f_write>
 8007f0a:	e00f      	b.n	8007f2c <SD_WriteAudio+0x84>
		}
		else{
			BSP_SDRAM_ReadData16b(SDRAM_DEVICE_ADDR + sdram_pointer,(uint16_t *) _buf, bytesRemaining / 2);
 8007f0c:	4b13      	ldr	r3, [pc, #76]	; (8007f5c <SD_WriteAudio+0xb4>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f103 4050 	add.w	r0, r3, #3489660928	; 0xd0000000
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	085b      	lsrs	r3, r3, #1
 8007f18:	461a      	mov	r2, r3
 8007f1a:	6939      	ldr	r1, [r7, #16]
 8007f1c:	f003 fc8c 	bl	800b838 <BSP_SDRAM_ReadData16b>
			f_write(fp,_buf,bytesRemaining,&bytes_written);
 8007f20:	4b0d      	ldr	r3, [pc, #52]	; (8007f58 <SD_WriteAudio+0xb0>)
 8007f22:	697a      	ldr	r2, [r7, #20]
 8007f24:	6939      	ldr	r1, [r7, #16]
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f7fd ff41 	bl	8005dae <f_write>
		}
		bytesRemaining -= bytes_written;
 8007f2c:	4b0a      	ldr	r3, [pc, #40]	; (8007f58 <SD_WriteAudio+0xb0>)
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	697a      	ldr	r2, [r7, #20]
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	617b      	str	r3, [r7, #20]
		sdram_pointer += bytes_written;
 8007f36:	4b09      	ldr	r3, [pc, #36]	; (8007f5c <SD_WriteAudio+0xb4>)
 8007f38:	681a      	ldr	r2, [r3, #0]
 8007f3a:	4b07      	ldr	r3, [pc, #28]	; (8007f58 <SD_WriteAudio+0xb0>)
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	4413      	add	r3, r2
 8007f40:	4a06      	ldr	r2, [pc, #24]	; (8007f5c <SD_WriteAudio+0xb4>)
 8007f42:	6013      	str	r3, [r2, #0]
	while(bytesRemaining > 0){
 8007f44:	697b      	ldr	r3, [r7, #20]
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d1ca      	bne.n	8007ee0 <SD_WriteAudio+0x38>
	}


	free(_buf);
 8007f4a:	6938      	ldr	r0, [r7, #16]
 8007f4c:	f00f fba0 	bl	8017690 <free>

}
 8007f50:	bf00      	nop
 8007f52:	3718      	adds	r7, #24
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}
 8007f58:	20001d64 	.word	0x20001d64
 8007f5c:	200004c0 	.word	0x200004c0

08007f60 <checkSD>:

void checkSD(){
 8007f60:	b580      	push	{r7, lr}
 8007f62:	af00      	add	r7, sp, #0
	if(HAL_GPIO_ReadPin(uSD_CD_GPIO_Port,uSD_CD_Pin) == GPIO_PIN_RESET){
 8007f64:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8007f68:	4819      	ldr	r0, [pc, #100]	; (8007fd0 <checkSD+0x70>)
 8007f6a:	f007 f867 	bl	800f03c <HAL_GPIO_ReadPin>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	d11a      	bne.n	8007faa <checkSD+0x4a>
		  if(fs_mounted == FALSE){
 8007f74:	4b17      	ldr	r3, [pc, #92]	; (8007fd4 <checkSD+0x74>)
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d127      	bne.n	8007fcc <checkSD+0x6c>
			  if (f_mount(&FatFs, "", 1) != FR_OK){
 8007f7c:	2201      	movs	r2, #1
 8007f7e:	4916      	ldr	r1, [pc, #88]	; (8007fd8 <checkSD+0x78>)
 8007f80:	4816      	ldr	r0, [pc, #88]	; (8007fdc <checkSD+0x7c>)
 8007f82:	f7fd fc59 	bl	8005838 <f_mount>
 8007f86:	4603      	mov	r3, r0
 8007f88:	2b00      	cmp	r3, #0
 8007f8a:	d005      	beq.n	8007f98 <checkSD+0x38>
				  TM_HD44780_Puts(0,1,"SD card error   ");//
 8007f8c:	4a14      	ldr	r2, [pc, #80]	; (8007fe0 <checkSD+0x80>)
 8007f8e:	2101      	movs	r1, #1
 8007f90:	2000      	movs	r0, #0
 8007f92:	f004 f92b 	bl	800c1ec <TM_HD44780_Puts>
		  if(fs_mounted == TRUE){
			  f_mount(0, "", 1);
			  fs_mounted = FALSE;
		  }
	  }
}
 8007f96:	e019      	b.n	8007fcc <checkSD+0x6c>
				fs_mounted = TRUE;
 8007f98:	4b0e      	ldr	r3, [pc, #56]	; (8007fd4 <checkSD+0x74>)
 8007f9a:	2201      	movs	r2, #1
 8007f9c:	701a      	strb	r2, [r3, #0]
				TM_HD44780_Puts(0,1,"SD card ready  ");
 8007f9e:	4a11      	ldr	r2, [pc, #68]	; (8007fe4 <checkSD+0x84>)
 8007fa0:	2101      	movs	r1, #1
 8007fa2:	2000      	movs	r0, #0
 8007fa4:	f004 f922 	bl	800c1ec <TM_HD44780_Puts>
}
 8007fa8:	e010      	b.n	8007fcc <checkSD+0x6c>
		  TM_HD44780_Puts(0,1,"SD card removed");
 8007faa:	4a0f      	ldr	r2, [pc, #60]	; (8007fe8 <checkSD+0x88>)
 8007fac:	2101      	movs	r1, #1
 8007fae:	2000      	movs	r0, #0
 8007fb0:	f004 f91c 	bl	800c1ec <TM_HD44780_Puts>
		  if(fs_mounted == TRUE){
 8007fb4:	4b07      	ldr	r3, [pc, #28]	; (8007fd4 <checkSD+0x74>)
 8007fb6:	781b      	ldrb	r3, [r3, #0]
 8007fb8:	2b01      	cmp	r3, #1
 8007fba:	d107      	bne.n	8007fcc <checkSD+0x6c>
			  f_mount(0, "", 1);
 8007fbc:	2201      	movs	r2, #1
 8007fbe:	4906      	ldr	r1, [pc, #24]	; (8007fd8 <checkSD+0x78>)
 8007fc0:	2000      	movs	r0, #0
 8007fc2:	f7fd fc39 	bl	8005838 <f_mount>
			  fs_mounted = FALSE;
 8007fc6:	4b03      	ldr	r3, [pc, #12]	; (8007fd4 <checkSD+0x74>)
 8007fc8:	2200      	movs	r2, #0
 8007fca:	701a      	strb	r2, [r3, #0]
}
 8007fcc:	bf00      	nop
 8007fce:	bd80      	pop	{r7, pc}
 8007fd0:	40021800 	.word	0x40021800
 8007fd4:	20001c44 	.word	0x20001c44
 8007fd8:	08018d34 	.word	0x08018d34
 8007fdc:	20001290 	.word	0x20001290
 8007fe0:	08018d38 	.word	0x08018d38
 8007fe4:	08018d4c 	.word	0x08018d4c
 8007fe8:	08018d5c 	.word	0x08018d5c

08007fec <SRAM_download_rhythm>:

uint32_t SRAM_download_rhythm(void){
 8007fec:	b580      	push	{r7, lr}
 8007fee:	b084      	sub	sp, #16
 8007ff0:	af02      	add	r7, sp, #8
	BOOL header_received = FALSE;
 8007ff2:	2300      	movs	r3, #0
 8007ff4:	71fb      	strb	r3, [r7, #7]
	uint32_t bytes_total = 0;
 8007ff6:	2300      	movs	r3, #0
 8007ff8:	603b      	str	r3, [r7, #0]
	bytes_written = 0;
 8007ffa:	4b53      	ldr	r3, [pc, #332]	; (8008148 <SRAM_download_rhythm+0x15c>)
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	601a      	str	r2, [r3, #0]
	UserWritePtr = 0;
 8008000:	4b52      	ldr	r3, [pc, #328]	; (800814c <SRAM_download_rhythm+0x160>)
 8008002:	2200      	movs	r2, #0
 8008004:	701a      	strb	r2, [r3, #0]
	UserReadPtr = 0;
 8008006:	4b52      	ldr	r3, [pc, #328]	; (8008150 <SRAM_download_rhythm+0x164>)
 8008008:	2200      	movs	r2, #0
 800800a:	701a      	strb	r2, [r3, #0]
	TM_HD44780_Puts(0, 1, "Download ready ");
 800800c:	4a51      	ldr	r2, [pc, #324]	; (8008154 <SRAM_download_rhythm+0x168>)
 800800e:	2101      	movs	r1, #1
 8008010:	2000      	movs	r0, #0
 8008012:	f004 f8eb 	bl	800c1ec <TM_HD44780_Puts>
	SRAM_seekWrite(0, SRAM_SET);
 8008016:	2100      	movs	r1, #0
 8008018:	2000      	movs	r0, #0
 800801a:	f7f8 ff69 	bl	8000ef0 <SRAM_seekWrite>
	BSP_LED_On(LED_GREEN);
 800801e:	2000      	movs	r0, #0
 8008020:	f003 fac0 	bl	800b5a4 <BSP_LED_On>
	while ((Keypad_Button = TM_KEYPAD_Read()) != TM_KEYPAD_Button_0) {
 8008024:	e057      	b.n	80080d6 <SRAM_download_rhythm+0xea>
		if (usbRecv == TRUE) {
 8008026:	4b4c      	ldr	r3, [pc, #304]	; (8008158 <SRAM_download_rhythm+0x16c>)
 8008028:	781b      	ldrb	r3, [r3, #0]
 800802a:	b2db      	uxtb	r3, r3
 800802c:	2b01      	cmp	r3, #1
 800802e:	d152      	bne.n	80080d6 <SRAM_download_rhythm+0xea>
			if(header_received == FALSE){
 8008030:	79fb      	ldrb	r3, [r7, #7]
 8008032:	2b00      	cmp	r3, #0
 8008034:	d109      	bne.n	800804a <SRAM_download_rhythm+0x5e>
				bytes_total = *((uint32_t *)&UserWorkBufferHS[0]);	// read first int: number of bytes
 8008036:	4b49      	ldr	r3, [pc, #292]	; (800815c <SRAM_download_rhythm+0x170>)
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	603b      	str	r3, [r7, #0]
				header_received = TRUE;
 800803c:	2301      	movs	r3, #1
 800803e:	71fb      	strb	r3, [r7, #7]
				TM_HD44780_Puts(0, 1, "Download started");
 8008040:	4a47      	ldr	r2, [pc, #284]	; (8008160 <SRAM_download_rhythm+0x174>)
 8008042:	2101      	movs	r1, #1
 8008044:	2000      	movs	r0, #0
 8008046:	f004 f8d1 	bl	800c1ec <TM_HD44780_Puts>
			}

			usbRecv = FALSE;
 800804a:	4b43      	ldr	r3, [pc, #268]	; (8008158 <SRAM_download_rhythm+0x16c>)
 800804c:	2200      	movs	r2, #0
 800804e:	701a      	strb	r2, [r3, #0]
			if(strncmp((char *)&UserWorkBufferHS[UserReadPtr],"STOP",4) == 0)
 8008050:	4b3f      	ldr	r3, [pc, #252]	; (8008150 <SRAM_download_rhythm+0x164>)
 8008052:	781b      	ldrb	r3, [r3, #0]
 8008054:	461a      	mov	r2, r3
 8008056:	4b41      	ldr	r3, [pc, #260]	; (800815c <SRAM_download_rhythm+0x170>)
 8008058:	4413      	add	r3, r2
 800805a:	2204      	movs	r2, #4
 800805c:	4941      	ldr	r1, [pc, #260]	; (8008164 <SRAM_download_rhythm+0x178>)
 800805e:	4618      	mov	r0, r3
 8008060:	f00f fc73 	bl	801794a <strncmp>
 8008064:	4603      	mov	r3, r0
 8008066:	2b00      	cmp	r3, #0
 8008068:	d040      	beq.n	80080ec <SRAM_download_rhythm+0x100>
				break;
			writeSRAM(&UserWorkBufferHS[UserReadPtr], usbBytes);
 800806a:	4b39      	ldr	r3, [pc, #228]	; (8008150 <SRAM_download_rhythm+0x164>)
 800806c:	781b      	ldrb	r3, [r3, #0]
 800806e:	461a      	mov	r2, r3
 8008070:	4b3a      	ldr	r3, [pc, #232]	; (800815c <SRAM_download_rhythm+0x170>)
 8008072:	4413      	add	r3, r2
 8008074:	4a3c      	ldr	r2, [pc, #240]	; (8008168 <SRAM_download_rhythm+0x17c>)
 8008076:	6812      	ldr	r2, [r2, #0]
 8008078:	4611      	mov	r1, r2
 800807a:	4618      	mov	r0, r3
 800807c:	f7f8 ffd0 	bl	8001020 <writeSRAM>
			bytes_written += usbBytes;
 8008080:	4b39      	ldr	r3, [pc, #228]	; (8008168 <SRAM_download_rhythm+0x17c>)
 8008082:	681a      	ldr	r2, [r3, #0]
 8008084:	4b30      	ldr	r3, [pc, #192]	; (8008148 <SRAM_download_rhythm+0x15c>)
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4413      	add	r3, r2
 800808a:	4a2f      	ldr	r2, [pc, #188]	; (8008148 <SRAM_download_rhythm+0x15c>)
 800808c:	6013      	str	r3, [r2, #0]
			sprintf(lcdline,"%u/%u",(unsigned int)bytes_written,(unsigned int)bytes_total);
 800808e:	4b2e      	ldr	r3, [pc, #184]	; (8008148 <SRAM_download_rhythm+0x15c>)
 8008090:	681a      	ldr	r2, [r3, #0]
 8008092:	683b      	ldr	r3, [r7, #0]
 8008094:	4935      	ldr	r1, [pc, #212]	; (800816c <SRAM_download_rhythm+0x180>)
 8008096:	4836      	ldr	r0, [pc, #216]	; (8008170 <SRAM_download_rhythm+0x184>)
 8008098:	f00f fc20 	bl	80178dc <siprintf>
			TM_ILI9341_Puts(10, 80, lcdline, &TM_Font_11x18, ILI9341_COLOR_BLACK, ILI9341_COLOR_BLUE2);
 800809c:	f240 531d 	movw	r3, #1309	; 0x51d
 80080a0:	9301      	str	r3, [sp, #4]
 80080a2:	2300      	movs	r3, #0
 80080a4:	9300      	str	r3, [sp, #0]
 80080a6:	4b33      	ldr	r3, [pc, #204]	; (8008174 <SRAM_download_rhythm+0x188>)
 80080a8:	4a31      	ldr	r2, [pc, #196]	; (8008170 <SRAM_download_rhythm+0x184>)
 80080aa:	2150      	movs	r1, #80	; 0x50
 80080ac:	200a      	movs	r0, #10
 80080ae:	f004 fd1d 	bl	800caec <TM_ILI9341_Puts>
			if(bytes_written >= bytes_total)
 80080b2:	4b25      	ldr	r3, [pc, #148]	; (8008148 <SRAM_download_rhythm+0x15c>)
 80080b4:	681b      	ldr	r3, [r3, #0]
 80080b6:	683a      	ldr	r2, [r7, #0]
 80080b8:	429a      	cmp	r2, r3
 80080ba:	d919      	bls.n	80080f0 <SRAM_download_rhythm+0x104>
				break;
			UserReadPtr += 64;
 80080bc:	4b24      	ldr	r3, [pc, #144]	; (8008150 <SRAM_download_rhythm+0x164>)
 80080be:	781b      	ldrb	r3, [r3, #0]
 80080c0:	3340      	adds	r3, #64	; 0x40
 80080c2:	b2da      	uxtb	r2, r3
 80080c4:	4b22      	ldr	r3, [pc, #136]	; (8008150 <SRAM_download_rhythm+0x164>)
 80080c6:	701a      	strb	r2, [r3, #0]
			if (UserReadPtr == 128)
 80080c8:	4b21      	ldr	r3, [pc, #132]	; (8008150 <SRAM_download_rhythm+0x164>)
 80080ca:	781b      	ldrb	r3, [r3, #0]
 80080cc:	2b80      	cmp	r3, #128	; 0x80
 80080ce:	d102      	bne.n	80080d6 <SRAM_download_rhythm+0xea>
				UserReadPtr = 0;
 80080d0:	4b1f      	ldr	r3, [pc, #124]	; (8008150 <SRAM_download_rhythm+0x164>)
 80080d2:	2200      	movs	r2, #0
 80080d4:	701a      	strb	r2, [r3, #0]
	while ((Keypad_Button = TM_KEYPAD_Read()) != TM_KEYPAD_Button_0) {
 80080d6:	f004 fe43 	bl	800cd60 <TM_KEYPAD_Read>
 80080da:	4603      	mov	r3, r0
 80080dc:	461a      	mov	r2, r3
 80080de:	4b26      	ldr	r3, [pc, #152]	; (8008178 <SRAM_download_rhythm+0x18c>)
 80080e0:	701a      	strb	r2, [r3, #0]
 80080e2:	4b25      	ldr	r3, [pc, #148]	; (8008178 <SRAM_download_rhythm+0x18c>)
 80080e4:	781b      	ldrb	r3, [r3, #0]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d19d      	bne.n	8008026 <SRAM_download_rhythm+0x3a>
 80080ea:	e002      	b.n	80080f2 <SRAM_download_rhythm+0x106>
				break;
 80080ec:	bf00      	nop
 80080ee:	e000      	b.n	80080f2 <SRAM_download_rhythm+0x106>
				break;
 80080f0:	bf00      	nop

		}
	}

	BSP_LED_Off(LED_GREEN);
 80080f2:	2000      	movs	r0, #0
 80080f4:	f003 fa70 	bl	800b5d8 <BSP_LED_Off>
	utoa(bytes_written, lcdline, 10);
 80080f8:	4b13      	ldr	r3, [pc, #76]	; (8008148 <SRAM_download_rhythm+0x15c>)
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	220a      	movs	r2, #10
 80080fe:	491c      	ldr	r1, [pc, #112]	; (8008170 <SRAM_download_rhythm+0x184>)
 8008100:	4618      	mov	r0, r3
 8008102:	f00f fc79 	bl	80179f8 <utoa>
	if(bytes_written == bytes_total)
 8008106:	4b10      	ldr	r3, [pc, #64]	; (8008148 <SRAM_download_rhythm+0x15c>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	683a      	ldr	r2, [r7, #0]
 800810c:	429a      	cmp	r2, r3
 800810e:	d105      	bne.n	800811c <SRAM_download_rhythm+0x130>
		TM_HD44780_Puts(0, 1, "Download OK     ");
 8008110:	4a1a      	ldr	r2, [pc, #104]	; (800817c <SRAM_download_rhythm+0x190>)
 8008112:	2101      	movs	r1, #1
 8008114:	2000      	movs	r0, #0
 8008116:	f004 f869 	bl	800c1ec <TM_HD44780_Puts>
 800811a:	e004      	b.n	8008126 <SRAM_download_rhythm+0x13a>
	else
		TM_HD44780_Puts(0, 1, "Download error  ");
 800811c:	4a18      	ldr	r2, [pc, #96]	; (8008180 <SRAM_download_rhythm+0x194>)
 800811e:	2101      	movs	r1, #1
 8008120:	2000      	movs	r0, #0
 8008122:	f004 f863 	bl	800c1ec <TM_HD44780_Puts>

	if(bytes_total != 0 && bytes_written != bytes_total)
 8008126:	683b      	ldr	r3, [r7, #0]
 8008128:	2b00      	cmp	r3, #0
 800812a:	d006      	beq.n	800813a <SRAM_download_rhythm+0x14e>
 800812c:	4b06      	ldr	r3, [pc, #24]	; (8008148 <SRAM_download_rhythm+0x15c>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	683a      	ldr	r2, [r7, #0]
 8008132:	429a      	cmp	r2, r3
 8008134:	d001      	beq.n	800813a <SRAM_download_rhythm+0x14e>
		return 0;
 8008136:	2300      	movs	r3, #0
 8008138:	e001      	b.n	800813e <SRAM_download_rhythm+0x152>
	else
		return bytes_written;
 800813a:	4b03      	ldr	r3, [pc, #12]	; (8008148 <SRAM_download_rhythm+0x15c>)
 800813c:	681b      	ldr	r3, [r3, #0]
}
 800813e:	4618      	mov	r0, r3
 8008140:	3708      	adds	r7, #8
 8008142:	46bd      	mov	sp, r7
 8008144:	bd80      	pop	{r7, pc}
 8008146:	bf00      	nop
 8008148:	20001d64 	.word	0x20001d64
 800814c:	200028e9 	.word	0x200028e9
 8008150:	200028e8 	.word	0x200028e8
 8008154:	08018d6c 	.word	0x08018d6c
 8008158:	200028e0 	.word	0x200028e0
 800815c:	200027e0 	.word	0x200027e0
 8008160:	08018d7c 	.word	0x08018d7c
 8008164:	08018d90 	.word	0x08018d90
 8008168:	200028e4 	.word	0x200028e4
 800816c:	08018d98 	.word	0x08018d98
 8008170:	20001270 	.word	0x20001270
 8008174:	200001e0 	.word	0x200001e0
 8008178:	20001c45 	.word	0x20001c45
 800817c:	08018da0 	.word	0x08018da0
 8008180:	08018db4 	.word	0x08018db4

08008184 <readLoopFromSD>:

void readLoopFromSD(uint32_t n,char *filename){
 8008184:	b590      	push	{r4, r7, lr}
 8008186:	f5ad 7d0d 	sub.w	sp, sp, #564	; 0x234
 800818a:	af00      	add	r7, sp, #0
 800818c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8008190:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8008194:	6018      	str	r0, [r3, #0]
 8008196:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800819a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800819e:	6019      	str	r1, [r3, #0]

	FIL fil;
	if(filename[0] == '\0')
 80081a0:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80081a4:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80081a8:	681b      	ldr	r3, [r3, #0]
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d04b      	beq.n	8008248 <readLoopFromSD+0xc4>
		return;
	//Mounted OK, turn on RED LED
	BSP_LED_On(LED_RED);
 80081b0:	2001      	movs	r0, #1
 80081b2:	f003 f9f7 	bl	800b5a4 <BSP_LED_On>

	if (f_open(&fil, filename, FA_OPEN_ALWAYS | FA_READ) == FR_OK){
 80081b6:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80081ba:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80081be:	f107 000c 	add.w	r0, r7, #12
 80081c2:	2211      	movs	r2, #17
 80081c4:	6819      	ldr	r1, [r3, #0]
 80081c6:	f7fd fb7b 	bl	80058c0 <f_open>
 80081ca:	4603      	mov	r3, r0
 80081cc:	2b00      	cmp	r3, #0
 80081ce:	d137      	bne.n	8008240 <readLoopFromSD+0xbc>
		pattern_audio_map[n + 1].sample_position = pattern_audio_map[n].sample_position + SD_ReadAudio(pattern_audio_map[n].sample_position,&fil);
 80081d0:	4920      	ldr	r1, [pc, #128]	; (8008254 <readLoopFromSD+0xd0>)
 80081d2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80081d6:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80081da:	681a      	ldr	r2, [r3, #0]
 80081dc:	4613      	mov	r3, r2
 80081de:	005b      	lsls	r3, r3, #1
 80081e0:	4413      	add	r3, r2
 80081e2:	009b      	lsls	r3, r3, #2
 80081e4:	440b      	add	r3, r1
 80081e6:	3304      	adds	r3, #4
 80081e8:	681c      	ldr	r4, [r3, #0]
 80081ea:	491a      	ldr	r1, [pc, #104]	; (8008254 <readLoopFromSD+0xd0>)
 80081ec:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80081f0:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80081f4:	681a      	ldr	r2, [r3, #0]
 80081f6:	4613      	mov	r3, r2
 80081f8:	005b      	lsls	r3, r3, #1
 80081fa:	4413      	add	r3, r2
 80081fc:	009b      	lsls	r3, r3, #2
 80081fe:	440b      	add	r3, r1
 8008200:	3304      	adds	r3, #4
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	f107 020c 	add.w	r2, r7, #12
 8008208:	4611      	mov	r1, r2
 800820a:	4618      	mov	r0, r3
 800820c:	f7ff fda4 	bl	8007d58 <SD_ReadAudio>
 8008210:	4601      	mov	r1, r0
 8008212:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8008216:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	1c5a      	adds	r2, r3, #1
 800821e:	4421      	add	r1, r4
 8008220:	480c      	ldr	r0, [pc, #48]	; (8008254 <readLoopFromSD+0xd0>)
 8008222:	4613      	mov	r3, r2
 8008224:	005b      	lsls	r3, r3, #1
 8008226:	4413      	add	r3, r2
 8008228:	009b      	lsls	r3, r3, #2
 800822a:	4403      	add	r3, r0
 800822c:	3304      	adds	r3, #4
 800822e:	6019      	str	r1, [r3, #0]
		f_close(&fil);
 8008230:	f107 030c 	add.w	r3, r7, #12
 8008234:	4618      	mov	r0, r3
 8008236:	f7fd ffce 	bl	80061d6 <f_close>
		BSP_LED_Off(LED_GREEN);
 800823a:	2000      	movs	r0, #0
 800823c:	f003 f9cc 	bl	800b5d8 <BSP_LED_Off>
		//Unmount drive, don't forget this!

	}

	BSP_LED_Off(LED_RED);
 8008240:	2001      	movs	r0, #1
 8008242:	f003 f9c9 	bl	800b5d8 <BSP_LED_Off>

	return;
 8008246:	e000      	b.n	800824a <readLoopFromSD+0xc6>
		return;
 8008248:	bf00      	nop

}
 800824a:	f507 770d 	add.w	r7, r7, #564	; 0x234
 800824e:	46bd      	mov	sp, r7
 8008250:	bd90      	pop	{r4, r7, pc}
 8008252:	bf00      	nop
 8008254:	20000568 	.word	0x20000568

08008258 <readRhythmFromSD>:

void readRhythmFromSD(char *filename){
 8008258:	b580      	push	{r7, lr}
 800825a:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 800825e:	af00      	add	r7, sp, #0
 8008260:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8008264:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8008268:	6018      	str	r0, [r3, #0]

	FIL fil;
	if(filename[0] == '\0')
 800826a:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800826e:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	781b      	ldrb	r3, [r3, #0]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d03b      	beq.n	80082f2 <readRhythmFromSD+0x9a>
		return;
	//Mounted OK, turn on RED LED
	BSP_LED_On(LED_RED);
 800827a:	2001      	movs	r0, #1
 800827c:	f003 f992 	bl	800b5a4 <BSP_LED_On>
	SRAM_seekWrite(0,SRAM_SET);
 8008280:	2100      	movs	r1, #0
 8008282:	2000      	movs	r0, #0
 8008284:	f7f8 fe34 	bl	8000ef0 <SRAM_seekWrite>
	if (f_open(&fil, filename, FA_OPEN_ALWAYS | FA_READ) == FR_OK){
 8008288:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800828c:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8008290:	f107 000c 	add.w	r0, r7, #12
 8008294:	2211      	movs	r2, #17
 8008296:	6819      	ldr	r1, [r3, #0]
 8008298:	f7fd fb12 	bl	80058c0 <f_open>
 800829c:	4603      	mov	r3, r0
 800829e:	2b00      	cmp	r3, #0
 80082a0:	d123      	bne.n	80082ea <readRhythmFromSD+0x92>
		while(1){
			f_read(&fil,(uint8_t *)audio_buf,BYTE_SIZE,&bytes_read);
 80082a2:	f107 000c 	add.w	r0, r7, #12
 80082a6:	4b15      	ldr	r3, [pc, #84]	; (80082fc <readRhythmFromSD+0xa4>)
 80082a8:	f44f 7280 	mov.w	r2, #256	; 0x100
 80082ac:	4914      	ldr	r1, [pc, #80]	; (8008300 <readRhythmFromSD+0xa8>)
 80082ae:	f7fd fc47 	bl	8005b40 <f_read>
			writeSRAM((unsigned char *)audio_buf,bytes_read);
 80082b2:	4b12      	ldr	r3, [pc, #72]	; (80082fc <readRhythmFromSD+0xa4>)
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	4619      	mov	r1, r3
 80082b8:	4811      	ldr	r0, [pc, #68]	; (8008300 <readRhythmFromSD+0xa8>)
 80082ba:	f7f8 feb1 	bl	8001020 <writeSRAM>
			if(f_eof(&fil))
 80082be:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80082c2:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80082c6:	689a      	ldr	r2, [r3, #8]
 80082c8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80082cc:	f5a3 7309 	sub.w	r3, r3, #548	; 0x224
 80082d0:	68db      	ldr	r3, [r3, #12]
 80082d2:	429a      	cmp	r2, r3
 80082d4:	d000      	beq.n	80082d8 <readRhythmFromSD+0x80>
			f_read(&fil,(uint8_t *)audio_buf,BYTE_SIZE,&bytes_read);
 80082d6:	e7e4      	b.n	80082a2 <readRhythmFromSD+0x4a>
				break;
 80082d8:	bf00      	nop
		}
		f_close(&fil);
 80082da:	f107 030c 	add.w	r3, r7, #12
 80082de:	4618      	mov	r0, r3
 80082e0:	f7fd ff79 	bl	80061d6 <f_close>
		BSP_LED_Off(LED_GREEN);
 80082e4:	2000      	movs	r0, #0
 80082e6:	f003 f977 	bl	800b5d8 <BSP_LED_Off>
		//Unmount drive, don't forget this!

	}

	BSP_LED_Off(LED_RED);
 80082ea:	2001      	movs	r0, #1
 80082ec:	f003 f974 	bl	800b5d8 <BSP_LED_Off>

	return;
 80082f0:	e000      	b.n	80082f4 <readRhythmFromSD+0x9c>
		return;
 80082f2:	bf00      	nop

}
 80082f4:	f507 770c 	add.w	r7, r7, #560	; 0x230
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}
 80082fc:	20001d60 	.word	0x20001d60
 8008300:	20001c5c 	.word	0x20001c5c

08008304 <writeSRAMtoSD>:

void writeSRAMtoSD(uint32_t bts,char *filename){
 8008304:	b580      	push	{r7, lr}
 8008306:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 800830a:	af00      	add	r7, sp, #0
 800830c:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8008310:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8008314:	6018      	str	r0, [r3, #0]
 8008316:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800831a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800831e:	6019      	str	r1, [r3, #0]
	FIL fil;
	bytes_written = 0;
 8008320:	4b38      	ldr	r3, [pc, #224]	; (8008404 <writeSRAMtoSD+0x100>)
 8008322:	2200      	movs	r2, #0
 8008324:	601a      	str	r2, [r3, #0]
	if(filename[0] == '\0')
 8008326:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800832a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	781b      	ldrb	r3, [r3, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d060      	beq.n	80083f8 <writeSRAMtoSD+0xf4>
		return;

	if(f_open(&fil, filename, FA_OPEN_ALWAYS | FA_WRITE) == FR_OK){
 8008336:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800833a:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 800833e:	f107 000c 	add.w	r0, r7, #12
 8008342:	2212      	movs	r2, #18
 8008344:	6819      	ldr	r1, [r3, #0]
 8008346:	f7fd fabb 	bl	80058c0 <f_open>
 800834a:	4603      	mov	r3, r0
 800834c:	2b00      	cmp	r3, #0
 800834e:	d154      	bne.n	80083fa <writeSRAMtoSD+0xf6>
		BSP_LED_On(LED_RED);
 8008350:	2001      	movs	r0, #1
 8008352:	f003 f927 	bl	800b5a4 <BSP_LED_On>
		BSP_LED_On(LED_GREEN);
 8008356:	2000      	movs	r0, #0
 8008358:	f003 f924 	bl	800b5a4 <BSP_LED_On>
		SRAM_seekRead(0,SRAM_SET);
 800835c:	2100      	movs	r1, #0
 800835e:	2000      	movs	r0, #0
 8008360:	f7f8 fd9a 	bl	8000e98 <SRAM_seekRead>
		while(bts > 0){
 8008364:	e035      	b.n	80083d2 <writeSRAMtoSD+0xce>
			if(bts > BYTE_SIZE){
 8008366:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800836a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008374:	d90d      	bls.n	8008392 <writeSRAMtoSD+0x8e>
				readSRAM((unsigned char *)audio_buf,BYTE_SIZE);
 8008376:	f44f 7180 	mov.w	r1, #256	; 0x100
 800837a:	4823      	ldr	r0, [pc, #140]	; (8008408 <writeSRAMtoSD+0x104>)
 800837c:	f7f8 fee6 	bl	800114c <readSRAM>
				f_write(&fil,audio_buf,BYTE_SIZE,&bytes_written);
 8008380:	f107 000c 	add.w	r0, r7, #12
 8008384:	4b1f      	ldr	r3, [pc, #124]	; (8008404 <writeSRAMtoSD+0x100>)
 8008386:	f44f 7280 	mov.w	r2, #256	; 0x100
 800838a:	491f      	ldr	r1, [pc, #124]	; (8008408 <writeSRAMtoSD+0x104>)
 800838c:	f7fd fd0f 	bl	8005dae <f_write>
 8008390:	e012      	b.n	80083b8 <writeSRAMtoSD+0xb4>
			}
			else{
				readSRAM((unsigned char *)audio_buf,bts);
 8008392:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8008396:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800839a:	6819      	ldr	r1, [r3, #0]
 800839c:	481a      	ldr	r0, [pc, #104]	; (8008408 <writeSRAMtoSD+0x104>)
 800839e:	f7f8 fed5 	bl	800114c <readSRAM>
				f_write(&fil,audio_buf,bts,&bytes_written);
 80083a2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80083a6:	f5a3 720b 	sub.w	r2, r3, #556	; 0x22c
 80083aa:	f107 000c 	add.w	r0, r7, #12
 80083ae:	4b15      	ldr	r3, [pc, #84]	; (8008404 <writeSRAMtoSD+0x100>)
 80083b0:	6812      	ldr	r2, [r2, #0]
 80083b2:	4915      	ldr	r1, [pc, #84]	; (8008408 <writeSRAMtoSD+0x104>)
 80083b4:	f7fd fcfb 	bl	8005dae <f_write>
			}

			bts -= bytes_written;
 80083b8:	4b12      	ldr	r3, [pc, #72]	; (8008404 <writeSRAMtoSD+0x100>)
 80083ba:	681a      	ldr	r2, [r3, #0]
 80083bc:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80083c0:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80083c4:	f507 710c 	add.w	r1, r7, #560	; 0x230
 80083c8:	f5a1 710b 	sub.w	r1, r1, #556	; 0x22c
 80083cc:	6809      	ldr	r1, [r1, #0]
 80083ce:	1a8a      	subs	r2, r1, r2
 80083d0:	601a      	str	r2, [r3, #0]
		while(bts > 0){
 80083d2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80083d6:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d1c2      	bne.n	8008366 <writeSRAMtoSD+0x62>
		}

		f_close(&fil);
 80083e0:	f107 030c 	add.w	r3, r7, #12
 80083e4:	4618      	mov	r0, r3
 80083e6:	f7fd fef6 	bl	80061d6 <f_close>
		BSP_LED_Off(LED_GREEN);
 80083ea:	2000      	movs	r0, #0
 80083ec:	f003 f8f4 	bl	800b5d8 <BSP_LED_Off>
		BSP_LED_Off(LED_RED);
 80083f0:	2001      	movs	r0, #1
 80083f2:	f003 f8f1 	bl	800b5d8 <BSP_LED_Off>
 80083f6:	e000      	b.n	80083fa <writeSRAMtoSD+0xf6>
		return;
 80083f8:	bf00      	nop
	}
}
 80083fa:	f507 770c 	add.w	r7, r7, #560	; 0x230
 80083fe:	46bd      	mov	sp, r7
 8008400:	bd80      	pop	{r7, pc}
 8008402:	bf00      	nop
 8008404:	20001d64 	.word	0x20001d64
 8008408:	20001c5c 	.word	0x20001c5c

0800840c <saveAllLoopsToSD>:

void saveAllLoopsToSD(char *filename){
 800840c:	b580      	push	{r7, lr}
 800840e:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 8008412:	af00      	add	r7, sp, #0
 8008414:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8008418:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800841c:	6018      	str	r0, [r3, #0]
	FIL fil;
		if(filename[0] == '\0')
 800841e:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8008422:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	781b      	ldrb	r3, [r3, #0]
 800842a:	2b00      	cmp	r3, #0
 800842c:	d035      	beq.n	800849a <saveAllLoopsToSD+0x8e>
			return;
		//Mounted OK, turn on RED LED
		BSP_LED_On(LED_RED);
 800842e:	2001      	movs	r0, #1
 8008430:	f003 f8b8 	bl	800b5a4 <BSP_LED_On>
		if (f_open(&fil, filename, FA_OPEN_ALWAYS | FA_WRITE) == FR_OK){
 8008434:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8008438:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800843c:	f107 000c 	add.w	r0, r7, #12
 8008440:	2212      	movs	r2, #18
 8008442:	6819      	ldr	r1, [r3, #0]
 8008444:	f7fd fa3c 	bl	80058c0 <f_open>
 8008448:	4603      	mov	r3, r0
 800844a:	2b00      	cmp	r3, #0
 800844c:	d127      	bne.n	800849e <saveAllLoopsToSD+0x92>
			SD_WriteAudio(pattern_audio_map[looper.StartPattern].sample_position,pattern_audio_map[looper.EndPattern + 1].sample_position,&fil);
 800844e:	4b16      	ldr	r3, [pc, #88]	; (80084a8 <saveAllLoopsToSD+0x9c>)
 8008450:	695a      	ldr	r2, [r3, #20]
 8008452:	4916      	ldr	r1, [pc, #88]	; (80084ac <saveAllLoopsToSD+0xa0>)
 8008454:	4613      	mov	r3, r2
 8008456:	005b      	lsls	r3, r3, #1
 8008458:	4413      	add	r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	440b      	add	r3, r1
 800845e:	3304      	adds	r3, #4
 8008460:	6818      	ldr	r0, [r3, #0]
 8008462:	4b11      	ldr	r3, [pc, #68]	; (80084a8 <saveAllLoopsToSD+0x9c>)
 8008464:	699b      	ldr	r3, [r3, #24]
 8008466:	1c5a      	adds	r2, r3, #1
 8008468:	4910      	ldr	r1, [pc, #64]	; (80084ac <saveAllLoopsToSD+0xa0>)
 800846a:	4613      	mov	r3, r2
 800846c:	005b      	lsls	r3, r3, #1
 800846e:	4413      	add	r3, r2
 8008470:	009b      	lsls	r3, r3, #2
 8008472:	440b      	add	r3, r1
 8008474:	3304      	adds	r3, #4
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	f107 020c 	add.w	r2, r7, #12
 800847c:	4619      	mov	r1, r3
 800847e:	f7ff fd13 	bl	8007ea8 <SD_WriteAudio>
			f_close(&fil);
 8008482:	f107 030c 	add.w	r3, r7, #12
 8008486:	4618      	mov	r0, r3
 8008488:	f7fd fea5 	bl	80061d6 <f_close>
			BSP_LED_Off(LED_GREEN);
 800848c:	2000      	movs	r0, #0
 800848e:	f003 f8a3 	bl	800b5d8 <BSP_LED_Off>
			BSP_LED_Off(LED_RED);
 8008492:	2001      	movs	r0, #1
 8008494:	f003 f8a0 	bl	800b5d8 <BSP_LED_Off>
		}

		return;
 8008498:	e001      	b.n	800849e <saveAllLoopsToSD+0x92>
			return;
 800849a:	bf00      	nop
 800849c:	e000      	b.n	80084a0 <saveAllLoopsToSD+0x94>
		return;
 800849e:	bf00      	nop

}
 80084a0:	f507 770c 	add.w	r7, r7, #560	; 0x230
 80084a4:	46bd      	mov	sp, r7
 80084a6:	bd80      	pop	{r7, pc}
 80084a8:	20001228 	.word	0x20001228
 80084ac:	20000568 	.word	0x20000568

080084b0 <saveLoopToSD>:

void saveLoopToSD(uint32_t n,char *filename){
 80084b0:	b580      	push	{r7, lr}
 80084b2:	f5ad 7d0c 	sub.w	sp, sp, #560	; 0x230
 80084b6:	af00      	add	r7, sp, #0
 80084b8:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80084bc:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 80084c0:	6018      	str	r0, [r3, #0]
 80084c2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80084c6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80084ca:	6019      	str	r1, [r3, #0]
	FIL fil;
	if(filename[0] == '\0')
 80084cc:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80084d0:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80084d4:	681b      	ldr	r3, [r3, #0]
 80084d6:	781b      	ldrb	r3, [r3, #0]
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d03b      	beq.n	8008554 <saveLoopToSD+0xa4>
		return;
	//Mounted OK, turn on RED LED
	BSP_LED_On(LED_RED);
 80084dc:	2001      	movs	r0, #1
 80084de:	f003 f861 	bl	800b5a4 <BSP_LED_On>
	if (f_open(&fil, filename, FA_OPEN_ALWAYS | FA_WRITE) == FR_OK){
 80084e2:	f507 730c 	add.w	r3, r7, #560	; 0x230
 80084e6:	f5a3 730c 	sub.w	r3, r3, #560	; 0x230
 80084ea:	f107 000c 	add.w	r0, r7, #12
 80084ee:	2212      	movs	r2, #18
 80084f0:	6819      	ldr	r1, [r3, #0]
 80084f2:	f7fd f9e5 	bl	80058c0 <f_open>
 80084f6:	4603      	mov	r3, r0
 80084f8:	2b00      	cmp	r3, #0
 80084fa:	d12d      	bne.n	8008558 <saveLoopToSD+0xa8>
		SD_WriteAudio(pattern_audio_map[n].sample_position,pattern_audio_map[n + 1].sample_position,&fil);
 80084fc:	4919      	ldr	r1, [pc, #100]	; (8008564 <saveLoopToSD+0xb4>)
 80084fe:	f507 730c 	add.w	r3, r7, #560	; 0x230
 8008502:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 8008506:	681a      	ldr	r2, [r3, #0]
 8008508:	4613      	mov	r3, r2
 800850a:	005b      	lsls	r3, r3, #1
 800850c:	4413      	add	r3, r2
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	440b      	add	r3, r1
 8008512:	3304      	adds	r3, #4
 8008514:	6818      	ldr	r0, [r3, #0]
 8008516:	f507 730c 	add.w	r3, r7, #560	; 0x230
 800851a:	f5a3 730b 	sub.w	r3, r3, #556	; 0x22c
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	1c5a      	adds	r2, r3, #1
 8008522:	4910      	ldr	r1, [pc, #64]	; (8008564 <saveLoopToSD+0xb4>)
 8008524:	4613      	mov	r3, r2
 8008526:	005b      	lsls	r3, r3, #1
 8008528:	4413      	add	r3, r2
 800852a:	009b      	lsls	r3, r3, #2
 800852c:	440b      	add	r3, r1
 800852e:	3304      	adds	r3, #4
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f107 020c 	add.w	r2, r7, #12
 8008536:	4619      	mov	r1, r3
 8008538:	f7ff fcb6 	bl	8007ea8 <SD_WriteAudio>
		f_close(&fil);
 800853c:	f107 030c 	add.w	r3, r7, #12
 8008540:	4618      	mov	r0, r3
 8008542:	f7fd fe48 	bl	80061d6 <f_close>
		BSP_LED_Off(LED_GREEN);
 8008546:	2000      	movs	r0, #0
 8008548:	f003 f846 	bl	800b5d8 <BSP_LED_Off>
		BSP_LED_Off(LED_RED);
 800854c:	2001      	movs	r0, #1
 800854e:	f003 f843 	bl	800b5d8 <BSP_LED_Off>
	}

	return;
 8008552:	e001      	b.n	8008558 <saveLoopToSD+0xa8>
		return;
 8008554:	bf00      	nop
 8008556:	e000      	b.n	800855a <saveLoopToSD+0xaa>
	return;
 8008558:	bf00      	nop
}
 800855a:	f507 770c 	add.w	r7, r7, #560	; 0x230
 800855e:	46bd      	mov	sp, r7
 8008560:	bd80      	pop	{r7, pc}
 8008562:	bf00      	nop
 8008564:	20000568 	.word	0x20000568

08008568 <menuShowOptions>:
static char filename[13];
static menuNodeType menu_nodes[TOTAL_MENU_NODES];
static uint8_t current_node_index;	// current option
extern TM_KEYPAD_Button_t Keypad_Button;

void menuShowOptions(){
 8008568:	b580      	push	{r7, lr}
 800856a:	b086      	sub	sp, #24
 800856c:	af02      	add	r7, sp, #8
	TM_KEYPAD_Button_t option_index;
	NODE_TYPE node_index;
	uint16_t offset = 10;
 800856e:	230a      	movs	r3, #10
 8008570:	81bb      	strh	r3, [r7, #12]
	char *tit;

	TM_ILI9341_Fill(ILI9341_COLOR_MAGENTA);
 8008572:	f24a 2054 	movw	r0, #41556	; 0xa254
 8008576:	f004 f9b5 	bl	800c8e4 <TM_ILI9341_Fill>

	for(option_index = TM_KEYPAD_Button_0; option_index < MAX_NUM_OPTS; option_index++){
 800857a:	2300      	movs	r3, #0
 800857c:	73fb      	strb	r3, [r7, #15]
 800857e:	e045      	b.n	800860c <menuShowOptions+0xa4>
		node_index = menu_nodes[current_node_index].options[option_index];
 8008580:	4b26      	ldr	r3, [pc, #152]	; (800861c <menuShowOptions+0xb4>)
 8008582:	781b      	ldrb	r3, [r3, #0]
 8008584:	4618      	mov	r0, r3
 8008586:	7bfa      	ldrb	r2, [r7, #15]
 8008588:	4925      	ldr	r1, [pc, #148]	; (8008620 <menuShowOptions+0xb8>)
 800858a:	4603      	mov	r3, r0
 800858c:	00db      	lsls	r3, r3, #3
 800858e:	1a1b      	subs	r3, r3, r0
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	440b      	add	r3, r1
 8008594:	4413      	add	r3, r2
 8008596:	3304      	adds	r3, #4
 8008598:	781b      	ldrb	r3, [r3, #0]
 800859a:	71fb      	strb	r3, [r7, #7]
		if(node_index == NODE_EMPTY)
 800859c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80085a4:	d02e      	beq.n	8008604 <menuShowOptions+0x9c>
			continue;
		if(option_index == TM_KEYPAD_Button_0)
 80085a6:	7bfb      	ldrb	r3, [r7, #15]
 80085a8:	2b00      	cmp	r3, #0
 80085aa:	d102      	bne.n	80085b2 <menuShowOptions+0x4a>
			tit = "Go back";
 80085ac:	4b1d      	ldr	r3, [pc, #116]	; (8008624 <menuShowOptions+0xbc>)
 80085ae:	60bb      	str	r3, [r7, #8]
 80085b0:	e009      	b.n	80085c6 <menuShowOptions+0x5e>
		else
			tit = menu_nodes[node_index].title;
 80085b2:	f997 2007 	ldrsb.w	r2, [r7, #7]
 80085b6:	491a      	ldr	r1, [pc, #104]	; (8008620 <menuShowOptions+0xb8>)
 80085b8:	4613      	mov	r3, r2
 80085ba:	00db      	lsls	r3, r3, #3
 80085bc:	1a9b      	subs	r3, r3, r2
 80085be:	009b      	lsls	r3, r3, #2
 80085c0:	440b      	add	r3, r1
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	60bb      	str	r3, [r7, #8]

		sprintf(lcdline,"[%c] %s",TM_KEYPAD_GetChar(option_index),tit);
 80085c6:	7bfb      	ldrb	r3, [r7, #15]
 80085c8:	4618      	mov	r0, r3
 80085ca:	f004 fbb9 	bl	800cd40 <TM_KEYPAD_GetChar>
 80085ce:	4603      	mov	r3, r0
 80085d0:	461a      	mov	r2, r3
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	4914      	ldr	r1, [pc, #80]	; (8008628 <menuShowOptions+0xc0>)
 80085d6:	4815      	ldr	r0, [pc, #84]	; (800862c <menuShowOptions+0xc4>)
 80085d8:	f00f f980 	bl	80178dc <siprintf>
		TM_ILI9341_Puts(option_index == TM_KEYPAD_Button_0?10:30, offset, lcdline, &TM_Font_11x18, ILI9341_COLOR_BLACK, ILI9341_COLOR_BLUE2);
 80085dc:	7bfb      	ldrb	r3, [r7, #15]
 80085de:	2b00      	cmp	r3, #0
 80085e0:	d101      	bne.n	80085e6 <menuShowOptions+0x7e>
 80085e2:	200a      	movs	r0, #10
 80085e4:	e000      	b.n	80085e8 <menuShowOptions+0x80>
 80085e6:	201e      	movs	r0, #30
 80085e8:	89b9      	ldrh	r1, [r7, #12]
 80085ea:	f240 531d 	movw	r3, #1309	; 0x51d
 80085ee:	9301      	str	r3, [sp, #4]
 80085f0:	2300      	movs	r3, #0
 80085f2:	9300      	str	r3, [sp, #0]
 80085f4:	4b0e      	ldr	r3, [pc, #56]	; (8008630 <menuShowOptions+0xc8>)
 80085f6:	4a0d      	ldr	r2, [pc, #52]	; (800862c <menuShowOptions+0xc4>)
 80085f8:	f004 fa78 	bl	800caec <TM_ILI9341_Puts>
		offset += 20;
 80085fc:	89bb      	ldrh	r3, [r7, #12]
 80085fe:	3314      	adds	r3, #20
 8008600:	81bb      	strh	r3, [r7, #12]
 8008602:	e000      	b.n	8008606 <menuShowOptions+0x9e>
			continue;
 8008604:	bf00      	nop
	for(option_index = TM_KEYPAD_Button_0; option_index < MAX_NUM_OPTS; option_index++){
 8008606:	7bfb      	ldrb	r3, [r7, #15]
 8008608:	3301      	adds	r3, #1
 800860a:	73fb      	strb	r3, [r7, #15]
 800860c:	7bfb      	ldrb	r3, [r7, #15]
 800860e:	2b0f      	cmp	r3, #15
 8008610:	d9b6      	bls.n	8008580 <menuShowOptions+0x18>
	}

}
 8008612:	bf00      	nop
 8008614:	bf00      	nop
 8008616:	3710      	adds	r7, #16
 8008618:	46bd      	mov	sp, r7
 800861a:	bd80      	pop	{r7, pc}
 800861c:	20001fa8 	.word	0x20001fa8
 8008620:	20001d78 	.word	0x20001d78
 8008624:	08018dc8 	.word	0x08018dc8
 8008628:	08018dd0 	.word	0x08018dd0
 800862c:	20001270 	.word	0x20001270
 8008630:	200001e0 	.word	0x200001e0

08008634 <initParentNode>:
/**
 * which node,number of options,title,return node
 */
static void initParentNode(uint8_t node_index,char * tit,void (*fun)()){
 8008634:	b480      	push	{r7}
 8008636:	b085      	sub	sp, #20
 8008638:	af00      	add	r7, sp, #0
 800863a:	4603      	mov	r3, r0
 800863c:	60b9      	str	r1, [r7, #8]
 800863e:	607a      	str	r2, [r7, #4]
 8008640:	73fb      	strb	r3, [r7, #15]
	if(node_index >= TOTAL_MENU_NODES)
 8008642:	7bfb      	ldrb	r3, [r7, #15]
 8008644:	2b13      	cmp	r3, #19
 8008646:	d81f      	bhi.n	8008688 <initParentNode+0x54>
		return;
	menu_nodes[node_index].title = tit;
 8008648:	7bfa      	ldrb	r2, [r7, #15]
 800864a:	4912      	ldr	r1, [pc, #72]	; (8008694 <initParentNode+0x60>)
 800864c:	4613      	mov	r3, r2
 800864e:	00db      	lsls	r3, r3, #3
 8008650:	1a9b      	subs	r3, r3, r2
 8008652:	009b      	lsls	r3, r3, #2
 8008654:	440b      	add	r3, r1
 8008656:	68ba      	ldr	r2, [r7, #8]
 8008658:	601a      	str	r2, [r3, #0]
	menu_nodes[node_index].options[TM_KEYPAD_Button_0] = node_index;	// return to itself by default
 800865a:	7bfa      	ldrb	r2, [r7, #15]
 800865c:	f997 000f 	ldrsb.w	r0, [r7, #15]
 8008660:	490c      	ldr	r1, [pc, #48]	; (8008694 <initParentNode+0x60>)
 8008662:	4613      	mov	r3, r2
 8008664:	00db      	lsls	r3, r3, #3
 8008666:	1a9b      	subs	r3, r3, r2
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	440b      	add	r3, r1
 800866c:	3304      	adds	r3, #4
 800866e:	4602      	mov	r2, r0
 8008670:	701a      	strb	r2, [r3, #0]
	menu_nodes[node_index].callback = fun;
 8008672:	7bfa      	ldrb	r2, [r7, #15]
 8008674:	4907      	ldr	r1, [pc, #28]	; (8008694 <initParentNode+0x60>)
 8008676:	4613      	mov	r3, r2
 8008678:	00db      	lsls	r3, r3, #3
 800867a:	1a9b      	subs	r3, r3, r2
 800867c:	009b      	lsls	r3, r3, #2
 800867e:	440b      	add	r3, r1
 8008680:	3318      	adds	r3, #24
 8008682:	687a      	ldr	r2, [r7, #4]
 8008684:	601a      	str	r2, [r3, #0]
 8008686:	e000      	b.n	800868a <initParentNode+0x56>
		return;
 8008688:	bf00      	nop
}
 800868a:	3714      	adds	r7, #20
 800868c:	46bd      	mov	sp, r7
 800868e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008692:	4770      	bx	lr
 8008694:	20001d78 	.word	0x20001d78

08008698 <connectChildNode>:

/**
 * parent node,which parent option,child node
 */
void connectChildNode(uint8_t parent,uint8_t opt_key,uint8_t child){
 8008698:	b490      	push	{r4, r7}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	4603      	mov	r3, r0
 80086a0:	71fb      	strb	r3, [r7, #7]
 80086a2:	460b      	mov	r3, r1
 80086a4:	71bb      	strb	r3, [r7, #6]
 80086a6:	4613      	mov	r3, r2
 80086a8:	717b      	strb	r3, [r7, #5]
	if(child >= TOTAL_MENU_NODES)
 80086aa:	797b      	ldrb	r3, [r7, #5]
 80086ac:	2b13      	cmp	r3, #19
 80086ae:	d820      	bhi.n	80086f2 <connectChildNode+0x5a>
		return;
	if(opt_key == TM_KEYPAD_Button_0)	// option "0" will be connected to par_node later
 80086b0:	79bb      	ldrb	r3, [r7, #6]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d01f      	beq.n	80086f6 <connectChildNode+0x5e>
		return;
	if(opt_key > TM_KEYPAD_Button_D)
 80086b6:	79bb      	ldrb	r3, [r7, #6]
 80086b8:	2b0f      	cmp	r3, #15
 80086ba:	d81e      	bhi.n	80086fa <connectChildNode+0x62>
		return;
	menu_nodes[child].options[TM_KEYPAD_Button_0] = parent;
 80086bc:	797a      	ldrb	r2, [r7, #5]
 80086be:	f997 0007 	ldrsb.w	r0, [r7, #7]
 80086c2:	4910      	ldr	r1, [pc, #64]	; (8008704 <connectChildNode+0x6c>)
 80086c4:	4613      	mov	r3, r2
 80086c6:	00db      	lsls	r3, r3, #3
 80086c8:	1a9b      	subs	r3, r3, r2
 80086ca:	009b      	lsls	r3, r3, #2
 80086cc:	440b      	add	r3, r1
 80086ce:	3304      	adds	r3, #4
 80086d0:	4602      	mov	r2, r0
 80086d2:	701a      	strb	r2, [r3, #0]
	menu_nodes[parent].options[opt_key] = child;
 80086d4:	79fa      	ldrb	r2, [r7, #7]
 80086d6:	79b9      	ldrb	r1, [r7, #6]
 80086d8:	f997 4005 	ldrsb.w	r4, [r7, #5]
 80086dc:	4809      	ldr	r0, [pc, #36]	; (8008704 <connectChildNode+0x6c>)
 80086de:	4613      	mov	r3, r2
 80086e0:	00db      	lsls	r3, r3, #3
 80086e2:	1a9b      	subs	r3, r3, r2
 80086e4:	009b      	lsls	r3, r3, #2
 80086e6:	4403      	add	r3, r0
 80086e8:	440b      	add	r3, r1
 80086ea:	3304      	adds	r3, #4
 80086ec:	4622      	mov	r2, r4
 80086ee:	701a      	strb	r2, [r3, #0]
 80086f0:	e004      	b.n	80086fc <connectChildNode+0x64>
		return;
 80086f2:	bf00      	nop
 80086f4:	e002      	b.n	80086fc <connectChildNode+0x64>
		return;
 80086f6:	bf00      	nop
 80086f8:	e000      	b.n	80086fc <connectChildNode+0x64>
		return;
 80086fa:	bf00      	nop

}
 80086fc:	3708      	adds	r7, #8
 80086fe:	46bd      	mov	sp, r7
 8008700:	bc90      	pop	{r4, r7}
 8008702:	4770      	bx	lr
 8008704:	20001d78 	.word	0x20001d78

08008708 <menuInit>:

void setCurrentMenuNode(uint8_t node){
	current_node_index = node;
}

void menuInit(){
 8008708:	b580      	push	{r7, lr}
 800870a:	af00      	add	r7, sp, #0
	menuInitMsg();
 800870c:	f001 fc9e 	bl	800a04c <menuInitMsg>
	menuInitFunctions();
 8008710:	f001 fc70 	bl	8009ff4 <menuInitFunctions>
	memset(menu_nodes,(int)NODE_EMPTY,sizeof(menu_nodes));
 8008714:	f44f 720c 	mov.w	r2, #560	; 0x230
 8008718:	f04f 31ff 	mov.w	r1, #4294967295
 800871c:	4850      	ldr	r0, [pc, #320]	; (8008860 <menuInit+0x158>)
 800871e:	f00e ffcd 	bl	80176bc <memset>
	current_node_index = MAIN_MENU;
 8008722:	4b50      	ldr	r3, [pc, #320]	; (8008864 <menuInit+0x15c>)
 8008724:	2200      	movs	r2, #0
 8008726:	701a      	strb	r2, [r3, #0]

	// top 3 nodes: AUDIO RHYTHM AUDIO+RHYTHM
	initParentNode(MAIN_MENU,messages[MAIN],NULL);
 8008728:	4b4f      	ldr	r3, [pc, #316]	; (8008868 <menuInit+0x160>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	2200      	movs	r2, #0
 800872e:	4619      	mov	r1, r3
 8008730:	2000      	movs	r0, #0
 8008732:	f7ff ff7f 	bl	8008634 <initParentNode>
		initParentNode(AUDIO_NODE,"Audio",audio_only);									// [AUDIO]
 8008736:	4a4d      	ldr	r2, [pc, #308]	; (800886c <menuInit+0x164>)
 8008738:	494d      	ldr	r1, [pc, #308]	; (8008870 <menuInit+0x168>)
 800873a:	2001      	movs	r0, #1
 800873c:	f7ff ff7a 	bl	8008634 <initParentNode>
			initParentNode(RECORD_SELECT_LOOPS_NODE,messages[REC_SEL_LOOPS],select_loops);
 8008740:	4b49      	ldr	r3, [pc, #292]	; (8008868 <menuInit+0x160>)
 8008742:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008744:	4a4b      	ldr	r2, [pc, #300]	; (8008874 <menuInit+0x16c>)
 8008746:	4619      	mov	r1, r3
 8008748:	2006      	movs	r0, #6
 800874a:	f7ff ff73 	bl	8008634 <initParentNode>
		initParentNode(RHYTHM_NODE,messages[AUDIO_RHYTHM],audio_rhythm);				// [AUDIO AND RHYTHM]
 800874e:	4b46      	ldr	r3, [pc, #280]	; (8008868 <menuInit+0x160>)
 8008750:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008752:	4a49      	ldr	r2, [pc, #292]	; (8008878 <menuInit+0x170>)
 8008754:	4619      	mov	r1, r3
 8008756:	2002      	movs	r0, #2
 8008758:	f7ff ff6c 	bl	8008634 <initParentNode>
			initParentNode(DOWNLOAD_RHYTHM_NODE,messages[DOWNL_RTH],download_rhythm);		// [DOWNLOAD RHYTHM
 800875c:	4b42      	ldr	r3, [pc, #264]	; (8008868 <menuInit+0x160>)
 800875e:	689b      	ldr	r3, [r3, #8]
 8008760:	4a46      	ldr	r2, [pc, #280]	; (800887c <menuInit+0x174>)
 8008762:	4619      	mov	r1, r3
 8008764:	2007      	movs	r0, #7
 8008766:	f7ff ff65 	bl	8008634 <initParentNode>

				initParentNode(SELECT_BARS_NODE,"Select bars",select_bars);						// [SELECT BARS]
 800876a:	4a45      	ldr	r2, [pc, #276]	; (8008880 <menuInit+0x178>)
 800876c:	4945      	ldr	r1, [pc, #276]	; (8008884 <menuInit+0x17c>)
 800876e:	200e      	movs	r0, #14
 8008770:	f7ff ff60 	bl	8008634 <initParentNode>
					initParentNode(MOVE_BAR_BACK_START_NODE,messages[ONE_BAR_BACK_START],NULL);		// [MOVE BAR BACK]
 8008774:	4b3c      	ldr	r3, [pc, #240]	; (8008868 <menuInit+0x160>)
 8008776:	691b      	ldr	r3, [r3, #16]
 8008778:	2200      	movs	r2, #0
 800877a:	4619      	mov	r1, r3
 800877c:	2009      	movs	r0, #9
 800877e:	f7ff ff59 	bl	8008634 <initParentNode>
					initParentNode(MOVE_BAR_FORW_START_NODE,messages[ONE_BAR_FORW_START],NULL);		// [MOVE BAR FORW]
 8008782:	4b39      	ldr	r3, [pc, #228]	; (8008868 <menuInit+0x160>)
 8008784:	695b      	ldr	r3, [r3, #20]
 8008786:	2200      	movs	r2, #0
 8008788:	4619      	mov	r1, r3
 800878a:	200a      	movs	r0, #10
 800878c:	f7ff ff52 	bl	8008634 <initParentNode>
					initParentNode(START_RHYTHM_NODE,messages[START_RHYTHM],NULL);					// [START RHYTHM]
 8008790:	4b35      	ldr	r3, [pc, #212]	; (8008868 <menuInit+0x160>)
 8008792:	6a1b      	ldr	r3, [r3, #32]
 8008794:	2200      	movs	r2, #0
 8008796:	4619      	mov	r1, r3
 8008798:	200b      	movs	r0, #11
 800879a:	f7ff ff4b 	bl	8008634 <initParentNode>
					initParentNode(MOVE_BAR_BACK_END_NODE,messages[ONE_BAR_BACK_END],NULL);			// [MOVE BAR BACK]
 800879e:	4b32      	ldr	r3, [pc, #200]	; (8008868 <menuInit+0x160>)
 80087a0:	699b      	ldr	r3, [r3, #24]
 80087a2:	2200      	movs	r2, #0
 80087a4:	4619      	mov	r1, r3
 80087a6:	200c      	movs	r0, #12
 80087a8:	f7ff ff44 	bl	8008634 <initParentNode>
					initParentNode(MOVE_BAR_FORW_END_NODE,messages[ONE_BAR_FORW_END],NULL);			// [MOVE BAR FORW]
 80087ac:	4b2e      	ldr	r3, [pc, #184]	; (8008868 <menuInit+0x160>)
 80087ae:	69db      	ldr	r3, [r3, #28]
 80087b0:	2200      	movs	r2, #0
 80087b2:	4619      	mov	r1, r3
 80087b4:	200d      	movs	r0, #13
 80087b6:	f7ff ff3d 	bl	8008634 <initParentNode>
					initParentNode(SAVE_ALL_LOOPS_NODE,"Save all loops",NULL);
 80087ba:	2200      	movs	r2, #0
 80087bc:	4932      	ldr	r1, [pc, #200]	; (8008888 <menuInit+0x180>)
 80087be:	2010      	movs	r0, #16
 80087c0:	f7ff ff38 	bl	8008634 <initParentNode>
				initParentNode(RECORD_DRUMS,"Record rhythm",record_rhythm);
 80087c4:	4a31      	ldr	r2, [pc, #196]	; (800888c <menuInit+0x184>)
 80087c6:	4932      	ldr	r1, [pc, #200]	; (8008890 <menuInit+0x188>)
 80087c8:	2011      	movs	r0, #17
 80087ca:	f7ff ff33 	bl	8008634 <initParentNode>
				initParentNode(LOAD_RHYTHM_FROM_SD,"Select rhythm",select_rhythm);
 80087ce:	4a31      	ldr	r2, [pc, #196]	; (8008894 <menuInit+0x18c>)
 80087d0:	4931      	ldr	r1, [pc, #196]	; (8008898 <menuInit+0x190>)
 80087d2:	200f      	movs	r0, #15
 80087d4:	f7ff ff2e 	bl	8008634 <initParentNode>
		connectChildNode(MAIN_MENU,TM_KEYPAD_Button_1,AUDIO_NODE);
 80087d8:	2201      	movs	r2, #1
 80087da:	2101      	movs	r1, #1
 80087dc:	2000      	movs	r0, #0
 80087de:	f7ff ff5b 	bl	8008698 <connectChildNode>

			connectChildNode(AUDIO_NODE,TM_KEYPAD_Button_1,RECORD_SELECT_LOOPS_NODE);
 80087e2:	2206      	movs	r2, #6
 80087e4:	2101      	movs	r1, #1
 80087e6:	2001      	movs	r0, #1
 80087e8:	f7ff ff56 	bl	8008698 <connectChildNode>
		connectChildNode(MAIN_MENU,TM_KEYPAD_Button_2,RHYTHM_NODE);
 80087ec:	2202      	movs	r2, #2
 80087ee:	2102      	movs	r1, #2
 80087f0:	2000      	movs	r0, #0
 80087f2:	f7ff ff51 	bl	8008698 <connectChildNode>
			connectChildNode(RHYTHM_NODE,TM_KEYPAD_Button_1,DOWNLOAD_RHYTHM_NODE);
 80087f6:	2207      	movs	r2, #7
 80087f8:	2101      	movs	r1, #1
 80087fa:	2002      	movs	r0, #2
 80087fc:	f7ff ff4c 	bl	8008698 <connectChildNode>
			connectChildNode(RHYTHM_NODE,TM_KEYPAD_Button_2,LOAD_RHYTHM_FROM_SD);
 8008800:	220f      	movs	r2, #15
 8008802:	2102      	movs	r1, #2
 8008804:	2002      	movs	r0, #2
 8008806:	f7ff ff47 	bl	8008698 <connectChildNode>
			connectChildNode(RHYTHM_NODE,TM_KEYPAD_Button_3,SELECT_BARS_NODE);
 800880a:	220e      	movs	r2, #14
 800880c:	2103      	movs	r1, #3
 800880e:	2002      	movs	r0, #2
 8008810:	f7ff ff42 	bl	8008698 <connectChildNode>
			connectChildNode(RHYTHM_NODE,TM_KEYPAD_Button_4,RECORD_DRUMS);
 8008814:	2211      	movs	r2, #17
 8008816:	2104      	movs	r1, #4
 8008818:	2002      	movs	r0, #2
 800881a:	f7ff ff3d 	bl	8008698 <connectChildNode>

				connectChildNode(SELECT_BARS_NODE,TM_KEYPAD_Button_1,MOVE_BAR_BACK_START_NODE);
 800881e:	2209      	movs	r2, #9
 8008820:	2101      	movs	r1, #1
 8008822:	200e      	movs	r0, #14
 8008824:	f7ff ff38 	bl	8008698 <connectChildNode>
				connectChildNode(SELECT_BARS_NODE,TM_KEYPAD_Button_2,MOVE_BAR_FORW_START_NODE);
 8008828:	220a      	movs	r2, #10
 800882a:	2102      	movs	r1, #2
 800882c:	200e      	movs	r0, #14
 800882e:	f7ff ff33 	bl	8008698 <connectChildNode>
				connectChildNode(SELECT_BARS_NODE,TM_KEYPAD_Button_3,START_RHYTHM_NODE);
 8008832:	220b      	movs	r2, #11
 8008834:	2103      	movs	r1, #3
 8008836:	200e      	movs	r0, #14
 8008838:	f7ff ff2e 	bl	8008698 <connectChildNode>
				connectChildNode(SELECT_BARS_NODE,TM_KEYPAD_Button_4,MOVE_BAR_BACK_END_NODE);
 800883c:	220c      	movs	r2, #12
 800883e:	2104      	movs	r1, #4
 8008840:	200e      	movs	r0, #14
 8008842:	f7ff ff29 	bl	8008698 <connectChildNode>
				connectChildNode(SELECT_BARS_NODE,TM_KEYPAD_Button_5,MOVE_BAR_FORW_END_NODE);
 8008846:	220d      	movs	r2, #13
 8008848:	2105      	movs	r1, #5
 800884a:	200e      	movs	r0, #14
 800884c:	f7ff ff24 	bl	8008698 <connectChildNode>
				connectChildNode(SELECT_BARS_NODE,TM_KEYPAD_Button_6,SAVE_ALL_LOOPS_NODE);
 8008850:	2210      	movs	r2, #16
 8008852:	2106      	movs	r1, #6
 8008854:	200e      	movs	r0, #14
 8008856:	f7ff ff1f 	bl	8008698 <connectChildNode>

}
 800885a:	bf00      	nop
 800885c:	bd80      	pop	{r7, pc}
 800885e:	bf00      	nop
 8008860:	20001d78 	.word	0x20001d78
 8008864:	20001fa8 	.word	0x20001fa8
 8008868:	20001fbc 	.word	0x20001fbc
 800886c:	08008f9f 	.word	0x08008f9f
 8008870:	08018dd8 	.word	0x08018dd8
 8008874:	08009a29 	.word	0x08009a29
 8008878:	08008f91 	.word	0x08008f91
 800887c:	080098e1 	.word	0x080098e1
 8008880:	08009dc5 	.word	0x08009dc5
 8008884:	08018de0 	.word	0x08018de0
 8008888:	08018dec 	.word	0x08018dec
 800888c:	08009ea1 	.word	0x08009ea1
 8008890:	08018dfc 	.word	0x08018dfc
 8008894:	080099a5 	.word	0x080099a5
 8008898:	08018e0c 	.word	0x08018e0c

0800889c <menuShow>:

void menuShow(TM_KEYPAD_Button_t opt_key){
 800889c:	b580      	push	{r7, lr}
 800889e:	b082      	sub	sp, #8
 80088a0:	af00      	add	r7, sp, #0
 80088a2:	4603      	mov	r3, r0
 80088a4:	71fb      	strb	r3, [r7, #7]

	if(opt_key > TM_KEYPAD_Button_D)
 80088a6:	79fb      	ldrb	r3, [r7, #7]
 80088a8:	2b0f      	cmp	r3, #15
 80088aa:	d857      	bhi.n	800895c <menuShow+0xc0>
		return;
	if(menu_nodes[current_node_index].options[opt_key] == NODE_EMPTY)
 80088ac:	4b2f      	ldr	r3, [pc, #188]	; (800896c <menuShow+0xd0>)
 80088ae:	781b      	ldrb	r3, [r3, #0]
 80088b0:	4618      	mov	r0, r3
 80088b2:	79fa      	ldrb	r2, [r7, #7]
 80088b4:	492e      	ldr	r1, [pc, #184]	; (8008970 <menuShow+0xd4>)
 80088b6:	4603      	mov	r3, r0
 80088b8:	00db      	lsls	r3, r3, #3
 80088ba:	1a1b      	subs	r3, r3, r0
 80088bc:	009b      	lsls	r3, r3, #2
 80088be:	440b      	add	r3, r1
 80088c0:	4413      	add	r3, r2
 80088c2:	3304      	adds	r3, #4
 80088c4:	f993 3000 	ldrsb.w	r3, [r3]
 80088c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80088cc:	d048      	beq.n	8008960 <menuShow+0xc4>
		return;

	current_node_index = menu_nodes[current_node_index].options[opt_key];
 80088ce:	4b27      	ldr	r3, [pc, #156]	; (800896c <menuShow+0xd0>)
 80088d0:	781b      	ldrb	r3, [r3, #0]
 80088d2:	4618      	mov	r0, r3
 80088d4:	79fa      	ldrb	r2, [r7, #7]
 80088d6:	4926      	ldr	r1, [pc, #152]	; (8008970 <menuShow+0xd4>)
 80088d8:	4603      	mov	r3, r0
 80088da:	00db      	lsls	r3, r3, #3
 80088dc:	1a1b      	subs	r3, r3, r0
 80088de:	009b      	lsls	r3, r3, #2
 80088e0:	440b      	add	r3, r1
 80088e2:	4413      	add	r3, r2
 80088e4:	3304      	adds	r3, #4
 80088e6:	f993 3000 	ldrsb.w	r3, [r3]
 80088ea:	b2da      	uxtb	r2, r3
 80088ec:	4b1f      	ldr	r3, [pc, #124]	; (800896c <menuShow+0xd0>)
 80088ee:	701a      	strb	r2, [r3, #0]
	sprintf(lcdline,"%s",menu_nodes[current_node_index].title);
 80088f0:	4b1e      	ldr	r3, [pc, #120]	; (800896c <menuShow+0xd0>)
 80088f2:	781b      	ldrb	r3, [r3, #0]
 80088f4:	4619      	mov	r1, r3
 80088f6:	4a1e      	ldr	r2, [pc, #120]	; (8008970 <menuShow+0xd4>)
 80088f8:	460b      	mov	r3, r1
 80088fa:	00db      	lsls	r3, r3, #3
 80088fc:	1a5b      	subs	r3, r3, r1
 80088fe:	009b      	lsls	r3, r3, #2
 8008900:	4413      	add	r3, r2
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	461a      	mov	r2, r3
 8008906:	491b      	ldr	r1, [pc, #108]	; (8008974 <menuShow+0xd8>)
 8008908:	481b      	ldr	r0, [pc, #108]	; (8008978 <menuShow+0xdc>)
 800890a:	f00e ffe7 	bl	80178dc <siprintf>
	TM_HD44780_Clear();
 800890e:	f003 fc61 	bl	800c1d4 <TM_HD44780_Clear>
	TM_ILI9341_Fill(ILI9341_COLOR_MAGENTA);
 8008912:	f24a 2054 	movw	r0, #41556	; 0xa254
 8008916:	f003 ffe5 	bl	800c8e4 <TM_ILI9341_Fill>
	TM_HD44780_Puts(0,0,lcdline);
 800891a:	4a17      	ldr	r2, [pc, #92]	; (8008978 <menuShow+0xdc>)
 800891c:	2100      	movs	r1, #0
 800891e:	2000      	movs	r0, #0
 8008920:	f003 fc64 	bl	800c1ec <TM_HD44780_Puts>

	menuShowOptions();
 8008924:	f7ff fe20 	bl	8008568 <menuShowOptions>

	// execute function handler
	if(menu_nodes[current_node_index].callback != NULL)
 8008928:	4b10      	ldr	r3, [pc, #64]	; (800896c <menuShow+0xd0>)
 800892a:	781b      	ldrb	r3, [r3, #0]
 800892c:	4619      	mov	r1, r3
 800892e:	4a10      	ldr	r2, [pc, #64]	; (8008970 <menuShow+0xd4>)
 8008930:	460b      	mov	r3, r1
 8008932:	00db      	lsls	r3, r3, #3
 8008934:	1a5b      	subs	r3, r3, r1
 8008936:	009b      	lsls	r3, r3, #2
 8008938:	4413      	add	r3, r2
 800893a:	3318      	adds	r3, #24
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	2b00      	cmp	r3, #0
 8008940:	d010      	beq.n	8008964 <menuShow+0xc8>
		menu_nodes[current_node_index].callback();
 8008942:	4b0a      	ldr	r3, [pc, #40]	; (800896c <menuShow+0xd0>)
 8008944:	781b      	ldrb	r3, [r3, #0]
 8008946:	4619      	mov	r1, r3
 8008948:	4a09      	ldr	r2, [pc, #36]	; (8008970 <menuShow+0xd4>)
 800894a:	460b      	mov	r3, r1
 800894c:	00db      	lsls	r3, r3, #3
 800894e:	1a5b      	subs	r3, r3, r1
 8008950:	009b      	lsls	r3, r3, #2
 8008952:	4413      	add	r3, r2
 8008954:	3318      	adds	r3, #24
 8008956:	681b      	ldr	r3, [r3, #0]
 8008958:	4798      	blx	r3

	return;
 800895a:	e003      	b.n	8008964 <menuShow+0xc8>
		return;
 800895c:	bf00      	nop
 800895e:	e002      	b.n	8008966 <menuShow+0xca>
		return;
 8008960:	bf00      	nop
 8008962:	e000      	b.n	8008966 <menuShow+0xca>
	return;
 8008964:	bf00      	nop
}
 8008966:	3708      	adds	r7, #8
 8008968:	46bd      	mov	sp, r7
 800896a:	bd80      	pop	{r7, pc}
 800896c:	20001fa8 	.word	0x20001fa8
 8008970:	20001d78 	.word	0x20001d78
 8008974:	08018e1c 	.word	0x08018e1c
 8008978:	20001270 	.word	0x20001270

0800897c <menuShowStatus>:

void menuShowStatus(){
 800897c:	b580      	push	{r7, lr}
 800897e:	b08a      	sub	sp, #40	; 0x28
 8008980:	af00      	add	r7, sp, #0
	char *channelLabel = "";
 8008982:	4b4b      	ldr	r3, [pc, #300]	; (8008ab0 <menuShowStatus+0x134>)
 8008984:	627b      	str	r3, [r7, #36]	; 0x24

	char tmp[31];
	if(looper.TwoChannels == TRUE){
 8008986:	4b4b      	ldr	r3, [pc, #300]	; (8008ab4 <menuShowStatus+0x138>)
 8008988:	78db      	ldrb	r3, [r3, #3]
 800898a:	b2db      	uxtb	r3, r3
 800898c:	2b01      	cmp	r3, #1
 800898e:	d115      	bne.n	80089bc <menuShowStatus+0x40>
		if(looper.ch1.Active == TRUE)
 8008990:	4b48      	ldr	r3, [pc, #288]	; (8008ab4 <menuShowStatus+0x138>)
 8008992:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008996:	f3c3 0300 	ubfx	r3, r3, #0, #1
 800899a:	b2db      	uxtb	r3, r3
 800899c:	2b01      	cmp	r3, #1
 800899e:	d102      	bne.n	80089a6 <menuShowStatus+0x2a>
			channelLabel = " [A]B";
 80089a0:	4b45      	ldr	r3, [pc, #276]	; (8008ab8 <menuShowStatus+0x13c>)
 80089a2:	627b      	str	r3, [r7, #36]	; 0x24
 80089a4:	e01f      	b.n	80089e6 <menuShowStatus+0x6a>
		else if(looper.ch2.Active == TRUE)
 80089a6:	4b43      	ldr	r3, [pc, #268]	; (8008ab4 <menuShowStatus+0x138>)
 80089a8:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80089ac:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	2b01      	cmp	r3, #1
 80089b4:	d117      	bne.n	80089e6 <menuShowStatus+0x6a>
			channelLabel = " A[B]";
 80089b6:	4b41      	ldr	r3, [pc, #260]	; (8008abc <menuShowStatus+0x140>)
 80089b8:	627b      	str	r3, [r7, #36]	; 0x24
 80089ba:	e014      	b.n	80089e6 <menuShowStatus+0x6a>
	}
	else{
		if(looper.ch1.Active == TRUE)
 80089bc:	4b3d      	ldr	r3, [pc, #244]	; (8008ab4 <menuShowStatus+0x138>)
 80089be:	f893 3020 	ldrb.w	r3, [r3, #32]
 80089c2:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80089c6:	b2db      	uxtb	r3, r3
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d102      	bne.n	80089d2 <menuShowStatus+0x56>
			channelLabel = " [A] ";
 80089cc:	4b3c      	ldr	r3, [pc, #240]	; (8008ac0 <menuShowStatus+0x144>)
 80089ce:	627b      	str	r3, [r7, #36]	; 0x24
 80089d0:	e009      	b.n	80089e6 <menuShowStatus+0x6a>
		else if(looper.ch2.Active == TRUE)
 80089d2:	4b38      	ldr	r3, [pc, #224]	; (8008ab4 <menuShowStatus+0x138>)
 80089d4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80089d8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 80089dc:	b2db      	uxtb	r3, r3
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d101      	bne.n	80089e6 <menuShowStatus+0x6a>
			channelLabel = " [B] ";
 80089e2:	4b38      	ldr	r3, [pc, #224]	; (8008ac4 <menuShowStatus+0x148>)
 80089e4:	627b      	str	r3, [r7, #36]	; 0x24
	}
	// display action
	if(looper.Recording == FALSE && looper.Playback == FALSE)
 80089e6:	4b33      	ldr	r3, [pc, #204]	; (8008ab4 <menuShowStatus+0x138>)
 80089e8:	781b      	ldrb	r3, [r3, #0]
 80089ea:	b2db      	uxtb	r3, r3
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d10a      	bne.n	8008a06 <menuShowStatus+0x8a>
 80089f0:	4b30      	ldr	r3, [pc, #192]	; (8008ab4 <menuShowStatus+0x138>)
 80089f2:	785b      	ldrb	r3, [r3, #1]
 80089f4:	b2db      	uxtb	r3, r3
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d105      	bne.n	8008a06 <menuShowStatus+0x8a>
		sprintf(tmp,"Stopped   ");
 80089fa:	1d3b      	adds	r3, r7, #4
 80089fc:	4932      	ldr	r1, [pc, #200]	; (8008ac8 <menuShowStatus+0x14c>)
 80089fe:	4618      	mov	r0, r3
 8008a00:	f00e ff6c 	bl	80178dc <siprintf>
 8008a04:	e014      	b.n	8008a30 <menuShowStatus+0xb4>
	else if(looper.Recording == TRUE)
 8008a06:	4b2b      	ldr	r3, [pc, #172]	; (8008ab4 <menuShowStatus+0x138>)
 8008a08:	781b      	ldrb	r3, [r3, #0]
 8008a0a:	b2db      	uxtb	r3, r3
 8008a0c:	2b01      	cmp	r3, #1
 8008a0e:	d105      	bne.n	8008a1c <menuShowStatus+0xa0>
		sprintf(tmp,"Recording ");
 8008a10:	1d3b      	adds	r3, r7, #4
 8008a12:	492e      	ldr	r1, [pc, #184]	; (8008acc <menuShowStatus+0x150>)
 8008a14:	4618      	mov	r0, r3
 8008a16:	f00e ff61 	bl	80178dc <siprintf>
 8008a1a:	e009      	b.n	8008a30 <menuShowStatus+0xb4>
	else if(looper.Playback == TRUE)
 8008a1c:	4b25      	ldr	r3, [pc, #148]	; (8008ab4 <menuShowStatus+0x138>)
 8008a1e:	785b      	ldrb	r3, [r3, #1]
 8008a20:	b2db      	uxtb	r3, r3
 8008a22:	2b01      	cmp	r3, #1
 8008a24:	d104      	bne.n	8008a30 <menuShowStatus+0xb4>
		sprintf(tmp,"Playback  ");
 8008a26:	1d3b      	adds	r3, r7, #4
 8008a28:	4929      	ldr	r1, [pc, #164]	; (8008ad0 <menuShowStatus+0x154>)
 8008a2a:	4618      	mov	r0, r3
 8008a2c:	f00e ff56 	bl	80178dc <siprintf>
	// display channel(s)
	sprintf(tmp + strlen(tmp),channelLabel);
 8008a30:	1d3b      	adds	r3, r7, #4
 8008a32:	4618      	mov	r0, r3
 8008a34:	f7f7 fbdc 	bl	80001f0 <strlen>
 8008a38:	4602      	mov	r2, r0
 8008a3a:	1d3b      	adds	r3, r7, #4
 8008a3c:	4413      	add	r3, r2
 8008a3e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008a40:	4618      	mov	r0, r3
 8008a42:	f00e ff4b 	bl	80178dc <siprintf>

	if(looper.ch1.Overdub == TRUE || looper.ch2.Overdub == TRUE)
 8008a46:	4b1b      	ldr	r3, [pc, #108]	; (8008ab4 <menuShowStatus+0x138>)
 8008a48:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008a4c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008a50:	b2db      	uxtb	r3, r3
 8008a52:	2b01      	cmp	r3, #1
 8008a54:	d007      	beq.n	8008a66 <menuShowStatus+0xea>
 8008a56:	4b17      	ldr	r3, [pc, #92]	; (8008ab4 <menuShowStatus+0x138>)
 8008a58:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8008a5c:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008a60:	b2db      	uxtb	r3, r3
 8008a62:	2b01      	cmp	r3, #1
 8008a64:	d10a      	bne.n	8008a7c <menuShowStatus+0x100>
		sprintf(tmp + strlen(tmp),"Overdub");
 8008a66:	1d3b      	adds	r3, r7, #4
 8008a68:	4618      	mov	r0, r3
 8008a6a:	f7f7 fbc1 	bl	80001f0 <strlen>
 8008a6e:	4602      	mov	r2, r0
 8008a70:	1d3b      	adds	r3, r7, #4
 8008a72:	4413      	add	r3, r2
 8008a74:	4917      	ldr	r1, [pc, #92]	; (8008ad4 <menuShowStatus+0x158>)
 8008a76:	4618      	mov	r0, r3
 8008a78:	f00e ff30 	bl	80178dc <siprintf>

	menuStatusLine(tmp);
 8008a7c:	1d3b      	adds	r3, r7, #4
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f000 f830 	bl	8008ae4 <menuStatusLine>

	// display current function
	sprintf(lcdline,"%-16s",functions[looper.Function]);
 8008a84:	4b0b      	ldr	r3, [pc, #44]	; (8008ab4 <menuShowStatus+0x138>)
 8008a86:	7f5b      	ldrb	r3, [r3, #29]
 8008a88:	b2db      	uxtb	r3, r3
 8008a8a:	461a      	mov	r2, r3
 8008a8c:	4b12      	ldr	r3, [pc, #72]	; (8008ad8 <menuShowStatus+0x15c>)
 8008a8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a92:	461a      	mov	r2, r3
 8008a94:	4911      	ldr	r1, [pc, #68]	; (8008adc <menuShowStatus+0x160>)
 8008a96:	4812      	ldr	r0, [pc, #72]	; (8008ae0 <menuShowStatus+0x164>)
 8008a98:	f00e ff20 	bl	80178dc <siprintf>
	TM_HD44780_Puts(0,1,lcdline);
 8008a9c:	4a10      	ldr	r2, [pc, #64]	; (8008ae0 <menuShowStatus+0x164>)
 8008a9e:	2101      	movs	r1, #1
 8008aa0:	2000      	movs	r0, #0
 8008aa2:	f003 fba3 	bl	800c1ec <TM_HD44780_Puts>
}
 8008aa6:	bf00      	nop
 8008aa8:	3728      	adds	r7, #40	; 0x28
 8008aaa:	46bd      	mov	sp, r7
 8008aac:	bd80      	pop	{r7, pc}
 8008aae:	bf00      	nop
 8008ab0:	08018e20 	.word	0x08018e20
 8008ab4:	20001228 	.word	0x20001228
 8008ab8:	08018e24 	.word	0x08018e24
 8008abc:	08018e2c 	.word	0x08018e2c
 8008ac0:	08018e34 	.word	0x08018e34
 8008ac4:	08018e3c 	.word	0x08018e3c
 8008ac8:	08018e44 	.word	0x08018e44
 8008acc:	08018e50 	.word	0x08018e50
 8008ad0:	08018e5c 	.word	0x08018e5c
 8008ad4:	08018e68 	.word	0x08018e68
 8008ad8:	20002034 	.word	0x20002034
 8008adc:	08018e70 	.word	0x08018e70
 8008ae0:	20001270 	.word	0x20001270

08008ae4 <menuStatusLine>:


// write short message text at the bottom
void menuStatusLine(char *text){
 8008ae4:	b580      	push	{r7, lr}
 8008ae6:	b084      	sub	sp, #16
 8008ae8:	af02      	add	r7, sp, #8
 8008aea:	6078      	str	r0, [r7, #4]
	sprintf(lcdline,"%-29s",text);
 8008aec:	687a      	ldr	r2, [r7, #4]
 8008aee:	4909      	ldr	r1, [pc, #36]	; (8008b14 <menuStatusLine+0x30>)
 8008af0:	4809      	ldr	r0, [pc, #36]	; (8008b18 <menuStatusLine+0x34>)
 8008af2:	f00e fef3 	bl	80178dc <siprintf>
	TM_ILI9341_Puts(0, 221,lcdline, &TM_Font_11x18, ILI9341_COLOR_YELLOW, ILI9341_COLOR_BLACK);
 8008af6:	2300      	movs	r3, #0
 8008af8:	9301      	str	r3, [sp, #4]
 8008afa:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8008afe:	9300      	str	r3, [sp, #0]
 8008b00:	4b06      	ldr	r3, [pc, #24]	; (8008b1c <menuStatusLine+0x38>)
 8008b02:	4a05      	ldr	r2, [pc, #20]	; (8008b18 <menuStatusLine+0x34>)
 8008b04:	21dd      	movs	r1, #221	; 0xdd
 8008b06:	2000      	movs	r0, #0
 8008b08:	f003 fff0 	bl	800caec <TM_ILI9341_Puts>
}
 8008b0c:	bf00      	nop
 8008b0e:	3708      	adds	r7, #8
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}
 8008b14:	08018e78 	.word	0x08018e78
 8008b18:	20001270 	.word	0x20001270
 8008b1c:	200001e0 	.word	0x200001e0

08008b20 <menuClearLines>:


void menuClearLines(uint8_t lines,...){
 8008b20:	b40f      	push	{r0, r1, r2, r3}
 8008b22:	b580      	push	{r7, lr}
 8008b24:	b086      	sub	sp, #24
 8008b26:	af02      	add	r7, sp, #8

	uint8_t i;
	int line;
	va_list ap;
	va_start(ap, lines);
 8008b28:	f107 031c 	add.w	r3, r7, #28
 8008b2c:	607b      	str	r3, [r7, #4]
	for(i = 0;lines > 0 && i < lines; i++){
 8008b2e:	2300      	movs	r3, #0
 8008b30:	73fb      	strb	r3, [r7, #15]
 8008b32:	e021      	b.n	8008b78 <menuClearLines+0x58>
		line = va_arg(ap,int);
 8008b34:	687b      	ldr	r3, [r7, #4]
 8008b36:	1d1a      	adds	r2, r3, #4
 8008b38:	607a      	str	r2, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	60bb      	str	r3, [r7, #8]
		TM_ILI9341_DrawFilledRectangle(10,line * 20 + 10,320,line * 20 + 30,ILI9341_COLOR_MAGENTA);
 8008b3e:	68bb      	ldr	r3, [r7, #8]
 8008b40:	b29b      	uxth	r3, r3
 8008b42:	461a      	mov	r2, r3
 8008b44:	0092      	lsls	r2, r2, #2
 8008b46:	4413      	add	r3, r2
 8008b48:	009b      	lsls	r3, r3, #2
 8008b4a:	b29b      	uxth	r3, r3
 8008b4c:	330a      	adds	r3, #10
 8008b4e:	b299      	uxth	r1, r3
 8008b50:	68bb      	ldr	r3, [r7, #8]
 8008b52:	b29b      	uxth	r3, r3
 8008b54:	461a      	mov	r2, r3
 8008b56:	0092      	lsls	r2, r2, #2
 8008b58:	4413      	add	r3, r2
 8008b5a:	009b      	lsls	r3, r3, #2
 8008b5c:	b29b      	uxth	r3, r3
 8008b5e:	331e      	adds	r3, #30
 8008b60:	b29b      	uxth	r3, r3
 8008b62:	f24a 2254 	movw	r2, #41556	; 0xa254
 8008b66:	9200      	str	r2, [sp, #0]
 8008b68:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8008b6c:	200a      	movs	r0, #10
 8008b6e:	f004 f8a7 	bl	800ccc0 <TM_ILI9341_DrawFilledRectangle>
	for(i = 0;lines > 0 && i < lines; i++){
 8008b72:	7bfb      	ldrb	r3, [r7, #15]
 8008b74:	3301      	adds	r3, #1
 8008b76:	73fb      	strb	r3, [r7, #15]
 8008b78:	7e3b      	ldrb	r3, [r7, #24]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d003      	beq.n	8008b86 <menuClearLines+0x66>
 8008b7e:	7bfa      	ldrb	r2, [r7, #15]
 8008b80:	7e3b      	ldrb	r3, [r7, #24]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d3d6      	bcc.n	8008b34 <menuClearLines+0x14>
	}

	va_end(ap);
}
 8008b86:	bf00      	nop
 8008b88:	3710      	adds	r7, #16
 8008b8a:	46bd      	mov	sp, r7
 8008b8c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b90:	b004      	add	sp, #16
 8008b92:	4770      	bx	lr

08008b94 <menuTextBox>:
		 TM_ILI9341_Puts(10, offset,line, &TM_Font_7x10, ILI9341_COLOR_RED, ILI9341_COLOR_BLUE2);
	}
	va_end(ap);
}

void menuTextBox(uint8_t lines,uint8_t xoff,uint8_t yoff,...){
 8008b94:	b40c      	push	{r2, r3}
 8008b96:	b580      	push	{r7, lr}
 8008b98:	b088      	sub	sp, #32
 8008b9a:	af02      	add	r7, sp, #8
 8008b9c:	4603      	mov	r3, r0
 8008b9e:	460a      	mov	r2, r1
 8008ba0:	71fb      	strb	r3, [r7, #7]
 8008ba2:	4613      	mov	r3, r2
 8008ba4:	71bb      	strb	r3, [r7, #6]
	uint8_t i;
	char *line;
	va_list ap;

	va_start(ap, yoff);
 8008ba6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8008baa:	60fb      	str	r3, [r7, #12]
	for(i = 0; i < lines; i++,yoff += 12) {
 8008bac:	2300      	movs	r3, #0
 8008bae:	75fb      	strb	r3, [r7, #23]
 8008bb0:	e01b      	b.n	8008bea <menuTextBox+0x56>
		 line = va_arg(ap, char *);
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	1d1a      	adds	r2, r3, #4
 8008bb6:	60fa      	str	r2, [r7, #12]
 8008bb8:	681b      	ldr	r3, [r3, #0]
 8008bba:	613b      	str	r3, [r7, #16]
		 TM_ILI9341_Puts(xoff,yoff,line, &TM_Font_7x10, ILI9341_COLOR_RED, ILI9341_COLOR_BLUE2);
 8008bbc:	79bb      	ldrb	r3, [r7, #6]
 8008bbe:	b298      	uxth	r0, r3
 8008bc0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008bc4:	b299      	uxth	r1, r3
 8008bc6:	f240 531d 	movw	r3, #1309	; 0x51d
 8008bca:	9301      	str	r3, [sp, #4]
 8008bcc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008bd0:	9300      	str	r3, [sp, #0]
 8008bd2:	4b0c      	ldr	r3, [pc, #48]	; (8008c04 <menuTextBox+0x70>)
 8008bd4:	693a      	ldr	r2, [r7, #16]
 8008bd6:	f003 ff89 	bl	800caec <TM_ILI9341_Puts>
	for(i = 0; i < lines; i++,yoff += 12) {
 8008bda:	7dfb      	ldrb	r3, [r7, #23]
 8008bdc:	3301      	adds	r3, #1
 8008bde:	75fb      	strb	r3, [r7, #23]
 8008be0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008be4:	330c      	adds	r3, #12
 8008be6:	f887 3020 	strb.w	r3, [r7, #32]
 8008bea:	7dfa      	ldrb	r2, [r7, #23]
 8008bec:	79fb      	ldrb	r3, [r7, #7]
 8008bee:	429a      	cmp	r2, r3
 8008bf0:	d3df      	bcc.n	8008bb2 <menuTextBox+0x1e>
	}
	va_end(ap);

}
 8008bf2:	bf00      	nop
 8008bf4:	bf00      	nop
 8008bf6:	3718      	adds	r7, #24
 8008bf8:	46bd      	mov	sp, r7
 8008bfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008bfe:	b002      	add	sp, #8
 8008c00:	4770      	bx	lr
 8008c02:	bf00      	nop
 8008c04:	200001d8 	.word	0x200001d8

08008c08 <menuMultiLine>:

void menuMultiLine(uint8_t lines,uint8_t offset,...){
 8008c08:	b40e      	push	{r1, r2, r3}
 8008c0a:	b580      	push	{r7, lr}
 8008c0c:	b089      	sub	sp, #36	; 0x24
 8008c0e:	af02      	add	r7, sp, #8
 8008c10:	4603      	mov	r3, r0
 8008c12:	71fb      	strb	r3, [r7, #7]
	uint8_t i;
	char *line;
	va_list ap;

	va_start(ap, offset);
 8008c14:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8008c18:	60fb      	str	r3, [r7, #12]
	for(i = 0; i < lines; i++,offset += 20) {
 8008c1a:	2300      	movs	r3, #0
 8008c1c:	75fb      	strb	r3, [r7, #23]
 8008c1e:	e01a      	b.n	8008c56 <menuMultiLine+0x4e>
	     line = va_arg(ap, char *);
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	1d1a      	adds	r2, r3, #4
 8008c24:	60fa      	str	r2, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	613b      	str	r3, [r7, #16]
	     TM_ILI9341_Puts(10, offset,line, &TM_Font_11x18, ILI9341_COLOR_RED, ILI9341_COLOR_BLUE2);
 8008c2a:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008c2e:	b299      	uxth	r1, r3
 8008c30:	f240 531d 	movw	r3, #1309	; 0x51d
 8008c34:	9301      	str	r3, [sp, #4]
 8008c36:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8008c3a:	9300      	str	r3, [sp, #0]
 8008c3c:	4b0c      	ldr	r3, [pc, #48]	; (8008c70 <menuMultiLine+0x68>)
 8008c3e:	693a      	ldr	r2, [r7, #16]
 8008c40:	200a      	movs	r0, #10
 8008c42:	f003 ff53 	bl	800caec <TM_ILI9341_Puts>
	for(i = 0; i < lines; i++,offset += 20) {
 8008c46:	7dfb      	ldrb	r3, [r7, #23]
 8008c48:	3301      	adds	r3, #1
 8008c4a:	75fb      	strb	r3, [r7, #23]
 8008c4c:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008c50:	3314      	adds	r3, #20
 8008c52:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 8008c56:	7dfa      	ldrb	r2, [r7, #23]
 8008c58:	79fb      	ldrb	r3, [r7, #7]
 8008c5a:	429a      	cmp	r2, r3
 8008c5c:	d3e0      	bcc.n	8008c20 <menuMultiLine+0x18>
	}
	va_end(ap);
}
 8008c5e:	bf00      	nop
 8008c60:	bf00      	nop
 8008c62:	371c      	adds	r7, #28
 8008c64:	46bd      	mov	sp, r7
 8008c66:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008c6a:	b003      	add	sp, #12
 8008c6c:	4770      	bx	lr
 8008c6e:	bf00      	nop
 8008c70:	200001e0 	.word	0x200001e0

08008c74 <menuWaitReturn>:

void menuWaitReturn(){
 8008c74:	b580      	push	{r7, lr}
 8008c76:	af00      	add	r7, sp, #0
	while((Keypad_Button = TM_KEYPAD_Read() != TM_KEYPAD_Button_0))
 8008c78:	e000      	b.n	8008c7c <menuWaitReturn+0x8>
		continue;
 8008c7a:	bf00      	nop
	while((Keypad_Button = TM_KEYPAD_Read() != TM_KEYPAD_Button_0))
 8008c7c:	f004 f870 	bl	800cd60 <TM_KEYPAD_Read>
 8008c80:	4603      	mov	r3, r0
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	bf14      	ite	ne
 8008c86:	2301      	movne	r3, #1
 8008c88:	2300      	moveq	r3, #0
 8008c8a:	b2db      	uxtb	r3, r3
 8008c8c:	461a      	mov	r2, r3
 8008c8e:	4b04      	ldr	r3, [pc, #16]	; (8008ca0 <menuWaitReturn+0x2c>)
 8008c90:	701a      	strb	r2, [r3, #0]
 8008c92:	4b03      	ldr	r3, [pc, #12]	; (8008ca0 <menuWaitReturn+0x2c>)
 8008c94:	781b      	ldrb	r3, [r3, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d1ef      	bne.n	8008c7a <menuWaitReturn+0x6>
}
 8008c9a:	bf00      	nop
 8008c9c:	bf00      	nop
 8008c9e:	bd80      	pop	{r7, pc}
 8008ca0:	20001c45 	.word	0x20001c45

08008ca4 <forwardBar>:
		sprintf(lcdline,"Play: %02u:%02u:%02u sec.",(unsigned int)(seconds / 60),(unsigned int)seconds,(unsigned int)cs);
		TM_ILI9341_Puts(10, 10, lcdline, &TM_Font_11x18, ILI9341_COLOR_BLACK, ILI9341_COLOR_BLUE2);
	}

}
static inline void forwardBar(BOOL start,uint32_t numOfPatterns){
 8008ca4:	b480      	push	{r7}
 8008ca6:	b083      	sub	sp, #12
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	4603      	mov	r3, r0
 8008cac:	6039      	str	r1, [r7, #0]
 8008cae:	71fb      	strb	r3, [r7, #7]
	if(start == TRUE){
 8008cb0:	79fb      	ldrb	r3, [r7, #7]
 8008cb2:	2b01      	cmp	r3, #1
 8008cb4:	d10b      	bne.n	8008cce <forwardBar+0x2a>
		if(looper.StartPattern < looper.EndPattern)
 8008cb6:	4b0e      	ldr	r3, [pc, #56]	; (8008cf0 <forwardBar+0x4c>)
 8008cb8:	695a      	ldr	r2, [r3, #20]
 8008cba:	4b0d      	ldr	r3, [pc, #52]	; (8008cf0 <forwardBar+0x4c>)
 8008cbc:	699b      	ldr	r3, [r3, #24]
 8008cbe:	429a      	cmp	r2, r3
 8008cc0:	d210      	bcs.n	8008ce4 <forwardBar+0x40>
			looper.StartPattern++;
 8008cc2:	4b0b      	ldr	r3, [pc, #44]	; (8008cf0 <forwardBar+0x4c>)
 8008cc4:	695b      	ldr	r3, [r3, #20]
 8008cc6:	3301      	adds	r3, #1
 8008cc8:	4a09      	ldr	r2, [pc, #36]	; (8008cf0 <forwardBar+0x4c>)
 8008cca:	6153      	str	r3, [r2, #20]
		}
		else if(looper.EndPattern < (numOfPatterns - 1))
			looper.EndPattern++;

}
 8008ccc:	e00a      	b.n	8008ce4 <forwardBar+0x40>
		else if(looper.EndPattern < (numOfPatterns - 1))
 8008cce:	4b08      	ldr	r3, [pc, #32]	; (8008cf0 <forwardBar+0x4c>)
 8008cd0:	699a      	ldr	r2, [r3, #24]
 8008cd2:	683b      	ldr	r3, [r7, #0]
 8008cd4:	3b01      	subs	r3, #1
 8008cd6:	429a      	cmp	r2, r3
 8008cd8:	d204      	bcs.n	8008ce4 <forwardBar+0x40>
			looper.EndPattern++;
 8008cda:	4b05      	ldr	r3, [pc, #20]	; (8008cf0 <forwardBar+0x4c>)
 8008cdc:	699b      	ldr	r3, [r3, #24]
 8008cde:	3301      	adds	r3, #1
 8008ce0:	4a03      	ldr	r2, [pc, #12]	; (8008cf0 <forwardBar+0x4c>)
 8008ce2:	6193      	str	r3, [r2, #24]
}
 8008ce4:	bf00      	nop
 8008ce6:	370c      	adds	r7, #12
 8008ce8:	46bd      	mov	sp, r7
 8008cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cee:	4770      	bx	lr
 8008cf0:	20001228 	.word	0x20001228

08008cf4 <backwardBar>:


static inline void backwardBar(BOOL start){
 8008cf4:	b480      	push	{r7}
 8008cf6:	b083      	sub	sp, #12
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	4603      	mov	r3, r0
 8008cfc:	71fb      	strb	r3, [r7, #7]
	if(start == TRUE){
 8008cfe:	79fb      	ldrb	r3, [r7, #7]
 8008d00:	2b01      	cmp	r3, #1
 8008d02:	d109      	bne.n	8008d18 <backwardBar+0x24>
		if(looper.StartPattern > 0)
 8008d04:	4b0d      	ldr	r3, [pc, #52]	; (8008d3c <backwardBar+0x48>)
 8008d06:	695b      	ldr	r3, [r3, #20]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d010      	beq.n	8008d2e <backwardBar+0x3a>
			looper.StartPattern--;
 8008d0c:	4b0b      	ldr	r3, [pc, #44]	; (8008d3c <backwardBar+0x48>)
 8008d0e:	695b      	ldr	r3, [r3, #20]
 8008d10:	3b01      	subs	r3, #1
 8008d12:	4a0a      	ldr	r2, [pc, #40]	; (8008d3c <backwardBar+0x48>)
 8008d14:	6153      	str	r3, [r2, #20]
		}
	else if(looper.EndPattern > looper.StartPattern)
		looper.EndPattern--;
}
 8008d16:	e00a      	b.n	8008d2e <backwardBar+0x3a>
	else if(looper.EndPattern > looper.StartPattern)
 8008d18:	4b08      	ldr	r3, [pc, #32]	; (8008d3c <backwardBar+0x48>)
 8008d1a:	699a      	ldr	r2, [r3, #24]
 8008d1c:	4b07      	ldr	r3, [pc, #28]	; (8008d3c <backwardBar+0x48>)
 8008d1e:	695b      	ldr	r3, [r3, #20]
 8008d20:	429a      	cmp	r2, r3
 8008d22:	d904      	bls.n	8008d2e <backwardBar+0x3a>
		looper.EndPattern--;
 8008d24:	4b05      	ldr	r3, [pc, #20]	; (8008d3c <backwardBar+0x48>)
 8008d26:	699b      	ldr	r3, [r3, #24]
 8008d28:	3b01      	subs	r3, #1
 8008d2a:	4a04      	ldr	r2, [pc, #16]	; (8008d3c <backwardBar+0x48>)
 8008d2c:	6193      	str	r3, [r2, #24]
}
 8008d2e:	bf00      	nop
 8008d30:	370c      	adds	r7, #12
 8008d32:	46bd      	mov	sp, r7
 8008d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d38:	4770      	bx	lr
 8008d3a:	bf00      	nop
 8008d3c:	20001228 	.word	0x20001228

08008d40 <drumMenuInput>:

void drumMenuInput(uint32_t numOfPatterns,BOOL *play){
 8008d40:	b580      	push	{r7, lr}
 8008d42:	b086      	sub	sp, #24
 8008d44:	af02      	add	r7, sp, #8
 8008d46:	6078      	str	r0, [r7, #4]
 8008d48:	6039      	str	r1, [r7, #0]
	BOOL input = TRUE;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	73fb      	strb	r3, [r7, #15]
	BOOL startBar = TRUE;
 8008d4e:	2301      	movs	r3, #1
 8008d50:	73bb      	strb	r3, [r7, #14]
	BOOL overdub = FALSE;
 8008d52:	2300      	movs	r3, #0
 8008d54:	737b      	strb	r3, [r7, #13]
	while (TRUE){
		set_function(AUDIO_DRUMS);
 8008d56:	2002      	movs	r0, #2
 8008d58:	f7fe fef4 	bl	8007b44 <set_function>
		if((GET_ACTIVE_CHANNEL)->Overdub != overdub){
 8008d5c:	4b81      	ldr	r3, [pc, #516]	; (8008f64 <drumMenuInput+0x224>)
 8008d5e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d62:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008d66:	b2db      	uxtb	r3, r3
 8008d68:	2b01      	cmp	r3, #1
 8008d6a:	d101      	bne.n	8008d70 <drumMenuInput+0x30>
 8008d6c:	4b7e      	ldr	r3, [pc, #504]	; (8008f68 <drumMenuInput+0x228>)
 8008d6e:	e000      	b.n	8008d72 <drumMenuInput+0x32>
 8008d70:	4b7e      	ldr	r3, [pc, #504]	; (8008f6c <drumMenuInput+0x22c>)
 8008d72:	781b      	ldrb	r3, [r3, #0]
 8008d74:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008d78:	b2db      	uxtb	r3, r3
 8008d7a:	461a      	mov	r2, r3
 8008d7c:	7b7b      	ldrb	r3, [r7, #13]
 8008d7e:	429a      	cmp	r2, r3
 8008d80:	d011      	beq.n	8008da6 <drumMenuInput+0x66>
			overdub = (GET_ACTIVE_CHANNEL)->Overdub;
 8008d82:	4b78      	ldr	r3, [pc, #480]	; (8008f64 <drumMenuInput+0x224>)
 8008d84:	f893 3020 	ldrb.w	r3, [r3, #32]
 8008d88:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8008d8c:	b2db      	uxtb	r3, r3
 8008d8e:	2b01      	cmp	r3, #1
 8008d90:	d101      	bne.n	8008d96 <drumMenuInput+0x56>
 8008d92:	4b75      	ldr	r3, [pc, #468]	; (8008f68 <drumMenuInput+0x228>)
 8008d94:	e000      	b.n	8008d98 <drumMenuInput+0x58>
 8008d96:	4b75      	ldr	r3, [pc, #468]	; (8008f6c <drumMenuInput+0x22c>)
 8008d98:	781b      	ldrb	r3, [r3, #0]
 8008d9a:	f3c3 03c0 	ubfx	r3, r3, #3, #1
 8008d9e:	b2db      	uxtb	r3, r3
 8008da0:	737b      	strb	r3, [r7, #13]
			menuShowStatus();
 8008da2:	f7ff fdeb 	bl	800897c <menuShowStatus>
		}

		Keypad_Button = TM_KEYPAD_Read();
 8008da6:	f003 ffdb 	bl	800cd60 <TM_KEYPAD_Read>
 8008daa:	4603      	mov	r3, r0
 8008dac:	461a      	mov	r2, r3
 8008dae:	4b70      	ldr	r3, [pc, #448]	; (8008f70 <drumMenuInput+0x230>)
 8008db0:	701a      	strb	r2, [r3, #0]
		if(Keypad_Button != TM_KEYPAD_Button_NOPRESSED){
 8008db2:	4b6f      	ldr	r3, [pc, #444]	; (8008f70 <drumMenuInput+0x230>)
 8008db4:	781b      	ldrb	r3, [r3, #0]
 8008db6:	2bff      	cmp	r3, #255	; 0xff
 8008db8:	d06b      	beq.n	8008e92 <drumMenuInput+0x152>
				input = TRUE;
 8008dba:	2301      	movs	r3, #1
 8008dbc:	73fb      	strb	r3, [r7, #15]
				switch(Keypad_Button){
 8008dbe:	4b6c      	ldr	r3, [pc, #432]	; (8008f70 <drumMenuInput+0x230>)
 8008dc0:	781b      	ldrb	r3, [r3, #0]
 8008dc2:	2b0d      	cmp	r3, #13
 8008dc4:	d874      	bhi.n	8008eb0 <drumMenuInput+0x170>
 8008dc6:	a201      	add	r2, pc, #4	; (adr r2, 8008dcc <drumMenuInput+0x8c>)
 8008dc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dcc:	08008e05 	.word	0x08008e05
 8008dd0:	08008e0d 	.word	0x08008e0d
 8008dd4:	08008e1b 	.word	0x08008e1b
 8008dd8:	08008e2b 	.word	0x08008e2b
 8008ddc:	08008e33 	.word	0x08008e33
 8008de0:	08008e41 	.word	0x08008e41
 8008de4:	08008e51 	.word	0x08008e51
 8008de8:	08008eb1 	.word	0x08008eb1
 8008dec:	08008eb1 	.word	0x08008eb1
 8008df0:	08008eb1 	.word	0x08008eb1
 8008df4:	08008eb1 	.word	0x08008eb1
 8008df8:	08008eb1 	.word	0x08008eb1
 8008dfc:	08008e7f 	.word	0x08008e7f
 8008e00:	08008e7f 	.word	0x08008e7f

					case TM_KEYPAD_Button_0:	*play = FALSE; return;
 8008e04:	683b      	ldr	r3, [r7, #0]
 8008e06:	2200      	movs	r2, #0
 8008e08:	701a      	strb	r2, [r3, #0]
 8008e0a:	e0a8      	b.n	8008f5e <drumMenuInput+0x21e>
					case TM_KEYPAD_Button_1:	startBar = TRUE;
 8008e0c:	2301      	movs	r3, #1
 8008e0e:	73bb      	strb	r3, [r7, #14]
												backwardBar(startBar);
 8008e10:	7bbb      	ldrb	r3, [r7, #14]
 8008e12:	4618      	mov	r0, r3
 8008e14:	f7ff ff6e 	bl	8008cf4 <backwardBar>
												break;
 8008e18:	e04a      	b.n	8008eb0 <drumMenuInput+0x170>
					case TM_KEYPAD_Button_2:	startBar = TRUE;
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	73bb      	strb	r3, [r7, #14]
												forwardBar(startBar,numOfPatterns);
 8008e1e:	7bbb      	ldrb	r3, [r7, #14]
 8008e20:	6879      	ldr	r1, [r7, #4]
 8008e22:	4618      	mov	r0, r3
 8008e24:	f7ff ff3e 	bl	8008ca4 <forwardBar>
												break;
 8008e28:	e042      	b.n	8008eb0 <drumMenuInput+0x170>
					case TM_KEYPAD_Button_3:	*play = TRUE;  return;
 8008e2a:	683b      	ldr	r3, [r7, #0]
 8008e2c:	2201      	movs	r2, #1
 8008e2e:	701a      	strb	r2, [r3, #0]
 8008e30:	e095      	b.n	8008f5e <drumMenuInput+0x21e>
					case TM_KEYPAD_Button_4:	startBar = FALSE;
 8008e32:	2300      	movs	r3, #0
 8008e34:	73bb      	strb	r3, [r7, #14]
												backwardBar(startBar);
 8008e36:	7bbb      	ldrb	r3, [r7, #14]
 8008e38:	4618      	mov	r0, r3
 8008e3a:	f7ff ff5b 	bl	8008cf4 <backwardBar>
												break;
 8008e3e:	e037      	b.n	8008eb0 <drumMenuInput+0x170>
					case TM_KEYPAD_Button_5:	startBar = FALSE;
 8008e40:	2300      	movs	r3, #0
 8008e42:	73bb      	strb	r3, [r7, #14]
												forwardBar(startBar,numOfPatterns); break;
 8008e44:	7bbb      	ldrb	r3, [r7, #14]
 8008e46:	6879      	ldr	r1, [r7, #4]
 8008e48:	4618      	mov	r0, r3
 8008e4a:	f7ff ff2b 	bl	8008ca4 <forwardBar>
 8008e4e:	e02f      	b.n	8008eb0 <drumMenuInput+0x170>
					case TM_KEYPAD_Button_6:	if(looper.Playback == TRUE || looper.Recording == TRUE || looper.SamplesWritten == 0)
 8008e50:	4b44      	ldr	r3, [pc, #272]	; (8008f64 <drumMenuInput+0x224>)
 8008e52:	785b      	ldrb	r3, [r3, #1]
 8008e54:	b2db      	uxtb	r3, r3
 8008e56:	2b01      	cmp	r3, #1
 8008e58:	d029      	beq.n	8008eae <drumMenuInput+0x16e>
 8008e5a:	4b42      	ldr	r3, [pc, #264]	; (8008f64 <drumMenuInput+0x224>)
 8008e5c:	781b      	ldrb	r3, [r3, #0]
 8008e5e:	b2db      	uxtb	r3, r3
 8008e60:	2b01      	cmp	r3, #1
 8008e62:	d024      	beq.n	8008eae <drumMenuInput+0x16e>
 8008e64:	4b3f      	ldr	r3, [pc, #252]	; (8008f64 <drumMenuInput+0x224>)
 8008e66:	68db      	ldr	r3, [r3, #12]
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d020      	beq.n	8008eae <drumMenuInput+0x16e>
													break;
												get_string(filename);
 8008e6c:	4841      	ldr	r0, [pc, #260]	; (8008f74 <drumMenuInput+0x234>)
 8008e6e:	f000 fb85 	bl	800957c <get_string>
												saveAllLoopsToSD(filename);
 8008e72:	4840      	ldr	r0, [pc, #256]	; (8008f74 <drumMenuInput+0x234>)
 8008e74:	f7ff faca 	bl	800840c <saveAllLoopsToSD>
												menuShowOptions();
 8008e78:	f7ff fb76 	bl	8008568 <menuShowOptions>
												break;
 8008e7c:	e018      	b.n	8008eb0 <drumMenuInput+0x170>
					case TM_KEYPAD_Button_A:
					case TM_KEYPAD_Button_B:
												select_channel(Keypad_Button);
 8008e7e:	4b3c      	ldr	r3, [pc, #240]	; (8008f70 <drumMenuInput+0x230>)
 8008e80:	781b      	ldrb	r3, [r3, #0]
 8008e82:	4618      	mov	r0, r3
 8008e84:	f000 ff1e 	bl	8009cc4 <select_channel>
												menuShowOptions();
 8008e88:	f7ff fb6e 	bl	8008568 <menuShowOptions>
												menuShowStatus();
 8008e8c:	f7ff fd76 	bl	800897c <menuShowStatus>
 8008e90:	e00e      	b.n	8008eb0 <drumMenuInput+0x170>

				}

			}
			else if(looper.Recording == TRUE || looper.Playback == TRUE){
 8008e92:	4b34      	ldr	r3, [pc, #208]	; (8008f64 <drumMenuInput+0x224>)
 8008e94:	781b      	ldrb	r3, [r3, #0]
 8008e96:	b2db      	uxtb	r3, r3
 8008e98:	2b01      	cmp	r3, #1
 8008e9a:	d004      	beq.n	8008ea6 <drumMenuInput+0x166>
 8008e9c:	4b31      	ldr	r3, [pc, #196]	; (8008f64 <drumMenuInput+0x224>)
 8008e9e:	785b      	ldrb	r3, [r3, #1]
 8008ea0:	b2db      	uxtb	r3, r3
 8008ea2:	2b01      	cmp	r3, #1
 8008ea4:	d104      	bne.n	8008eb0 <drumMenuInput+0x170>
				*play = TRUE;
 8008ea6:	683b      	ldr	r3, [r7, #0]
 8008ea8:	2201      	movs	r2, #1
 8008eaa:	701a      	strb	r2, [r3, #0]
				break;
 8008eac:	e057      	b.n	8008f5e <drumMenuInput+0x21e>
			}
 8008eae:	bf00      	nop
			}

			if(input == TRUE){
 8008eb0:	7bfb      	ldrb	r3, [r7, #15]
 8008eb2:	2b01      	cmp	r3, #1
 8008eb4:	f47f af4f 	bne.w	8008d56 <drumMenuInput+0x16>
				if(startBar == TRUE){
 8008eb8:	7bbb      	ldrb	r3, [r7, #14]
 8008eba:	2b01      	cmp	r3, #1
 8008ebc:	d126      	bne.n	8008f0c <drumMenuInput+0x1cc>
					sprintf(lcdline,"*Start: %-4u",(unsigned int)(looper.StartPattern + 1));
 8008ebe:	4b29      	ldr	r3, [pc, #164]	; (8008f64 <drumMenuInput+0x224>)
 8008ec0:	695b      	ldr	r3, [r3, #20]
 8008ec2:	3301      	adds	r3, #1
 8008ec4:	461a      	mov	r2, r3
 8008ec6:	492c      	ldr	r1, [pc, #176]	; (8008f78 <drumMenuInput+0x238>)
 8008ec8:	482c      	ldr	r0, [pc, #176]	; (8008f7c <drumMenuInput+0x23c>)
 8008eca:	f00e fd07 	bl	80178dc <siprintf>
					TM_ILI9341_Puts(10, 170, lcdline, &TM_Font_11x18, ILI9341_COLOR_BLACK, ILI9341_COLOR_BLUE2);
 8008ece:	f240 531d 	movw	r3, #1309	; 0x51d
 8008ed2:	9301      	str	r3, [sp, #4]
 8008ed4:	2300      	movs	r3, #0
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	4b29      	ldr	r3, [pc, #164]	; (8008f80 <drumMenuInput+0x240>)
 8008eda:	4a28      	ldr	r2, [pc, #160]	; (8008f7c <drumMenuInput+0x23c>)
 8008edc:	21aa      	movs	r1, #170	; 0xaa
 8008ede:	200a      	movs	r0, #10
 8008ee0:	f003 fe04 	bl	800caec <TM_ILI9341_Puts>
					sprintf(lcdline," End: %-4u",(unsigned int)(looper.EndPattern + 1));
 8008ee4:	4b1f      	ldr	r3, [pc, #124]	; (8008f64 <drumMenuInput+0x224>)
 8008ee6:	699b      	ldr	r3, [r3, #24]
 8008ee8:	3301      	adds	r3, #1
 8008eea:	461a      	mov	r2, r3
 8008eec:	4925      	ldr	r1, [pc, #148]	; (8008f84 <drumMenuInput+0x244>)
 8008eee:	4823      	ldr	r0, [pc, #140]	; (8008f7c <drumMenuInput+0x23c>)
 8008ef0:	f00e fcf4 	bl	80178dc <siprintf>
					TM_ILI9341_Puts(10, 190, lcdline, &TM_Font_11x18, ILI9341_COLOR_BLACK, ILI9341_COLOR_BLUE2);
 8008ef4:	f240 531d 	movw	r3, #1309	; 0x51d
 8008ef8:	9301      	str	r3, [sp, #4]
 8008efa:	2300      	movs	r3, #0
 8008efc:	9300      	str	r3, [sp, #0]
 8008efe:	4b20      	ldr	r3, [pc, #128]	; (8008f80 <drumMenuInput+0x240>)
 8008f00:	4a1e      	ldr	r2, [pc, #120]	; (8008f7c <drumMenuInput+0x23c>)
 8008f02:	21be      	movs	r1, #190	; 0xbe
 8008f04:	200a      	movs	r0, #10
 8008f06:	f003 fdf1 	bl	800caec <TM_ILI9341_Puts>
 8008f0a:	e025      	b.n	8008f58 <drumMenuInput+0x218>
				}
				else{
					sprintf(lcdline," Start: %-4u",(unsigned int)(looper.StartPattern + 1));
 8008f0c:	4b15      	ldr	r3, [pc, #84]	; (8008f64 <drumMenuInput+0x224>)
 8008f0e:	695b      	ldr	r3, [r3, #20]
 8008f10:	3301      	adds	r3, #1
 8008f12:	461a      	mov	r2, r3
 8008f14:	491c      	ldr	r1, [pc, #112]	; (8008f88 <drumMenuInput+0x248>)
 8008f16:	4819      	ldr	r0, [pc, #100]	; (8008f7c <drumMenuInput+0x23c>)
 8008f18:	f00e fce0 	bl	80178dc <siprintf>
					TM_ILI9341_Puts(10, 170, lcdline, &TM_Font_11x18, ILI9341_COLOR_BLACK, ILI9341_COLOR_BLUE2);
 8008f1c:	f240 531d 	movw	r3, #1309	; 0x51d
 8008f20:	9301      	str	r3, [sp, #4]
 8008f22:	2300      	movs	r3, #0
 8008f24:	9300      	str	r3, [sp, #0]
 8008f26:	4b16      	ldr	r3, [pc, #88]	; (8008f80 <drumMenuInput+0x240>)
 8008f28:	4a14      	ldr	r2, [pc, #80]	; (8008f7c <drumMenuInput+0x23c>)
 8008f2a:	21aa      	movs	r1, #170	; 0xaa
 8008f2c:	200a      	movs	r0, #10
 8008f2e:	f003 fddd 	bl	800caec <TM_ILI9341_Puts>
					sprintf(lcdline,"*End: %-4u",(unsigned int)(looper.EndPattern + 1));
 8008f32:	4b0c      	ldr	r3, [pc, #48]	; (8008f64 <drumMenuInput+0x224>)
 8008f34:	699b      	ldr	r3, [r3, #24]
 8008f36:	3301      	adds	r3, #1
 8008f38:	461a      	mov	r2, r3
 8008f3a:	4914      	ldr	r1, [pc, #80]	; (8008f8c <drumMenuInput+0x24c>)
 8008f3c:	480f      	ldr	r0, [pc, #60]	; (8008f7c <drumMenuInput+0x23c>)
 8008f3e:	f00e fccd 	bl	80178dc <siprintf>
					TM_ILI9341_Puts(10, 190, lcdline, &TM_Font_11x18, ILI9341_COLOR_BLACK, ILI9341_COLOR_BLUE2);
 8008f42:	f240 531d 	movw	r3, #1309	; 0x51d
 8008f46:	9301      	str	r3, [sp, #4]
 8008f48:	2300      	movs	r3, #0
 8008f4a:	9300      	str	r3, [sp, #0]
 8008f4c:	4b0c      	ldr	r3, [pc, #48]	; (8008f80 <drumMenuInput+0x240>)
 8008f4e:	4a0b      	ldr	r2, [pc, #44]	; (8008f7c <drumMenuInput+0x23c>)
 8008f50:	21be      	movs	r1, #190	; 0xbe
 8008f52:	200a      	movs	r0, #10
 8008f54:	f003 fdca 	bl	800caec <TM_ILI9341_Puts>

				}

				input = FALSE;
 8008f58:	2300      	movs	r3, #0
 8008f5a:	73fb      	strb	r3, [r7, #15]
		set_function(AUDIO_DRUMS);
 8008f5c:	e6fb      	b.n	8008d56 <drumMenuInput+0x16>

			//HAL_Delay(100);
		}


}
 8008f5e:	3710      	adds	r7, #16
 8008f60:	46bd      	mov	sp, r7
 8008f62:	bd80      	pop	{r7, pc}
 8008f64:	20001228 	.word	0x20001228
 8008f68:	20001248 	.word	0x20001248
 8008f6c:	20001258 	.word	0x20001258
 8008f70:	20001c45 	.word	0x20001c45
 8008f74:	20001d68 	.word	0x20001d68
 8008f78:	08018eb8 	.word	0x08018eb8
 8008f7c:	20001270 	.word	0x20001270
 8008f80:	200001e0 	.word	0x200001e0
 8008f84:	08018ec8 	.word	0x08018ec8
 8008f88:	08018ed4 	.word	0x08018ed4
 8008f8c:	08018ee4 	.word	0x08018ee4

08008f90 <audio_rhythm>:
extern TM_KEYPAD_Button_t Keypad_Button;
extern BOOL Skip_Read_Button;

static char filename[13];

void audio_rhythm(){
 8008f90:	b480      	push	{r7}
 8008f92:	af00      	add	r7, sp, #0
	//looper.Function = AUDIO_DRUMS;

}
 8008f94:	bf00      	nop
 8008f96:	46bd      	mov	sp, r7
 8008f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f9c:	4770      	bx	lr

08008f9e <audio_only>:

void audio_only(){
 8008f9e:	b480      	push	{r7}
 8008fa0:	af00      	add	r7, sp, #0
	//looper.Function = AUDIO_ONLY;

}
 8008fa2:	bf00      	nop
 8008fa4:	46bd      	mov	sp, r7
 8008fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008faa:	4770      	bx	lr

08008fac <highlight_on>:

void audio_drums(void){
	//looper.Function = AUDIO_DRUMS;
}

static void highlight_on(FileEntry *current){
 8008fac:	b580      	push	{r7, lr}
 8008fae:	b084      	sub	sp, #16
 8008fb0:	af02      	add	r7, sp, #8
 8008fb2:	6078      	str	r0, [r7, #4]
	TM_ILI9341_Puts(10, 10 + (current->list_pos * 11), current->filename, &TM_Font_7x10, ILI9341_COLOR_YELLOW, ILI9341_COLOR_CYAN);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008fb8:	461a      	mov	r2, r3
 8008fba:	0092      	lsls	r2, r2, #2
 8008fbc:	441a      	add	r2, r3
 8008fbe:	0052      	lsls	r2, r2, #1
 8008fc0:	4413      	add	r3, r2
 8008fc2:	b29b      	uxth	r3, r3
 8008fc4:	330a      	adds	r3, #10
 8008fc6:	b299      	uxth	r1, r3
 8008fc8:	687a      	ldr	r2, [r7, #4]
 8008fca:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8008fce:	9301      	str	r3, [sp, #4]
 8008fd0:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8008fd4:	9300      	str	r3, [sp, #0]
 8008fd6:	4b04      	ldr	r3, [pc, #16]	; (8008fe8 <highlight_on+0x3c>)
 8008fd8:	200a      	movs	r0, #10
 8008fda:	f003 fd87 	bl	800caec <TM_ILI9341_Puts>
}
 8008fde:	bf00      	nop
 8008fe0:	3708      	adds	r7, #8
 8008fe2:	46bd      	mov	sp, r7
 8008fe4:	bd80      	pop	{r7, pc}
 8008fe6:	bf00      	nop
 8008fe8:	200001d8 	.word	0x200001d8

08008fec <highlight_off>:

static void highlight_off(FileEntry *current){
 8008fec:	b580      	push	{r7, lr}
 8008fee:	b084      	sub	sp, #16
 8008ff0:	af02      	add	r7, sp, #8
 8008ff2:	6078      	str	r0, [r7, #4]
	TM_ILI9341_Puts(10, 10 + (current->list_pos * 11), current->filename, &TM_Font_7x10, ILI9341_COLOR_YELLOW, ILI9341_COLOR_MAGENTA);
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8008ff8:	461a      	mov	r2, r3
 8008ffa:	0092      	lsls	r2, r2, #2
 8008ffc:	441a      	add	r2, r3
 8008ffe:	0052      	lsls	r2, r2, #1
 8009000:	4413      	add	r3, r2
 8009002:	b29b      	uxth	r3, r3
 8009004:	330a      	adds	r3, #10
 8009006:	b299      	uxth	r1, r3
 8009008:	687a      	ldr	r2, [r7, #4]
 800900a:	f24a 2354 	movw	r3, #41556	; 0xa254
 800900e:	9301      	str	r3, [sp, #4]
 8009010:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8009014:	9300      	str	r3, [sp, #0]
 8009016:	4b04      	ldr	r3, [pc, #16]	; (8009028 <highlight_off+0x3c>)
 8009018:	200a      	movs	r0, #10
 800901a:	f003 fd67 	bl	800caec <TM_ILI9341_Puts>
}
 800901e:	bf00      	nop
 8009020:	3708      	adds	r7, #8
 8009022:	46bd      	mov	sp, r7
 8009024:	bd80      	pop	{r7, pc}
 8009026:	bf00      	nop
 8009028:	200001d8 	.word	0x200001d8

0800902c <display_list_desc>:

static void display_list_desc(FileEntry *head,uint16_t size){
 800902c:	b580      	push	{r7, lr}
 800902e:	b086      	sub	sp, #24
 8009030:	af02      	add	r7, sp, #8
 8009032:	6078      	str	r0, [r7, #4]
 8009034:	460b      	mov	r3, r1
 8009036:	807b      	strh	r3, [r7, #2]
	FileEntry *current = head;
 8009038:	687b      	ldr	r3, [r7, #4]
 800903a:	60fb      	str	r3, [r7, #12]
	TM_ILI9341_Fill(ILI9341_COLOR_MAGENTA);
 800903c:	f24a 2054 	movw	r0, #41556	; 0xa254
 8009040:	f003 fc50 	bl	800c8e4 <TM_ILI9341_Fill>
	current = head;
 8009044:	687b      	ldr	r3, [r7, #4]
 8009046:	60fb      	str	r3, [r7, #12]
	do{
		if(current->list_pos == (size - 1))
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800904c:	461a      	mov	r2, r3
 800904e:	887b      	ldrh	r3, [r7, #2]
 8009050:	3b01      	subs	r3, #1
 8009052:	429a      	cmp	r2, r3
 8009054:	d115      	bne.n	8009082 <display_list_desc+0x56>
			TM_ILI9341_Puts(10, 10 + (current->list_pos * 11), current->filename, &TM_Font_7x10, ILI9341_COLOR_YELLOW, ILI9341_COLOR_CYAN);
 8009056:	68fb      	ldr	r3, [r7, #12]
 8009058:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800905a:	461a      	mov	r2, r3
 800905c:	0092      	lsls	r2, r2, #2
 800905e:	441a      	add	r2, r3
 8009060:	0052      	lsls	r2, r2, #1
 8009062:	4413      	add	r3, r2
 8009064:	b29b      	uxth	r3, r3
 8009066:	330a      	adds	r3, #10
 8009068:	b299      	uxth	r1, r3
 800906a:	68fa      	ldr	r2, [r7, #12]
 800906c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8009070:	9301      	str	r3, [sp, #4]
 8009072:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8009076:	9300      	str	r3, [sp, #0]
 8009078:	4b15      	ldr	r3, [pc, #84]	; (80090d0 <display_list_desc+0xa4>)
 800907a:	200a      	movs	r0, #10
 800907c:	f003 fd36 	bl	800caec <TM_ILI9341_Puts>
 8009080:	e014      	b.n	80090ac <display_list_desc+0x80>
		else
			TM_ILI9341_Puts(10, 10 + (current->list_pos * 11), current->filename, &TM_Font_7x10, ILI9341_COLOR_YELLOW, ILI9341_COLOR_MAGENTA);
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009086:	461a      	mov	r2, r3
 8009088:	0092      	lsls	r2, r2, #2
 800908a:	441a      	add	r2, r3
 800908c:	0052      	lsls	r2, r2, #1
 800908e:	4413      	add	r3, r2
 8009090:	b29b      	uxth	r3, r3
 8009092:	330a      	adds	r3, #10
 8009094:	b299      	uxth	r1, r3
 8009096:	68fa      	ldr	r2, [r7, #12]
 8009098:	f24a 2354 	movw	r3, #41556	; 0xa254
 800909c:	9301      	str	r3, [sp, #4]
 800909e:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80090a2:	9300      	str	r3, [sp, #0]
 80090a4:	4b0a      	ldr	r3, [pc, #40]	; (80090d0 <display_list_desc+0xa4>)
 80090a6:	200a      	movs	r0, #10
 80090a8:	f003 fd20 	bl	800caec <TM_ILI9341_Puts>

		current = current->prev;
 80090ac:	68fb      	ldr	r3, [r7, #12]
 80090ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090b0:	60fb      	str	r3, [r7, #12]
	}
	while(current != NULL && current->list_pos != (size - 1));
 80090b2:	68fb      	ldr	r3, [r7, #12]
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	d006      	beq.n	80090c6 <display_list_desc+0x9a>
 80090b8:	68fb      	ldr	r3, [r7, #12]
 80090ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80090bc:	461a      	mov	r2, r3
 80090be:	887b      	ldrh	r3, [r7, #2]
 80090c0:	3b01      	subs	r3, #1
 80090c2:	429a      	cmp	r2, r3
 80090c4:	d1c0      	bne.n	8009048 <display_list_desc+0x1c>

}
 80090c6:	bf00      	nop
 80090c8:	3710      	adds	r7, #16
 80090ca:	46bd      	mov	sp, r7
 80090cc:	bd80      	pop	{r7, pc}
 80090ce:	bf00      	nop
 80090d0:	200001d8 	.word	0x200001d8

080090d4 <display_list_asc>:

static void display_list_asc(FileEntry *head,uint16_t size){
 80090d4:	b580      	push	{r7, lr}
 80090d6:	b086      	sub	sp, #24
 80090d8:	af02      	add	r7, sp, #8
 80090da:	6078      	str	r0, [r7, #4]
 80090dc:	460b      	mov	r3, r1
 80090de:	807b      	strh	r3, [r7, #2]
	FileEntry *current = head;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	60fb      	str	r3, [r7, #12]
	TM_ILI9341_Fill(ILI9341_COLOR_MAGENTA);
 80090e4:	f24a 2054 	movw	r0, #41556	; 0xa254
 80090e8:	f003 fbfc 	bl	800c8e4 <TM_ILI9341_Fill>
	current = head;
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	60fb      	str	r3, [r7, #12]
	do{
		if(current->list_pos == 0)
 80090f0:	68fb      	ldr	r3, [r7, #12]
 80090f2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d115      	bne.n	8009124 <display_list_asc+0x50>
			TM_ILI9341_Puts(10, 10 + (current->list_pos * 11), current->filename, &TM_Font_7x10, ILI9341_COLOR_YELLOW, ILI9341_COLOR_CYAN);
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80090fc:	461a      	mov	r2, r3
 80090fe:	0092      	lsls	r2, r2, #2
 8009100:	441a      	add	r2, r3
 8009102:	0052      	lsls	r2, r2, #1
 8009104:	4413      	add	r3, r2
 8009106:	b29b      	uxth	r3, r3
 8009108:	330a      	adds	r3, #10
 800910a:	b299      	uxth	r1, r3
 800910c:	68fa      	ldr	r2, [r7, #12]
 800910e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8009112:	9301      	str	r3, [sp, #4]
 8009114:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8009118:	9300      	str	r3, [sp, #0]
 800911a:	4b14      	ldr	r3, [pc, #80]	; (800916c <display_list_asc+0x98>)
 800911c:	200a      	movs	r0, #10
 800911e:	f003 fce5 	bl	800caec <TM_ILI9341_Puts>
 8009122:	e014      	b.n	800914e <display_list_asc+0x7a>
		else
			TM_ILI9341_Puts(10, 10 + (current->list_pos * 11), current->filename, &TM_Font_7x10, ILI9341_COLOR_YELLOW, ILI9341_COLOR_MAGENTA);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009128:	461a      	mov	r2, r3
 800912a:	0092      	lsls	r2, r2, #2
 800912c:	441a      	add	r2, r3
 800912e:	0052      	lsls	r2, r2, #1
 8009130:	4413      	add	r3, r2
 8009132:	b29b      	uxth	r3, r3
 8009134:	330a      	adds	r3, #10
 8009136:	b299      	uxth	r1, r3
 8009138:	68fa      	ldr	r2, [r7, #12]
 800913a:	f24a 2354 	movw	r3, #41556	; 0xa254
 800913e:	9301      	str	r3, [sp, #4]
 8009140:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8009144:	9300      	str	r3, [sp, #0]
 8009146:	4b09      	ldr	r3, [pc, #36]	; (800916c <display_list_asc+0x98>)
 8009148:	200a      	movs	r0, #10
 800914a:	f003 fccf 	bl	800caec <TM_ILI9341_Puts>
		current = current->next;
 800914e:	68fb      	ldr	r3, [r7, #12]
 8009150:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009152:	60fb      	str	r3, [r7, #12]
	}
	while(current != NULL && current->list_pos != 0);
 8009154:	68fb      	ldr	r3, [r7, #12]
 8009156:	2b00      	cmp	r3, #0
 8009158:	d003      	beq.n	8009162 <display_list_asc+0x8e>
 800915a:	68fb      	ldr	r3, [r7, #12]
 800915c:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800915e:	2b00      	cmp	r3, #0
 8009160:	d1c6      	bne.n	80090f0 <display_list_asc+0x1c>

}
 8009162:	bf00      	nop
 8009164:	3710      	adds	r7, #16
 8009166:	46bd      	mov	sp, r7
 8009168:	bd80      	pop	{r7, pc}
 800916a:	bf00      	nop
 800916c:	200001d8 	.word	0x200001d8

08009170 <get_file_sd>:


BOOL get_file_sd(char *outstr){
 8009170:	b580      	push	{r7, lr}
 8009172:	f5ad 7d2a 	sub.w	sp, sp, #680	; 0x2a8
 8009176:	af02      	add	r7, sp, #8
 8009178:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 800917c:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8009180:	6018      	str	r0, [r3, #0]
	uint32_t idx = 0;
 8009182:	2300      	movs	r3, #0
 8009184:	f8c7 329c 	str.w	r3, [r7, #668]	; 0x29c
	uint32_t list_size = 10;
 8009188:	230a      	movs	r3, #10
 800918a:	f8c7 3284 	str.w	r3, [r7, #644]	; 0x284
	KeyDir keydir = KEY_NONE;
 800918e:	2304      	movs	r3, #4
 8009190:	f887 329b 	strb.w	r3, [r7, #667]	; 0x29b
	TCHAR path[8];
	FILINFO fno;
	DIR dir;
	FIL fil;
	FileEntry *current, *head, *node, *tail;
	current = NULL;
 8009194:	2300      	movs	r3, #0
 8009196:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
	head = NULL;
 800919a:	2300      	movs	r3, #0
 800919c:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
	BOOL delete = FALSE;
 80091a0:	2300      	movs	r3, #0
 80091a2:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
	FRESULT res = f_getcwd(path,8);
 80091a6:	f507 731d 	add.w	r3, r7, #628	; 0x274
 80091aa:	2108      	movs	r1, #8
 80091ac:	4618      	mov	r0, r3
 80091ae:	f7fd f82f 	bl	8006210 <f_getcwd>
 80091b2:	4603      	mov	r3, r0
 80091b4:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283


	f_opendir(&dir,path);
 80091b8:	f507 721d 	add.w	r2, r7, #628	; 0x274
 80091bc:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80091c0:	4611      	mov	r1, r2
 80091c2:	4618      	mov	r0, r3
 80091c4:	f7fd fa59 	bl	800667a <f_opendir>
	if(res != FR_OK){
 80091c8:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d06e      	beq.n	80092ae <get_file_sd+0x13e>
			TM_ILI9341_Puts(10, 10, "Error reading SD card", &TM_Font_7x10,	ILI9341_COLOR_YELLOW, ILI9341_COLOR_MAGENTA);
 80091d0:	f24a 2354 	movw	r3, #41556	; 0xa254
 80091d4:	9301      	str	r3, [sp, #4]
 80091d6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80091da:	9300      	str	r3, [sp, #0]
 80091dc:	4bbd      	ldr	r3, [pc, #756]	; (80094d4 <get_file_sd+0x364>)
 80091de:	4abe      	ldr	r2, [pc, #760]	; (80094d8 <get_file_sd+0x368>)
 80091e0:	210a      	movs	r1, #10
 80091e2:	200a      	movs	r0, #10
 80091e4:	f003 fc82 	bl	800caec <TM_ILI9341_Puts>
			return FALSE;
 80091e8:	2300      	movs	r3, #0
 80091ea:	e1ba      	b.n	8009562 <get_file_sd+0x3f2>
	}

	while((res = f_readdir(&dir, &fno)) == FR_OK && fno.fname[0] != 0){
		if((fno.fattrib & AM_DIR) || (fno.fsize == 0))	// directory
 80091ec:	f897 3264 	ldrb.w	r3, [r7, #612]	; 0x264
 80091f0:	f003 0310 	and.w	r3, r3, #16
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d15a      	bne.n	80092ae <get_file_sd+0x13e>
 80091f8:	f8d7 325c 	ldr.w	r3, [r7, #604]	; 0x25c
 80091fc:	2b00      	cmp	r3, #0
 80091fe:	d100      	bne.n	8009202 <get_file_sd+0x92>
			continue;
 8009200:	e055      	b.n	80092ae <get_file_sd+0x13e>
		 node = (FileEntry *)malloc(sizeof(FileEntry));
 8009202:	2030      	movs	r0, #48	; 0x30
 8009204:	f00e fa3c 	bl	8017680 <malloc>
 8009208:	4603      	mov	r3, r0
 800920a:	f8c7 327c 	str.w	r3, [r7, #636]	; 0x27c
		 strcpy(node->filename,fno.fname);
 800920e:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 8009212:	f507 7317 	add.w	r3, r7, #604	; 0x25c
 8009216:	3309      	adds	r3, #9
 8009218:	4619      	mov	r1, r3
 800921a:	4610      	mov	r0, r2
 800921c:	f00e fb8d 	bl	801793a <strcpy>
		 node->number = idx++;
 8009220:	f8d7 329c 	ldr.w	r3, [r7, #668]	; 0x29c
 8009224:	1c5a      	adds	r2, r3, #1
 8009226:	f8c7 229c 	str.w	r2, [r7, #668]	; 0x29c
 800922a:	b29a      	uxth	r2, r3
 800922c:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8009230:	845a      	strh	r2, [r3, #34]	; 0x22
		 node->list_pos = node->number % list_size;
 8009232:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8009236:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
 8009238:	f8d7 2284 	ldr.w	r2, [r7, #644]	; 0x284
 800923c:	fbb3 f2f2 	udiv	r2, r3, r2
 8009240:	f8d7 1284 	ldr.w	r1, [r7, #644]	; 0x284
 8009244:	fb01 f202 	mul.w	r2, r1, r2
 8009248:	1a9b      	subs	r3, r3, r2
 800924a:	b29a      	uxth	r2, r3
 800924c:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8009250:	849a      	strh	r2, [r3, #36]	; 0x24
		 node->next = node->prev = NULL;
 8009252:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8009256:	2200      	movs	r2, #0
 8009258:	629a      	str	r2, [r3, #40]	; 0x28
 800925a:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 800925e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009260:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8009264:	62da      	str	r2, [r3, #44]	; 0x2c
		 if(head == NULL){
 8009266:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800926a:	2b00      	cmp	r3, #0
 800926c:	d10c      	bne.n	8009288 <get_file_sd+0x118>
			current = head = tail = node;
 800926e:	f8d7 327c 	ldr.w	r3, [r7, #636]	; 0x27c
 8009272:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
 8009276:	f8d7 328c 	ldr.w	r3, [r7, #652]	; 0x28c
 800927a:	f8c7 3290 	str.w	r3, [r7, #656]	; 0x290
 800927e:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8009282:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8009286:	e012      	b.n	80092ae <get_file_sd+0x13e>
		 }
		 else{
			 current = current->next = node;
 8009288:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800928c:	f8d7 227c 	ldr.w	r2, [r7, #636]	; 0x27c
 8009290:	62da      	str	r2, [r3, #44]	; 0x2c
 8009292:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8009296:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009298:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
			 current->prev = tail;
 800929c:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80092a0:	f8d7 228c 	ldr.w	r2, [r7, #652]	; 0x28c
 80092a4:	629a      	str	r2, [r3, #40]	; 0x28
			 tail = current;
 80092a6:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80092aa:	f8c7 328c 	str.w	r3, [r7, #652]	; 0x28c
	while((res = f_readdir(&dir, &fno)) == FR_OK && fno.fname[0] != 0){
 80092ae:	f507 7217 	add.w	r2, r7, #604	; 0x25c
 80092b2:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80092b6:	4611      	mov	r1, r2
 80092b8:	4618      	mov	r0, r3
 80092ba:	f7fd fa4f 	bl	800675c <f_readdir>
 80092be:	4603      	mov	r3, r0
 80092c0:	f887 3283 	strb.w	r3, [r7, #643]	; 0x283
 80092c4:	f897 3283 	ldrb.w	r3, [r7, #643]	; 0x283
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d103      	bne.n	80092d4 <get_file_sd+0x164>
 80092cc:	f897 3265 	ldrb.w	r3, [r7, #613]	; 0x265
 80092d0:	2b00      	cmp	r3, #0
 80092d2:	d18b      	bne.n	80091ec <get_file_sd+0x7c>
		 }
	}

	f_closedir(&dir);
 80092d4:	f507 730f 	add.w	r3, r7, #572	; 0x23c
 80092d8:	4618      	mov	r0, r3
 80092da:	f7fd fa2b 	bl	8006734 <f_closedir>
	if(head == NULL){
 80092de:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d10d      	bne.n	8009302 <get_file_sd+0x192>
		TM_ILI9341_Fill(ILI9341_COLOR_MAGENTA);
 80092e6:	f24a 2054 	movw	r0, #41556	; 0xa254
 80092ea:	f003 fafb 	bl	800c8e4 <TM_ILI9341_Fill>
		menuMultiLine(2,10,"No files","Press [0] key");
 80092ee:	4b7b      	ldr	r3, [pc, #492]	; (80094dc <get_file_sd+0x36c>)
 80092f0:	4a7b      	ldr	r2, [pc, #492]	; (80094e0 <get_file_sd+0x370>)
 80092f2:	210a      	movs	r1, #10
 80092f4:	2002      	movs	r0, #2
 80092f6:	f7ff fc87 	bl	8008c08 <menuMultiLine>
		menuWaitReturn();
 80092fa:	f7ff fcbb 	bl	8008c74 <menuWaitReturn>
		return FALSE;
 80092fe:	2300      	movs	r3, #0
 8009300:	e12f      	b.n	8009562 <get_file_sd+0x3f2>
	}

	current = head;
 8009302:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 8009306:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
	display_list_asc(current,list_size);
 800930a:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 800930e:	b29b      	uxth	r3, r3
 8009310:	4619      	mov	r1, r3
 8009312:	f8d7 0294 	ldr.w	r0, [r7, #660]	; 0x294
 8009316:	f7ff fedd 	bl	80090d4 <display_list_asc>
	menuMultiLine(3,180,"[2]Up [8]Down [5]Select","[3]Listen [U]ser button stop","[6]Delete [0]Cancel");
 800931a:	4b72      	ldr	r3, [pc, #456]	; (80094e4 <get_file_sd+0x374>)
 800931c:	9300      	str	r3, [sp, #0]
 800931e:	4b72      	ldr	r3, [pc, #456]	; (80094e8 <get_file_sd+0x378>)
 8009320:	4a72      	ldr	r2, [pc, #456]	; (80094ec <get_file_sd+0x37c>)
 8009322:	21b4      	movs	r1, #180	; 0xb4
 8009324:	2003      	movs	r0, #3
 8009326:	f7ff fc6f 	bl	8008c08 <menuMultiLine>

	// read keys and display file list and cursor
	while ((Keypad_Button = TM_KEYPAD_Read())) {
 800932a:	e0f9      	b.n	8009520 <get_file_sd+0x3b0>
		switch (Keypad_Button) {
 800932c:	4b70      	ldr	r3, [pc, #448]	; (80094f0 <get_file_sd+0x380>)
 800932e:	781b      	ldrb	r3, [r3, #0]
 8009330:	2b08      	cmp	r3, #8
 8009332:	f200 8097 	bhi.w	8009464 <get_file_sd+0x2f4>
 8009336:	a201      	add	r2, pc, #4	; (adr r2, 800933c <get_file_sd+0x1cc>)
 8009338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800933c:	08009539 	.word	0x08009539
 8009340:	08009465 	.word	0x08009465
 8009344:	08009361 	.word	0x08009361
 8009348:	0800937d 	.word	0x0800937d
 800934c:	08009465 	.word	0x08009465
 8009350:	0800940d 	.word	0x0800940d
 8009354:	08009423 	.word	0x08009423
 8009358:	08009465 	.word	0x08009465
 800935c:	0800943b 	.word	0x0800943b
			case TM_KEYPAD_Button_2:	keydir = KEY_UP;
 8009360:	2300      	movs	r3, #0
 8009362:	f887 329b 	strb.w	r3, [r7, #667]	; 0x29b
										if(current->prev != NULL)
 8009366:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800936a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800936c:	2b00      	cmp	r3, #0
 800936e:	d072      	beq.n	8009456 <get_file_sd+0x2e6>
											current = current->prev;
 8009370:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8009374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009376:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
										break;
 800937a:	e06c      	b.n	8009456 <get_file_sd+0x2e6>
			case TM_KEYPAD_Button_3:	if(looper.Function == AUDIO_ONLY){
 800937c:	4b5d      	ldr	r3, [pc, #372]	; (80094f4 <get_file_sd+0x384>)
 800937e:	7f5b      	ldrb	r3, [r3, #29]
 8009380:	b2db      	uxtb	r3, r3
 8009382:	2b01      	cmp	r3, #1
 8009384:	d115      	bne.n	80093b2 <get_file_sd+0x242>
											f_open(&fil,current->filename,FA_OPEN_ALWAYS | FA_READ);
 8009386:	f8d7 1294 	ldr.w	r1, [r7, #660]	; 0x294
 800938a:	f107 0318 	add.w	r3, r7, #24
 800938e:	2211      	movs	r2, #17
 8009390:	4618      	mov	r0, r3
 8009392:	f7fc fa95 	bl	80058c0 <f_open>
											looper.Function = PLAY_SD;
 8009396:	4b57      	ldr	r3, [pc, #348]	; (80094f4 <get_file_sd+0x384>)
 8009398:	2206      	movs	r2, #6
 800939a:	775a      	strb	r2, [r3, #29]
											SD_readSingleTrack(&fil);
 800939c:	f107 0318 	add.w	r3, r7, #24
 80093a0:	4618      	mov	r0, r3
 80093a2:	f7fe fc1b 	bl	8007bdc <SD_readSingleTrack>
											f_close(&fil);
 80093a6:	f107 0318 	add.w	r3, r7, #24
 80093aa:	4618      	mov	r0, r3
 80093ac:	f7fc ff13 	bl	80061d6 <f_close>
											looper.StartPattern = 0;
											looper.EndPattern = (numOfPatterns > 4?3:(numOfPatterns - 1));
											drumLoop();
											looper.Function = AUDIO_DRUMS;
										}
										break;
 80093b0:	e053      	b.n	800945a <get_file_sd+0x2ea>
										else if(looper.Function == AUDIO_DRUMS){
 80093b2:	4b50      	ldr	r3, [pc, #320]	; (80094f4 <get_file_sd+0x384>)
 80093b4:	7f5b      	ldrb	r3, [r3, #29]
 80093b6:	b2db      	uxtb	r3, r3
 80093b8:	2b02      	cmp	r3, #2
 80093ba:	d14e      	bne.n	800945a <get_file_sd+0x2ea>
											readRhythmFromSD(current->filename);
 80093bc:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80093c0:	4618      	mov	r0, r3
 80093c2:	f7fe ff49 	bl	8008258 <readRhythmFromSD>
											memset(pattern_audio_map,0,sizeof(pattern_audio_map));
 80093c6:	f640 126c 	movw	r2, #2412	; 0x96c
 80093ca:	2100      	movs	r1, #0
 80093cc:	484a      	ldr	r0, [pc, #296]	; (80094f8 <get_file_sd+0x388>)
 80093ce:	f00e f975 	bl	80176bc <memset>
											readDrums(&numOfPatterns,&numOfBytes,&maxResolution);
 80093d2:	f107 020c 	add.w	r2, r7, #12
 80093d6:	f107 0110 	add.w	r1, r7, #16
 80093da:	f107 0314 	add.w	r3, r7, #20
 80093de:	4618      	mov	r0, r3
 80093e0:	f7f9 ffa6 	bl	8003330 <readDrums>
											looper.StartPattern = 0;
 80093e4:	4b43      	ldr	r3, [pc, #268]	; (80094f4 <get_file_sd+0x384>)
 80093e6:	2200      	movs	r2, #0
 80093e8:	615a      	str	r2, [r3, #20]
											looper.EndPattern = (numOfPatterns > 4?3:(numOfPatterns - 1));
 80093ea:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 80093ee:	f5a3 7323 	sub.w	r3, r3, #652	; 0x28c
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2b04      	cmp	r3, #4
 80093f6:	bf28      	it	cs
 80093f8:	2304      	movcs	r3, #4
 80093fa:	3b01      	subs	r3, #1
 80093fc:	4a3d      	ldr	r2, [pc, #244]	; (80094f4 <get_file_sd+0x384>)
 80093fe:	6193      	str	r3, [r2, #24]
											drumLoop();
 8009400:	f7f9 fc54 	bl	8002cac <drumLoop>
											looper.Function = AUDIO_DRUMS;
 8009404:	4b3b      	ldr	r3, [pc, #236]	; (80094f4 <get_file_sd+0x384>)
 8009406:	2202      	movs	r2, #2
 8009408:	775a      	strb	r2, [r3, #29]
										break;
 800940a:	e026      	b.n	800945a <get_file_sd+0x2ea>
			case TM_KEYPAD_Button_5:	strcpy(outstr,current->filename);
 800940c:	f8d7 2294 	ldr.w	r2, [r7, #660]	; 0x294
 8009410:	f507 7328 	add.w	r3, r7, #672	; 0x2a0
 8009414:	f5a3 7327 	sub.w	r3, r3, #668	; 0x29c
 8009418:	4611      	mov	r1, r2
 800941a:	6818      	ldr	r0, [r3, #0]
 800941c:	f00e fa8d 	bl	801793a <strcpy>
										goto end_get_file;
 8009420:	e08b      	b.n	800953a <get_file_sd+0x3ca>
			case TM_KEYPAD_Button_6:	if(f_unlink(current->filename) == FR_OK){
 8009422:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8009426:	4618      	mov	r0, r3
 8009428:	f7fd fa7e 	bl	8006928 <f_unlink>
 800942c:	4603      	mov	r3, r0
 800942e:	2b00      	cmp	r3, #0
 8009430:	d115      	bne.n	800945e <get_file_sd+0x2ee>
											delete = TRUE;
 8009432:	2301      	movs	r3, #1
 8009434:	f887 328b 	strb.w	r3, [r7, #651]	; 0x28b
											goto end_get_file;
 8009438:	e07f      	b.n	800953a <get_file_sd+0x3ca>
										}
										break;
			case TM_KEYPAD_Button_8:	keydir = KEY_DOWN;
 800943a:	2301      	movs	r3, #1
 800943c:	f887 329b 	strb.w	r3, [r7, #667]	; 0x29b
										if(current->next != NULL)
 8009440:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8009444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00b      	beq.n	8009462 <get_file_sd+0x2f2>
											current = current->next;
 800944a:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800944e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009450:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
										break;
 8009454:	e005      	b.n	8009462 <get_file_sd+0x2f2>
										break;
 8009456:	bf00      	nop
 8009458:	e004      	b.n	8009464 <get_file_sd+0x2f4>
										break;
 800945a:	bf00      	nop
 800945c:	e002      	b.n	8009464 <get_file_sd+0x2f4>
										break;
 800945e:	bf00      	nop
 8009460:	e000      	b.n	8009464 <get_file_sd+0x2f4>
										break;
 8009462:	bf00      	nop
			case TM_KEYPAD_Button_0:	goto end_get_file;

		}

		if(Keypad_Button != TM_KEYPAD_Button_NOPRESSED){
 8009464:	4b22      	ldr	r3, [pc, #136]	; (80094f0 <get_file_sd+0x380>)
 8009466:	781b      	ldrb	r3, [r3, #0]
 8009468:	2bff      	cmp	r3, #255	; 0xff
 800946a:	d059      	beq.n	8009520 <get_file_sd+0x3b0>
			if(keydir == KEY_DOWN){
 800946c:	f897 329b 	ldrb.w	r3, [r7, #667]	; 0x29b
 8009470:	2b01      	cmp	r3, #1
 8009472:	d118      	bne.n	80094a6 <get_file_sd+0x336>
				if(current->list_pos == 0)
 8009474:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8009478:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800947a:	2b00      	cmp	r3, #0
 800947c:	d108      	bne.n	8009490 <get_file_sd+0x320>
					display_list_asc(current,list_size);
 800947e:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 8009482:	b29b      	uxth	r3, r3
 8009484:	4619      	mov	r1, r3
 8009486:	f8d7 0294 	ldr.w	r0, [r7, #660]	; 0x294
 800948a:	f7ff fe23 	bl	80090d4 <display_list_asc>
 800948e:	e03f      	b.n	8009510 <get_file_sd+0x3a0>
				else{
					highlight_on(current);
 8009490:	f8d7 0294 	ldr.w	r0, [r7, #660]	; 0x294
 8009494:	f7ff fd8a 	bl	8008fac <highlight_on>
					highlight_off(current->prev);
 8009498:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800949c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800949e:	4618      	mov	r0, r3
 80094a0:	f7ff fda4 	bl	8008fec <highlight_off>
 80094a4:	e034      	b.n	8009510 <get_file_sd+0x3a0>
				}
			}
			else if(keydir == KEY_UP){
 80094a6:	f897 329b 	ldrb.w	r3, [r7, #667]	; 0x29b
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d130      	bne.n	8009510 <get_file_sd+0x3a0>
				if(current->list_pos == (list_size - 1))
 80094ae:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 80094b2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80094b4:	461a      	mov	r2, r3
 80094b6:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80094ba:	3b01      	subs	r3, #1
 80094bc:	429a      	cmp	r2, r3
 80094be:	d11d      	bne.n	80094fc <get_file_sd+0x38c>
					display_list_desc(current,list_size);
 80094c0:	f8d7 3284 	ldr.w	r3, [r7, #644]	; 0x284
 80094c4:	b29b      	uxth	r3, r3
 80094c6:	4619      	mov	r1, r3
 80094c8:	f8d7 0294 	ldr.w	r0, [r7, #660]	; 0x294
 80094cc:	f7ff fdae 	bl	800902c <display_list_desc>
 80094d0:	e01e      	b.n	8009510 <get_file_sd+0x3a0>
 80094d2:	bf00      	nop
 80094d4:	200001d8 	.word	0x200001d8
 80094d8:	08018ef0 	.word	0x08018ef0
 80094dc:	08018f08 	.word	0x08018f08
 80094e0:	08018f18 	.word	0x08018f18
 80094e4:	08018f5c 	.word	0x08018f5c
 80094e8:	08018f24 	.word	0x08018f24
 80094ec:	08018f44 	.word	0x08018f44
 80094f0:	20001c45 	.word	0x20001c45
 80094f4:	20001228 	.word	0x20001228
 80094f8:	20000568 	.word	0x20000568
				else{
					highlight_on(current);
 80094fc:	f8d7 0294 	ldr.w	r0, [r7, #660]	; 0x294
 8009500:	f7ff fd54 	bl	8008fac <highlight_on>
					highlight_off(current->next);
 8009504:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8009508:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800950a:	4618      	mov	r0, r3
 800950c:	f7ff fd6e 	bl	8008fec <highlight_off>
				}
			}

			menuMultiLine(3,180,"[2]Up [8]Down [5]Select","[3]Listen [U]ser button stop","[6]Delete [0]Cancel");
 8009510:	4b16      	ldr	r3, [pc, #88]	; (800956c <get_file_sd+0x3fc>)
 8009512:	9300      	str	r3, [sp, #0]
 8009514:	4b16      	ldr	r3, [pc, #88]	; (8009570 <get_file_sd+0x400>)
 8009516:	4a17      	ldr	r2, [pc, #92]	; (8009574 <get_file_sd+0x404>)
 8009518:	21b4      	movs	r1, #180	; 0xb4
 800951a:	2003      	movs	r0, #3
 800951c:	f7ff fb74 	bl	8008c08 <menuMultiLine>
	while ((Keypad_Button = TM_KEYPAD_Read())) {
 8009520:	f003 fc1e 	bl	800cd60 <TM_KEYPAD_Read>
 8009524:	4603      	mov	r3, r0
 8009526:	461a      	mov	r2, r3
 8009528:	4b13      	ldr	r3, [pc, #76]	; (8009578 <get_file_sd+0x408>)
 800952a:	701a      	strb	r2, [r3, #0]
 800952c:	4b12      	ldr	r3, [pc, #72]	; (8009578 <get_file_sd+0x408>)
 800952e:	781b      	ldrb	r3, [r3, #0]
 8009530:	2b00      	cmp	r3, #0
 8009532:	f47f aefb 	bne.w	800932c <get_file_sd+0x1bc>
		}
	}	// end of while


	end_get_file:
 8009536:	e000      	b.n	800953a <get_file_sd+0x3ca>
			case TM_KEYPAD_Button_0:	goto end_get_file;
 8009538:	bf00      	nop
	// free linked list memory
	for(current = head; current;current=current->next)
 800953a:	f8d7 3290 	ldr.w	r3, [r7, #656]	; 0x290
 800953e:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8009542:	e008      	b.n	8009556 <get_file_sd+0x3e6>
		free(current);
 8009544:	f8d7 0294 	ldr.w	r0, [r7, #660]	; 0x294
 8009548:	f00e f8a2 	bl	8017690 <free>
	for(current = head; current;current=current->next)
 800954c:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 8009550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009552:	f8c7 3294 	str.w	r3, [r7, #660]	; 0x294
 8009556:	f8d7 3294 	ldr.w	r3, [r7, #660]	; 0x294
 800955a:	2b00      	cmp	r3, #0
 800955c:	d1f2      	bne.n	8009544 <get_file_sd+0x3d4>

	return delete;
 800955e:	f897 328b 	ldrb.w	r3, [r7, #651]	; 0x28b
}
 8009562:	4618      	mov	r0, r3
 8009564:	f507 7728 	add.w	r7, r7, #672	; 0x2a0
 8009568:	46bd      	mov	sp, r7
 800956a:	bd80      	pop	{r7, pc}
 800956c:	08018f5c 	.word	0x08018f5c
 8009570:	08018f24 	.word	0x08018f24
 8009574:	08018f44 	.word	0x08018f44
 8009578:	20001c45 	.word	0x20001c45

0800957c <get_string>:


void get_string(char *outstr) {
 800957c:	b580      	push	{r7, lr}
 800957e:	b086      	sub	sp, #24
 8009580:	af02      	add	r7, sp, #8
 8009582:	6078      	str	r0, [r7, #4]
	uint8_t nameIndex = 0;
 8009584:	2300      	movs	r3, #0
 8009586:	73fb      	strb	r3, [r7, #15]
	TM_KEYPAD_Button_t tmpKey = TM_KEYPAD_Button_NOPRESSED;
 8009588:	23ff      	movs	r3, #255	; 0xff
 800958a:	73bb      	strb	r3, [r7, #14]
	uint8_t charIndex = 0;
 800958c:	2300      	movs	r3, #0
 800958e:	737b      	strb	r3, [r7, #13]
	BOOL keyChar = FALSE;
 8009590:	2300      	movs	r3, #0
 8009592:	733b      	strb	r3, [r7, #12]
	BOOL keyBack = FALSE;
 8009594:	2300      	movs	r3, #0
 8009596:	72fb      	strb	r3, [r7, #11]
	BOOL keyForw = FALSE;
 8009598:	2300      	movs	r3, #0
 800959a:	72bb      	strb	r3, [r7, #10]
	BOOL keyDel = FALSE;
 800959c:	2300      	movs	r3, #0
 800959e:	727b      	strb	r3, [r7, #9]

	// array indexed by TM_KEYPAD_Button_t
	static char* keychars[10] = { "0", "1._", "2ABCabc", "3DEFdef", "4GHIghi",
			"5JKLjkl", "6MNOmno", "7PRSprs", "8TUVtuv", "9WXYZwxyz" };
	memset(outstr, '\0', 26);
 80095a0:	221a      	movs	r2, #26
 80095a2:	2100      	movs	r1, #0
 80095a4:	6878      	ldr	r0, [r7, #4]
 80095a6:	f00e f889 	bl	80176bc <memset>
	TM_ILI9341_Fill(ILI9341_COLOR_MAGENTA);
 80095aa:	f24a 2054 	movw	r0, #41556	; 0xa254
 80095ae:	f003 f999 	bl	800c8e4 <TM_ILI9341_Fill>
	TM_ILI9341_Puts(10, 10, "Type filename and/or press [#]", &TM_Font_7x10,
 80095b2:	f24a 2354 	movw	r3, #41556	; 0xa254
 80095b6:	9301      	str	r3, [sp, #4]
 80095b8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80095bc:	9300      	str	r3, [sp, #0]
 80095be:	4baf      	ldr	r3, [pc, #700]	; (800987c <get_string+0x300>)
 80095c0:	4aaf      	ldr	r2, [pc, #700]	; (8009880 <get_string+0x304>)
 80095c2:	210a      	movs	r1, #10
 80095c4:	200a      	movs	r0, #10
 80095c6:	f003 fa91 	bl	800caec <TM_ILI9341_Puts>
			ILI9341_COLOR_YELLOW, ILI9341_COLOR_MAGENTA);
	while (TM_KEYPAD_Read() == TM_KEYPAD_Button_4)
 80095ca:	e000      	b.n	80095ce <get_string+0x52>
		continue;
 80095cc:	bf00      	nop
	while (TM_KEYPAD_Read() == TM_KEYPAD_Button_4)
 80095ce:	f003 fbc7 	bl	800cd60 <TM_KEYPAD_Read>
 80095d2:	4603      	mov	r3, r0
 80095d4:	2b04      	cmp	r3, #4
 80095d6:	d0f9      	beq.n	80095cc <get_string+0x50>
	TM_ILI9341_Putc(10 + (nameIndex * 11), 30, ' ', &TM_Font_11x18,
 80095d8:	7bfb      	ldrb	r3, [r7, #15]
 80095da:	b29b      	uxth	r3, r3
 80095dc:	461a      	mov	r2, r3
 80095de:	0092      	lsls	r2, r2, #2
 80095e0:	441a      	add	r2, r3
 80095e2:	0052      	lsls	r2, r2, #1
 80095e4:	4413      	add	r3, r2
 80095e6:	b29b      	uxth	r3, r3
 80095e8:	330a      	adds	r3, #10
 80095ea:	b298      	uxth	r0, r3
 80095ec:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80095f0:	9301      	str	r3, [sp, #4]
 80095f2:	2300      	movs	r3, #0
 80095f4:	9300      	str	r3, [sp, #0]
 80095f6:	4ba3      	ldr	r3, [pc, #652]	; (8009884 <get_string+0x308>)
 80095f8:	2220      	movs	r2, #32
 80095fa:	211e      	movs	r1, #30
 80095fc:	f003 face 	bl	800cb9c <TM_ILI9341_Putc>
			ILI9341_COLOR_BLACK, ILI9341_COLOR_YELLOW);
	while ((Keypad_Button = TM_KEYPAD_Read()) != TM_KEYPAD_Button_HASH) {
 8009600:	e15a      	b.n	80098b8 <get_string+0x33c>
		switch (Keypad_Button) {
 8009602:	4ba1      	ldr	r3, [pc, #644]	; (8009888 <get_string+0x30c>)
 8009604:	781b      	ldrb	r3, [r3, #0]
 8009606:	2b0e      	cmp	r3, #14
 8009608:	d856      	bhi.n	80096b8 <get_string+0x13c>
 800960a:	a201      	add	r2, pc, #4	; (adr r2, 8009610 <get_string+0x94>)
 800960c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009610:	0800964d 	.word	0x0800964d
 8009614:	0800964d 	.word	0x0800964d
 8009618:	0800964d 	.word	0x0800964d
 800961c:	0800964d 	.word	0x0800964d
 8009620:	0800964d 	.word	0x0800964d
 8009624:	0800964d 	.word	0x0800964d
 8009628:	0800964d 	.word	0x0800964d
 800962c:	0800964d 	.word	0x0800964d
 8009630:	0800964d 	.word	0x0800964d
 8009634:	0800964d 	.word	0x0800964d
 8009638:	080096b9 	.word	0x080096b9
 800963c:	080096b9 	.word	0x080096b9
 8009640:	080096a7 	.word	0x080096a7
 8009644:	080096ad 	.word	0x080096ad
 8009648:	080096b3 	.word	0x080096b3
			case TM_KEYPAD_Button_5:
			case TM_KEYPAD_Button_6:
			case TM_KEYPAD_Button_7:
			case TM_KEYPAD_Button_8:
			case TM_KEYPAD_Button_9:
				keyChar = TRUE;
 800964c:	2301      	movs	r3, #1
 800964e:	733b      	strb	r3, [r7, #12]
				if (Keypad_Button != tmpKey) {
 8009650:	4b8d      	ldr	r3, [pc, #564]	; (8009888 <get_string+0x30c>)
 8009652:	781b      	ldrb	r3, [r3, #0]
 8009654:	7bba      	ldrb	r2, [r7, #14]
 8009656:	429a      	cmp	r2, r3
 8009658:	d005      	beq.n	8009666 <get_string+0xea>
					tmpKey = Keypad_Button;
 800965a:	4b8b      	ldr	r3, [pc, #556]	; (8009888 <get_string+0x30c>)
 800965c:	781b      	ldrb	r3, [r3, #0]
 800965e:	73bb      	strb	r3, [r7, #14]
					charIndex = 0;
 8009660:	2300      	movs	r3, #0
 8009662:	737b      	strb	r3, [r7, #13]
 8009664:	e011      	b.n	800968a <get_string+0x10e>
				} else if (keychars[Keypad_Button][charIndex + 1] != '\0')
 8009666:	4b88      	ldr	r3, [pc, #544]	; (8009888 <get_string+0x30c>)
 8009668:	781b      	ldrb	r3, [r3, #0]
 800966a:	461a      	mov	r2, r3
 800966c:	4b87      	ldr	r3, [pc, #540]	; (800988c <get_string+0x310>)
 800966e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009672:	7b7b      	ldrb	r3, [r7, #13]
 8009674:	3301      	adds	r3, #1
 8009676:	4413      	add	r3, r2
 8009678:	781b      	ldrb	r3, [r3, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d003      	beq.n	8009686 <get_string+0x10a>
					charIndex++;
 800967e:	7b7b      	ldrb	r3, [r7, #13]
 8009680:	3301      	adds	r3, #1
 8009682:	737b      	strb	r3, [r7, #13]
 8009684:	e001      	b.n	800968a <get_string+0x10e>
				else
					charIndex = 0;
 8009686:	2300      	movs	r3, #0
 8009688:	737b      	strb	r3, [r7, #13]

				outstr[nameIndex] = keychars[Keypad_Button][charIndex];
 800968a:	4b7f      	ldr	r3, [pc, #508]	; (8009888 <get_string+0x30c>)
 800968c:	781b      	ldrb	r3, [r3, #0]
 800968e:	461a      	mov	r2, r3
 8009690:	4b7e      	ldr	r3, [pc, #504]	; (800988c <get_string+0x310>)
 8009692:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8009696:	7b7b      	ldrb	r3, [r7, #13]
 8009698:	441a      	add	r2, r3
 800969a:	7bfb      	ldrb	r3, [r7, #15]
 800969c:	6879      	ldr	r1, [r7, #4]
 800969e:	440b      	add	r3, r1
 80096a0:	7812      	ldrb	r2, [r2, #0]
 80096a2:	701a      	strb	r2, [r3, #0]
				break;
 80096a4:	e008      	b.n	80096b8 <get_string+0x13c>
			case TM_KEYPAD_Button_A:
				keyForw = TRUE;
 80096a6:	2301      	movs	r3, #1
 80096a8:	72bb      	strb	r3, [r7, #10]
				break;
 80096aa:	e005      	b.n	80096b8 <get_string+0x13c>
			case TM_KEYPAD_Button_B:
				keyBack = TRUE;
 80096ac:	2301      	movs	r3, #1
 80096ae:	72fb      	strb	r3, [r7, #11]
				break;
 80096b0:	e002      	b.n	80096b8 <get_string+0x13c>
			case TM_KEYPAD_Button_C:
				keyDel = TRUE;
 80096b2:	2301      	movs	r3, #1
 80096b4:	727b      	strb	r3, [r7, #9]
				break;
 80096b6:	bf00      	nop
		}
		if (Keypad_Button != TM_KEYPAD_Button_NOPRESSED) {
 80096b8:	4b73      	ldr	r3, [pc, #460]	; (8009888 <get_string+0x30c>)
 80096ba:	781b      	ldrb	r3, [r3, #0]
 80096bc:	2bff      	cmp	r3, #255	; 0xff
 80096be:	f000 80fb 	beq.w	80098b8 <get_string+0x33c>
			TM_ILI9341_Puts(10, 30, outstr, &TM_Font_11x18,
 80096c2:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80096c6:	9301      	str	r3, [sp, #4]
 80096c8:	2300      	movs	r3, #0
 80096ca:	9300      	str	r3, [sp, #0]
 80096cc:	4b6d      	ldr	r3, [pc, #436]	; (8009884 <get_string+0x308>)
 80096ce:	687a      	ldr	r2, [r7, #4]
 80096d0:	211e      	movs	r1, #30
 80096d2:	200a      	movs	r0, #10
 80096d4:	f003 fa0a 	bl	800caec <TM_ILI9341_Puts>
					ILI9341_COLOR_BLACK, ILI9341_COLOR_CYAN);
			if (keyChar == TRUE) {
 80096d8:	7b3b      	ldrb	r3, [r7, #12]
 80096da:	2b01      	cmp	r3, #1
 80096dc:	d119      	bne.n	8009712 <get_string+0x196>
				keyChar = FALSE;
 80096de:	2300      	movs	r3, #0
 80096e0:	733b      	strb	r3, [r7, #12]
				TM_ILI9341_Putc(10 + (nameIndex * 11), 30, outstr[nameIndex],
 80096e2:	7bfb      	ldrb	r3, [r7, #15]
 80096e4:	b29b      	uxth	r3, r3
 80096e6:	461a      	mov	r2, r3
 80096e8:	0092      	lsls	r2, r2, #2
 80096ea:	441a      	add	r2, r3
 80096ec:	0052      	lsls	r2, r2, #1
 80096ee:	4413      	add	r3, r2
 80096f0:	b29b      	uxth	r3, r3
 80096f2:	330a      	adds	r3, #10
 80096f4:	b298      	uxth	r0, r3
 80096f6:	7bfb      	ldrb	r3, [r7, #15]
 80096f8:	687a      	ldr	r2, [r7, #4]
 80096fa:	4413      	add	r3, r2
 80096fc:	781a      	ldrb	r2, [r3, #0]
 80096fe:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8009702:	9301      	str	r3, [sp, #4]
 8009704:	2300      	movs	r3, #0
 8009706:	9300      	str	r3, [sp, #0]
 8009708:	4b5e      	ldr	r3, [pc, #376]	; (8009884 <get_string+0x308>)
 800970a:	211e      	movs	r1, #30
 800970c:	f003 fa46 	bl	800cb9c <TM_ILI9341_Putc>
 8009710:	e096      	b.n	8009840 <get_string+0x2c4>
						&TM_Font_11x18, ILI9341_COLOR_BLACK,
						ILI9341_COLOR_YELLOW);
			} else if (keyForw == TRUE) {
 8009712:	7abb      	ldrb	r3, [r7, #10]
 8009714:	2b01      	cmp	r3, #1
 8009716:	d123      	bne.n	8009760 <get_string+0x1e4>
				keyForw = FALSE;
 8009718:	2300      	movs	r3, #0
 800971a:	72bb      	strb	r3, [r7, #10]
				if (nameIndex < 11 && outstr[nameIndex] != '\0')
 800971c:	7bfb      	ldrb	r3, [r7, #15]
 800971e:	2b0a      	cmp	r3, #10
 8009720:	d809      	bhi.n	8009736 <get_string+0x1ba>
 8009722:	7bfb      	ldrb	r3, [r7, #15]
 8009724:	687a      	ldr	r2, [r7, #4]
 8009726:	4413      	add	r3, r2
 8009728:	781b      	ldrb	r3, [r3, #0]
 800972a:	2b00      	cmp	r3, #0
 800972c:	d003      	beq.n	8009736 <get_string+0x1ba>
					nameIndex++;
 800972e:	7bfb      	ldrb	r3, [r7, #15]
 8009730:	3301      	adds	r3, #1
 8009732:	73fb      	strb	r3, [r7, #15]
 8009734:	e084      	b.n	8009840 <get_string+0x2c4>
				else
					TM_ILI9341_Putc(10 + (nameIndex * 11), 30, ' ',
 8009736:	7bfb      	ldrb	r3, [r7, #15]
 8009738:	b29b      	uxth	r3, r3
 800973a:	461a      	mov	r2, r3
 800973c:	0092      	lsls	r2, r2, #2
 800973e:	441a      	add	r2, r3
 8009740:	0052      	lsls	r2, r2, #1
 8009742:	4413      	add	r3, r2
 8009744:	b29b      	uxth	r3, r3
 8009746:	330a      	adds	r3, #10
 8009748:	b298      	uxth	r0, r3
 800974a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800974e:	9301      	str	r3, [sp, #4]
 8009750:	2300      	movs	r3, #0
 8009752:	9300      	str	r3, [sp, #0]
 8009754:	4b4b      	ldr	r3, [pc, #300]	; (8009884 <get_string+0x308>)
 8009756:	2220      	movs	r2, #32
 8009758:	211e      	movs	r1, #30
 800975a:	f003 fa1f 	bl	800cb9c <TM_ILI9341_Putc>
 800975e:	e06f      	b.n	8009840 <get_string+0x2c4>
							&TM_Font_11x18, ILI9341_COLOR_BLACK,
							ILI9341_COLOR_YELLOW);
			} else if (keyBack == TRUE) {
 8009760:	7afb      	ldrb	r3, [r7, #11]
 8009762:	2b01      	cmp	r3, #1
 8009764:	d13a      	bne.n	80097dc <get_string+0x260>
				keyBack = FALSE;
 8009766:	2300      	movs	r3, #0
 8009768:	72fb      	strb	r3, [r7, #11]
				if (outstr[nameIndex] == '\0')
 800976a:	7bfb      	ldrb	r3, [r7, #15]
 800976c:	687a      	ldr	r2, [r7, #4]
 800976e:	4413      	add	r3, r2
 8009770:	781b      	ldrb	r3, [r3, #0]
 8009772:	2b00      	cmp	r3, #0
 8009774:	d114      	bne.n	80097a0 <get_string+0x224>
					TM_ILI9341_Putc(10 + (nameIndex * 11), 30, ' ',
 8009776:	7bfb      	ldrb	r3, [r7, #15]
 8009778:	b29b      	uxth	r3, r3
 800977a:	461a      	mov	r2, r3
 800977c:	0092      	lsls	r2, r2, #2
 800977e:	441a      	add	r2, r3
 8009780:	0052      	lsls	r2, r2, #1
 8009782:	4413      	add	r3, r2
 8009784:	b29b      	uxth	r3, r3
 8009786:	330a      	adds	r3, #10
 8009788:	b298      	uxth	r0, r3
 800978a:	f24a 2354 	movw	r3, #41556	; 0xa254
 800978e:	9301      	str	r3, [sp, #4]
 8009790:	f24a 2354 	movw	r3, #41556	; 0xa254
 8009794:	9300      	str	r3, [sp, #0]
 8009796:	4b3b      	ldr	r3, [pc, #236]	; (8009884 <get_string+0x308>)
 8009798:	2220      	movs	r2, #32
 800979a:	211e      	movs	r1, #30
 800979c:	f003 f9fe 	bl	800cb9c <TM_ILI9341_Putc>
							&TM_Font_11x18, ILI9341_COLOR_MAGENTA,
							ILI9341_COLOR_MAGENTA);

				if (nameIndex > 0)
 80097a0:	7bfb      	ldrb	r3, [r7, #15]
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d002      	beq.n	80097ac <get_string+0x230>
					nameIndex--;
 80097a6:	7bfb      	ldrb	r3, [r7, #15]
 80097a8:	3b01      	subs	r3, #1
 80097aa:	73fb      	strb	r3, [r7, #15]

				TM_ILI9341_Putc(10 + (nameIndex * 11), 30, outstr[nameIndex],
 80097ac:	7bfb      	ldrb	r3, [r7, #15]
 80097ae:	b29b      	uxth	r3, r3
 80097b0:	461a      	mov	r2, r3
 80097b2:	0092      	lsls	r2, r2, #2
 80097b4:	441a      	add	r2, r3
 80097b6:	0052      	lsls	r2, r2, #1
 80097b8:	4413      	add	r3, r2
 80097ba:	b29b      	uxth	r3, r3
 80097bc:	330a      	adds	r3, #10
 80097be:	b298      	uxth	r0, r3
 80097c0:	7bfb      	ldrb	r3, [r7, #15]
 80097c2:	687a      	ldr	r2, [r7, #4]
 80097c4:	4413      	add	r3, r2
 80097c6:	781a      	ldrb	r2, [r3, #0]
 80097c8:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80097cc:	9301      	str	r3, [sp, #4]
 80097ce:	2300      	movs	r3, #0
 80097d0:	9300      	str	r3, [sp, #0]
 80097d2:	4b2c      	ldr	r3, [pc, #176]	; (8009884 <get_string+0x308>)
 80097d4:	211e      	movs	r1, #30
 80097d6:	f003 f9e1 	bl	800cb9c <TM_ILI9341_Putc>
 80097da:	e031      	b.n	8009840 <get_string+0x2c4>
						&TM_Font_11x18, ILI9341_COLOR_BLACK,
						ILI9341_COLOR_YELLOW);
			} else if (keyDel == TRUE) {
 80097dc:	7a7b      	ldrb	r3, [r7, #9]
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d12e      	bne.n	8009840 <get_string+0x2c4>
				keyDel = FALSE;
 80097e2:	2300      	movs	r3, #0
 80097e4:	727b      	strb	r3, [r7, #9]
				strcpy(outstr + nameIndex, outstr + nameIndex + 1);
 80097e6:	7bfb      	ldrb	r3, [r7, #15]
 80097e8:	687a      	ldr	r2, [r7, #4]
 80097ea:	18d0      	adds	r0, r2, r3
 80097ec:	7bfb      	ldrb	r3, [r7, #15]
 80097ee:	3301      	adds	r3, #1
 80097f0:	687a      	ldr	r2, [r7, #4]
 80097f2:	4413      	add	r3, r2
 80097f4:	4619      	mov	r1, r3
 80097f6:	f00e f8a0 	bl	801793a <strcpy>
				TM_ILI9341_Puts(10, 30, outstr, &TM_Font_11x18,
 80097fa:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80097fe:	9301      	str	r3, [sp, #4]
 8009800:	2300      	movs	r3, #0
 8009802:	9300      	str	r3, [sp, #0]
 8009804:	4b1f      	ldr	r3, [pc, #124]	; (8009884 <get_string+0x308>)
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	211e      	movs	r1, #30
 800980a:	200a      	movs	r0, #10
 800980c:	f003 f96e 	bl	800caec <TM_ILI9341_Puts>
						ILI9341_COLOR_BLACK, ILI9341_COLOR_CYAN);
				TM_ILI9341_Putc(10 + (strlen(outstr) * 11), 30, ' ',
 8009810:	6878      	ldr	r0, [r7, #4]
 8009812:	f7f6 fced 	bl	80001f0 <strlen>
 8009816:	4603      	mov	r3, r0
 8009818:	b29b      	uxth	r3, r3
 800981a:	461a      	mov	r2, r3
 800981c:	0092      	lsls	r2, r2, #2
 800981e:	441a      	add	r2, r3
 8009820:	0052      	lsls	r2, r2, #1
 8009822:	4413      	add	r3, r2
 8009824:	b29b      	uxth	r3, r3
 8009826:	330a      	adds	r3, #10
 8009828:	b298      	uxth	r0, r3
 800982a:	f24a 2354 	movw	r3, #41556	; 0xa254
 800982e:	9301      	str	r3, [sp, #4]
 8009830:	f24a 2354 	movw	r3, #41556	; 0xa254
 8009834:	9300      	str	r3, [sp, #0]
 8009836:	4b13      	ldr	r3, [pc, #76]	; (8009884 <get_string+0x308>)
 8009838:	2220      	movs	r2, #32
 800983a:	211e      	movs	r1, #30
 800983c:	f003 f9ae 	bl	800cb9c <TM_ILI9341_Putc>
						&TM_Font_11x18, ILI9341_COLOR_MAGENTA,
						ILI9341_COLOR_MAGENTA);
			}

			if (outstr[nameIndex] != '\0')
 8009840:	7bfb      	ldrb	r3, [r7, #15]
 8009842:	687a      	ldr	r2, [r7, #4]
 8009844:	4413      	add	r3, r2
 8009846:	781b      	ldrb	r3, [r3, #0]
 8009848:	2b00      	cmp	r3, #0
 800984a:	d021      	beq.n	8009890 <get_string+0x314>
				TM_ILI9341_Putc(10 + (nameIndex * 11), 30, outstr[nameIndex],
 800984c:	7bfb      	ldrb	r3, [r7, #15]
 800984e:	b29b      	uxth	r3, r3
 8009850:	461a      	mov	r2, r3
 8009852:	0092      	lsls	r2, r2, #2
 8009854:	441a      	add	r2, r3
 8009856:	0052      	lsls	r2, r2, #1
 8009858:	4413      	add	r3, r2
 800985a:	b29b      	uxth	r3, r3
 800985c:	330a      	adds	r3, #10
 800985e:	b298      	uxth	r0, r3
 8009860:	7bfb      	ldrb	r3, [r7, #15]
 8009862:	687a      	ldr	r2, [r7, #4]
 8009864:	4413      	add	r3, r2
 8009866:	781a      	ldrb	r2, [r3, #0]
 8009868:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800986c:	9301      	str	r3, [sp, #4]
 800986e:	2300      	movs	r3, #0
 8009870:	9300      	str	r3, [sp, #0]
 8009872:	4b04      	ldr	r3, [pc, #16]	; (8009884 <get_string+0x308>)
 8009874:	211e      	movs	r1, #30
 8009876:	f003 f991 	bl	800cb9c <TM_ILI9341_Putc>
 800987a:	e01d      	b.n	80098b8 <get_string+0x33c>
 800987c:	200001d8 	.word	0x200001d8
 8009880:	08018f70 	.word	0x08018f70
 8009884:	200001e0 	.word	0x200001e0
 8009888:	20001c45 	.word	0x20001c45
 800988c:	200001a0 	.word	0x200001a0
						&TM_Font_11x18, ILI9341_COLOR_BLACK,
						ILI9341_COLOR_YELLOW);
			else
				TM_ILI9341_Putc(10 + (nameIndex * 11), 30, ' ', &TM_Font_11x18,
 8009890:	7bfb      	ldrb	r3, [r7, #15]
 8009892:	b29b      	uxth	r3, r3
 8009894:	461a      	mov	r2, r3
 8009896:	0092      	lsls	r2, r2, #2
 8009898:	441a      	add	r2, r3
 800989a:	0052      	lsls	r2, r2, #1
 800989c:	4413      	add	r3, r2
 800989e:	b29b      	uxth	r3, r3
 80098a0:	330a      	adds	r3, #10
 80098a2:	b298      	uxth	r0, r3
 80098a4:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80098a8:	9301      	str	r3, [sp, #4]
 80098aa:	2300      	movs	r3, #0
 80098ac:	9300      	str	r3, [sp, #0]
 80098ae:	4b0a      	ldr	r3, [pc, #40]	; (80098d8 <get_string+0x35c>)
 80098b0:	2220      	movs	r2, #32
 80098b2:	211e      	movs	r1, #30
 80098b4:	f003 f972 	bl	800cb9c <TM_ILI9341_Putc>
	while ((Keypad_Button = TM_KEYPAD_Read()) != TM_KEYPAD_Button_HASH) {
 80098b8:	f003 fa52 	bl	800cd60 <TM_KEYPAD_Read>
 80098bc:	4603      	mov	r3, r0
 80098be:	461a      	mov	r2, r3
 80098c0:	4b06      	ldr	r3, [pc, #24]	; (80098dc <get_string+0x360>)
 80098c2:	701a      	strb	r2, [r3, #0]
 80098c4:	4b05      	ldr	r3, [pc, #20]	; (80098dc <get_string+0x360>)
 80098c6:	781b      	ldrb	r3, [r3, #0]
 80098c8:	2b0b      	cmp	r3, #11
 80098ca:	f47f ae9a 	bne.w	8009602 <get_string+0x86>
						ILI9341_COLOR_BLACK, ILI9341_COLOR_YELLOW);
		}
	}
}
 80098ce:	bf00      	nop
 80098d0:	bf00      	nop
 80098d2:	3710      	adds	r7, #16
 80098d4:	46bd      	mov	sp, r7
 80098d6:	bd80      	pop	{r7, pc}
 80098d8:	200001e0 	.word	0x200001e0
 80098dc:	20001c45 	.word	0x20001c45

080098e0 <download_rhythm>:
void saveAllLoops()
{

}

void download_rhythm() {
 80098e0:	b580      	push	{r7, lr}
 80098e2:	b084      	sub	sp, #16
 80098e4:	af02      	add	r7, sp, #8
	looper.Function = DOWNLOAD_SRAM;
 80098e6:	4b27      	ldr	r3, [pc, #156]	; (8009984 <download_rhythm+0xa4>)
 80098e8:	2204      	movs	r2, #4
 80098ea:	775a      	strb	r2, [r3, #29]
	uint32_t bytes_written = 0;
 80098ec:	2300      	movs	r3, #0
 80098ee:	607b      	str	r3, [r7, #4]

	while(TRUE){
		begin_download:
			filename[0] = '\0';
 80098f0:	4b25      	ldr	r3, [pc, #148]	; (8009988 <download_rhythm+0xa8>)
 80098f2:	2200      	movs	r2, #0
 80098f4:	701a      	strb	r2, [r3, #0]
			menuMultiLine(2,110,"Press [Send via USB] button","in Rhythm application.");
 80098f6:	4b25      	ldr	r3, [pc, #148]	; (800998c <download_rhythm+0xac>)
 80098f8:	4a25      	ldr	r2, [pc, #148]	; (8009990 <download_rhythm+0xb0>)
 80098fa:	216e      	movs	r1, #110	; 0x6e
 80098fc:	2002      	movs	r0, #2
 80098fe:	f7ff f983 	bl	8008c08 <menuMultiLine>
			if((bytes_written = SRAM_download_rhythm()) > 0){
 8009902:	f7fe fb73 	bl	8007fec <SRAM_download_rhythm>
 8009906:	6078      	str	r0, [r7, #4]
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	2b00      	cmp	r3, #0
 800990c:	d02d      	beq.n	800996a <download_rhythm+0x8a>
				TM_ILI9341_DrawFilledRectangle(10,110,320,150,ILI9341_COLOR_MAGENTA);
 800990e:	f24a 2354 	movw	r3, #41556	; 0xa254
 8009912:	9300      	str	r3, [sp, #0]
 8009914:	2396      	movs	r3, #150	; 0x96
 8009916:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800991a:	216e      	movs	r1, #110	; 0x6e
 800991c:	200a      	movs	r0, #10
 800991e:	f003 f9cf 	bl	800ccc0 <TM_ILI9341_DrawFilledRectangle>
				menuMultiLine(2,110,"[1] Save rhythm to SD card","[2] Repeat download");
 8009922:	4b1c      	ldr	r3, [pc, #112]	; (8009994 <download_rhythm+0xb4>)
 8009924:	4a1c      	ldr	r2, [pc, #112]	; (8009998 <download_rhythm+0xb8>)
 8009926:	216e      	movs	r1, #110	; 0x6e
 8009928:	2002      	movs	r0, #2
 800992a:	f7ff f96d 	bl	8008c08 <menuMultiLine>
				while(TRUE){
					filename[0] = '\0';
 800992e:	4b16      	ldr	r3, [pc, #88]	; (8009988 <download_rhythm+0xa8>)
 8009930:	2200      	movs	r2, #0
 8009932:	701a      	strb	r2, [r3, #0]
					Keypad_Button = TM_KEYPAD_Read();
 8009934:	f003 fa14 	bl	800cd60 <TM_KEYPAD_Read>
 8009938:	4603      	mov	r3, r0
 800993a:	461a      	mov	r2, r3
 800993c:	4b17      	ldr	r3, [pc, #92]	; (800999c <download_rhythm+0xbc>)
 800993e:	701a      	strb	r2, [r3, #0]

					switch(Keypad_Button){
 8009940:	4b16      	ldr	r3, [pc, #88]	; (800999c <download_rhythm+0xbc>)
 8009942:	781b      	ldrb	r3, [r3, #0]
 8009944:	2b02      	cmp	r3, #2
 8009946:	d0d3      	beq.n	80098f0 <download_rhythm+0x10>
 8009948:	2b02      	cmp	r3, #2
 800994a:	dcf0      	bgt.n	800992e <download_rhythm+0x4e>
 800994c:	2b00      	cmp	r3, #0
 800994e:	d00e      	beq.n	800996e <download_rhythm+0x8e>
 8009950:	2b01      	cmp	r3, #1
 8009952:	d109      	bne.n	8009968 <download_rhythm+0x88>
						case TM_KEYPAD_Button_0:	goto end_download;
						case TM_KEYPAD_Button_1:	get_string(filename);
 8009954:	480c      	ldr	r0, [pc, #48]	; (8009988 <download_rhythm+0xa8>)
 8009956:	f7ff fe11 	bl	800957c <get_string>
													writeSRAMtoSD(bytes_written,filename);
 800995a:	490b      	ldr	r1, [pc, #44]	; (8009988 <download_rhythm+0xa8>)
 800995c:	6878      	ldr	r0, [r7, #4]
 800995e:	f7fe fcd1 	bl	8008304 <writeSRAMtoSD>
													menuShowOptions();
 8009962:	f7fe fe01 	bl	8008568 <menuShowOptions>
													goto end_download;
 8009966:	e003      	b.n	8009970 <download_rhythm+0x90>
					filename[0] = '\0';
 8009968:	e7e1      	b.n	800992e <download_rhythm+0x4e>
						case TM_KEYPAD_Button_2:	goto begin_download;
					}
				}

			}
			else goto end_download;
 800996a:	bf00      	nop
 800996c:	e000      	b.n	8009970 <download_rhythm+0x90>
						case TM_KEYPAD_Button_0:	goto end_download;
 800996e:	bf00      	nop


	}

	end_download:
	looper.Function = IDLE;
 8009970:	4b04      	ldr	r3, [pc, #16]	; (8009984 <download_rhythm+0xa4>)
 8009972:	2200      	movs	r2, #0
 8009974:	775a      	strb	r2, [r3, #29]
	Skip_Read_Button = TRUE;
 8009976:	4b0a      	ldr	r3, [pc, #40]	; (80099a0 <download_rhythm+0xc0>)
 8009978:	2201      	movs	r2, #1
 800997a:	701a      	strb	r2, [r3, #0]
}
 800997c:	bf00      	nop
 800997e:	3708      	adds	r7, #8
 8009980:	46bd      	mov	sp, r7
 8009982:	bd80      	pop	{r7, pc}
 8009984:	20001228 	.word	0x20001228
 8009988:	20001fac 	.word	0x20001fac
 800998c:	08018f90 	.word	0x08018f90
 8009990:	08018fa8 	.word	0x08018fa8
 8009994:	08018fc4 	.word	0x08018fc4
 8009998:	08018fd8 	.word	0x08018fd8
 800999c:	20001c45 	.word	0x20001c45
 80099a0:	20001c47 	.word	0x20001c47

080099a4 <select_rhythm>:

void select_rhythm(){
 80099a4:	b580      	push	{r7, lr}
 80099a6:	af00      	add	r7, sp, #0
	set_function(IDLE);
 80099a8:	2000      	movs	r0, #0
 80099aa:	f7fe f8cb 	bl	8007b44 <set_function>
	menuMultiLine(1,30,"[1] Select file");
 80099ae:	4a1a      	ldr	r2, [pc, #104]	; (8009a18 <select_rhythm+0x74>)
 80099b0:	211e      	movs	r1, #30
 80099b2:	2001      	movs	r0, #1
 80099b4:	f7ff f928 	bl	8008c08 <menuMultiLine>
	while(TRUE){
			filename[0] = '\0';
 80099b8:	4b18      	ldr	r3, [pc, #96]	; (8009a1c <select_rhythm+0x78>)
 80099ba:	2200      	movs	r2, #0
 80099bc:	701a      	strb	r2, [r3, #0]
			Keypad_Button = TM_KEYPAD_Read();
 80099be:	f003 f9cf 	bl	800cd60 <TM_KEYPAD_Read>
 80099c2:	4603      	mov	r3, r0
 80099c4:	461a      	mov	r2, r3
 80099c6:	4b16      	ldr	r3, [pc, #88]	; (8009a20 <select_rhythm+0x7c>)
 80099c8:	701a      	strb	r2, [r3, #0]
			checkSD();
 80099ca:	f7fe fac9 	bl	8007f60 <checkSD>
			switch(Keypad_Button){
 80099ce:	4b14      	ldr	r3, [pc, #80]	; (8009a20 <select_rhythm+0x7c>)
 80099d0:	781b      	ldrb	r3, [r3, #0]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d019      	beq.n	8009a0a <select_rhythm+0x66>
 80099d6:	2b01      	cmp	r3, #1
 80099d8:	d10d      	bne.n	80099f6 <select_rhythm+0x52>
				case TM_KEYPAD_Button_0: 	goto end_select_loop;
				case TM_KEYPAD_Button_1:	while(get_file_sd(filename) == TRUE)
 80099da:	e000      	b.n	80099de <select_rhythm+0x3a>
												continue;
 80099dc:	bf00      	nop
				case TM_KEYPAD_Button_1:	while(get_file_sd(filename) == TRUE)
 80099de:	480f      	ldr	r0, [pc, #60]	; (8009a1c <select_rhythm+0x78>)
 80099e0:	f7ff fbc6 	bl	8009170 <get_file_sd>
 80099e4:	4603      	mov	r3, r0
 80099e6:	2b01      	cmp	r3, #1
 80099e8:	d0f8      	beq.n	80099dc <select_rhythm+0x38>
											readRhythmFromSD(filename);
 80099ea:	480c      	ldr	r0, [pc, #48]	; (8009a1c <select_rhythm+0x78>)
 80099ec:	f7fe fc34 	bl	8008258 <readRhythmFromSD>
											menuShowOptions();
 80099f0:	f7fe fdba 	bl	8008568 <menuShowOptions>
											break;
 80099f4:	bf00      	nop
			}
			if(Keypad_Button != TM_KEYPAD_Button_NOPRESSED){
 80099f6:	4b0a      	ldr	r3, [pc, #40]	; (8009a20 <select_rhythm+0x7c>)
 80099f8:	781b      	ldrb	r3, [r3, #0]
 80099fa:	2bff      	cmp	r3, #255	; 0xff
 80099fc:	d0dc      	beq.n	80099b8 <select_rhythm+0x14>
				menuMultiLine(1,30,"[1] Select file");
 80099fe:	4a06      	ldr	r2, [pc, #24]	; (8009a18 <select_rhythm+0x74>)
 8009a00:	211e      	movs	r1, #30
 8009a02:	2001      	movs	r0, #1
 8009a04:	f7ff f900 	bl	8008c08 <menuMultiLine>
			filename[0] = '\0';
 8009a08:	e7d6      	b.n	80099b8 <select_rhythm+0x14>
				case TM_KEYPAD_Button_0: 	goto end_select_loop;
 8009a0a:	bf00      	nop
			}

	}

	end_select_loop:
	Skip_Read_Button = TRUE;
 8009a0c:	4b05      	ldr	r3, [pc, #20]	; (8009a24 <select_rhythm+0x80>)
 8009a0e:	2201      	movs	r2, #1
 8009a10:	701a      	strb	r2, [r3, #0]
}
 8009a12:	bf00      	nop
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	08018ff4 	.word	0x08018ff4
 8009a1c:	20001fac 	.word	0x20001fac
 8009a20:	20001c45 	.word	0x20001c45
 8009a24:	20001c47 	.word	0x20001c47

08009a28 <select_loops>:

void select_loops(){
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b086      	sub	sp, #24
 8009a2c:	af06      	add	r7, sp, #24

	looper.StartPattern = 0;
 8009a2e:	4b96      	ldr	r3, [pc, #600]	; (8009c88 <select_loops+0x260>)
 8009a30:	2200      	movs	r2, #0
 8009a32:	615a      	str	r2, [r3, #20]
	looper.EndPattern = 0;
 8009a34:	4b94      	ldr	r3, [pc, #592]	; (8009c88 <select_loops+0x260>)
 8009a36:	2200      	movs	r2, #0
 8009a38:	619a      	str	r2, [r3, #24]

	while(TM_KEYPAD_Read() != TM_KEYPAD_Button_NOPRESSED)
 8009a3a:	e000      	b.n	8009a3e <select_loops+0x16>
		continue;
 8009a3c:	bf00      	nop
	while(TM_KEYPAD_Read() != TM_KEYPAD_Button_NOPRESSED)
 8009a3e:	f003 f98f 	bl	800cd60 <TM_KEYPAD_Read>
 8009a42:	4603      	mov	r3, r0
 8009a44:	2bff      	cmp	r3, #255	; 0xff
 8009a46:	d1f9      	bne.n	8009a3c <select_loops+0x14>
	show_status_line = TRUE;
 8009a48:	4b90      	ldr	r3, [pc, #576]	; (8009c8c <select_loops+0x264>)
 8009a4a:	2201      	movs	r2, #1
 8009a4c:	701a      	strb	r2, [r3, #0]
	SHOW_STATUS_LINE();
 8009a4e:	4b8f      	ldr	r3, [pc, #572]	; (8009c8c <select_loops+0x264>)
 8009a50:	781b      	ldrb	r3, [r3, #0]
 8009a52:	2b01      	cmp	r3, #1
 8009a54:	d104      	bne.n	8009a60 <select_loops+0x38>
 8009a56:	f7fe ff91 	bl	800897c <menuShowStatus>
 8009a5a:	4b8c      	ldr	r3, [pc, #560]	; (8009c8c <select_loops+0x264>)
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	701a      	strb	r2, [r3, #0]

	menuMultiLine(7,30,"[1] Skip loop backward","[2] Skip loop forward","[3] Pause/Resume loop","[4] Save current loop","[5] Read loop from SD","[6] Save all loops","[AB] Select channels");
 8009a60:	4b8b      	ldr	r3, [pc, #556]	; (8009c90 <select_loops+0x268>)
 8009a62:	9304      	str	r3, [sp, #16]
 8009a64:	4b8b      	ldr	r3, [pc, #556]	; (8009c94 <select_loops+0x26c>)
 8009a66:	9303      	str	r3, [sp, #12]
 8009a68:	4b8b      	ldr	r3, [pc, #556]	; (8009c98 <select_loops+0x270>)
 8009a6a:	9302      	str	r3, [sp, #8]
 8009a6c:	4b8b      	ldr	r3, [pc, #556]	; (8009c9c <select_loops+0x274>)
 8009a6e:	9301      	str	r3, [sp, #4]
 8009a70:	4b8b      	ldr	r3, [pc, #556]	; (8009ca0 <select_loops+0x278>)
 8009a72:	9300      	str	r3, [sp, #0]
 8009a74:	4b8b      	ldr	r3, [pc, #556]	; (8009ca4 <select_loops+0x27c>)
 8009a76:	4a8c      	ldr	r2, [pc, #560]	; (8009ca8 <select_loops+0x280>)
 8009a78:	211e      	movs	r1, #30
 8009a7a:	2007      	movs	r0, #7
 8009a7c:	f7ff f8c4 	bl	8008c08 <menuMultiLine>
	sprintf(lcdline, "Current loop: %u", (unsigned int)(looper.StartPattern + 1));
 8009a80:	4b81      	ldr	r3, [pc, #516]	; (8009c88 <select_loops+0x260>)
 8009a82:	695b      	ldr	r3, [r3, #20]
 8009a84:	3301      	adds	r3, #1
 8009a86:	461a      	mov	r2, r3
 8009a88:	4988      	ldr	r1, [pc, #544]	; (8009cac <select_loops+0x284>)
 8009a8a:	4889      	ldr	r0, [pc, #548]	; (8009cb0 <select_loops+0x288>)
 8009a8c:	f00d ff26 	bl	80178dc <siprintf>
	menuMultiLine(1,200,lcdline);
 8009a90:	4a87      	ldr	r2, [pc, #540]	; (8009cb0 <select_loops+0x288>)
 8009a92:	21c8      	movs	r1, #200	; 0xc8
 8009a94:	2001      	movs	r0, #1
 8009a96:	f7ff f8b7 	bl	8008c08 <menuMultiLine>

	while(TRUE){
		filename[0] = '\0';
 8009a9a:	4b86      	ldr	r3, [pc, #536]	; (8009cb4 <select_loops+0x28c>)
 8009a9c:	2200      	movs	r2, #0
 8009a9e:	701a      	strb	r2, [r3, #0]
		set_function(AUDIO_ONLY);
 8009aa0:	2001      	movs	r0, #1
 8009aa2:	f7fe f84f 	bl	8007b44 <set_function>
		Keypad_Button = TM_KEYPAD_Read();
 8009aa6:	f003 f95b 	bl	800cd60 <TM_KEYPAD_Read>
 8009aaa:	4603      	mov	r3, r0
 8009aac:	461a      	mov	r2, r3
 8009aae:	4b82      	ldr	r3, [pc, #520]	; (8009cb8 <select_loops+0x290>)
 8009ab0:	701a      	strb	r2, [r3, #0]
		checkSD();
 8009ab2:	f7fe fa55 	bl	8007f60 <checkSD>

		switch(Keypad_Button){
 8009ab6:	4b80      	ldr	r3, [pc, #512]	; (8009cb8 <select_loops+0x290>)
 8009ab8:	781b      	ldrb	r3, [r3, #0]
 8009aba:	2b0d      	cmp	r3, #13
 8009abc:	f200 80ac 	bhi.w	8009c18 <select_loops+0x1f0>
 8009ac0:	a201      	add	r2, pc, #4	; (adr r2, 8009ac8 <select_loops+0xa0>)
 8009ac2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ac6:	bf00      	nop
 8009ac8:	08009c77 	.word	0x08009c77
 8009acc:	08009b01 	.word	0x08009b01
 8009ad0:	08009b41 	.word	0x08009b41
 8009ad4:	08009b8f 	.word	0x08009b8f
 8009ad8:	08009b95 	.word	0x08009b95
 8009adc:	08009bc9 	.word	0x08009bc9
 8009ae0:	08009c19 	.word	0x08009c19
 8009ae4:	08009c19 	.word	0x08009c19
 8009ae8:	08009c19 	.word	0x08009c19
 8009aec:	08009c19 	.word	0x08009c19
 8009af0:	08009c19 	.word	0x08009c19
 8009af4:	08009c19 	.word	0x08009c19
 8009af8:	08009b83 	.word	0x08009b83
 8009afc:	08009b83 	.word	0x08009b83
			case TM_KEYPAD_Button_0: goto end_select_loop;
			case TM_KEYPAD_Button_1:
				 looper.StartLooper = FALSE;
 8009b00:	4b61      	ldr	r3, [pc, #388]	; (8009c88 <select_loops+0x260>)
 8009b02:	2200      	movs	r2, #0
 8009b04:	709a      	strb	r2, [r3, #2]
				 looper.Playback = FALSE;
 8009b06:	4b60      	ldr	r3, [pc, #384]	; (8009c88 <select_loops+0x260>)
 8009b08:	2200      	movs	r2, #0
 8009b0a:	705a      	strb	r2, [r3, #1]
				 looper.Recording = FALSE;
 8009b0c:	4b5e      	ldr	r3, [pc, #376]	; (8009c88 <select_loops+0x260>)
 8009b0e:	2200      	movs	r2, #0
 8009b10:	701a      	strb	r2, [r3, #0]
				 if(pattern_audio_map[looper.StartPattern].sample_position > 0){
 8009b12:	4b5d      	ldr	r3, [pc, #372]	; (8009c88 <select_loops+0x260>)
 8009b14:	695a      	ldr	r2, [r3, #20]
 8009b16:	4969      	ldr	r1, [pc, #420]	; (8009cbc <select_loops+0x294>)
 8009b18:	4613      	mov	r3, r2
 8009b1a:	005b      	lsls	r3, r3, #1
 8009b1c:	4413      	add	r3, r2
 8009b1e:	009b      	lsls	r3, r3, #2
 8009b20:	440b      	add	r3, r1
 8009b22:	3304      	adds	r3, #4
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d071      	beq.n	8009c0e <select_loops+0x1e6>
					 looper.StartPattern--;
 8009b2a:	4b57      	ldr	r3, [pc, #348]	; (8009c88 <select_loops+0x260>)
 8009b2c:	695b      	ldr	r3, [r3, #20]
 8009b2e:	3b01      	subs	r3, #1
 8009b30:	4a55      	ldr	r2, [pc, #340]	; (8009c88 <select_loops+0x260>)
 8009b32:	6153      	str	r3, [r2, #20]
					 looper.EndPattern--;
 8009b34:	4b54      	ldr	r3, [pc, #336]	; (8009c88 <select_loops+0x260>)
 8009b36:	699b      	ldr	r3, [r3, #24]
 8009b38:	3b01      	subs	r3, #1
 8009b3a:	4a53      	ldr	r2, [pc, #332]	; (8009c88 <select_loops+0x260>)
 8009b3c:	6193      	str	r3, [r2, #24]
				 }

				 break;
 8009b3e:	e066      	b.n	8009c0e <select_loops+0x1e6>
			case TM_KEYPAD_Button_2:
				looper.StartLooper = FALSE;
 8009b40:	4b51      	ldr	r3, [pc, #324]	; (8009c88 <select_loops+0x260>)
 8009b42:	2200      	movs	r2, #0
 8009b44:	709a      	strb	r2, [r3, #2]
				looper.Playback = FALSE;
 8009b46:	4b50      	ldr	r3, [pc, #320]	; (8009c88 <select_loops+0x260>)
 8009b48:	2200      	movs	r2, #0
 8009b4a:	705a      	strb	r2, [r3, #1]
				looper.Recording = FALSE;
 8009b4c:	4b4e      	ldr	r3, [pc, #312]	; (8009c88 <select_loops+0x260>)
 8009b4e:	2200      	movs	r2, #0
 8009b50:	701a      	strb	r2, [r3, #0]
				if(pattern_audio_map[looper.EndPattern + 1].sample_position > 0){
 8009b52:	4b4d      	ldr	r3, [pc, #308]	; (8009c88 <select_loops+0x260>)
 8009b54:	699b      	ldr	r3, [r3, #24]
 8009b56:	1c5a      	adds	r2, r3, #1
 8009b58:	4958      	ldr	r1, [pc, #352]	; (8009cbc <select_loops+0x294>)
 8009b5a:	4613      	mov	r3, r2
 8009b5c:	005b      	lsls	r3, r3, #1
 8009b5e:	4413      	add	r3, r2
 8009b60:	009b      	lsls	r3, r3, #2
 8009b62:	440b      	add	r3, r1
 8009b64:	3304      	adds	r3, #4
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	2b00      	cmp	r3, #0
 8009b6a:	d052      	beq.n	8009c12 <select_loops+0x1ea>
					 looper.StartPattern++;
 8009b6c:	4b46      	ldr	r3, [pc, #280]	; (8009c88 <select_loops+0x260>)
 8009b6e:	695b      	ldr	r3, [r3, #20]
 8009b70:	3301      	adds	r3, #1
 8009b72:	4a45      	ldr	r2, [pc, #276]	; (8009c88 <select_loops+0x260>)
 8009b74:	6153      	str	r3, [r2, #20]
					 looper.EndPattern++;
 8009b76:	4b44      	ldr	r3, [pc, #272]	; (8009c88 <select_loops+0x260>)
 8009b78:	699b      	ldr	r3, [r3, #24]
 8009b7a:	3301      	adds	r3, #1
 8009b7c:	4a42      	ldr	r2, [pc, #264]	; (8009c88 <select_loops+0x260>)
 8009b7e:	6193      	str	r3, [r2, #24]
				 }

				break;
 8009b80:	e047      	b.n	8009c12 <select_loops+0x1ea>
			case TM_KEYPAD_Button_A:
			case TM_KEYPAD_Button_B:	select_channel(Keypad_Button);
 8009b82:	4b4d      	ldr	r3, [pc, #308]	; (8009cb8 <select_loops+0x290>)
 8009b84:	781b      	ldrb	r3, [r3, #0]
 8009b86:	4618      	mov	r0, r3
 8009b88:	f000 f89c 	bl	8009cc4 <select_channel>
										break;
 8009b8c:	e044      	b.n	8009c18 <select_loops+0x1f0>

			case TM_KEYPAD_Button_3:	pauseLoop();
 8009b8e:	f7f8 fd27 	bl	80025e0 <pauseLoop>
										break;
 8009b92:	e041      	b.n	8009c18 <select_loops+0x1f0>
			case TM_KEYPAD_Button_4:	if(looper.Playback == TRUE || looper.Recording == TRUE || looper.SamplesWritten == 0)
 8009b94:	4b3c      	ldr	r3, [pc, #240]	; (8009c88 <select_loops+0x260>)
 8009b96:	785b      	ldrb	r3, [r3, #1]
 8009b98:	b2db      	uxtb	r3, r3
 8009b9a:	2b01      	cmp	r3, #1
 8009b9c:	d03b      	beq.n	8009c16 <select_loops+0x1ee>
 8009b9e:	4b3a      	ldr	r3, [pc, #232]	; (8009c88 <select_loops+0x260>)
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	b2db      	uxtb	r3, r3
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d036      	beq.n	8009c16 <select_loops+0x1ee>
 8009ba8:	4b37      	ldr	r3, [pc, #220]	; (8009c88 <select_loops+0x260>)
 8009baa:	68db      	ldr	r3, [r3, #12]
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d032      	beq.n	8009c16 <select_loops+0x1ee>
											break;
										get_string(filename);
 8009bb0:	4840      	ldr	r0, [pc, #256]	; (8009cb4 <select_loops+0x28c>)
 8009bb2:	f7ff fce3 	bl	800957c <get_string>
										saveLoopToSD(looper.StartPattern,filename);
 8009bb6:	4b34      	ldr	r3, [pc, #208]	; (8009c88 <select_loops+0x260>)
 8009bb8:	695b      	ldr	r3, [r3, #20]
 8009bba:	493e      	ldr	r1, [pc, #248]	; (8009cb4 <select_loops+0x28c>)
 8009bbc:	4618      	mov	r0, r3
 8009bbe:	f7fe fc77 	bl	80084b0 <saveLoopToSD>
										menuShowOptions();
 8009bc2:	f7fe fcd1 	bl	8008568 <menuShowOptions>
										break;
 8009bc6:	e027      	b.n	8009c18 <select_loops+0x1f0>
			case TM_KEYPAD_Button_5:	if(looper.Playback == TRUE || looper.Recording == TRUE)
 8009bc8:	4b2f      	ldr	r3, [pc, #188]	; (8009c88 <select_loops+0x260>)
 8009bca:	785b      	ldrb	r3, [r3, #1]
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	2b01      	cmp	r3, #1
 8009bd0:	d021      	beq.n	8009c16 <select_loops+0x1ee>
 8009bd2:	4b2d      	ldr	r3, [pc, #180]	; (8009c88 <select_loops+0x260>)
 8009bd4:	781b      	ldrb	r3, [r3, #0]
 8009bd6:	b2db      	uxtb	r3, r3
 8009bd8:	2b01      	cmp	r3, #1
 8009bda:	d01c      	beq.n	8009c16 <select_loops+0x1ee>
											break;
										while(get_file_sd(filename) == TRUE)
 8009bdc:	e000      	b.n	8009be0 <select_loops+0x1b8>
											continue;
 8009bde:	bf00      	nop
										while(get_file_sd(filename) == TRUE)
 8009be0:	4834      	ldr	r0, [pc, #208]	; (8009cb4 <select_loops+0x28c>)
 8009be2:	f7ff fac5 	bl	8009170 <get_file_sd>
 8009be6:	4603      	mov	r3, r0
 8009be8:	2b01      	cmp	r3, #1
 8009bea:	d0f8      	beq.n	8009bde <select_loops+0x1b6>
										readLoopFromSD(looper.StartPattern,filename);
 8009bec:	4b26      	ldr	r3, [pc, #152]	; (8009c88 <select_loops+0x260>)
 8009bee:	695b      	ldr	r3, [r3, #20]
 8009bf0:	4930      	ldr	r1, [pc, #192]	; (8009cb4 <select_loops+0x28c>)
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f7fe fac6 	bl	8008184 <readLoopFromSD>
										setStartEndPatterns(looper.StartPattern,looper.EndPattern);
 8009bf8:	4b23      	ldr	r3, [pc, #140]	; (8009c88 <select_loops+0x260>)
 8009bfa:	695b      	ldr	r3, [r3, #20]
 8009bfc:	4a22      	ldr	r2, [pc, #136]	; (8009c88 <select_loops+0x260>)
 8009bfe:	6992      	ldr	r2, [r2, #24]
 8009c00:	4611      	mov	r1, r2
 8009c02:	4618      	mov	r0, r3
 8009c04:	f7f8 f8b6 	bl	8001d74 <setStartEndPatterns>
										menuShowOptions();
 8009c08:	f7fe fcae 	bl	8008568 <menuShowOptions>
										break;
 8009c0c:	e004      	b.n	8009c18 <select_loops+0x1f0>
				 break;
 8009c0e:	bf00      	nop
 8009c10:	e002      	b.n	8009c18 <select_loops+0x1f0>
				break;
 8009c12:	bf00      	nop
 8009c14:	e000      	b.n	8009c18 <select_loops+0x1f0>

		}

		if(Keypad_Button != TM_KEYPAD_Button_NOPRESSED){
 8009c16:	bf00      	nop
 8009c18:	4b27      	ldr	r3, [pc, #156]	; (8009cb8 <select_loops+0x290>)
 8009c1a:	781b      	ldrb	r3, [r3, #0]
 8009c1c:	2bff      	cmp	r3, #255	; 0xff
 8009c1e:	d01f      	beq.n	8009c60 <select_loops+0x238>
			menuMultiLine(7,30,"[1] Skip loop backward","[2] Skip loop forward","[3] Pause/Resume loop","[4] Save current loop","[5] Read loop from SD","[6] Save all loops","[AB] Select channels");
 8009c20:	4b1b      	ldr	r3, [pc, #108]	; (8009c90 <select_loops+0x268>)
 8009c22:	9304      	str	r3, [sp, #16]
 8009c24:	4b1b      	ldr	r3, [pc, #108]	; (8009c94 <select_loops+0x26c>)
 8009c26:	9303      	str	r3, [sp, #12]
 8009c28:	4b1b      	ldr	r3, [pc, #108]	; (8009c98 <select_loops+0x270>)
 8009c2a:	9302      	str	r3, [sp, #8]
 8009c2c:	4b1b      	ldr	r3, [pc, #108]	; (8009c9c <select_loops+0x274>)
 8009c2e:	9301      	str	r3, [sp, #4]
 8009c30:	4b1b      	ldr	r3, [pc, #108]	; (8009ca0 <select_loops+0x278>)
 8009c32:	9300      	str	r3, [sp, #0]
 8009c34:	4b1b      	ldr	r3, [pc, #108]	; (8009ca4 <select_loops+0x27c>)
 8009c36:	4a1c      	ldr	r2, [pc, #112]	; (8009ca8 <select_loops+0x280>)
 8009c38:	211e      	movs	r1, #30
 8009c3a:	2007      	movs	r0, #7
 8009c3c:	f7fe ffe4 	bl	8008c08 <menuMultiLine>
			sprintf(lcdline, "Current loop: %u", (unsigned int)(looper.StartPattern + 1));
 8009c40:	4b11      	ldr	r3, [pc, #68]	; (8009c88 <select_loops+0x260>)
 8009c42:	695b      	ldr	r3, [r3, #20]
 8009c44:	3301      	adds	r3, #1
 8009c46:	461a      	mov	r2, r3
 8009c48:	4918      	ldr	r1, [pc, #96]	; (8009cac <select_loops+0x284>)
 8009c4a:	4819      	ldr	r0, [pc, #100]	; (8009cb0 <select_loops+0x288>)
 8009c4c:	f00d fe46 	bl	80178dc <siprintf>
			menuMultiLine(1,200,lcdline);
 8009c50:	4a17      	ldr	r2, [pc, #92]	; (8009cb0 <select_loops+0x288>)
 8009c52:	21c8      	movs	r1, #200	; 0xc8
 8009c54:	2001      	movs	r0, #1
 8009c56:	f7fe ffd7 	bl	8008c08 <menuMultiLine>
			show_status_line = TRUE;
 8009c5a:	4b0c      	ldr	r3, [pc, #48]	; (8009c8c <select_loops+0x264>)
 8009c5c:	2201      	movs	r2, #1
 8009c5e:	701a      	strb	r2, [r3, #0]
		}


		SHOW_STATUS_LINE();
 8009c60:	4b0a      	ldr	r3, [pc, #40]	; (8009c8c <select_loops+0x264>)
 8009c62:	781b      	ldrb	r3, [r3, #0]
 8009c64:	2b01      	cmp	r3, #1
 8009c66:	f47f af18 	bne.w	8009a9a <select_loops+0x72>
 8009c6a:	f7fe fe87 	bl	800897c <menuShowStatus>
 8009c6e:	4b07      	ldr	r3, [pc, #28]	; (8009c8c <select_loops+0x264>)
 8009c70:	2200      	movs	r2, #0
 8009c72:	701a      	strb	r2, [r3, #0]
		filename[0] = '\0';
 8009c74:	e711      	b.n	8009a9a <select_loops+0x72>
			case TM_KEYPAD_Button_0: goto end_select_loop;
 8009c76:	bf00      	nop

	}


	end_select_loop:
	stopAll();
 8009c78:	f7f8 fcf4 	bl	8002664 <stopAll>
	Skip_Read_Button = TRUE;
 8009c7c:	4b10      	ldr	r3, [pc, #64]	; (8009cc0 <select_loops+0x298>)
 8009c7e:	2201      	movs	r2, #1
 8009c80:	701a      	strb	r2, [r3, #0]
}
 8009c82:	bf00      	nop
 8009c84:	46bd      	mov	sp, r7
 8009c86:	bd80      	pop	{r7, pc}
 8009c88:	20001228 	.word	0x20001228
 8009c8c:	20001c48 	.word	0x20001c48
 8009c90:	08019034 	.word	0x08019034
 8009c94:	0801904c 	.word	0x0801904c
 8009c98:	08019060 	.word	0x08019060
 8009c9c:	08019078 	.word	0x08019078
 8009ca0:	08019090 	.word	0x08019090
 8009ca4:	08019004 	.word	0x08019004
 8009ca8:	0801901c 	.word	0x0801901c
 8009cac:	080190a8 	.word	0x080190a8
 8009cb0:	20001270 	.word	0x20001270
 8009cb4:	20001fac 	.word	0x20001fac
 8009cb8:	20001c45 	.word	0x20001c45
 8009cbc:	20000568 	.word	0x20000568
 8009cc0:	20001c47 	.word	0x20001c47

08009cc4 <select_channel>:


void select_channel(TM_KEYPAD_Button_t key){
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	4603      	mov	r3, r0
 8009ccc:	71fb      	strb	r3, [r7, #7]
	if(looper.Playback == TRUE || looper.Recording == TRUE)
 8009cce:	4b3c      	ldr	r3, [pc, #240]	; (8009dc0 <select_channel+0xfc>)
 8009cd0:	785b      	ldrb	r3, [r3, #1]
 8009cd2:	b2db      	uxtb	r3, r3
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	d004      	beq.n	8009ce2 <select_channel+0x1e>
 8009cd8:	4b39      	ldr	r3, [pc, #228]	; (8009dc0 <select_channel+0xfc>)
 8009cda:	781b      	ldrb	r3, [r3, #0]
 8009cdc:	b2db      	uxtb	r3, r3
 8009cde:	2b01      	cmp	r3, #1
 8009ce0:	d101      	bne.n	8009ce6 <select_channel+0x22>
		pauseLoop();
 8009ce2:	f7f8 fc7d 	bl	80025e0 <pauseLoop>
	switch(key){
 8009ce6:	79fb      	ldrb	r3, [r7, #7]
 8009ce8:	2b0c      	cmp	r3, #12
 8009cea:	d002      	beq.n	8009cf2 <select_channel+0x2e>
 8009cec:	2b0d      	cmp	r3, #13
 8009cee:	d030      	beq.n	8009d52 <select_channel+0x8e>
					 toggleActiveBothChannels(FALSE);
			}
			break;
		}

}
 8009cf0:	e062      	b.n	8009db8 <select_channel+0xf4>
			if(ACTIVE_CHANNEL_2){
 8009cf2:	4b33      	ldr	r3, [pc, #204]	; (8009dc0 <select_channel+0xfc>)
 8009cf4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009cf8:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009cfc:	b2db      	uxtb	r3, r3
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d10a      	bne.n	8009d18 <select_channel+0x54>
 8009d02:	4b2f      	ldr	r3, [pc, #188]	; (8009dc0 <select_channel+0xfc>)
 8009d04:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d08:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009d0c:	b2db      	uxtb	r3, r3
 8009d0e:	2b01      	cmp	r3, #1
 8009d10:	d102      	bne.n	8009d18 <select_channel+0x54>
				setActiveChannelOne();
 8009d12:	f7f8 fbaf 	bl	8002474 <setActiveChannelOne>
				break;
 8009d16:	e04f      	b.n	8009db8 <select_channel+0xf4>
			if(ACTIVE_CHANNEL_1){
 8009d18:	4b29      	ldr	r3, [pc, #164]	; (8009dc0 <select_channel+0xfc>)
 8009d1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d1e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009d22:	b2db      	uxtb	r3, r3
 8009d24:	2b01      	cmp	r3, #1
 8009d26:	d144      	bne.n	8009db2 <select_channel+0xee>
 8009d28:	4b25      	ldr	r3, [pc, #148]	; (8009dc0 <select_channel+0xfc>)
 8009d2a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d2e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009d32:	b2db      	uxtb	r3, r3
 8009d34:	2b00      	cmp	r3, #0
 8009d36:	d13c      	bne.n	8009db2 <select_channel+0xee>
				 if(looper.TwoChannels == FALSE)
 8009d38:	4b21      	ldr	r3, [pc, #132]	; (8009dc0 <select_channel+0xfc>)
 8009d3a:	78db      	ldrb	r3, [r3, #3]
 8009d3c:	b2db      	uxtb	r3, r3
 8009d3e:	2b00      	cmp	r3, #0
 8009d40:	d103      	bne.n	8009d4a <select_channel+0x86>
					 toggleActiveBothChannels(TRUE);
 8009d42:	2001      	movs	r0, #1
 8009d44:	f7f8 fc14 	bl	8002570 <toggleActiveBothChannels>
			break;
 8009d48:	e033      	b.n	8009db2 <select_channel+0xee>
					 toggleActiveBothChannels(FALSE);
 8009d4a:	2000      	movs	r0, #0
 8009d4c:	f7f8 fc10 	bl	8002570 <toggleActiveBothChannels>
			break;
 8009d50:	e02f      	b.n	8009db2 <select_channel+0xee>
			if(ACTIVE_CHANNEL_1){
 8009d52:	4b1b      	ldr	r3, [pc, #108]	; (8009dc0 <select_channel+0xfc>)
 8009d54:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d58:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009d5c:	b2db      	uxtb	r3, r3
 8009d5e:	2b01      	cmp	r3, #1
 8009d60:	d10a      	bne.n	8009d78 <select_channel+0xb4>
 8009d62:	4b17      	ldr	r3, [pc, #92]	; (8009dc0 <select_channel+0xfc>)
 8009d64:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d68:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009d6c:	b2db      	uxtb	r3, r3
 8009d6e:	2b00      	cmp	r3, #0
 8009d70:	d102      	bne.n	8009d78 <select_channel+0xb4>
				setActiveChannelTwo();
 8009d72:	f7f8 fba1 	bl	80024b8 <setActiveChannelTwo>
				break;
 8009d76:	e01f      	b.n	8009db8 <select_channel+0xf4>
			if(ACTIVE_CHANNEL_2){
 8009d78:	4b11      	ldr	r3, [pc, #68]	; (8009dc0 <select_channel+0xfc>)
 8009d7a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8009d7e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009d82:	b2db      	uxtb	r3, r3
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d116      	bne.n	8009db6 <select_channel+0xf2>
 8009d88:	4b0d      	ldr	r3, [pc, #52]	; (8009dc0 <select_channel+0xfc>)
 8009d8a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8009d8e:	f3c3 0300 	ubfx	r3, r3, #0, #1
 8009d92:	b2db      	uxtb	r3, r3
 8009d94:	2b01      	cmp	r3, #1
 8009d96:	d10e      	bne.n	8009db6 <select_channel+0xf2>
				 if(looper.TwoChannels == FALSE)
 8009d98:	4b09      	ldr	r3, [pc, #36]	; (8009dc0 <select_channel+0xfc>)
 8009d9a:	78db      	ldrb	r3, [r3, #3]
 8009d9c:	b2db      	uxtb	r3, r3
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d103      	bne.n	8009daa <select_channel+0xe6>
					 toggleActiveBothChannels(TRUE);
 8009da2:	2001      	movs	r0, #1
 8009da4:	f7f8 fbe4 	bl	8002570 <toggleActiveBothChannels>
			break;
 8009da8:	e005      	b.n	8009db6 <select_channel+0xf2>
					 toggleActiveBothChannels(FALSE);
 8009daa:	2000      	movs	r0, #0
 8009dac:	f7f8 fbe0 	bl	8002570 <toggleActiveBothChannels>
			break;
 8009db0:	e001      	b.n	8009db6 <select_channel+0xf2>
			break;
 8009db2:	bf00      	nop
 8009db4:	e000      	b.n	8009db8 <select_channel+0xf4>
			break;
 8009db6:	bf00      	nop
}
 8009db8:	bf00      	nop
 8009dba:	3708      	adds	r7, #8
 8009dbc:	46bd      	mov	sp, r7
 8009dbe:	bd80      	pop	{r7, pc}
 8009dc0:	20001228 	.word	0x20001228

08009dc4 <select_bars>:


void select_bars() {
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b084      	sub	sp, #16
 8009dc8:	af00      	add	r7, sp, #0
	uint32_t numOfPatterns;
	uint32_t numOfBytes;
	uint32_t maxResolution;
	BOOL play = FALSE;
 8009dca:	2300      	movs	r3, #0
 8009dcc:	70fb      	strb	r3, [r7, #3]
	//looper.startPattern = 0;
	sdram_pointer = 0;
 8009dce:	4b2d      	ldr	r3, [pc, #180]	; (8009e84 <select_bars+0xc0>)
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	601a      	str	r2, [r3, #0]
	//map = (uint32_t (*)[])
	memset(pattern_audio_map,0,sizeof(pattern_audio_map));
 8009dd4:	f640 126c 	movw	r2, #2412	; 0x96c
 8009dd8:	2100      	movs	r1, #0
 8009dda:	482b      	ldr	r0, [pc, #172]	; (8009e88 <select_bars+0xc4>)
 8009ddc:	f00d fc6e 	bl	80176bc <memset>
	readDrums(&numOfPatterns,&numOfBytes,&maxResolution);
 8009de0:	1d3a      	adds	r2, r7, #4
 8009de2:	f107 0108 	add.w	r1, r7, #8
 8009de6:	f107 030c 	add.w	r3, r7, #12
 8009dea:	4618      	mov	r0, r3
 8009dec:	f7f9 faa0 	bl	8003330 <readDrums>
	// restore previous values of start/end bars
	getStartEndPatterns(&looper.StartPattern,&looper.EndPattern);
 8009df0:	4926      	ldr	r1, [pc, #152]	; (8009e8c <select_bars+0xc8>)
 8009df2:	4827      	ldr	r0, [pc, #156]	; (8009e90 <select_bars+0xcc>)
 8009df4:	f7f7 ffa6 	bl	8001d44 <getStartEndPatterns>
	//looper.endPattern = numOfPatterns - 1;

	if(numOfPatterns == 0){
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d109      	bne.n	8009e12 <select_bars+0x4e>
		menuMultiLine(1,130,messages[NO_PATTS]);
 8009dfe:	4b25      	ldr	r3, [pc, #148]	; (8009e94 <select_bars+0xd0>)
 8009e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009e02:	461a      	mov	r2, r3
 8009e04:	2182      	movs	r1, #130	; 0x82
 8009e06:	2001      	movs	r0, #1
 8009e08:	f7fe fefe 	bl	8008c08 <menuMultiLine>
		menuWaitReturn();
 8009e0c:	f7fe ff32 	bl	8008c74 <menuWaitReturn>
		goto end_play_rhythm;
 8009e10:	e02e      	b.n	8009e70 <select_bars+0xac>
	}
	if(numOfPatterns > MAX_PATTERNS){
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2bc8      	cmp	r3, #200	; 0xc8
 8009e16:	d909      	bls.n	8009e2c <select_bars+0x68>
		menuMultiLine(1,150,messages[TOO_MANY_PATTS]);
 8009e18:	4b1e      	ldr	r3, [pc, #120]	; (8009e94 <select_bars+0xd0>)
 8009e1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e1c:	461a      	mov	r2, r3
 8009e1e:	2196      	movs	r1, #150	; 0x96
 8009e20:	2001      	movs	r0, #1
 8009e22:	f7fe fef1 	bl	8008c08 <menuMultiLine>
		menuWaitReturn();
 8009e26:	f7fe ff25 	bl	8008c74 <menuWaitReturn>
		goto end_play_rhythm;
 8009e2a:	e021      	b.n	8009e70 <select_bars+0xac>
	}
	if(maxResolution > MAX_SUBBEATS){
 8009e2c:	687b      	ldr	r3, [r7, #4]
 8009e2e:	2b30      	cmp	r3, #48	; 0x30
 8009e30:	d909      	bls.n	8009e46 <select_bars+0x82>
		menuMultiLine(1,150,messages[TOO_MANY_SUBB]);
 8009e32:	4b18      	ldr	r3, [pc, #96]	; (8009e94 <select_bars+0xd0>)
 8009e34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009e36:	461a      	mov	r2, r3
 8009e38:	2196      	movs	r1, #150	; 0x96
 8009e3a:	2001      	movs	r0, #1
 8009e3c:	f7fe fee4 	bl	8008c08 <menuMultiLine>
		menuWaitReturn();
 8009e40:	f7fe ff18 	bl	8008c74 <menuWaitReturn>
		goto end_play_rhythm;
 8009e44:	e014      	b.n	8009e70 <select_bars+0xac>
	}

	do{
		looper.DrumState = DRUMS_READY;
 8009e46:	4b14      	ldr	r3, [pc, #80]	; (8009e98 <select_bars+0xd4>)
 8009e48:	2202      	movs	r2, #2
 8009e4a:	771a      	strb	r2, [r3, #28]
		// return star and end patterns and use them as parameters to drum loop
		// waits until play == TRUE (button "3" or joystick)
		menuShowStatus();
 8009e4c:	f7fe fd96 	bl	800897c <menuShowStatus>
		drumMenuInput(numOfPatterns,&play);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	1cfa      	adds	r2, r7, #3
 8009e54:	4611      	mov	r1, r2
 8009e56:	4618      	mov	r0, r3
 8009e58:	f7fe ff72 	bl	8008d40 <drumMenuInput>
		if(play == FALSE)
 8009e5c:	78fb      	ldrb	r3, [r7, #3]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d005      	beq.n	8009e6e <select_bars+0xaa>
			goto end_play_rhythm;
		drumLoop();
 8009e62:	f7f8 ff23 	bl	8002cac <drumLoop>
		// end playing on pressing user button or joystick


	}while(play != FALSE);
 8009e66:	78fb      	ldrb	r3, [r7, #3]
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d1ec      	bne.n	8009e46 <select_bars+0x82>

	end_play_rhythm:
 8009e6c:	e000      	b.n	8009e70 <select_bars+0xac>
			goto end_play_rhythm;
 8009e6e:	bf00      	nop
	//free(map);
	looper.DrumState = DRUMS_STOPPED;
 8009e70:	4b09      	ldr	r3, [pc, #36]	; (8009e98 <select_bars+0xd4>)
 8009e72:	2200      	movs	r2, #0
 8009e74:	771a      	strb	r2, [r3, #28]
	Skip_Read_Button = TRUE;
 8009e76:	4b09      	ldr	r3, [pc, #36]	; (8009e9c <select_bars+0xd8>)
 8009e78:	2201      	movs	r2, #1
 8009e7a:	701a      	strb	r2, [r3, #0]
}
 8009e7c:	bf00      	nop
 8009e7e:	3710      	adds	r7, #16
 8009e80:	46bd      	mov	sp, r7
 8009e82:	bd80      	pop	{r7, pc}
 8009e84:	200004c0 	.word	0x200004c0
 8009e88:	20000568 	.word	0x20000568
 8009e8c:	20001240 	.word	0x20001240
 8009e90:	2000123c 	.word	0x2000123c
 8009e94:	20001fbc 	.word	0x20001fbc
 8009e98:	20001228 	.word	0x20001228
 8009e9c:	20001c47 	.word	0x20001c47

08009ea0 <record_rhythm>:

void record_rhythm(){
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b08a      	sub	sp, #40	; 0x28
 8009ea4:	af06      	add	r7, sp, #24
	uint32_t beats,division,beattime;

	menuMultiLine(7,30,"[1] Preview sounds",
 8009ea6:	4b47      	ldr	r3, [pc, #284]	; (8009fc4 <record_rhythm+0x124>)
 8009ea8:	9304      	str	r3, [sp, #16]
 8009eaa:	4b47      	ldr	r3, [pc, #284]	; (8009fc8 <record_rhythm+0x128>)
 8009eac:	9303      	str	r3, [sp, #12]
 8009eae:	4b47      	ldr	r3, [pc, #284]	; (8009fcc <record_rhythm+0x12c>)
 8009eb0:	9302      	str	r3, [sp, #8]
 8009eb2:	4b47      	ldr	r3, [pc, #284]	; (8009fd0 <record_rhythm+0x130>)
 8009eb4:	9301      	str	r3, [sp, #4]
 8009eb6:	4b47      	ldr	r3, [pc, #284]	; (8009fd4 <record_rhythm+0x134>)
 8009eb8:	9300      	str	r3, [sp, #0]
 8009eba:	4b47      	ldr	r3, [pc, #284]	; (8009fd8 <record_rhythm+0x138>)
 8009ebc:	4a47      	ldr	r2, [pc, #284]	; (8009fdc <record_rhythm+0x13c>)
 8009ebe:	211e      	movs	r1, #30
 8009ec0:	2007      	movs	r0, #7
 8009ec2:	f7fe fea1 	bl	8008c08 <menuMultiLine>
						"[3] Play current",
						"[4] Clear current",
						"[5] Save as first",
						"[6] Save as next",
						"[7] Set parameters");
	getRhythmParams(&beats,&division,&beattime);
 8009ec6:	1d3a      	adds	r2, r7, #4
 8009ec8:	f107 0108 	add.w	r1, r7, #8
 8009ecc:	f107 030c 	add.w	r3, r7, #12
 8009ed0:	4618      	mov	r0, r3
 8009ed2:	f7f8 fe8f 	bl	8002bf4 <getRhythmParams>
	sprintf(lcdline,"Beats:%2u Subbeats:%2u Time:%3u",(unsigned int)beats,(unsigned int)division,(unsigned int)beattime);
 8009ed6:	68fa      	ldr	r2, [r7, #12]
 8009ed8:	68b9      	ldr	r1, [r7, #8]
 8009eda:	687b      	ldr	r3, [r7, #4]
 8009edc:	9300      	str	r3, [sp, #0]
 8009ede:	460b      	mov	r3, r1
 8009ee0:	493f      	ldr	r1, [pc, #252]	; (8009fe0 <record_rhythm+0x140>)
 8009ee2:	4840      	ldr	r0, [pc, #256]	; (8009fe4 <record_rhythm+0x144>)
 8009ee4:	f00d fcfa 	bl	80178dc <siprintf>
	menuStatusLine(lcdline);
 8009ee8:	483e      	ldr	r0, [pc, #248]	; (8009fe4 <record_rhythm+0x144>)
 8009eea:	f7fe fdfb 	bl	8008ae4 <menuStatusLine>

	while(TRUE){
		Keypad_Button = TM_KEYPAD_Read();
 8009eee:	f002 ff37 	bl	800cd60 <TM_KEYPAD_Read>
 8009ef2:	4603      	mov	r3, r0
 8009ef4:	461a      	mov	r2, r3
 8009ef6:	4b3c      	ldr	r3, [pc, #240]	; (8009fe8 <record_rhythm+0x148>)
 8009ef8:	701a      	strb	r2, [r3, #0]
		looper.DrumState = DRUMS_PAUSED;
 8009efa:	4b3c      	ldr	r3, [pc, #240]	; (8009fec <record_rhythm+0x14c>)
 8009efc:	2203      	movs	r2, #3
 8009efe:	771a      	strb	r2, [r3, #28]
		switch(Keypad_Button){
 8009f00:	4b39      	ldr	r3, [pc, #228]	; (8009fe8 <record_rhythm+0x148>)
 8009f02:	781b      	ldrb	r3, [r3, #0]
 8009f04:	2b07      	cmp	r3, #7
 8009f06:	d82a      	bhi.n	8009f5e <record_rhythm+0xbe>
 8009f08:	a201      	add	r2, pc, #4	; (adr r2, 8009f10 <record_rhythm+0x70>)
 8009f0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009f0e:	bf00      	nop
 8009f10:	08009fbb 	.word	0x08009fbb
 8009f14:	08009f31 	.word	0x08009f31
 8009f18:	08009f37 	.word	0x08009f37
 8009f1c:	08009f3d 	.word	0x08009f3d
 8009f20:	08009f43 	.word	0x08009f43
 8009f24:	08009f49 	.word	0x08009f49
 8009f28:	08009f51 	.word	0x08009f51
 8009f2c:	08009f59 	.word	0x08009f59
			case TM_KEYPAD_Button_0:	return;
			case TM_KEYPAD_Button_1:	preview_drums();
 8009f30:	f7f9 fbe0 	bl	80036f4 <preview_drums>
										break;
 8009f34:	e013      	b.n	8009f5e <record_rhythm+0xbe>
			case TM_KEYPAD_Button_2:	record_drums();
 8009f36:	f7f9 febf 	bl	8003cb8 <record_drums>
										break;
 8009f3a:	e010      	b.n	8009f5e <record_rhythm+0xbe>
			case TM_KEYPAD_Button_3:	play_drums();
 8009f3c:	f7f9 fda8 	bl	8003a90 <play_drums>
										break;
 8009f40:	e00d      	b.n	8009f5e <record_rhythm+0xbe>
			case TM_KEYPAD_Button_4:	clear_drums();
 8009f42:	f7f9 fbbd 	bl	80036c0 <clear_drums>
										break;
 8009f46:	e00a      	b.n	8009f5e <record_rhythm+0xbe>
			case TM_KEYPAD_Button_5:	save_first(drumBuffA);
 8009f48:	4829      	ldr	r0, [pc, #164]	; (8009ff0 <record_rhythm+0x150>)
 8009f4a:	f7f9 f963 	bl	8003214 <save_first>
										break;
 8009f4e:	e006      	b.n	8009f5e <record_rhythm+0xbe>
			case TM_KEYPAD_Button_6:	save_next(drumBuffA);
 8009f50:	4827      	ldr	r0, [pc, #156]	; (8009ff0 <record_rhythm+0x150>)
 8009f52:	f7f9 f997 	bl	8003284 <save_next>
										break;
 8009f56:	e002      	b.n	8009f5e <record_rhythm+0xbe>
			case TM_KEYPAD_Button_7:	select_rhythm_params();
 8009f58:	f7f9 f8f0 	bl	800313c <select_rhythm_params>
										break;
 8009f5c:	bf00      	nop


		}

		if(Keypad_Button != TM_KEYPAD_Button_NOPRESSED){
 8009f5e:	4b22      	ldr	r3, [pc, #136]	; (8009fe8 <record_rhythm+0x148>)
 8009f60:	781b      	ldrb	r3, [r3, #0]
 8009f62:	2bff      	cmp	r3, #255	; 0xff
 8009f64:	d0c3      	beq.n	8009eee <record_rhythm+0x4e>
			menuClearLines(2,3,5);
 8009f66:	2205      	movs	r2, #5
 8009f68:	2103      	movs	r1, #3
 8009f6a:	2002      	movs	r0, #2
 8009f6c:	f7fe fdd8 	bl	8008b20 <menuClearLines>
			menuMultiLine(7,30,"[1] Preview sounds",
 8009f70:	4b14      	ldr	r3, [pc, #80]	; (8009fc4 <record_rhythm+0x124>)
 8009f72:	9304      	str	r3, [sp, #16]
 8009f74:	4b14      	ldr	r3, [pc, #80]	; (8009fc8 <record_rhythm+0x128>)
 8009f76:	9303      	str	r3, [sp, #12]
 8009f78:	4b14      	ldr	r3, [pc, #80]	; (8009fcc <record_rhythm+0x12c>)
 8009f7a:	9302      	str	r3, [sp, #8]
 8009f7c:	4b14      	ldr	r3, [pc, #80]	; (8009fd0 <record_rhythm+0x130>)
 8009f7e:	9301      	str	r3, [sp, #4]
 8009f80:	4b14      	ldr	r3, [pc, #80]	; (8009fd4 <record_rhythm+0x134>)
 8009f82:	9300      	str	r3, [sp, #0]
 8009f84:	4b14      	ldr	r3, [pc, #80]	; (8009fd8 <record_rhythm+0x138>)
 8009f86:	4a15      	ldr	r2, [pc, #84]	; (8009fdc <record_rhythm+0x13c>)
 8009f88:	211e      	movs	r1, #30
 8009f8a:	2007      	movs	r0, #7
 8009f8c:	f7fe fe3c 	bl	8008c08 <menuMultiLine>
								"[3] Play current",
								"[4] Clear current",
								"[5] Save as first",
								"[6] Save as next",
								"[7] Set parameters");
			getRhythmParams(&beats,&division,&beattime);
 8009f90:	1d3a      	adds	r2, r7, #4
 8009f92:	f107 0108 	add.w	r1, r7, #8
 8009f96:	f107 030c 	add.w	r3, r7, #12
 8009f9a:	4618      	mov	r0, r3
 8009f9c:	f7f8 fe2a 	bl	8002bf4 <getRhythmParams>
			sprintf(lcdline,"Beats:%2u Subbeats:%2u Time:%3u",(unsigned int)beats,(unsigned int)division,(unsigned int)beattime);
 8009fa0:	68fa      	ldr	r2, [r7, #12]
 8009fa2:	68b9      	ldr	r1, [r7, #8]
 8009fa4:	687b      	ldr	r3, [r7, #4]
 8009fa6:	9300      	str	r3, [sp, #0]
 8009fa8:	460b      	mov	r3, r1
 8009faa:	490d      	ldr	r1, [pc, #52]	; (8009fe0 <record_rhythm+0x140>)
 8009fac:	480d      	ldr	r0, [pc, #52]	; (8009fe4 <record_rhythm+0x144>)
 8009fae:	f00d fc95 	bl	80178dc <siprintf>
			menuStatusLine(lcdline);
 8009fb2:	480c      	ldr	r0, [pc, #48]	; (8009fe4 <record_rhythm+0x144>)
 8009fb4:	f7fe fd96 	bl	8008ae4 <menuStatusLine>
		Keypad_Button = TM_KEYPAD_Read();
 8009fb8:	e799      	b.n	8009eee <record_rhythm+0x4e>
			case TM_KEYPAD_Button_0:	return;
 8009fba:	bf00      	nop
		}


	}

}
 8009fbc:	3710      	adds	r7, #16
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	080190e4 	.word	0x080190e4
 8009fc8:	080190f8 	.word	0x080190f8
 8009fcc:	0801910c 	.word	0x0801910c
 8009fd0:	08019120 	.word	0x08019120
 8009fd4:	08019134 	.word	0x08019134
 8009fd8:	080190bc 	.word	0x080190bc
 8009fdc:	080190d0 	.word	0x080190d0
 8009fe0:	08019148 	.word	0x08019148
 8009fe4:	20001270 	.word	0x20001270
 8009fe8:	20001c45 	.word	0x20001c45
 8009fec:	20001228 	.word	0x20001228
 8009ff0:	20000ed4 	.word	0x20000ed4

08009ff4 <menuInitFunctions>:
#include "menu.h"

char *messages[30];
char *functions[7];

void menuInitFunctions(){
 8009ff4:	b480      	push	{r7}
 8009ff6:	af00      	add	r7, sp, #0
	functions[IDLE] = "Idle";
 8009ff8:	4b0c      	ldr	r3, [pc, #48]	; (800a02c <menuInitFunctions+0x38>)
 8009ffa:	4a0d      	ldr	r2, [pc, #52]	; (800a030 <menuInitFunctions+0x3c>)
 8009ffc:	601a      	str	r2, [r3, #0]
	functions[AUDIO_ONLY] = "Audio only";
 8009ffe:	4b0b      	ldr	r3, [pc, #44]	; (800a02c <menuInitFunctions+0x38>)
 800a000:	4a0c      	ldr	r2, [pc, #48]	; (800a034 <menuInitFunctions+0x40>)
 800a002:	605a      	str	r2, [r3, #4]
	functions[AUDIO_DRUMS] = "Audio drums";
 800a004:	4b09      	ldr	r3, [pc, #36]	; (800a02c <menuInitFunctions+0x38>)
 800a006:	4a0c      	ldr	r2, [pc, #48]	; (800a038 <menuInitFunctions+0x44>)
 800a008:	609a      	str	r2, [r3, #8]
	functions[DRUMS_ONLY] = "Drums only";
 800a00a:	4b08      	ldr	r3, [pc, #32]	; (800a02c <menuInitFunctions+0x38>)
 800a00c:	4a0b      	ldr	r2, [pc, #44]	; (800a03c <menuInitFunctions+0x48>)
 800a00e:	60da      	str	r2, [r3, #12]
	functions[DOWNLOAD_SRAM] = "Download SRAM";
 800a010:	4b06      	ldr	r3, [pc, #24]	; (800a02c <menuInitFunctions+0x38>)
 800a012:	4a0b      	ldr	r2, [pc, #44]	; (800a040 <menuInitFunctions+0x4c>)
 800a014:	611a      	str	r2, [r3, #16]
	functions[PLAY_SONG] = "Play Song";
 800a016:	4b05      	ldr	r3, [pc, #20]	; (800a02c <menuInitFunctions+0x38>)
 800a018:	4a0a      	ldr	r2, [pc, #40]	; (800a044 <menuInitFunctions+0x50>)
 800a01a:	615a      	str	r2, [r3, #20]
	functions[PLAY_SD] = "Play SD";
 800a01c:	4b03      	ldr	r3, [pc, #12]	; (800a02c <menuInitFunctions+0x38>)
 800a01e:	4a0a      	ldr	r2, [pc, #40]	; (800a048 <menuInitFunctions+0x54>)
 800a020:	619a      	str	r2, [r3, #24]

}
 800a022:	bf00      	nop
 800a024:	46bd      	mov	sp, r7
 800a026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a02a:	4770      	bx	lr
 800a02c:	20002034 	.word	0x20002034
 800a030:	080191b4 	.word	0x080191b4
 800a034:	080191bc 	.word	0x080191bc
 800a038:	080191c8 	.word	0x080191c8
 800a03c:	080191d4 	.word	0x080191d4
 800a040:	080191e0 	.word	0x080191e0
 800a044:	080191f0 	.word	0x080191f0
 800a048:	080191fc 	.word	0x080191fc

0800a04c <menuInitMsg>:

void menuInitMsg(){
 800a04c:	b480      	push	{r7}
 800a04e:	af00      	add	r7, sp, #0

	messages[MAIN] = "Main looper menu";
 800a050:	4b18      	ldr	r3, [pc, #96]	; (800a0b4 <menuInitMsg+0x68>)
 800a052:	4a19      	ldr	r2, [pc, #100]	; (800a0b8 <menuInitMsg+0x6c>)
 800a054:	601a      	str	r2, [r3, #0]
	messages[BACK] = "Go back";
 800a056:	4b17      	ldr	r3, [pc, #92]	; (800a0b4 <menuInitMsg+0x68>)
 800a058:	4a18      	ldr	r2, [pc, #96]	; (800a0bc <menuInitMsg+0x70>)
 800a05a:	605a      	str	r2, [r3, #4]
	messages[DOWNL_RTH] = "Download rhythm";
 800a05c:	4b15      	ldr	r3, [pc, #84]	; (800a0b4 <menuInitMsg+0x68>)
 800a05e:	4a18      	ldr	r2, [pc, #96]	; (800a0c0 <menuInitMsg+0x74>)
 800a060:	609a      	str	r2, [r3, #8]
	messages[PLAY_RTH] = "Play/Record rhythm";
 800a062:	4b14      	ldr	r3, [pc, #80]	; (800a0b4 <menuInitMsg+0x68>)
 800a064:	4a17      	ldr	r2, [pc, #92]	; (800a0c4 <menuInitMsg+0x78>)
 800a066:	60da      	str	r2, [r3, #12]
	messages[ONE_BAR_BACK_START] = "Move start back";
 800a068:	4b12      	ldr	r3, [pc, #72]	; (800a0b4 <menuInitMsg+0x68>)
 800a06a:	4a17      	ldr	r2, [pc, #92]	; (800a0c8 <menuInitMsg+0x7c>)
 800a06c:	611a      	str	r2, [r3, #16]
	messages[ONE_BAR_FORW_START] = "Move start forward";
 800a06e:	4b11      	ldr	r3, [pc, #68]	; (800a0b4 <menuInitMsg+0x68>)
 800a070:	4a16      	ldr	r2, [pc, #88]	; (800a0cc <menuInitMsg+0x80>)
 800a072:	615a      	str	r2, [r3, #20]
	messages[ONE_BAR_BACK_END] = "Move end back";
 800a074:	4b0f      	ldr	r3, [pc, #60]	; (800a0b4 <menuInitMsg+0x68>)
 800a076:	4a16      	ldr	r2, [pc, #88]	; (800a0d0 <menuInitMsg+0x84>)
 800a078:	619a      	str	r2, [r3, #24]
	messages[ONE_BAR_FORW_END] = "Move end forward";
 800a07a:	4b0e      	ldr	r3, [pc, #56]	; (800a0b4 <menuInitMsg+0x68>)
 800a07c:	4a15      	ldr	r2, [pc, #84]	; (800a0d4 <menuInitMsg+0x88>)
 800a07e:	61da      	str	r2, [r3, #28]
	messages[START_RHYTHM] = "Start rhythm";
 800a080:	4b0c      	ldr	r3, [pc, #48]	; (800a0b4 <menuInitMsg+0x68>)
 800a082:	4a15      	ldr	r2, [pc, #84]	; (800a0d8 <menuInitMsg+0x8c>)
 800a084:	621a      	str	r2, [r3, #32]
	messages[NO_PATTS] = "No patterns found!";
 800a086:	4b0b      	ldr	r3, [pc, #44]	; (800a0b4 <menuInitMsg+0x68>)
 800a088:	4a14      	ldr	r2, [pc, #80]	; (800a0dc <menuInitMsg+0x90>)
 800a08a:	625a      	str	r2, [r3, #36]	; 0x24
	messages[TOO_MANY_PATTS] = "Too many patterns!";
 800a08c:	4b09      	ldr	r3, [pc, #36]	; (800a0b4 <menuInitMsg+0x68>)
 800a08e:	4a14      	ldr	r2, [pc, #80]	; (800a0e0 <menuInitMsg+0x94>)
 800a090:	629a      	str	r2, [r3, #40]	; 0x28
	messages[TOO_MANY_SUBB] = "Too many subbeats!";
 800a092:	4b08      	ldr	r3, [pc, #32]	; (800a0b4 <menuInitMsg+0x68>)
 800a094:	4a13      	ldr	r2, [pc, #76]	; (800a0e4 <menuInitMsg+0x98>)
 800a096:	62da      	str	r2, [r3, #44]	; 0x2c
	messages[CHANNEL_SELECT] = "Select channel";
 800a098:	4b06      	ldr	r3, [pc, #24]	; (800a0b4 <menuInitMsg+0x68>)
 800a09a:	4a13      	ldr	r2, [pc, #76]	; (800a0e8 <menuInitMsg+0x9c>)
 800a09c:	631a      	str	r2, [r3, #48]	; 0x30
	messages[AUDIO_RHYTHM] = "Audio and rhythm";
 800a09e:	4b05      	ldr	r3, [pc, #20]	; (800a0b4 <menuInitMsg+0x68>)
 800a0a0:	4a12      	ldr	r2, [pc, #72]	; (800a0ec <menuInitMsg+0xa0>)
 800a0a2:	635a      	str	r2, [r3, #52]	; 0x34
	messages[REC_SEL_LOOPS] = "Select loop";
 800a0a4:	4b03      	ldr	r3, [pc, #12]	; (800a0b4 <menuInitMsg+0x68>)
 800a0a6:	4a12      	ldr	r2, [pc, #72]	; (800a0f0 <menuInitMsg+0xa4>)
 800a0a8:	639a      	str	r2, [r3, #56]	; 0x38
}
 800a0aa:	bf00      	nop
 800a0ac:	46bd      	mov	sp, r7
 800a0ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b2:	4770      	bx	lr
 800a0b4:	20001fbc 	.word	0x20001fbc
 800a0b8:	08019204 	.word	0x08019204
 800a0bc:	08019218 	.word	0x08019218
 800a0c0:	08019220 	.word	0x08019220
 800a0c4:	08019230 	.word	0x08019230
 800a0c8:	08019244 	.word	0x08019244
 800a0cc:	08019254 	.word	0x08019254
 800a0d0:	08019268 	.word	0x08019268
 800a0d4:	08019278 	.word	0x08019278
 800a0d8:	0801928c 	.word	0x0801928c
 800a0dc:	0801929c 	.word	0x0801929c
 800a0e0:	080192b0 	.word	0x080192b0
 800a0e4:	080192c4 	.word	0x080192c4
 800a0e8:	080192d8 	.word	0x080192d8
 800a0ec:	080192e8 	.word	0x080192e8
 800a0f0:	080192fc 	.word	0x080192fc

0800a0f4 <setupMidi>:

uint16_t beats_per_minute	= 60;			// 1s = 1 quarter
uint16_t millis_per_beat = 60000 / 60;
extern uint8_t UserRxBufferHS[];

void setupMidi(){
 800a0f4:	b580      	push	{r7, lr}
 800a0f6:	af00      	add	r7, sp, #0
	//Reset the VS1053
	  VS1053_LOW();
 800a0f8:	2200      	movs	r2, #0
 800a0fa:	2108      	movs	r1, #8
 800a0fc:	480a      	ldr	r0, [pc, #40]	; (800a128 <setupMidi+0x34>)
 800a0fe:	f004 ffb5 	bl	800f06c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800a102:	2064      	movs	r0, #100	; 0x64
 800a104:	f002 ffa0 	bl	800d048 <HAL_Delay>
	  VS1053_HIGH();
 800a108:	2201      	movs	r2, #1
 800a10a:	2108      	movs	r1, #8
 800a10c:	4806      	ldr	r0, [pc, #24]	; (800a128 <setupMidi+0x34>)
 800a10e:	f004 ffad 	bl	800f06c <HAL_GPIO_WritePin>
	  HAL_Delay(100);
 800a112:	2064      	movs	r0, #100	; 0x64
 800a114:	f002 ff98 	bl	800d048 <HAL_Delay>
	  talkMIDI(0xB0, 0x07, 120); //0xB0 is channel message, set channel volume to near max (127)
 800a118:	2278      	movs	r2, #120	; 0x78
 800a11a:	2107      	movs	r1, #7
 800a11c:	20b0      	movs	r0, #176	; 0xb0
 800a11e:	f000 f831 	bl	800a184 <talkMIDI>

}
 800a122:	bf00      	nop
 800a124:	bd80      	pop	{r7, pc}
 800a126:	bf00      	nop
 800a128:	40021000 	.word	0x40021000

0800a12c <noteOn>:

void noteOn(byte channel, byte note, byte attack_velocity) {
 800a12c:	b580      	push	{r7, lr}
 800a12e:	b082      	sub	sp, #8
 800a130:	af00      	add	r7, sp, #0
 800a132:	4603      	mov	r3, r0
 800a134:	71fb      	strb	r3, [r7, #7]
 800a136:	460b      	mov	r3, r1
 800a138:	71bb      	strb	r3, [r7, #6]
 800a13a:	4613      	mov	r3, r2
 800a13c:	717b      	strb	r3, [r7, #5]
  talkMIDI( (0x90 | channel), note, attack_velocity);
 800a13e:	79fb      	ldrb	r3, [r7, #7]
 800a140:	f063 036f 	orn	r3, r3, #111	; 0x6f
 800a144:	b2db      	uxtb	r3, r3
 800a146:	797a      	ldrb	r2, [r7, #5]
 800a148:	79b9      	ldrb	r1, [r7, #6]
 800a14a:	4618      	mov	r0, r3
 800a14c:	f000 f81a 	bl	800a184 <talkMIDI>
}
 800a150:	bf00      	nop
 800a152:	3708      	adds	r7, #8
 800a154:	46bd      	mov	sp, r7
 800a156:	bd80      	pop	{r7, pc}

0800a158 <noteOff>:

//Send a MIDI note-off message.  Like releasing a piano key
void noteOff(byte channel, byte note, byte release_velocity) {
 800a158:	b580      	push	{r7, lr}
 800a15a:	b082      	sub	sp, #8
 800a15c:	af00      	add	r7, sp, #0
 800a15e:	4603      	mov	r3, r0
 800a160:	71fb      	strb	r3, [r7, #7]
 800a162:	460b      	mov	r3, r1
 800a164:	71bb      	strb	r3, [r7, #6]
 800a166:	4613      	mov	r3, r2
 800a168:	717b      	strb	r3, [r7, #5]
  talkMIDI( (0x80 | channel), note, release_velocity);
 800a16a:	79fb      	ldrb	r3, [r7, #7]
 800a16c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800a170:	b2db      	uxtb	r3, r3
 800a172:	797a      	ldrb	r2, [r7, #5]
 800a174:	79b9      	ldrb	r1, [r7, #6]
 800a176:	4618      	mov	r0, r3
 800a178:	f000 f804 	bl	800a184 <talkMIDI>
}
 800a17c:	bf00      	nop
 800a17e:	3708      	adds	r7, #8
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <talkMIDI>:

//Plays a MIDI note. Doesn't check to see that cmd is greater than 127, or that data values are less than 127
void talkMIDI(byte cmd, byte data1, byte data2) {
 800a184:	b580      	push	{r7, lr}
 800a186:	b082      	sub	sp, #8
 800a188:	af00      	add	r7, sp, #0
 800a18a:	4603      	mov	r3, r0
 800a18c:	71fb      	strb	r3, [r7, #7]
 800a18e:	460b      	mov	r3, r1
 800a190:	71bb      	strb	r3, [r7, #6]
 800a192:	4613      	mov	r3, r2
 800a194:	717b      	strb	r3, [r7, #5]
	HAL_UART_Transmit(&huart1,&cmd,1,100);
 800a196:	1df9      	adds	r1, r7, #7
 800a198:	2364      	movs	r3, #100	; 0x64
 800a19a:	2201      	movs	r2, #1
 800a19c:	480b      	ldr	r0, [pc, #44]	; (800a1cc <talkMIDI+0x48>)
 800a19e:	f008 fcbd 	bl	8012b1c <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1,&data1,1,100);
 800a1a2:	1db9      	adds	r1, r7, #6
 800a1a4:	2364      	movs	r3, #100	; 0x64
 800a1a6:	2201      	movs	r2, #1
 800a1a8:	4808      	ldr	r0, [pc, #32]	; (800a1cc <talkMIDI+0x48>)
 800a1aa:	f008 fcb7 	bl	8012b1c <HAL_UART_Transmit>

  //Some commands only have one data byte. All cmds less than 0xBn have 2 data bytes
  //(sort of: http://253.ccarh.org/handout/midiprotocol/)
  if( (cmd & 0xF0) <= 0xB0)
 800a1ae:	79fb      	ldrb	r3, [r7, #7]
 800a1b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a1b4:	2bb0      	cmp	r3, #176	; 0xb0
 800a1b6:	dc05      	bgt.n	800a1c4 <talkMIDI+0x40>
	  HAL_UART_Transmit(&huart1,&data2,1,100);
 800a1b8:	1d79      	adds	r1, r7, #5
 800a1ba:	2364      	movs	r3, #100	; 0x64
 800a1bc:	2201      	movs	r2, #1
 800a1be:	4803      	ldr	r0, [pc, #12]	; (800a1cc <talkMIDI+0x48>)
 800a1c0:	f008 fcac 	bl	8012b1c <HAL_UART_Transmit>

}
 800a1c4:	bf00      	nop
 800a1c6:	3708      	adds	r7, #8
 800a1c8:	46bd      	mov	sp, r7
 800a1ca:	bd80      	pop	{r7, pc}
 800a1cc:	200023b8 	.word	0x200023b8

0800a1d0 <playPercussion>:

void playPercussion(byte onoff,byte instrument){
 800a1d0:	b580      	push	{r7, lr}
 800a1d2:	b082      	sub	sp, #8
 800a1d4:	af00      	add	r7, sp, #0
 800a1d6:	4603      	mov	r3, r0
 800a1d8:	460a      	mov	r2, r1
 800a1da:	71fb      	strb	r3, [r7, #7]
 800a1dc:	4613      	mov	r3, r2
 800a1de:	71bb      	strb	r3, [r7, #6]
	if(onoff == NOTEON)
 800a1e0:	79fb      	ldrb	r3, [r7, #7]
 800a1e2:	2b01      	cmp	r3, #1
 800a1e4:	d106      	bne.n	800a1f4 <playPercussion+0x24>
		noteOn(9, instrument, 60);
 800a1e6:	79bb      	ldrb	r3, [r7, #6]
 800a1e8:	223c      	movs	r2, #60	; 0x3c
 800a1ea:	4619      	mov	r1, r3
 800a1ec:	2009      	movs	r0, #9
 800a1ee:	f7ff ff9d 	bl	800a12c <noteOn>
	else
		//Turn off the note with a given off/release velocity
		noteOff(9, instrument, 60);
}
 800a1f2:	e005      	b.n	800a200 <playPercussion+0x30>
		noteOff(9, instrument, 60);
 800a1f4:	79bb      	ldrb	r3, [r7, #6]
 800a1f6:	223c      	movs	r2, #60	; 0x3c
 800a1f8:	4619      	mov	r1, r3
 800a1fa:	2009      	movs	r0, #9
 800a1fc:	f7ff ffac 	bl	800a158 <noteOff>
}
 800a200:	bf00      	nop
 800a202:	3708      	adds	r7, #8
 800a204:	46bd      	mov	sp, r7
 800a206:	bd80      	pop	{r7, pc}

0800a208 <playBass>:


void playBass(byte onoff,byte tone){
 800a208:	b580      	push	{r7, lr}
 800a20a:	b082      	sub	sp, #8
 800a20c:	af00      	add	r7, sp, #0
 800a20e:	4603      	mov	r3, r0
 800a210:	460a      	mov	r2, r1
 800a212:	71fb      	strb	r3, [r7, #7]
 800a214:	4613      	mov	r3, r2
 800a216:	71bb      	strb	r3, [r7, #6]
	talkMIDI(0xC0,34,0);
 800a218:	2200      	movs	r2, #0
 800a21a:	2122      	movs	r1, #34	; 0x22
 800a21c:	20c0      	movs	r0, #192	; 0xc0
 800a21e:	f7ff ffb1 	bl	800a184 <talkMIDI>
	if(onoff == NOTEON)
 800a222:	79fb      	ldrb	r3, [r7, #7]
 800a224:	2b01      	cmp	r3, #1
 800a226:	d106      	bne.n	800a236 <playBass+0x2e>
			noteOn(0,tone,60);
 800a228:	79bb      	ldrb	r3, [r7, #6]
 800a22a:	223c      	movs	r2, #60	; 0x3c
 800a22c:	4619      	mov	r1, r3
 800a22e:	2000      	movs	r0, #0
 800a230:	f7ff ff7c 	bl	800a12c <noteOn>
		else
			//Turn off the note with a given off/release velocity
			noteOff(0,tone,60);
}
 800a234:	e005      	b.n	800a242 <playBass+0x3a>
			noteOff(0,tone,60);
 800a236:	79bb      	ldrb	r3, [r7, #6]
 800a238:	223c      	movs	r2, #60	; 0x3c
 800a23a:	4619      	mov	r1, r3
 800a23c:	2000      	movs	r0, #0
 800a23e:	f7ff ff8b 	bl	800a158 <noteOff>
}
 800a242:	bf00      	nop
 800a244:	3708      	adds	r7, #8
 800a246:	46bd      	mov	sp, r7
 800a248:	bd80      	pop	{r7, pc}
	...

0800a24c <MX_SPI3_Init>:
DMA_HandleTypeDef hdma_spi5_rx;
DMA_HandleTypeDef hdma_spi5_tx;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800a24c:	b580      	push	{r7, lr}
 800a24e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800a250:	4b17      	ldr	r3, [pc, #92]	; (800a2b0 <MX_SPI3_Init+0x64>)
 800a252:	4a18      	ldr	r2, [pc, #96]	; (800a2b4 <MX_SPI3_Init+0x68>)
 800a254:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 800a256:	4b16      	ldr	r3, [pc, #88]	; (800a2b0 <MX_SPI3_Init+0x64>)
 800a258:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a25c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800a25e:	4b14      	ldr	r3, [pc, #80]	; (800a2b0 <MX_SPI3_Init+0x64>)
 800a260:	2200      	movs	r2, #0
 800a262:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 800a264:	4b12      	ldr	r3, [pc, #72]	; (800a2b0 <MX_SPI3_Init+0x64>)
 800a266:	2200      	movs	r2, #0
 800a268:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a26a:	4b11      	ldr	r3, [pc, #68]	; (800a2b0 <MX_SPI3_Init+0x64>)
 800a26c:	2200      	movs	r2, #0
 800a26e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 800a270:	4b0f      	ldr	r3, [pc, #60]	; (800a2b0 <MX_SPI3_Init+0x64>)
 800a272:	2201      	movs	r2, #1
 800a274:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800a276:	4b0e      	ldr	r3, [pc, #56]	; (800a2b0 <MX_SPI3_Init+0x64>)
 800a278:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a27c:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 800a27e:	4b0c      	ldr	r3, [pc, #48]	; (800a2b0 <MX_SPI3_Init+0x64>)
 800a280:	2208      	movs	r2, #8
 800a282:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a284:	4b0a      	ldr	r3, [pc, #40]	; (800a2b0 <MX_SPI3_Init+0x64>)
 800a286:	2200      	movs	r2, #0
 800a288:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800a28a:	4b09      	ldr	r3, [pc, #36]	; (800a2b0 <MX_SPI3_Init+0x64>)
 800a28c:	2200      	movs	r2, #0
 800a28e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a290:	4b07      	ldr	r3, [pc, #28]	; (800a2b0 <MX_SPI3_Init+0x64>)
 800a292:	2200      	movs	r2, #0
 800a294:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800a296:	4b06      	ldr	r3, [pc, #24]	; (800a2b0 <MX_SPI3_Init+0x64>)
 800a298:	220a      	movs	r2, #10
 800a29a:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800a29c:	4804      	ldr	r0, [pc, #16]	; (800a2b0 <MX_SPI3_Init+0x64>)
 800a29e:	f007 f814 	bl	80112ca <HAL_SPI_Init>
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	2b00      	cmp	r3, #0
 800a2a6:	d001      	beq.n	800a2ac <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800a2a8:	f7fd fc6c 	bl	8007b84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800a2ac:	bf00      	nop
 800a2ae:	bd80      	pop	{r7, pc}
 800a2b0:	20002050 	.word	0x20002050
 800a2b4:	40003c00 	.word	0x40003c00

0800a2b8 <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 800a2bc:	4b17      	ldr	r3, [pc, #92]	; (800a31c <MX_SPI5_Init+0x64>)
 800a2be:	4a18      	ldr	r2, [pc, #96]	; (800a320 <MX_SPI5_Init+0x68>)
 800a2c0:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 800a2c2:	4b16      	ldr	r3, [pc, #88]	; (800a31c <MX_SPI5_Init+0x64>)
 800a2c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 800a2c8:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800a2ca:	4b14      	ldr	r3, [pc, #80]	; (800a31c <MX_SPI5_Init+0x64>)
 800a2cc:	2200      	movs	r2, #0
 800a2ce:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800a2d0:	4b12      	ldr	r3, [pc, #72]	; (800a31c <MX_SPI5_Init+0x64>)
 800a2d2:	2200      	movs	r2, #0
 800a2d4:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800a2d6:	4b11      	ldr	r3, [pc, #68]	; (800a31c <MX_SPI5_Init+0x64>)
 800a2d8:	2200      	movs	r2, #0
 800a2da:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 800a2dc:	4b0f      	ldr	r3, [pc, #60]	; (800a31c <MX_SPI5_Init+0x64>)
 800a2de:	2200      	movs	r2, #0
 800a2e0:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 800a2e2:	4b0e      	ldr	r3, [pc, #56]	; (800a31c <MX_SPI5_Init+0x64>)
 800a2e4:	f44f 7200 	mov.w	r2, #512	; 0x200
 800a2e8:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800a2ea:	4b0c      	ldr	r3, [pc, #48]	; (800a31c <MX_SPI5_Init+0x64>)
 800a2ec:	2210      	movs	r2, #16
 800a2ee:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800a2f0:	4b0a      	ldr	r3, [pc, #40]	; (800a31c <MX_SPI5_Init+0x64>)
 800a2f2:	2200      	movs	r2, #0
 800a2f4:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800a2f6:	4b09      	ldr	r3, [pc, #36]	; (800a31c <MX_SPI5_Init+0x64>)
 800a2f8:	2200      	movs	r2, #0
 800a2fa:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800a2fc:	4b07      	ldr	r3, [pc, #28]	; (800a31c <MX_SPI5_Init+0x64>)
 800a2fe:	2200      	movs	r2, #0
 800a300:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 800a302:	4b06      	ldr	r3, [pc, #24]	; (800a31c <MX_SPI5_Init+0x64>)
 800a304:	220a      	movs	r2, #10
 800a306:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800a308:	4804      	ldr	r0, [pc, #16]	; (800a31c <MX_SPI5_Init+0x64>)
 800a30a:	f006 ffde 	bl	80112ca <HAL_SPI_Init>
 800a30e:	4603      	mov	r3, r0
 800a310:	2b00      	cmp	r3, #0
 800a312:	d001      	beq.n	800a318 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 800a314:	f7fd fc36 	bl	8007b84 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800a318:	bf00      	nop
 800a31a:	bd80      	pop	{r7, pc}
 800a31c:	200020a8 	.word	0x200020a8
 800a320:	40015000 	.word	0x40015000

0800a324 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b08c      	sub	sp, #48	; 0x30
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800a32c:	f107 031c 	add.w	r3, r7, #28
 800a330:	2200      	movs	r2, #0
 800a332:	601a      	str	r2, [r3, #0]
 800a334:	605a      	str	r2, [r3, #4]
 800a336:	609a      	str	r2, [r3, #8]
 800a338:	60da      	str	r2, [r3, #12]
 800a33a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 800a33c:	687b      	ldr	r3, [r7, #4]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	4a7a      	ldr	r2, [pc, #488]	; (800a52c <HAL_SPI_MspInit+0x208>)
 800a342:	4293      	cmp	r3, r2
 800a344:	d14b      	bne.n	800a3de <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800a346:	2300      	movs	r3, #0
 800a348:	61bb      	str	r3, [r7, #24]
 800a34a:	4b79      	ldr	r3, [pc, #484]	; (800a530 <HAL_SPI_MspInit+0x20c>)
 800a34c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a34e:	4a78      	ldr	r2, [pc, #480]	; (800a530 <HAL_SPI_MspInit+0x20c>)
 800a350:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800a354:	6413      	str	r3, [r2, #64]	; 0x40
 800a356:	4b76      	ldr	r3, [pc, #472]	; (800a530 <HAL_SPI_MspInit+0x20c>)
 800a358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a35a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a35e:	61bb      	str	r3, [r7, #24]
 800a360:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800a362:	2300      	movs	r3, #0
 800a364:	617b      	str	r3, [r7, #20]
 800a366:	4b72      	ldr	r3, [pc, #456]	; (800a530 <HAL_SPI_MspInit+0x20c>)
 800a368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a36a:	4a71      	ldr	r2, [pc, #452]	; (800a530 <HAL_SPI_MspInit+0x20c>)
 800a36c:	f043 0304 	orr.w	r3, r3, #4
 800a370:	6313      	str	r3, [r2, #48]	; 0x30
 800a372:	4b6f      	ldr	r3, [pc, #444]	; (800a530 <HAL_SPI_MspInit+0x20c>)
 800a374:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a376:	f003 0304 	and.w	r3, r3, #4
 800a37a:	617b      	str	r3, [r7, #20]
 800a37c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800a37e:	2300      	movs	r3, #0
 800a380:	613b      	str	r3, [r7, #16]
 800a382:	4b6b      	ldr	r3, [pc, #428]	; (800a530 <HAL_SPI_MspInit+0x20c>)
 800a384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a386:	4a6a      	ldr	r2, [pc, #424]	; (800a530 <HAL_SPI_MspInit+0x20c>)
 800a388:	f043 0302 	orr.w	r3, r3, #2
 800a38c:	6313      	str	r3, [r2, #48]	; 0x30
 800a38e:	4b68      	ldr	r3, [pc, #416]	; (800a530 <HAL_SPI_MspInit+0x20c>)
 800a390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a392:	f003 0302 	and.w	r3, r3, #2
 800a396:	613b      	str	r3, [r7, #16]
 800a398:	693b      	ldr	r3, [r7, #16]
    /**SPI3 GPIO Configuration
    PC11     ------> SPI3_MISO
    PC12     ------> SPI3_MOSI
    PB3     ------> SPI3_SCK
    */
    GPIO_InitStruct.Pin = ADS1256_MISO_Pin|ADS1256_MOSI_Pin;
 800a39a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800a39e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3a0:	2302      	movs	r3, #2
 800a3a2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3a8:	2303      	movs	r3, #3
 800a3aa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a3ac:	2306      	movs	r3, #6
 800a3ae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800a3b0:	f107 031c 	add.w	r3, r7, #28
 800a3b4:	4619      	mov	r1, r3
 800a3b6:	485f      	ldr	r0, [pc, #380]	; (800a534 <HAL_SPI_MspInit+0x210>)
 800a3b8:	f004 fc94 	bl	800ece4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = ADS1256_SCK_Pin;
 800a3bc:	2308      	movs	r3, #8
 800a3be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3c0:	2302      	movs	r3, #2
 800a3c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3c4:	2300      	movs	r3, #0
 800a3c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a3c8:	2303      	movs	r3, #3
 800a3ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800a3cc:	2306      	movs	r3, #6
 800a3ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(ADS1256_SCK_GPIO_Port, &GPIO_InitStruct);
 800a3d0:	f107 031c 	add.w	r3, r7, #28
 800a3d4:	4619      	mov	r1, r3
 800a3d6:	4858      	ldr	r0, [pc, #352]	; (800a538 <HAL_SPI_MspInit+0x214>)
 800a3d8:	f004 fc84 	bl	800ece4 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800a3dc:	e0a2      	b.n	800a524 <HAL_SPI_MspInit+0x200>
  else if(spiHandle->Instance==SPI5)
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4a56      	ldr	r2, [pc, #344]	; (800a53c <HAL_SPI_MspInit+0x218>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	f040 809d 	bne.w	800a524 <HAL_SPI_MspInit+0x200>
    __HAL_RCC_SPI5_CLK_ENABLE();
 800a3ea:	2300      	movs	r3, #0
 800a3ec:	60fb      	str	r3, [r7, #12]
 800a3ee:	4b50      	ldr	r3, [pc, #320]	; (800a530 <HAL_SPI_MspInit+0x20c>)
 800a3f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3f2:	4a4f      	ldr	r2, [pc, #316]	; (800a530 <HAL_SPI_MspInit+0x20c>)
 800a3f4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a3f8:	6453      	str	r3, [r2, #68]	; 0x44
 800a3fa:	4b4d      	ldr	r3, [pc, #308]	; (800a530 <HAL_SPI_MspInit+0x20c>)
 800a3fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a3fe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a402:	60fb      	str	r3, [r7, #12]
 800a404:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800a406:	2300      	movs	r3, #0
 800a408:	60bb      	str	r3, [r7, #8]
 800a40a:	4b49      	ldr	r3, [pc, #292]	; (800a530 <HAL_SPI_MspInit+0x20c>)
 800a40c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a40e:	4a48      	ldr	r2, [pc, #288]	; (800a530 <HAL_SPI_MspInit+0x20c>)
 800a410:	f043 0320 	orr.w	r3, r3, #32
 800a414:	6313      	str	r3, [r2, #48]	; 0x30
 800a416:	4b46      	ldr	r3, [pc, #280]	; (800a530 <HAL_SPI_MspInit+0x20c>)
 800a418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a41a:	f003 0320 	and.w	r3, r3, #32
 800a41e:	60bb      	str	r3, [r7, #8]
 800a420:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
 800a422:	f44f 7360 	mov.w	r3, #896	; 0x380
 800a426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a428:	2302      	movs	r3, #2
 800a42a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a42c:	2300      	movs	r3, #0
 800a42e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800a430:	2302      	movs	r3, #2
 800a432:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800a434:	2305      	movs	r3, #5
 800a436:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800a438:	f107 031c 	add.w	r3, r7, #28
 800a43c:	4619      	mov	r1, r3
 800a43e:	4840      	ldr	r0, [pc, #256]	; (800a540 <HAL_SPI_MspInit+0x21c>)
 800a440:	f004 fc50 	bl	800ece4 <HAL_GPIO_Init>
    hdma_spi5_rx.Instance = DMA2_Stream3;
 800a444:	4b3f      	ldr	r3, [pc, #252]	; (800a544 <HAL_SPI_MspInit+0x220>)
 800a446:	4a40      	ldr	r2, [pc, #256]	; (800a548 <HAL_SPI_MspInit+0x224>)
 800a448:	601a      	str	r2, [r3, #0]
    hdma_spi5_rx.Init.Channel = DMA_CHANNEL_2;
 800a44a:	4b3e      	ldr	r3, [pc, #248]	; (800a544 <HAL_SPI_MspInit+0x220>)
 800a44c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800a450:	605a      	str	r2, [r3, #4]
    hdma_spi5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800a452:	4b3c      	ldr	r3, [pc, #240]	; (800a544 <HAL_SPI_MspInit+0x220>)
 800a454:	2200      	movs	r2, #0
 800a456:	609a      	str	r2, [r3, #8]
    hdma_spi5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a458:	4b3a      	ldr	r3, [pc, #232]	; (800a544 <HAL_SPI_MspInit+0x220>)
 800a45a:	2200      	movs	r2, #0
 800a45c:	60da      	str	r2, [r3, #12]
    hdma_spi5_rx.Init.MemInc = DMA_MINC_ENABLE;
 800a45e:	4b39      	ldr	r3, [pc, #228]	; (800a544 <HAL_SPI_MspInit+0x220>)
 800a460:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a464:	611a      	str	r2, [r3, #16]
    hdma_spi5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a466:	4b37      	ldr	r3, [pc, #220]	; (800a544 <HAL_SPI_MspInit+0x220>)
 800a468:	2200      	movs	r2, #0
 800a46a:	615a      	str	r2, [r3, #20]
    hdma_spi5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a46c:	4b35      	ldr	r3, [pc, #212]	; (800a544 <HAL_SPI_MspInit+0x220>)
 800a46e:	2200      	movs	r2, #0
 800a470:	619a      	str	r2, [r3, #24]
    hdma_spi5_rx.Init.Mode = DMA_NORMAL;
 800a472:	4b34      	ldr	r3, [pc, #208]	; (800a544 <HAL_SPI_MspInit+0x220>)
 800a474:	2200      	movs	r2, #0
 800a476:	61da      	str	r2, [r3, #28]
    hdma_spi5_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800a478:	4b32      	ldr	r3, [pc, #200]	; (800a544 <HAL_SPI_MspInit+0x220>)
 800a47a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a47e:	621a      	str	r2, [r3, #32]
    hdma_spi5_rx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800a480:	4b30      	ldr	r3, [pc, #192]	; (800a544 <HAL_SPI_MspInit+0x220>)
 800a482:	2204      	movs	r2, #4
 800a484:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi5_rx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800a486:	4b2f      	ldr	r3, [pc, #188]	; (800a544 <HAL_SPI_MspInit+0x220>)
 800a488:	2200      	movs	r2, #0
 800a48a:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi5_rx.Init.MemBurst = DMA_MBURST_SINGLE;
 800a48c:	4b2d      	ldr	r3, [pc, #180]	; (800a544 <HAL_SPI_MspInit+0x220>)
 800a48e:	2200      	movs	r2, #0
 800a490:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi5_rx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800a492:	4b2c      	ldr	r3, [pc, #176]	; (800a544 <HAL_SPI_MspInit+0x220>)
 800a494:	2200      	movs	r2, #0
 800a496:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi5_rx) != HAL_OK)
 800a498:	482a      	ldr	r0, [pc, #168]	; (800a544 <HAL_SPI_MspInit+0x220>)
 800a49a:	f003 ffe5 	bl	800e468 <HAL_DMA_Init>
 800a49e:	4603      	mov	r3, r0
 800a4a0:	2b00      	cmp	r3, #0
 800a4a2:	d001      	beq.n	800a4a8 <HAL_SPI_MspInit+0x184>
      Error_Handler();
 800a4a4:	f7fd fb6e 	bl	8007b84 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi5_rx);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	4a26      	ldr	r2, [pc, #152]	; (800a544 <HAL_SPI_MspInit+0x220>)
 800a4ac:	64da      	str	r2, [r3, #76]	; 0x4c
 800a4ae:	4a25      	ldr	r2, [pc, #148]	; (800a544 <HAL_SPI_MspInit+0x220>)
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi5_tx.Instance = DMA2_Stream4;
 800a4b4:	4b25      	ldr	r3, [pc, #148]	; (800a54c <HAL_SPI_MspInit+0x228>)
 800a4b6:	4a26      	ldr	r2, [pc, #152]	; (800a550 <HAL_SPI_MspInit+0x22c>)
 800a4b8:	601a      	str	r2, [r3, #0]
    hdma_spi5_tx.Init.Channel = DMA_CHANNEL_2;
 800a4ba:	4b24      	ldr	r3, [pc, #144]	; (800a54c <HAL_SPI_MspInit+0x228>)
 800a4bc:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 800a4c0:	605a      	str	r2, [r3, #4]
    hdma_spi5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800a4c2:	4b22      	ldr	r3, [pc, #136]	; (800a54c <HAL_SPI_MspInit+0x228>)
 800a4c4:	2240      	movs	r2, #64	; 0x40
 800a4c6:	609a      	str	r2, [r3, #8]
    hdma_spi5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800a4c8:	4b20      	ldr	r3, [pc, #128]	; (800a54c <HAL_SPI_MspInit+0x228>)
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	60da      	str	r2, [r3, #12]
    hdma_spi5_tx.Init.MemInc = DMA_MINC_ENABLE;
 800a4ce:	4b1f      	ldr	r3, [pc, #124]	; (800a54c <HAL_SPI_MspInit+0x228>)
 800a4d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800a4d4:	611a      	str	r2, [r3, #16]
    hdma_spi5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800a4d6:	4b1d      	ldr	r3, [pc, #116]	; (800a54c <HAL_SPI_MspInit+0x228>)
 800a4d8:	2200      	movs	r2, #0
 800a4da:	615a      	str	r2, [r3, #20]
    hdma_spi5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800a4dc:	4b1b      	ldr	r3, [pc, #108]	; (800a54c <HAL_SPI_MspInit+0x228>)
 800a4de:	2200      	movs	r2, #0
 800a4e0:	619a      	str	r2, [r3, #24]
    hdma_spi5_tx.Init.Mode = DMA_NORMAL;
 800a4e2:	4b1a      	ldr	r3, [pc, #104]	; (800a54c <HAL_SPI_MspInit+0x228>)
 800a4e4:	2200      	movs	r2, #0
 800a4e6:	61da      	str	r2, [r3, #28]
    hdma_spi5_tx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800a4e8:	4b18      	ldr	r3, [pc, #96]	; (800a54c <HAL_SPI_MspInit+0x228>)
 800a4ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800a4ee:	621a      	str	r2, [r3, #32]
    hdma_spi5_tx.Init.FIFOMode = DMA_FIFOMODE_ENABLE;
 800a4f0:	4b16      	ldr	r3, [pc, #88]	; (800a54c <HAL_SPI_MspInit+0x228>)
 800a4f2:	2204      	movs	r2, #4
 800a4f4:	625a      	str	r2, [r3, #36]	; 0x24
    hdma_spi5_tx.Init.FIFOThreshold = DMA_FIFO_THRESHOLD_1QUARTERFULL;
 800a4f6:	4b15      	ldr	r3, [pc, #84]	; (800a54c <HAL_SPI_MspInit+0x228>)
 800a4f8:	2200      	movs	r2, #0
 800a4fa:	629a      	str	r2, [r3, #40]	; 0x28
    hdma_spi5_tx.Init.MemBurst = DMA_MBURST_SINGLE;
 800a4fc:	4b13      	ldr	r3, [pc, #76]	; (800a54c <HAL_SPI_MspInit+0x228>)
 800a4fe:	2200      	movs	r2, #0
 800a500:	62da      	str	r2, [r3, #44]	; 0x2c
    hdma_spi5_tx.Init.PeriphBurst = DMA_PBURST_SINGLE;
 800a502:	4b12      	ldr	r3, [pc, #72]	; (800a54c <HAL_SPI_MspInit+0x228>)
 800a504:	2200      	movs	r2, #0
 800a506:	631a      	str	r2, [r3, #48]	; 0x30
    if (HAL_DMA_Init(&hdma_spi5_tx) != HAL_OK)
 800a508:	4810      	ldr	r0, [pc, #64]	; (800a54c <HAL_SPI_MspInit+0x228>)
 800a50a:	f003 ffad 	bl	800e468 <HAL_DMA_Init>
 800a50e:	4603      	mov	r3, r0
 800a510:	2b00      	cmp	r3, #0
 800a512:	d001      	beq.n	800a518 <HAL_SPI_MspInit+0x1f4>
      Error_Handler();
 800a514:	f7fd fb36 	bl	8007b84 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi5_tx);
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	4a0c      	ldr	r2, [pc, #48]	; (800a54c <HAL_SPI_MspInit+0x228>)
 800a51c:	649a      	str	r2, [r3, #72]	; 0x48
 800a51e:	4a0b      	ldr	r2, [pc, #44]	; (800a54c <HAL_SPI_MspInit+0x228>)
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6393      	str	r3, [r2, #56]	; 0x38
}
 800a524:	bf00      	nop
 800a526:	3730      	adds	r7, #48	; 0x30
 800a528:	46bd      	mov	sp, r7
 800a52a:	bd80      	pop	{r7, pc}
 800a52c:	40003c00 	.word	0x40003c00
 800a530:	40023800 	.word	0x40023800
 800a534:	40020800 	.word	0x40020800
 800a538:	40020400 	.word	0x40020400
 800a53c:	40015000 	.word	0x40015000
 800a540:	40021400 	.word	0x40021400
 800a544:	20002100 	.word	0x20002100
 800a548:	40026458 	.word	0x40026458
 800a54c:	20002160 	.word	0x20002160
 800a550:	40026470 	.word	0x40026470

0800a554 <sFLASH_Init>:
  * @brief  Initializes the peripherals used by the SPI FLASH driver.
  * @param  None
  * @retval None
  */
void sFLASH_Init(void)
{
 800a554:	b580      	push	{r7, lr}
 800a556:	af00      	add	r7, sp, #0
  sFLASH_LowLevel_Init();
 800a558:	f000 fa1a 	bl	800a990 <sFLASH_LowLevel_Init>
    
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 800a55c:	2201      	movs	r2, #1
 800a55e:	2104      	movs	r1, #4
 800a560:	4802      	ldr	r0, [pc, #8]	; (800a56c <sFLASH_Init+0x18>)
 800a562:	f004 fd83 	bl	800f06c <HAL_GPIO_WritePin>

  /*!< SPI configuration */

}
 800a566:	bf00      	nop
 800a568:	bd80      	pop	{r7, pc}
 800a56a:	bf00      	nop
 800a56c:	40021000 	.word	0x40021000

0800a570 <sFLASH_Erase>:
	 * @param offset Flash offset to start erasing
	 * @param bytes Number of bytes to erase
	 *
	 * @return 0, or non-zero if any error.
**/
uint32_t sFLASH_Erase(uint32_t offset, uint32_t bytes){
 800a570:	b580      	push	{r7, lr}
 800a572:	b084      	sub	sp, #16
 800a574:	af00      	add	r7, sp, #0
 800a576:	6078      	str	r0, [r7, #4]
 800a578:	6039      	str	r1, [r7, #0]

		int rv = 0;
 800a57a:	2300      	movs	r3, #0
 800a57c:	60fb      	str	r3, [r7, #12]
		/* Invalid input */
		if (offset + bytes > N25Q256A_FLASH_SIZE)
 800a57e:	687a      	ldr	r2, [r7, #4]
 800a580:	683b      	ldr	r3, [r7, #0]
 800a582:	4413      	add	r3, r2
 800a584:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800a588:	d901      	bls.n	800a58e <sFLASH_Erase+0x1e>
			return 1;
 800a58a:	2301      	movs	r3, #1
 800a58c:	e033      	b.n	800a5f6 <sFLASH_Erase+0x86>
		/* Not aligned to subsector (4kb) */
		if (offset % N25Q256A_SUBSECTOR_SIZE || bytes % N25Q256A_SUBSECTOR_SIZE)
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a594:	2b00      	cmp	r3, #0
 800a596:	d104      	bne.n	800a5a2 <sFLASH_Erase+0x32>
 800a598:	683b      	ldr	r3, [r7, #0]
 800a59a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a59e:	2b00      	cmp	r3, #0
 800a5a0:	d001      	beq.n	800a5a6 <sFLASH_Erase+0x36>
			return 1;
 800a5a2:	2301      	movs	r3, #1
 800a5a4:	e027      	b.n	800a5f6 <sFLASH_Erase+0x86>
		/* Largest unit is sector (64kb) */
		if (offset % N25Q256A_SECTOR_SIZE == 0) {
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	b29b      	uxth	r3, r3
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d11c      	bne.n	800a5e8 <sFLASH_Erase+0x78>
			while (bytes != (bytes % (64 * 1024))) {
 800a5ae:	e00a      	b.n	800a5c6 <sFLASH_Erase+0x56>
				sFLASH_EraseSector(offset);
 800a5b0:	6878      	ldr	r0, [r7, #4]
 800a5b2:	f000 f825 	bl	800a600 <sFLASH_EraseSector>
				//if (rv)
				//	return rv;
				bytes -= N25Q256A_SECTOR_SIZE;
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	f5a3 3380 	sub.w	r3, r3, #65536	; 0x10000
 800a5bc:	603b      	str	r3, [r7, #0]
				offset += N25Q256A_SECTOR_SIZE;
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800a5c4:	607b      	str	r3, [r7, #4]
			while (bytes != (bytes % (64 * 1024))) {
 800a5c6:	683b      	ldr	r3, [r7, #0]
 800a5c8:	b29b      	uxth	r3, r3
 800a5ca:	683a      	ldr	r2, [r7, #0]
 800a5cc:	429a      	cmp	r2, r3
 800a5ce:	d1ef      	bne.n	800a5b0 <sFLASH_Erase+0x40>
				 */
				//watchdog_reload();
			}
		}
		/* Largest unit is sector (4kb) */
		while (bytes != (bytes % N25Q256A_SUBSECTOR_SIZE)) {
 800a5d0:	e00a      	b.n	800a5e8 <sFLASH_Erase+0x78>
			sFLASH_EraseSubSector(offset);
 800a5d2:	6878      	ldr	r0, [r7, #4]
 800a5d4:	f000 f840 	bl	800a658 <sFLASH_EraseSubSector>
			//if (rv)
			//	return rv;
			bytes -= N25Q256A_SUBSECTOR_SIZE;
 800a5d8:	683b      	ldr	r3, [r7, #0]
 800a5da:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
 800a5de:	603b      	str	r3, [r7, #0]
			offset += N25Q256A_SUBSECTOR_SIZE;
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800a5e6:	607b      	str	r3, [r7, #4]
		while (bytes != (bytes % N25Q256A_SUBSECTOR_SIZE)) {
 800a5e8:	683b      	ldr	r3, [r7, #0]
 800a5ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800a5ee:	683a      	ldr	r2, [r7, #0]
 800a5f0:	429a      	cmp	r2, r3
 800a5f2:	d1ee      	bne.n	800a5d2 <sFLASH_Erase+0x62>
		}
		return rv;
 800a5f4:	68fb      	ldr	r3, [r7, #12]



}
 800a5f6:	4618      	mov	r0, r3
 800a5f8:	3710      	adds	r7, #16
 800a5fa:	46bd      	mov	sp, r7
 800a5fc:	bd80      	pop	{r7, pc}
	...

0800a600 <sFLASH_EraseSector>:
  * @brief  Erases the specified FLASH sector.
  * @param  SectorAddr: address of the sector to erase.
  * @retval None
  */
void sFLASH_EraseSector(uint32_t SectorAddr)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b082      	sub	sp, #8
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
  /*!< Send write enable instruction */
  sFLASH_WriteEnable();
 800a608:	f000 f98c 	bl	800a924 <sFLASH_WriteEnable>

  /*!< Sector Erase */
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 800a60c:	2200      	movs	r2, #0
 800a60e:	2104      	movs	r1, #4
 800a610:	4810      	ldr	r0, [pc, #64]	; (800a654 <sFLASH_EraseSector+0x54>)
 800a612:	f004 fd2b 	bl	800f06c <HAL_GPIO_WritePin>
  /*!< Send Sector Erase instruction */
  sFLASH_SendByte(sFLASH_CMD_SE);
 800a616:	20d8      	movs	r0, #216	; 0xd8
 800a618:	f000 f96e 	bl	800a8f8 <sFLASH_SendByte>
  /*!< Send SectorAddr high nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF0000) >> 16);
 800a61c:	687b      	ldr	r3, [r7, #4]
 800a61e:	0c1b      	lsrs	r3, r3, #16
 800a620:	b2db      	uxtb	r3, r3
 800a622:	4618      	mov	r0, r3
 800a624:	f000 f968 	bl	800a8f8 <sFLASH_SendByte>
  /*!< Send SectorAddr medium nibble address byte */
  sFLASH_SendByte((SectorAddr & 0xFF00) >> 8);
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	0a1b      	lsrs	r3, r3, #8
 800a62c:	b2db      	uxtb	r3, r3
 800a62e:	4618      	mov	r0, r3
 800a630:	f000 f962 	bl	800a8f8 <sFLASH_SendByte>
  /*!< Send SectorAddr low nibble address byte */
  sFLASH_SendByte(SectorAddr & 0xFF);
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	b2db      	uxtb	r3, r3
 800a638:	4618      	mov	r0, r3
 800a63a:	f000 f95d 	bl	800a8f8 <sFLASH_SendByte>
  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 800a63e:	2201      	movs	r2, #1
 800a640:	2104      	movs	r1, #4
 800a642:	4804      	ldr	r0, [pc, #16]	; (800a654 <sFLASH_EraseSector+0x54>)
 800a644:	f004 fd12 	bl	800f06c <HAL_GPIO_WritePin>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 800a648:	f000 f980 	bl	800a94c <sFLASH_WaitForWriteEnd>
}
 800a64c:	bf00      	nop
 800a64e:	3708      	adds	r7, #8
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}
 800a654:	40021000 	.word	0x40021000

0800a658 <sFLASH_EraseSubSector>:
/**
  * @brief  Erases the specified FLASH subsector.
  * @param  SectorAddr: address of the subsector to erase.
  * @retval None
  */
void sFLASH_EraseSubSector(uint32_t SubSectorAddr){
 800a658:	b580      	push	{r7, lr}
 800a65a:	b082      	sub	sp, #8
 800a65c:	af00      	add	r7, sp, #0
 800a65e:	6078      	str	r0, [r7, #4]
	/*!< Send write enable instruction */
	  sFLASH_WriteEnable();
 800a660:	f000 f960 	bl	800a924 <sFLASH_WriteEnable>

	  /*!< Sector Erase */
	  /*!< Select the FLASH: Chip Select low */
	  sFLASH_CS_LOW();
 800a664:	2200      	movs	r2, #0
 800a666:	2104      	movs	r1, #4
 800a668:	4810      	ldr	r0, [pc, #64]	; (800a6ac <sFLASH_EraseSubSector+0x54>)
 800a66a:	f004 fcff 	bl	800f06c <HAL_GPIO_WritePin>
	  /*!< Send Sector Erase instruction */
	  sFLASH_SendByte(sFLASH_CMD_SUBSE);
 800a66e:	2020      	movs	r0, #32
 800a670:	f000 f942 	bl	800a8f8 <sFLASH_SendByte>
	  /*!< Send SectorAddr high nibble address byte */
	  sFLASH_SendByte((SubSectorAddr & 0xFF0000) >> 16);
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	0c1b      	lsrs	r3, r3, #16
 800a678:	b2db      	uxtb	r3, r3
 800a67a:	4618      	mov	r0, r3
 800a67c:	f000 f93c 	bl	800a8f8 <sFLASH_SendByte>
	  /*!< Send SectorAddr medium nibble address byte */
	  sFLASH_SendByte((SubSectorAddr & 0xFF00) >> 8);
 800a680:	687b      	ldr	r3, [r7, #4]
 800a682:	0a1b      	lsrs	r3, r3, #8
 800a684:	b2db      	uxtb	r3, r3
 800a686:	4618      	mov	r0, r3
 800a688:	f000 f936 	bl	800a8f8 <sFLASH_SendByte>
	  /*!< Send SectorAddr low nibble address byte */
	  sFLASH_SendByte(SubSectorAddr & 0xFF);
 800a68c:	687b      	ldr	r3, [r7, #4]
 800a68e:	b2db      	uxtb	r3, r3
 800a690:	4618      	mov	r0, r3
 800a692:	f000 f931 	bl	800a8f8 <sFLASH_SendByte>
	  /*!< Deselect the FLASH: Chip Select high */
	  sFLASH_CS_HIGH();
 800a696:	2201      	movs	r2, #1
 800a698:	2104      	movs	r1, #4
 800a69a:	4804      	ldr	r0, [pc, #16]	; (800a6ac <sFLASH_EraseSubSector+0x54>)
 800a69c:	f004 fce6 	bl	800f06c <HAL_GPIO_WritePin>

	  /*!< Wait the end of Flash writing */
	  sFLASH_WaitForWriteEnd();
 800a6a0:	f000 f954 	bl	800a94c <sFLASH_WaitForWriteEnd>



}
 800a6a4:	bf00      	nop
 800a6a6:	3708      	adds	r7, #8
 800a6a8:	46bd      	mov	sp, r7
 800a6aa:	bd80      	pop	{r7, pc}
 800a6ac:	40021000 	.word	0x40021000

0800a6b0 <sFLASH_WritePage>:
  * @param  NumByteToWrite: number of bytes to write to the FLASH, must be equal
  *         or less than "sFLASH_PAGESIZE" value.
  * @retval None
  */
void sFLASH_WritePage(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 800a6b0:	b580      	push	{r7, lr}
 800a6b2:	b084      	sub	sp, #16
 800a6b4:	af00      	add	r7, sp, #0
 800a6b6:	60f8      	str	r0, [r7, #12]
 800a6b8:	60b9      	str	r1, [r7, #8]
 800a6ba:	4613      	mov	r3, r2
 800a6bc:	80fb      	strh	r3, [r7, #6]
  /*!< Enable the write access to the FLASH */
  sFLASH_WriteEnable();
 800a6be:	f000 f931 	bl	800a924 <sFLASH_WriteEnable>

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 800a6c2:	2200      	movs	r2, #0
 800a6c4:	2104      	movs	r1, #4
 800a6c6:	4818      	ldr	r0, [pc, #96]	; (800a728 <sFLASH_WritePage+0x78>)
 800a6c8:	f004 fcd0 	bl	800f06c <HAL_GPIO_WritePin>
  /*!< Send "Write to Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_WRITE);
 800a6cc:	2002      	movs	r0, #2
 800a6ce:	f000 f913 	bl	800a8f8 <sFLASH_SendByte>
  /*!< Send WriteAddr high nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF0000) >> 16);
 800a6d2:	68bb      	ldr	r3, [r7, #8]
 800a6d4:	0c1b      	lsrs	r3, r3, #16
 800a6d6:	b2db      	uxtb	r3, r3
 800a6d8:	4618      	mov	r0, r3
 800a6da:	f000 f90d 	bl	800a8f8 <sFLASH_SendByte>
  /*!< Send WriteAddr medium nibble address byte to write to */
  sFLASH_SendByte((WriteAddr & 0xFF00) >> 8);
 800a6de:	68bb      	ldr	r3, [r7, #8]
 800a6e0:	0a1b      	lsrs	r3, r3, #8
 800a6e2:	b2db      	uxtb	r3, r3
 800a6e4:	4618      	mov	r0, r3
 800a6e6:	f000 f907 	bl	800a8f8 <sFLASH_SendByte>
  /*!< Send WriteAddr low nibble address byte to write to */
  sFLASH_SendByte(WriteAddr & 0xFF);
 800a6ea:	68bb      	ldr	r3, [r7, #8]
 800a6ec:	b2db      	uxtb	r3, r3
 800a6ee:	4618      	mov	r0, r3
 800a6f0:	f000 f902 	bl	800a8f8 <sFLASH_SendByte>

  /*!< while there is data to be written on the FLASH */
  while (NumByteToWrite--)
 800a6f4:	e007      	b.n	800a706 <sFLASH_WritePage+0x56>
  {
    /*!< Send the current byte */
    sFLASH_SendByte(*pBuffer);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	781b      	ldrb	r3, [r3, #0]
 800a6fa:	4618      	mov	r0, r3
 800a6fc:	f000 f8fc 	bl	800a8f8 <sFLASH_SendByte>
    /*!< Point on the next byte to be written */
    pBuffer++;
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	3301      	adds	r3, #1
 800a704:	60fb      	str	r3, [r7, #12]
  while (NumByteToWrite--)
 800a706:	88fb      	ldrh	r3, [r7, #6]
 800a708:	1e5a      	subs	r2, r3, #1
 800a70a:	80fa      	strh	r2, [r7, #6]
 800a70c:	2b00      	cmp	r3, #0
 800a70e:	d1f2      	bne.n	800a6f6 <sFLASH_WritePage+0x46>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 800a710:	2201      	movs	r2, #1
 800a712:	2104      	movs	r1, #4
 800a714:	4804      	ldr	r0, [pc, #16]	; (800a728 <sFLASH_WritePage+0x78>)
 800a716:	f004 fca9 	bl	800f06c <HAL_GPIO_WritePin>

  /*!< Wait the end of Flash writing */
  sFLASH_WaitForWriteEnd();
 800a71a:	f000 f917 	bl	800a94c <sFLASH_WaitForWriteEnd>
}
 800a71e:	bf00      	nop
 800a720:	3710      	adds	r7, #16
 800a722:	46bd      	mov	sp, r7
 800a724:	bd80      	pop	{r7, pc}
 800a726:	bf00      	nop
 800a728:	40021000 	.word	0x40021000

0800a72c <sFLASH_WriteBuffer>:
  * @param  WriteAddr: FLASH's internal address to write to.
  * @param  NumByteToWrite: number of bytes to write to the FLASH.
  * @retval None
  */
void sFLASH_WriteBuffer(uint8_t* pBuffer, uint32_t WriteAddr, uint16_t NumByteToWrite)
{
 800a72c:	b580      	push	{r7, lr}
 800a72e:	b086      	sub	sp, #24
 800a730:	af00      	add	r7, sp, #0
 800a732:	60f8      	str	r0, [r7, #12]
 800a734:	60b9      	str	r1, [r7, #8]
 800a736:	4613      	mov	r3, r2
 800a738:	80fb      	strh	r3, [r7, #6]
  uint8_t NumOfPage = 0, NumOfSingle = 0, Addr = 0, count = 0, temp = 0;
 800a73a:	2300      	movs	r3, #0
 800a73c:	75fb      	strb	r3, [r7, #23]
 800a73e:	2300      	movs	r3, #0
 800a740:	75bb      	strb	r3, [r7, #22]
 800a742:	2300      	movs	r3, #0
 800a744:	757b      	strb	r3, [r7, #21]
 800a746:	2300      	movs	r3, #0
 800a748:	753b      	strb	r3, [r7, #20]
 800a74a:	2300      	movs	r3, #0
 800a74c:	74fb      	strb	r3, [r7, #19]

  Addr = WriteAddr % sFLASH_SPI_PAGESIZE;
 800a74e:	68bb      	ldr	r3, [r7, #8]
 800a750:	757b      	strb	r3, [r7, #21]
  count = sFLASH_SPI_PAGESIZE - Addr;
 800a752:	7d7b      	ldrb	r3, [r7, #21]
 800a754:	425b      	negs	r3, r3
 800a756:	753b      	strb	r3, [r7, #20]
  NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 800a758:	88fb      	ldrh	r3, [r7, #6]
 800a75a:	0a1b      	lsrs	r3, r3, #8
 800a75c:	b29b      	uxth	r3, r3
 800a75e:	75fb      	strb	r3, [r7, #23]
  NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 800a760:	88fb      	ldrh	r3, [r7, #6]
 800a762:	75bb      	strb	r3, [r7, #22]

  if (Addr == 0) /*!< WriteAddr is sFLASH_PAGESIZE aligned  */
 800a764:	7d7b      	ldrb	r3, [r7, #21]
 800a766:	2b00      	cmp	r3, #0
 800a768:	d124      	bne.n	800a7b4 <sFLASH_WriteBuffer+0x88>
  {
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 800a76a:	7dfb      	ldrb	r3, [r7, #23]
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d114      	bne.n	800a79a <sFLASH_WriteBuffer+0x6e>
    {
      sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 800a770:	88fb      	ldrh	r3, [r7, #6]
 800a772:	461a      	mov	r2, r3
 800a774:	68b9      	ldr	r1, [r7, #8]
 800a776:	68f8      	ldr	r0, [r7, #12]
 800a778:	f7ff ff9a 	bl	800a6b0 <sFLASH_WritePage>
      {
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
      }
    }
  }
}
 800a77c:	e07b      	b.n	800a876 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 800a77e:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a782:	68b9      	ldr	r1, [r7, #8]
 800a784:	68f8      	ldr	r0, [r7, #12]
 800a786:	f7ff ff93 	bl	800a6b0 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a790:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 800a792:	68fb      	ldr	r3, [r7, #12]
 800a794:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a798:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 800a79a:	7dfb      	ldrb	r3, [r7, #23]
 800a79c:	1e5a      	subs	r2, r3, #1
 800a79e:	75fa      	strb	r2, [r7, #23]
 800a7a0:	2b00      	cmp	r3, #0
 800a7a2:	d1ec      	bne.n	800a77e <sFLASH_WriteBuffer+0x52>
      sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 800a7a4:	7dbb      	ldrb	r3, [r7, #22]
 800a7a6:	b29b      	uxth	r3, r3
 800a7a8:	461a      	mov	r2, r3
 800a7aa:	68b9      	ldr	r1, [r7, #8]
 800a7ac:	68f8      	ldr	r0, [r7, #12]
 800a7ae:	f7ff ff7f 	bl	800a6b0 <sFLASH_WritePage>
}
 800a7b2:	e060      	b.n	800a876 <sFLASH_WriteBuffer+0x14a>
    if (NumOfPage == 0) /*!< NumByteToWrite < sFLASH_PAGESIZE */
 800a7b4:	7dfb      	ldrb	r3, [r7, #23]
 800a7b6:	2b00      	cmp	r3, #0
 800a7b8:	d125      	bne.n	800a806 <sFLASH_WriteBuffer+0xda>
      if (NumOfSingle > count) /*!< (NumByteToWrite + WriteAddr) > sFLASH_PAGESIZE */
 800a7ba:	7dba      	ldrb	r2, [r7, #22]
 800a7bc:	7d3b      	ldrb	r3, [r7, #20]
 800a7be:	429a      	cmp	r2, r3
 800a7c0:	d91a      	bls.n	800a7f8 <sFLASH_WriteBuffer+0xcc>
        temp = NumOfSingle - count;
 800a7c2:	7dba      	ldrb	r2, [r7, #22]
 800a7c4:	7d3b      	ldrb	r3, [r7, #20]
 800a7c6:	1ad3      	subs	r3, r2, r3
 800a7c8:	74fb      	strb	r3, [r7, #19]
        sFLASH_WritePage(pBuffer, WriteAddr, count);
 800a7ca:	7d3b      	ldrb	r3, [r7, #20]
 800a7cc:	b29b      	uxth	r3, r3
 800a7ce:	461a      	mov	r2, r3
 800a7d0:	68b9      	ldr	r1, [r7, #8]
 800a7d2:	68f8      	ldr	r0, [r7, #12]
 800a7d4:	f7ff ff6c 	bl	800a6b0 <sFLASH_WritePage>
        WriteAddr +=  count;
 800a7d8:	7d3b      	ldrb	r3, [r7, #20]
 800a7da:	68ba      	ldr	r2, [r7, #8]
 800a7dc:	4413      	add	r3, r2
 800a7de:	60bb      	str	r3, [r7, #8]
        pBuffer += count;
 800a7e0:	7d3b      	ldrb	r3, [r7, #20]
 800a7e2:	68fa      	ldr	r2, [r7, #12]
 800a7e4:	4413      	add	r3, r2
 800a7e6:	60fb      	str	r3, [r7, #12]
        sFLASH_WritePage(pBuffer, WriteAddr, temp);
 800a7e8:	7cfb      	ldrb	r3, [r7, #19]
 800a7ea:	b29b      	uxth	r3, r3
 800a7ec:	461a      	mov	r2, r3
 800a7ee:	68b9      	ldr	r1, [r7, #8]
 800a7f0:	68f8      	ldr	r0, [r7, #12]
 800a7f2:	f7ff ff5d 	bl	800a6b0 <sFLASH_WritePage>
}
 800a7f6:	e03e      	b.n	800a876 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumByteToWrite);
 800a7f8:	88fb      	ldrh	r3, [r7, #6]
 800a7fa:	461a      	mov	r2, r3
 800a7fc:	68b9      	ldr	r1, [r7, #8]
 800a7fe:	68f8      	ldr	r0, [r7, #12]
 800a800:	f7ff ff56 	bl	800a6b0 <sFLASH_WritePage>
}
 800a804:	e037      	b.n	800a876 <sFLASH_WriteBuffer+0x14a>
      NumByteToWrite -= count;
 800a806:	7d3b      	ldrb	r3, [r7, #20]
 800a808:	b29b      	uxth	r3, r3
 800a80a:	88fa      	ldrh	r2, [r7, #6]
 800a80c:	1ad3      	subs	r3, r2, r3
 800a80e:	80fb      	strh	r3, [r7, #6]
      NumOfPage =  NumByteToWrite / sFLASH_SPI_PAGESIZE;
 800a810:	88fb      	ldrh	r3, [r7, #6]
 800a812:	0a1b      	lsrs	r3, r3, #8
 800a814:	b29b      	uxth	r3, r3
 800a816:	75fb      	strb	r3, [r7, #23]
      NumOfSingle = NumByteToWrite % sFLASH_SPI_PAGESIZE;
 800a818:	88fb      	ldrh	r3, [r7, #6]
 800a81a:	75bb      	strb	r3, [r7, #22]
      sFLASH_WritePage(pBuffer, WriteAddr, count);
 800a81c:	7d3b      	ldrb	r3, [r7, #20]
 800a81e:	b29b      	uxth	r3, r3
 800a820:	461a      	mov	r2, r3
 800a822:	68b9      	ldr	r1, [r7, #8]
 800a824:	68f8      	ldr	r0, [r7, #12]
 800a826:	f7ff ff43 	bl	800a6b0 <sFLASH_WritePage>
      WriteAddr +=  count;
 800a82a:	7d3b      	ldrb	r3, [r7, #20]
 800a82c:	68ba      	ldr	r2, [r7, #8]
 800a82e:	4413      	add	r3, r2
 800a830:	60bb      	str	r3, [r7, #8]
      pBuffer += count;
 800a832:	7d3b      	ldrb	r3, [r7, #20]
 800a834:	68fa      	ldr	r2, [r7, #12]
 800a836:	4413      	add	r3, r2
 800a838:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 800a83a:	e00d      	b.n	800a858 <sFLASH_WriteBuffer+0x12c>
        sFLASH_WritePage(pBuffer, WriteAddr, sFLASH_SPI_PAGESIZE);
 800a83c:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a840:	68b9      	ldr	r1, [r7, #8]
 800a842:	68f8      	ldr	r0, [r7, #12]
 800a844:	f7ff ff34 	bl	800a6b0 <sFLASH_WritePage>
        WriteAddr +=  sFLASH_SPI_PAGESIZE;
 800a848:	68bb      	ldr	r3, [r7, #8]
 800a84a:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a84e:	60bb      	str	r3, [r7, #8]
        pBuffer += sFLASH_SPI_PAGESIZE;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	f503 7380 	add.w	r3, r3, #256	; 0x100
 800a856:	60fb      	str	r3, [r7, #12]
      while (NumOfPage--)
 800a858:	7dfb      	ldrb	r3, [r7, #23]
 800a85a:	1e5a      	subs	r2, r3, #1
 800a85c:	75fa      	strb	r2, [r7, #23]
 800a85e:	2b00      	cmp	r3, #0
 800a860:	d1ec      	bne.n	800a83c <sFLASH_WriteBuffer+0x110>
      if (NumOfSingle != 0)
 800a862:	7dbb      	ldrb	r3, [r7, #22]
 800a864:	2b00      	cmp	r3, #0
 800a866:	d006      	beq.n	800a876 <sFLASH_WriteBuffer+0x14a>
        sFLASH_WritePage(pBuffer, WriteAddr, NumOfSingle);
 800a868:	7dbb      	ldrb	r3, [r7, #22]
 800a86a:	b29b      	uxth	r3, r3
 800a86c:	461a      	mov	r2, r3
 800a86e:	68b9      	ldr	r1, [r7, #8]
 800a870:	68f8      	ldr	r0, [r7, #12]
 800a872:	f7ff ff1d 	bl	800a6b0 <sFLASH_WritePage>
}
 800a876:	bf00      	nop
 800a878:	3718      	adds	r7, #24
 800a87a:	46bd      	mov	sp, r7
 800a87c:	bd80      	pop	{r7, pc}
	...

0800a880 <sFLASH_ReadBuffer>:
  * @param  ReadAddr: FLASH's internal address to read from.
  * @param  NumByteToRead: number of bytes to read from the FLASH.
  * @retval None
  */
void sFLASH_ReadBuffer(uint8_t* pBuffer, uint32_t ReadAddr, uint16_t NumByteToRead)
{
 800a880:	b580      	push	{r7, lr}
 800a882:	b084      	sub	sp, #16
 800a884:	af00      	add	r7, sp, #0
 800a886:	60f8      	str	r0, [r7, #12]
 800a888:	60b9      	str	r1, [r7, #8]
 800a88a:	4613      	mov	r3, r2
 800a88c:	80fb      	strh	r3, [r7, #6]
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 800a88e:	2200      	movs	r2, #0
 800a890:	2104      	movs	r1, #4
 800a892:	4818      	ldr	r0, [pc, #96]	; (800a8f4 <sFLASH_ReadBuffer+0x74>)
 800a894:	f004 fbea 	bl	800f06c <HAL_GPIO_WritePin>

  /*!< Send "Read from Memory " instruction */
  sFLASH_SendByte(sFLASH_CMD_READ);
 800a898:	2003      	movs	r0, #3
 800a89a:	f000 f82d 	bl	800a8f8 <sFLASH_SendByte>

  /*!< Send ReadAddr high nibble address byte to read from */
  sFLASH_SendByte((ReadAddr & 0xFF0000) >> 16);
 800a89e:	68bb      	ldr	r3, [r7, #8]
 800a8a0:	0c1b      	lsrs	r3, r3, #16
 800a8a2:	b2db      	uxtb	r3, r3
 800a8a4:	4618      	mov	r0, r3
 800a8a6:	f000 f827 	bl	800a8f8 <sFLASH_SendByte>
  /*!< Send ReadAddr medium nibble address byte to read from */
  sFLASH_SendByte((ReadAddr& 0xFF00) >> 8);
 800a8aa:	68bb      	ldr	r3, [r7, #8]
 800a8ac:	0a1b      	lsrs	r3, r3, #8
 800a8ae:	b2db      	uxtb	r3, r3
 800a8b0:	4618      	mov	r0, r3
 800a8b2:	f000 f821 	bl	800a8f8 <sFLASH_SendByte>
  /*!< Send ReadAddr low nibble address byte to read from */
  sFLASH_SendByte(ReadAddr & 0xFF);
 800a8b6:	68bb      	ldr	r3, [r7, #8]
 800a8b8:	b2db      	uxtb	r3, r3
 800a8ba:	4618      	mov	r0, r3
 800a8bc:	f000 f81c 	bl	800a8f8 <sFLASH_SendByte>

  while (NumByteToRead--) /*!< while there is data to be read */
 800a8c0:	e009      	b.n	800a8d6 <sFLASH_ReadBuffer+0x56>
  {
    /*!< Read a byte from the FLASH */
    *pBuffer = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
 800a8c2:	20ff      	movs	r0, #255	; 0xff
 800a8c4:	f000 f818 	bl	800a8f8 <sFLASH_SendByte>
 800a8c8:	4603      	mov	r3, r0
 800a8ca:	461a      	mov	r2, r3
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	701a      	strb	r2, [r3, #0]
    /*!< Point to the next location where the byte read will be saved */
    pBuffer++;
 800a8d0:	68fb      	ldr	r3, [r7, #12]
 800a8d2:	3301      	adds	r3, #1
 800a8d4:	60fb      	str	r3, [r7, #12]
  while (NumByteToRead--) /*!< while there is data to be read */
 800a8d6:	88fb      	ldrh	r3, [r7, #6]
 800a8d8:	1e5a      	subs	r2, r3, #1
 800a8da:	80fa      	strh	r2, [r7, #6]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d1f0      	bne.n	800a8c2 <sFLASH_ReadBuffer+0x42>
  }

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 800a8e0:	2201      	movs	r2, #1
 800a8e2:	2104      	movs	r1, #4
 800a8e4:	4803      	ldr	r0, [pc, #12]	; (800a8f4 <sFLASH_ReadBuffer+0x74>)
 800a8e6:	f004 fbc1 	bl	800f06c <HAL_GPIO_WritePin>
}
 800a8ea:	bf00      	nop
 800a8ec:	3710      	adds	r7, #16
 800a8ee:	46bd      	mov	sp, r7
 800a8f0:	bd80      	pop	{r7, pc}
 800a8f2:	bf00      	nop
 800a8f4:	40021000 	.word	0x40021000

0800a8f8 <sFLASH_SendByte>:
  *         from the SPI bus.
  * @param  byte: byte to send.
  * @retval The value of the received byte.
  */
uint8_t sFLASH_SendByte(uint8_t byte)
{
 800a8f8:	b580      	push	{r7, lr}
 800a8fa:	b086      	sub	sp, #24
 800a8fc:	af02      	add	r7, sp, #8
 800a8fe:	4603      	mov	r3, r0
 800a900:	71fb      	strb	r3, [r7, #7]
	uint8_t recv;
  HAL_SPI_TransmitReceive(&hspi5,&byte,&recv,1,100);
 800a902:	f107 020f 	add.w	r2, r7, #15
 800a906:	1df9      	adds	r1, r7, #7
 800a908:	2364      	movs	r3, #100	; 0x64
 800a90a:	9300      	str	r3, [sp, #0]
 800a90c:	2301      	movs	r3, #1
 800a90e:	4804      	ldr	r0, [pc, #16]	; (800a920 <sFLASH_SendByte+0x28>)
 800a910:	f006 ffb1 	bl	8011876 <HAL_SPI_TransmitReceive>
  /*!< Return the byte read from the SPI bus */
  return recv;
 800a914:	7bfb      	ldrb	r3, [r7, #15]
}
 800a916:	4618      	mov	r0, r3
 800a918:	3710      	adds	r7, #16
 800a91a:	46bd      	mov	sp, r7
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	bf00      	nop
 800a920:	200020a8 	.word	0x200020a8

0800a924 <sFLASH_WriteEnable>:
  * @brief  Enables the write access to the FLASH.
  * @param  None
  * @retval None
  */
void sFLASH_WriteEnable(void)
{
 800a924:	b580      	push	{r7, lr}
 800a926:	af00      	add	r7, sp, #0
  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 800a928:	2200      	movs	r2, #0
 800a92a:	2104      	movs	r1, #4
 800a92c:	4806      	ldr	r0, [pc, #24]	; (800a948 <sFLASH_WriteEnable+0x24>)
 800a92e:	f004 fb9d 	bl	800f06c <HAL_GPIO_WritePin>

  /*!< Send "Write Enable" instruction */
  sFLASH_SendByte(sFLASH_CMD_WREN);
 800a932:	2006      	movs	r0, #6
 800a934:	f7ff ffe0 	bl	800a8f8 <sFLASH_SendByte>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 800a938:	2201      	movs	r2, #1
 800a93a:	2104      	movs	r1, #4
 800a93c:	4802      	ldr	r0, [pc, #8]	; (800a948 <sFLASH_WriteEnable+0x24>)
 800a93e:	f004 fb95 	bl	800f06c <HAL_GPIO_WritePin>
}
 800a942:	bf00      	nop
 800a944:	bd80      	pop	{r7, pc}
 800a946:	bf00      	nop
 800a948:	40021000 	.word	0x40021000

0800a94c <sFLASH_WaitForWriteEnd>:
  *         status register and loop until write opertaion has completed.
  * @param  None
  * @retval None
  */
void sFLASH_WaitForWriteEnd(void)
{
 800a94c:	b580      	push	{r7, lr}
 800a94e:	b082      	sub	sp, #8
 800a950:	af00      	add	r7, sp, #0
  uint8_t flashstatus = 0;
 800a952:	2300      	movs	r3, #0
 800a954:	71fb      	strb	r3, [r7, #7]

  /*!< Select the FLASH: Chip Select low */
  sFLASH_CS_LOW();
 800a956:	2200      	movs	r2, #0
 800a958:	2104      	movs	r1, #4
 800a95a:	480c      	ldr	r0, [pc, #48]	; (800a98c <sFLASH_WaitForWriteEnd+0x40>)
 800a95c:	f004 fb86 	bl	800f06c <HAL_GPIO_WritePin>

  /*!< Send "Read Status Register" instruction */
  sFLASH_SendByte(sFLASH_CMD_RDSR);
 800a960:	2005      	movs	r0, #5
 800a962:	f7ff ffc9 	bl	800a8f8 <sFLASH_SendByte>
  /*!< Loop as long as the memory is busy with a write cycle */
  do
  {
    /*!< Send a dummy byte to generate the clock needed by the FLASH
    and put the value of the status register in FLASH_Status variable */
    flashstatus = sFLASH_SendByte(sFLASH_DUMMY_BYTE);
 800a966:	20ff      	movs	r0, #255	; 0xff
 800a968:	f7ff ffc6 	bl	800a8f8 <sFLASH_SendByte>
 800a96c:	4603      	mov	r3, r0
 800a96e:	71fb      	strb	r3, [r7, #7]

  }
  while ((flashstatus & sFLASH_WIP_FLAG) == SET); /* Write in progress */
 800a970:	79fb      	ldrb	r3, [r7, #7]
 800a972:	f003 0301 	and.w	r3, r3, #1
 800a976:	2b00      	cmp	r3, #0
 800a978:	d1f5      	bne.n	800a966 <sFLASH_WaitForWriteEnd+0x1a>

  /*!< Deselect the FLASH: Chip Select high */
  sFLASH_CS_HIGH();
 800a97a:	2201      	movs	r2, #1
 800a97c:	2104      	movs	r1, #4
 800a97e:	4803      	ldr	r0, [pc, #12]	; (800a98c <sFLASH_WaitForWriteEnd+0x40>)
 800a980:	f004 fb74 	bl	800f06c <HAL_GPIO_WritePin>
}
 800a984:	bf00      	nop
 800a986:	3708      	adds	r7, #8
 800a988:	46bd      	mov	sp, r7
 800a98a:	bd80      	pop	{r7, pc}
 800a98c:	40021000 	.word	0x40021000

0800a990 <sFLASH_LowLevel_Init>:
  * @brief  Initializes the peripherals used by the SPI FLASH driver.
  * @param  None
  * @retval None
  */
void sFLASH_LowLevel_Init(void)
{
 800a990:	b480      	push	{r7}
 800a992:	af00      	add	r7, sp, #0
  
}
 800a994:	bf00      	nop
 800a996:	46bd      	mov	sp, r7
 800a998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a99c:	4770      	bx	lr

0800a99e <spiffs_cache_page_get>:
#include "spiffs_nucleus.h"

#if SPIFFS_CACHE

// returns cached page for give page index, or null if no such cached page
static spiffs_cache_page *spiffs_cache_page_get(spiffs *fs, spiffs_page_ix pix) {
 800a99e:	b480      	push	{r7}
 800a9a0:	b087      	sub	sp, #28
 800a9a2:	af00      	add	r7, sp, #0
 800a9a4:	6078      	str	r0, [r7, #4]
 800a9a6:	460b      	mov	r3, r1
 800a9a8:	807b      	strh	r3, [r7, #2]
  spiffs_cache *cache = spiffs_get_cache(fs);
 800a9aa:	687b      	ldr	r3, [r7, #4]
 800a9ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800a9ae:	613b      	str	r3, [r7, #16]
  if ((cache->cpage_use_map & cache->cpage_use_mask) == 0) return 0;
 800a9b0:	693b      	ldr	r3, [r7, #16]
 800a9b2:	689a      	ldr	r2, [r3, #8]
 800a9b4:	693b      	ldr	r3, [r7, #16]
 800a9b6:	68db      	ldr	r3, [r3, #12]
 800a9b8:	4013      	ands	r3, r2
 800a9ba:	2b00      	cmp	r3, #0
 800a9bc:	d101      	bne.n	800a9c2 <spiffs_cache_page_get+0x24>
 800a9be:	2300      	movs	r3, #0
 800a9c0:	e02f      	b.n	800aa22 <spiffs_cache_page_get+0x84>
  int i;
  for (i = 0; i < cache->cpage_count; i++) {
 800a9c2:	2300      	movs	r3, #0
 800a9c4:	617b      	str	r3, [r7, #20]
 800a9c6:	e025      	b.n	800aa14 <spiffs_cache_page_get+0x76>
    spiffs_cache_page *cp = spiffs_get_cache_page_hdr(fs, cache, i);
 800a9c8:	693b      	ldr	r3, [r7, #16]
 800a9ca:	691a      	ldr	r2, [r3, #16]
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	69db      	ldr	r3, [r3, #28]
 800a9d0:	3314      	adds	r3, #20
 800a9d2:	6979      	ldr	r1, [r7, #20]
 800a9d4:	fb01 f303 	mul.w	r3, r1, r3
 800a9d8:	4413      	add	r3, r2
 800a9da:	60fb      	str	r3, [r7, #12]
    if ((cache->cpage_use_map & (1<<i)) &&
 800a9dc:	693b      	ldr	r3, [r7, #16]
 800a9de:	689b      	ldr	r3, [r3, #8]
 800a9e0:	2101      	movs	r1, #1
 800a9e2:	697a      	ldr	r2, [r7, #20]
 800a9e4:	fa01 f202 	lsl.w	r2, r1, r2
 800a9e8:	4013      	ands	r3, r2
 800a9ea:	2b00      	cmp	r3, #0
 800a9ec:	d00f      	beq.n	800aa0e <spiffs_cache_page_get+0x70>
        (cp->flags & SPIFFS_CACHE_FLAG_TYPE_WR) == 0 &&
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	781b      	ldrb	r3, [r3, #0]
 800a9f2:	b25b      	sxtb	r3, r3
    if ((cache->cpage_use_map & (1<<i)) &&
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	db0a      	blt.n	800aa0e <spiffs_cache_page_get+0x70>
        cp->pix == pix ) {
 800a9f8:	68fb      	ldr	r3, [r7, #12]
 800a9fa:	891b      	ldrh	r3, [r3, #8]
        (cp->flags & SPIFFS_CACHE_FLAG_TYPE_WR) == 0 &&
 800a9fc:	887a      	ldrh	r2, [r7, #2]
 800a9fe:	429a      	cmp	r2, r3
 800aa00:	d105      	bne.n	800aa0e <spiffs_cache_page_get+0x70>
      //SPIFFS_CACHE_DBG("CACHE_GET: have cache page "_SPIPRIi" for "_SPIPRIpg"\n", i, pix);
      cp->last_access = cache->last_access;
 800aa02:	693b      	ldr	r3, [r7, #16]
 800aa04:	685a      	ldr	r2, [r3, #4]
 800aa06:	68fb      	ldr	r3, [r7, #12]
 800aa08:	605a      	str	r2, [r3, #4]
      return cp;
 800aa0a:	68fb      	ldr	r3, [r7, #12]
 800aa0c:	e009      	b.n	800aa22 <spiffs_cache_page_get+0x84>
  for (i = 0; i < cache->cpage_count; i++) {
 800aa0e:	697b      	ldr	r3, [r7, #20]
 800aa10:	3301      	adds	r3, #1
 800aa12:	617b      	str	r3, [r7, #20]
 800aa14:	693b      	ldr	r3, [r7, #16]
 800aa16:	781b      	ldrb	r3, [r3, #0]
 800aa18:	461a      	mov	r2, r3
 800aa1a:	697b      	ldr	r3, [r7, #20]
 800aa1c:	4293      	cmp	r3, r2
 800aa1e:	dbd3      	blt.n	800a9c8 <spiffs_cache_page_get+0x2a>
    }
  }
  //SPIFFS_CACHE_DBG("CACHE_GET: no cache for "_SPIPRIpg"\n", pix);
  return 0;
 800aa20:	2300      	movs	r3, #0
}
 800aa22:	4618      	mov	r0, r3
 800aa24:	371c      	adds	r7, #28
 800aa26:	46bd      	mov	sp, r7
 800aa28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa2c:	4770      	bx	lr

0800aa2e <spiffs_cache_page_free>:

// frees cached page
static s32_t spiffs_cache_page_free(spiffs *fs, int ix, u8_t write_back) {
 800aa2e:	b580      	push	{r7, lr}
 800aa30:	b088      	sub	sp, #32
 800aa32:	af00      	add	r7, sp, #0
 800aa34:	60f8      	str	r0, [r7, #12]
 800aa36:	60b9      	str	r1, [r7, #8]
 800aa38:	4613      	mov	r3, r2
 800aa3a:	71fb      	strb	r3, [r7, #7]
  s32_t res = SPIFFS_OK;
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	61fb      	str	r3, [r7, #28]
  spiffs_cache *cache = spiffs_get_cache(fs);
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aa44:	61bb      	str	r3, [r7, #24]
  spiffs_cache_page *cp = spiffs_get_cache_page_hdr(fs, cache, ix);
 800aa46:	69bb      	ldr	r3, [r7, #24]
 800aa48:	691a      	ldr	r2, [r3, #16]
 800aa4a:	68fb      	ldr	r3, [r7, #12]
 800aa4c:	69db      	ldr	r3, [r3, #28]
 800aa4e:	3314      	adds	r3, #20
 800aa50:	68b9      	ldr	r1, [r7, #8]
 800aa52:	fb01 f303 	mul.w	r3, r1, r3
 800aa56:	4413      	add	r3, r2
 800aa58:	617b      	str	r3, [r7, #20]
  if (cache->cpage_use_map & (1<<ix)) {
 800aa5a:	69bb      	ldr	r3, [r7, #24]
 800aa5c:	689b      	ldr	r3, [r3, #8]
 800aa5e:	2101      	movs	r1, #1
 800aa60:	68ba      	ldr	r2, [r7, #8]
 800aa62:	fa01 f202 	lsl.w	r2, r1, r2
 800aa66:	4013      	ands	r3, r2
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d036      	beq.n	800aada <spiffs_cache_page_free+0xac>
    if (write_back &&
 800aa6c:	79fb      	ldrb	r3, [r7, #7]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d026      	beq.n	800aac0 <spiffs_cache_page_free+0x92>
        (cp->flags & SPIFFS_CACHE_FLAG_TYPE_WR) == 0 &&
 800aa72:	697b      	ldr	r3, [r7, #20]
 800aa74:	781b      	ldrb	r3, [r3, #0]
 800aa76:	b25b      	sxtb	r3, r3
    if (write_back &&
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	db21      	blt.n	800aac0 <spiffs_cache_page_free+0x92>
        (cp->flags & SPIFFS_CACHE_FLAG_DIRTY)) {
 800aa7c:	697b      	ldr	r3, [r7, #20]
 800aa7e:	781b      	ldrb	r3, [r3, #0]
 800aa80:	f003 0301 	and.w	r3, r3, #1
        (cp->flags & SPIFFS_CACHE_FLAG_TYPE_WR) == 0 &&
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d01b      	beq.n	800aac0 <spiffs_cache_page_free+0x92>
      u8_t *mem =  spiffs_get_cache_page(fs, cache, ix);
 800aa88:	69bb      	ldr	r3, [r7, #24]
 800aa8a:	691a      	ldr	r2, [r3, #16]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	69db      	ldr	r3, [r3, #28]
 800aa90:	3314      	adds	r3, #20
 800aa92:	68b9      	ldr	r1, [r7, #8]
 800aa94:	fb01 f303 	mul.w	r3, r1, r3
 800aa98:	3314      	adds	r3, #20
 800aa9a:	4413      	add	r3, r2
 800aa9c:	613b      	str	r3, [r7, #16]
      SPIFFS_CACHE_DBG("CACHE_FREE: write cache page "_SPIPRIi" pix "_SPIPRIpg"\n", ix, cp->pix);
      res = SPIFFS_HAL_WRITE(fs, SPIFFS_PAGE_TO_PADDR(fs, cp->pix), SPIFFS_CFG_LOG_PAGE_SZ(fs), mem);
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	685b      	ldr	r3, [r3, #4]
 800aaa2:	68fa      	ldr	r2, [r7, #12]
 800aaa4:	6911      	ldr	r1, [r2, #16]
 800aaa6:	697a      	ldr	r2, [r7, #20]
 800aaa8:	8912      	ldrh	r2, [r2, #8]
 800aaaa:	4610      	mov	r0, r2
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	69d2      	ldr	r2, [r2, #28]
 800aab0:	fb00 f202 	mul.w	r2, r0, r2
 800aab4:	1888      	adds	r0, r1, r2
 800aab6:	68fa      	ldr	r2, [r7, #12]
 800aab8:	69d1      	ldr	r1, [r2, #28]
 800aaba:	693a      	ldr	r2, [r7, #16]
 800aabc:	4798      	blx	r3
 800aabe:	61f8      	str	r0, [r7, #28]
    } else
#endif
    {
      SPIFFS_CACHE_DBG("CACHE_FREE: free cache page "_SPIPRIi" pix "_SPIPRIpg"\n", ix, cp->pix);
    }
    cache->cpage_use_map &= ~(1 << ix);
 800aac0:	69bb      	ldr	r3, [r7, #24]
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	2101      	movs	r1, #1
 800aac6:	68ba      	ldr	r2, [r7, #8]
 800aac8:	fa01 f202 	lsl.w	r2, r1, r2
 800aacc:	43d2      	mvns	r2, r2
 800aace:	401a      	ands	r2, r3
 800aad0:	69bb      	ldr	r3, [r7, #24]
 800aad2:	609a      	str	r2, [r3, #8]
    cp->flags = 0;
 800aad4:	697b      	ldr	r3, [r7, #20]
 800aad6:	2200      	movs	r2, #0
 800aad8:	701a      	strb	r2, [r3, #0]
  }

  return res;
 800aada:	69fb      	ldr	r3, [r7, #28]
}
 800aadc:	4618      	mov	r0, r3
 800aade:	3720      	adds	r7, #32
 800aae0:	46bd      	mov	sp, r7
 800aae2:	bd80      	pop	{r7, pc}

0800aae4 <spiffs_cache_page_remove_oldest>:

// removes the oldest accessed cached page
static s32_t spiffs_cache_page_remove_oldest(spiffs *fs, u8_t flag_mask, u8_t flags) {
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b088      	sub	sp, #32
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
 800aaec:	460b      	mov	r3, r1
 800aaee:	70fb      	strb	r3, [r7, #3]
 800aaf0:	4613      	mov	r3, r2
 800aaf2:	70bb      	strb	r3, [r7, #2]
  s32_t res = SPIFFS_OK;
 800aaf4:	2300      	movs	r3, #0
 800aaf6:	61fb      	str	r3, [r7, #28]
  spiffs_cache *cache = spiffs_get_cache(fs);
 800aaf8:	687b      	ldr	r3, [r7, #4]
 800aafa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aafc:	60fb      	str	r3, [r7, #12]

  if ((cache->cpage_use_map & cache->cpage_use_mask) != cache->cpage_use_mask) {
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	689a      	ldr	r2, [r3, #8]
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	401a      	ands	r2, r3
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	68db      	ldr	r3, [r3, #12]
 800ab0c:	429a      	cmp	r2, r3
 800ab0e:	d001      	beq.n	800ab14 <spiffs_cache_page_remove_oldest+0x30>
    // at least one free cpage
    return SPIFFS_OK;
 800ab10:	2300      	movs	r3, #0
 800ab12:	e03c      	b.n	800ab8e <spiffs_cache_page_remove_oldest+0xaa>
  }

  // all busy, scan thru all to find the cpage which has oldest access
  int i;
  int cand_ix = -1;
 800ab14:	f04f 33ff 	mov.w	r3, #4294967295
 800ab18:	617b      	str	r3, [r7, #20]
  u32_t oldest_val = 0;
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	613b      	str	r3, [r7, #16]
  for (i = 0; i < cache->cpage_count; i++) {
 800ab1e:	2300      	movs	r3, #0
 800ab20:	61bb      	str	r3, [r7, #24]
 800ab22:	e024      	b.n	800ab6e <spiffs_cache_page_remove_oldest+0x8a>
    spiffs_cache_page *cp = spiffs_get_cache_page_hdr(fs, cache, i);
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	691a      	ldr	r2, [r3, #16]
 800ab28:	687b      	ldr	r3, [r7, #4]
 800ab2a:	69db      	ldr	r3, [r3, #28]
 800ab2c:	3314      	adds	r3, #20
 800ab2e:	69b9      	ldr	r1, [r7, #24]
 800ab30:	fb01 f303 	mul.w	r3, r1, r3
 800ab34:	4413      	add	r3, r2
 800ab36:	60bb      	str	r3, [r7, #8]
    if ((cache->last_access - cp->last_access) > oldest_val &&
 800ab38:	68fb      	ldr	r3, [r7, #12]
 800ab3a:	685a      	ldr	r2, [r3, #4]
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	1ad3      	subs	r3, r2, r3
 800ab42:	693a      	ldr	r2, [r7, #16]
 800ab44:	429a      	cmp	r2, r3
 800ab46:	d20f      	bcs.n	800ab68 <spiffs_cache_page_remove_oldest+0x84>
        (cp->flags & flag_mask) == flags) {
 800ab48:	68bb      	ldr	r3, [r7, #8]
 800ab4a:	781a      	ldrb	r2, [r3, #0]
 800ab4c:	78fb      	ldrb	r3, [r7, #3]
 800ab4e:	4013      	ands	r3, r2
 800ab50:	b2db      	uxtb	r3, r3
    if ((cache->last_access - cp->last_access) > oldest_val &&
 800ab52:	78ba      	ldrb	r2, [r7, #2]
 800ab54:	429a      	cmp	r2, r3
 800ab56:	d107      	bne.n	800ab68 <spiffs_cache_page_remove_oldest+0x84>
      oldest_val = cache->last_access - cp->last_access;
 800ab58:	68fb      	ldr	r3, [r7, #12]
 800ab5a:	685a      	ldr	r2, [r3, #4]
 800ab5c:	68bb      	ldr	r3, [r7, #8]
 800ab5e:	685b      	ldr	r3, [r3, #4]
 800ab60:	1ad3      	subs	r3, r2, r3
 800ab62:	613b      	str	r3, [r7, #16]
      cand_ix = i;
 800ab64:	69bb      	ldr	r3, [r7, #24]
 800ab66:	617b      	str	r3, [r7, #20]
  for (i = 0; i < cache->cpage_count; i++) {
 800ab68:	69bb      	ldr	r3, [r7, #24]
 800ab6a:	3301      	adds	r3, #1
 800ab6c:	61bb      	str	r3, [r7, #24]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	781b      	ldrb	r3, [r3, #0]
 800ab72:	461a      	mov	r2, r3
 800ab74:	69bb      	ldr	r3, [r7, #24]
 800ab76:	4293      	cmp	r3, r2
 800ab78:	dbd4      	blt.n	800ab24 <spiffs_cache_page_remove_oldest+0x40>
    }
  }

  if (cand_ix >= 0) {
 800ab7a:	697b      	ldr	r3, [r7, #20]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	db05      	blt.n	800ab8c <spiffs_cache_page_remove_oldest+0xa8>
    res = spiffs_cache_page_free(fs, cand_ix, 1);
 800ab80:	2201      	movs	r2, #1
 800ab82:	6979      	ldr	r1, [r7, #20]
 800ab84:	6878      	ldr	r0, [r7, #4]
 800ab86:	f7ff ff52 	bl	800aa2e <spiffs_cache_page_free>
 800ab8a:	61f8      	str	r0, [r7, #28]
  }

  return res;
 800ab8c:	69fb      	ldr	r3, [r7, #28]
}
 800ab8e:	4618      	mov	r0, r3
 800ab90:	3720      	adds	r7, #32
 800ab92:	46bd      	mov	sp, r7
 800ab94:	bd80      	pop	{r7, pc}

0800ab96 <spiffs_cache_page_allocate>:

// allocates a new cached page and returns it, or null if all cache pages are busy
static spiffs_cache_page *spiffs_cache_page_allocate(spiffs *fs) {
 800ab96:	b480      	push	{r7}
 800ab98:	b087      	sub	sp, #28
 800ab9a:	af00      	add	r7, sp, #0
 800ab9c:	6078      	str	r0, [r7, #4]
  spiffs_cache *cache = spiffs_get_cache(fs);
 800ab9e:	687b      	ldr	r3, [r7, #4]
 800aba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800aba2:	613b      	str	r3, [r7, #16]
  if (cache->cpage_use_map == 0xffffffff) {
 800aba4:	693b      	ldr	r3, [r7, #16]
 800aba6:	689b      	ldr	r3, [r3, #8]
 800aba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abac:	d101      	bne.n	800abb2 <spiffs_cache_page_allocate+0x1c>
    // out of cache memory
    return 0;
 800abae:	2300      	movs	r3, #0
 800abb0:	e02e      	b.n	800ac10 <spiffs_cache_page_allocate+0x7a>
  }
  int i;
  for (i = 0; i < cache->cpage_count; i++) {
 800abb2:	2300      	movs	r3, #0
 800abb4:	617b      	str	r3, [r7, #20]
 800abb6:	e024      	b.n	800ac02 <spiffs_cache_page_allocate+0x6c>
    if ((cache->cpage_use_map & (1<<i)) == 0) {
 800abb8:	693b      	ldr	r3, [r7, #16]
 800abba:	689b      	ldr	r3, [r3, #8]
 800abbc:	2101      	movs	r1, #1
 800abbe:	697a      	ldr	r2, [r7, #20]
 800abc0:	fa01 f202 	lsl.w	r2, r1, r2
 800abc4:	4013      	ands	r3, r2
 800abc6:	2b00      	cmp	r3, #0
 800abc8:	d118      	bne.n	800abfc <spiffs_cache_page_allocate+0x66>
      spiffs_cache_page *cp = spiffs_get_cache_page_hdr(fs, cache, i);
 800abca:	693b      	ldr	r3, [r7, #16]
 800abcc:	691a      	ldr	r2, [r3, #16]
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	69db      	ldr	r3, [r3, #28]
 800abd2:	3314      	adds	r3, #20
 800abd4:	6979      	ldr	r1, [r7, #20]
 800abd6:	fb01 f303 	mul.w	r3, r1, r3
 800abda:	4413      	add	r3, r2
 800abdc:	60fb      	str	r3, [r7, #12]
      cache->cpage_use_map |= (1<<i);
 800abde:	693b      	ldr	r3, [r7, #16]
 800abe0:	689b      	ldr	r3, [r3, #8]
 800abe2:	2101      	movs	r1, #1
 800abe4:	697a      	ldr	r2, [r7, #20]
 800abe6:	fa01 f202 	lsl.w	r2, r1, r2
 800abea:	431a      	orrs	r2, r3
 800abec:	693b      	ldr	r3, [r7, #16]
 800abee:	609a      	str	r2, [r3, #8]
      cp->last_access = cache->last_access;
 800abf0:	693b      	ldr	r3, [r7, #16]
 800abf2:	685a      	ldr	r2, [r3, #4]
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	605a      	str	r2, [r3, #4]
      //SPIFFS_CACHE_DBG("CACHE_ALLO: allocated cache page "_SPIPRIi"\n", i);
      return cp;
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	e009      	b.n	800ac10 <spiffs_cache_page_allocate+0x7a>
  for (i = 0; i < cache->cpage_count; i++) {
 800abfc:	697b      	ldr	r3, [r7, #20]
 800abfe:	3301      	adds	r3, #1
 800ac00:	617b      	str	r3, [r7, #20]
 800ac02:	693b      	ldr	r3, [r7, #16]
 800ac04:	781b      	ldrb	r3, [r3, #0]
 800ac06:	461a      	mov	r2, r3
 800ac08:	697b      	ldr	r3, [r7, #20]
 800ac0a:	4293      	cmp	r3, r2
 800ac0c:	dbd4      	blt.n	800abb8 <spiffs_cache_page_allocate+0x22>
    }
  }
  // out of cache entries
  return 0;
 800ac0e:	2300      	movs	r3, #0
}
 800ac10:	4618      	mov	r0, r3
 800ac12:	371c      	adds	r7, #28
 800ac14:	46bd      	mov	sp, r7
 800ac16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac1a:	4770      	bx	lr

0800ac1c <spiffs_phys_rd>:
    spiffs *fs,
    u8_t op,
    spiffs_file fh,
    u32_t addr,
    u32_t len,
    u8_t *dst) {
 800ac1c:	b5b0      	push	{r4, r5, r7, lr}
 800ac1e:	b08c      	sub	sp, #48	; 0x30
 800ac20:	af00      	add	r7, sp, #0
 800ac22:	60f8      	str	r0, [r7, #12]
 800ac24:	607b      	str	r3, [r7, #4]
 800ac26:	460b      	mov	r3, r1
 800ac28:	72fb      	strb	r3, [r7, #11]
 800ac2a:	4613      	mov	r3, r2
 800ac2c:	813b      	strh	r3, [r7, #8]
  (void)fh;
  s32_t res = SPIFFS_OK;
 800ac2e:	2300      	movs	r3, #0
 800ac30:	62fb      	str	r3, [r7, #44]	; 0x2c
  spiffs_cache *cache = spiffs_get_cache(fs);
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ac36:	62bb      	str	r3, [r7, #40]	; 0x28
  spiffs_cache_page *cp =  spiffs_cache_page_get(fs, SPIFFS_PADDR_TO_PAGE(fs, addr));
 800ac38:	68fb      	ldr	r3, [r7, #12]
 800ac3a:	691b      	ldr	r3, [r3, #16]
 800ac3c:	687a      	ldr	r2, [r7, #4]
 800ac3e:	1ad2      	subs	r2, r2, r3
 800ac40:	68fb      	ldr	r3, [r7, #12]
 800ac42:	69db      	ldr	r3, [r3, #28]
 800ac44:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac48:	b29b      	uxth	r3, r3
 800ac4a:	4619      	mov	r1, r3
 800ac4c:	68f8      	ldr	r0, [r7, #12]
 800ac4e:	f7ff fea6 	bl	800a99e <spiffs_cache_page_get>
 800ac52:	6278      	str	r0, [r7, #36]	; 0x24
  cache->last_access++;
 800ac54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac56:	685b      	ldr	r3, [r3, #4]
 800ac58:	1c5a      	adds	r2, r3, #1
 800ac5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac5c:	605a      	str	r2, [r3, #4]
  if (cp) {
 800ac5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d028      	beq.n	800acb6 <spiffs_phys_rd+0x9a>
    // we've already got one, you see
#if SPIFFS_CACHE_STATS
    fs->cache_hits++;
 800ac64:	68fb      	ldr	r3, [r7, #12]
 800ac66:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800ac68:	1c5a      	adds	r2, r3, #1
 800ac6a:	68fb      	ldr	r3, [r7, #12]
 800ac6c:	665a      	str	r2, [r3, #100]	; 0x64
#endif
    cp->last_access = cache->last_access;
 800ac6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac70:	685a      	ldr	r2, [r3, #4]
 800ac72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac74:	605a      	str	r2, [r3, #4]
    u8_t *mem =  spiffs_get_cache_page(fs, cache, cp->ix);
 800ac76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac78:	691a      	ldr	r2, [r3, #16]
 800ac7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac7c:	785b      	ldrb	r3, [r3, #1]
 800ac7e:	4619      	mov	r1, r3
 800ac80:	68fb      	ldr	r3, [r7, #12]
 800ac82:	69db      	ldr	r3, [r3, #28]
 800ac84:	3314      	adds	r3, #20
 800ac86:	fb01 f303 	mul.w	r3, r1, r3
 800ac8a:	3314      	adds	r3, #20
 800ac8c:	4413      	add	r3, r2
 800ac8e:	617b      	str	r3, [r7, #20]
    _SPIFFS_MEMCPY(dst, &mem[SPIFFS_PADDR_TO_PAGE_OFFSET(fs, addr)], len);
 800ac90:	68fb      	ldr	r3, [r7, #12]
 800ac92:	691b      	ldr	r3, [r3, #16]
 800ac94:	687a      	ldr	r2, [r7, #4]
 800ac96:	1ad3      	subs	r3, r2, r3
 800ac98:	68fa      	ldr	r2, [r7, #12]
 800ac9a:	69d2      	ldr	r2, [r2, #28]
 800ac9c:	fbb3 f1f2 	udiv	r1, r3, r2
 800aca0:	fb01 f202 	mul.w	r2, r1, r2
 800aca4:	1a9b      	subs	r3, r3, r2
 800aca6:	697a      	ldr	r2, [r7, #20]
 800aca8:	4413      	add	r3, r2
 800acaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800acac:	4619      	mov	r1, r3
 800acae:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800acb0:	f00c fcf6 	bl	80176a0 <memcpy>
 800acb4:	e07d      	b.n	800adb2 <spiffs_phys_rd+0x196>
  } else {
    if ((op & SPIFFS_OP_TYPE_MASK) == SPIFFS_OP_T_OBJ_LU2) {
 800acb6:	7afb      	ldrb	r3, [r7, #11]
 800acb8:	f003 0303 	and.w	r3, r3, #3
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d107      	bne.n	800acd0 <spiffs_phys_rd+0xb4>
      // for second layer lookup functions, we do not cache in order to prevent shredding
      return SPIFFS_HAL_READ(fs, addr, len, dst);
 800acc0:	68fb      	ldr	r3, [r7, #12]
 800acc2:	681b      	ldr	r3, [r3, #0]
 800acc4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800acc6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800acc8:	6878      	ldr	r0, [r7, #4]
 800acca:	4798      	blx	r3
 800accc:	4603      	mov	r3, r0
 800acce:	e071      	b.n	800adb4 <spiffs_phys_rd+0x198>
    }
#if SPIFFS_CACHE_STATS
    fs->cache_misses++;
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800acd4:	1c5a      	adds	r2, r3, #1
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	669a      	str	r2, [r3, #104]	; 0x68
#endif
    // this operation will always free one cache page (unless all already free),
    // the result code stems from the write operation of the possibly freed cache page
    res = spiffs_cache_page_remove_oldest(fs, SPIFFS_CACHE_FLAG_TYPE_WR, 0);
 800acda:	2200      	movs	r2, #0
 800acdc:	2180      	movs	r1, #128	; 0x80
 800acde:	68f8      	ldr	r0, [r7, #12]
 800ace0:	f7ff ff00 	bl	800aae4 <spiffs_cache_page_remove_oldest>
 800ace4:	62f8      	str	r0, [r7, #44]	; 0x2c

    cp = spiffs_cache_page_allocate(fs);
 800ace6:	68f8      	ldr	r0, [r7, #12]
 800ace8:	f7ff ff55 	bl	800ab96 <spiffs_cache_page_allocate>
 800acec:	6278      	str	r0, [r7, #36]	; 0x24
    if (cp) {
 800acee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d052      	beq.n	800ad9a <spiffs_phys_rd+0x17e>
      cp->flags = SPIFFS_CACHE_FLAG_WRTHRU;
 800acf4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acf6:	2202      	movs	r2, #2
 800acf8:	701a      	strb	r2, [r3, #0]
      cp->pix = SPIFFS_PADDR_TO_PAGE(fs, addr);
 800acfa:	68fb      	ldr	r3, [r7, #12]
 800acfc:	691b      	ldr	r3, [r3, #16]
 800acfe:	687a      	ldr	r2, [r7, #4]
 800ad00:	1ad2      	subs	r2, r2, r3
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	69db      	ldr	r3, [r3, #28]
 800ad06:	fbb2 f3f3 	udiv	r3, r2, r3
 800ad0a:	b29a      	uxth	r2, r3
 800ad0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad0e:	811a      	strh	r2, [r3, #8]
      SPIFFS_CACHE_DBG("CACHE_ALLO: allocated cache page "_SPIPRIi" for pix "_SPIPRIpg "\n", cp->ix, cp->pix);

      s32_t res2 = SPIFFS_HAL_READ(fs,
 800ad10:	68fb      	ldr	r3, [r7, #12]
 800ad12:	681c      	ldr	r4, [r3, #0]
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	691b      	ldr	r3, [r3, #16]
 800ad18:	687a      	ldr	r2, [r7, #4]
 800ad1a:	1ad3      	subs	r3, r2, r3
 800ad1c:	68fa      	ldr	r2, [r7, #12]
 800ad1e:	69d2      	ldr	r2, [r2, #28]
 800ad20:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad24:	fb01 f202 	mul.w	r2, r1, r2
 800ad28:	1a9b      	subs	r3, r3, r2
 800ad2a:	687a      	ldr	r2, [r7, #4]
 800ad2c:	1ad0      	subs	r0, r2, r3
 800ad2e:	68fb      	ldr	r3, [r7, #12]
 800ad30:	69d9      	ldr	r1, [r3, #28]
 800ad32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad34:	691a      	ldr	r2, [r3, #16]
 800ad36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad38:	785b      	ldrb	r3, [r3, #1]
 800ad3a:	461d      	mov	r5, r3
 800ad3c:	68fb      	ldr	r3, [r7, #12]
 800ad3e:	69db      	ldr	r3, [r3, #28]
 800ad40:	3314      	adds	r3, #20
 800ad42:	fb05 f303 	mul.w	r3, r5, r3
 800ad46:	3314      	adds	r3, #20
 800ad48:	4413      	add	r3, r2
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	47a0      	blx	r4
 800ad4e:	61f8      	str	r0, [r7, #28]
          addr - SPIFFS_PADDR_TO_PAGE_OFFSET(fs, addr),
          SPIFFS_CFG_LOG_PAGE_SZ(fs),
          spiffs_get_cache_page(fs, cache, cp->ix));
      if (res2 != SPIFFS_OK) {
 800ad50:	69fb      	ldr	r3, [r7, #28]
 800ad52:	2b00      	cmp	r3, #0
 800ad54:	d001      	beq.n	800ad5a <spiffs_phys_rd+0x13e>
        // honor read failure before possible write failure (bad idea?)
        res = res2;
 800ad56:	69fb      	ldr	r3, [r7, #28]
 800ad58:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      u8_t *mem =  spiffs_get_cache_page(fs, cache, cp->ix);
 800ad5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ad5c:	691a      	ldr	r2, [r3, #16]
 800ad5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ad60:	785b      	ldrb	r3, [r3, #1]
 800ad62:	4619      	mov	r1, r3
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	69db      	ldr	r3, [r3, #28]
 800ad68:	3314      	adds	r3, #20
 800ad6a:	fb01 f303 	mul.w	r3, r1, r3
 800ad6e:	3314      	adds	r3, #20
 800ad70:	4413      	add	r3, r2
 800ad72:	61bb      	str	r3, [r7, #24]
      _SPIFFS_MEMCPY(dst, &mem[SPIFFS_PADDR_TO_PAGE_OFFSET(fs, addr)], len);
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	691b      	ldr	r3, [r3, #16]
 800ad78:	687a      	ldr	r2, [r7, #4]
 800ad7a:	1ad3      	subs	r3, r2, r3
 800ad7c:	68fa      	ldr	r2, [r7, #12]
 800ad7e:	69d2      	ldr	r2, [r2, #28]
 800ad80:	fbb3 f1f2 	udiv	r1, r3, r2
 800ad84:	fb01 f202 	mul.w	r2, r1, r2
 800ad88:	1a9b      	subs	r3, r3, r2
 800ad8a:	69ba      	ldr	r2, [r7, #24]
 800ad8c:	4413      	add	r3, r2
 800ad8e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800ad90:	4619      	mov	r1, r3
 800ad92:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800ad94:	f00c fc84 	bl	80176a0 <memcpy>
 800ad98:	e00b      	b.n	800adb2 <spiffs_phys_rd+0x196>
    } else {
      // this will never happen, last resort for sake of symmetry
      s32_t res2 = SPIFFS_HAL_READ(fs, addr, len, dst);
 800ad9a:	68fb      	ldr	r3, [r7, #12]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ada0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ada2:	6878      	ldr	r0, [r7, #4]
 800ada4:	4798      	blx	r3
 800ada6:	6238      	str	r0, [r7, #32]
      if (res2 != SPIFFS_OK) {
 800ada8:	6a3b      	ldr	r3, [r7, #32]
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d001      	beq.n	800adb2 <spiffs_phys_rd+0x196>
        // honor read failure before possible write failure (bad idea?)
        res = res2;
 800adae:	6a3b      	ldr	r3, [r7, #32]
 800adb0:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
    }
  }
  return res;
 800adb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 800adb4:	4618      	mov	r0, r3
 800adb6:	3730      	adds	r7, #48	; 0x30
 800adb8:	46bd      	mov	sp, r7
 800adba:	bdb0      	pop	{r4, r5, r7, pc}

0800adbc <spiffs_cache_init>:
}

#endif

// initializes the cache
void spiffs_cache_init(spiffs *fs) {
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b08c      	sub	sp, #48	; 0x30
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	6078      	str	r0, [r7, #4]
  if (fs->cache == 0) return;
 800adc4:	687b      	ldr	r3, [r7, #4]
 800adc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800adc8:	2b00      	cmp	r3, #0
 800adca:	d06d      	beq.n	800aea8 <spiffs_cache_init+0xec>
  u32_t sz = fs->cache_size;
 800adcc:	687b      	ldr	r3, [r7, #4]
 800adce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800add0:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t cache_mask = 0;
 800add2:	2300      	movs	r3, #0
 800add4:	62fb      	str	r3, [r7, #44]	; 0x2c
  int i;
  int cache_entries =
      (sz - sizeof(spiffs_cache)) / (SPIFFS_CACHE_PAGE_SIZE(fs));
 800add6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800add8:	f1a3 0214 	sub.w	r2, r3, #20
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	69db      	ldr	r3, [r3, #28]
 800ade0:	3314      	adds	r3, #20
 800ade2:	fbb2 f3f3 	udiv	r3, r2, r3
  int cache_entries =
 800ade6:	623b      	str	r3, [r7, #32]
  if (cache_entries <= 0) return;
 800ade8:	6a3b      	ldr	r3, [r7, #32]
 800adea:	2b00      	cmp	r3, #0
 800adec:	dd5e      	ble.n	800aeac <spiffs_cache_init+0xf0>

  for (i = 0; i < cache_entries; i++) {
 800adee:	2300      	movs	r3, #0
 800adf0:	62bb      	str	r3, [r7, #40]	; 0x28
 800adf2:	e009      	b.n	800ae08 <spiffs_cache_init+0x4c>
    cache_mask <<= 1;
 800adf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf6:	005b      	lsls	r3, r3, #1
 800adf8:	62fb      	str	r3, [r7, #44]	; 0x2c
    cache_mask |= 1;
 800adfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adfc:	f043 0301 	orr.w	r3, r3, #1
 800ae00:	62fb      	str	r3, [r7, #44]	; 0x2c
  for (i = 0; i < cache_entries; i++) {
 800ae02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae04:	3301      	adds	r3, #1
 800ae06:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae08:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae0a:	6a3b      	ldr	r3, [r7, #32]
 800ae0c:	429a      	cmp	r2, r3
 800ae0e:	dbf1      	blt.n	800adf4 <spiffs_cache_init+0x38>
  }

  spiffs_cache cache;
  memset(&cache, 0, sizeof(spiffs_cache));
 800ae10:	f107 0308 	add.w	r3, r7, #8
 800ae14:	2214      	movs	r2, #20
 800ae16:	2100      	movs	r1, #0
 800ae18:	4618      	mov	r0, r3
 800ae1a:	f00c fc4f 	bl	80176bc <memset>
  cache.cpage_count = cache_entries;
 800ae1e:	6a3b      	ldr	r3, [r7, #32]
 800ae20:	b2db      	uxtb	r3, r3
 800ae22:	723b      	strb	r3, [r7, #8]
  cache.cpages = (u8_t *)((u8_t *)fs->cache + sizeof(spiffs_cache));
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae28:	3314      	adds	r3, #20
 800ae2a:	61bb      	str	r3, [r7, #24]

  cache.cpage_use_map = 0xffffffff;
 800ae2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ae30:	613b      	str	r3, [r7, #16]
  cache.cpage_use_mask = cache_mask;
 800ae32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae34:	617b      	str	r3, [r7, #20]
  _SPIFFS_MEMCPY(fs->cache, &cache, sizeof(spiffs_cache));
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae3a:	f107 0108 	add.w	r1, r7, #8
 800ae3e:	2214      	movs	r2, #20
 800ae40:	4618      	mov	r0, r3
 800ae42:	f00c fc2d 	bl	80176a0 <memcpy>

  spiffs_cache *c = spiffs_get_cache(fs);
 800ae46:	687b      	ldr	r3, [r7, #4]
 800ae48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800ae4a:	61fb      	str	r3, [r7, #28]

  memset(c->cpages, 0, c->cpage_count * SPIFFS_CACHE_PAGE_SIZE(fs));
 800ae4c:	69fb      	ldr	r3, [r7, #28]
 800ae4e:	6918      	ldr	r0, [r3, #16]
 800ae50:	69fb      	ldr	r3, [r7, #28]
 800ae52:	781b      	ldrb	r3, [r3, #0]
 800ae54:	461a      	mov	r2, r3
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	69db      	ldr	r3, [r3, #28]
 800ae5a:	3314      	adds	r3, #20
 800ae5c:	fb02 f303 	mul.w	r3, r2, r3
 800ae60:	461a      	mov	r2, r3
 800ae62:	2100      	movs	r1, #0
 800ae64:	f00c fc2a 	bl	80176bc <memset>

  c->cpage_use_map &= ~(c->cpage_use_mask);
 800ae68:	69fb      	ldr	r3, [r7, #28]
 800ae6a:	689a      	ldr	r2, [r3, #8]
 800ae6c:	69fb      	ldr	r3, [r7, #28]
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	43db      	mvns	r3, r3
 800ae72:	401a      	ands	r2, r3
 800ae74:	69fb      	ldr	r3, [r7, #28]
 800ae76:	609a      	str	r2, [r3, #8]
  for (i = 0; i < cache.cpage_count; i++) {
 800ae78:	2300      	movs	r3, #0
 800ae7a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae7c:	e00e      	b.n	800ae9c <spiffs_cache_init+0xe0>
    spiffs_get_cache_page_hdr(fs, c, i)->ix = i;
 800ae7e:	69fb      	ldr	r3, [r7, #28]
 800ae80:	691a      	ldr	r2, [r3, #16]
 800ae82:	687b      	ldr	r3, [r7, #4]
 800ae84:	69db      	ldr	r3, [r3, #28]
 800ae86:	3314      	adds	r3, #20
 800ae88:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800ae8a:	fb01 f303 	mul.w	r3, r1, r3
 800ae8e:	4413      	add	r3, r2
 800ae90:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ae92:	b2d2      	uxtb	r2, r2
 800ae94:	705a      	strb	r2, [r3, #1]
  for (i = 0; i < cache.cpage_count; i++) {
 800ae96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ae98:	3301      	adds	r3, #1
 800ae9a:	62bb      	str	r3, [r7, #40]	; 0x28
 800ae9c:	7a3b      	ldrb	r3, [r7, #8]
 800ae9e:	461a      	mov	r2, r3
 800aea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aea2:	4293      	cmp	r3, r2
 800aea4:	dbeb      	blt.n	800ae7e <spiffs_cache_init+0xc2>
 800aea6:	e002      	b.n	800aeae <spiffs_cache_init+0xf2>
  if (fs->cache == 0) return;
 800aea8:	bf00      	nop
 800aeaa:	e000      	b.n	800aeae <spiffs_cache_init+0xf2>
  if (cache_entries <= 0) return;
 800aeac:	bf00      	nop
  }
}
 800aeae:	3730      	adds	r7, #48	; 0x30
 800aeb0:	46bd      	mov	sp, r7
 800aeb2:	bd80      	pop	{r7, pc}

0800aeb4 <SPIFFS_mount>:
#endif // SPIFFS_USE_MAGIC && SPIFFS_USE_MAGIC_LENGTH && SPIFFS_SINGLETON==0

s32_t SPIFFS_mount(spiffs *fs, spiffs_config *config, u8_t *work,
    u8_t *fd_space, u32_t fd_space_size,
    void *cache, u32_t cache_size,
    spiffs_check_callback check_cb_f) {
 800aeb4:	b580      	push	{r7, lr}
 800aeb6:	b088      	sub	sp, #32
 800aeb8:	af00      	add	r7, sp, #0
 800aeba:	60f8      	str	r0, [r7, #12]
 800aebc:	60b9      	str	r1, [r7, #8]
 800aebe:	607a      	str	r2, [r7, #4]
 800aec0:	603b      	str	r3, [r7, #0]
                 SPIFFS_CFG_PHYS_ERASE_SZ(fs),
                 SPIFFS_CFG_PHYS_ADDR(fs),
                 fd_space_size, cache_size);
  void *user_data;
  SPIFFS_LOCK(fs);
  user_data = fs->user_data;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800aec6:	61fb      	str	r3, [r7, #28]
  memset(fs, 0, sizeof(spiffs));
 800aec8:	2280      	movs	r2, #128	; 0x80
 800aeca:	2100      	movs	r1, #0
 800aecc:	68f8      	ldr	r0, [r7, #12]
 800aece:	f00c fbf5 	bl	80176bc <memset>
  _SPIFFS_MEMCPY(&fs->cfg, config, sizeof(spiffs_config));
 800aed2:	68fb      	ldr	r3, [r7, #12]
 800aed4:	2220      	movs	r2, #32
 800aed6:	68b9      	ldr	r1, [r7, #8]
 800aed8:	4618      	mov	r0, r3
 800aeda:	f00c fbe1 	bl	80176a0 <memcpy>
  fs->user_data = user_data;
 800aede:	68fb      	ldr	r3, [r7, #12]
 800aee0:	69fa      	ldr	r2, [r7, #28]
 800aee2:	679a      	str	r2, [r3, #120]	; 0x78
  fs->block_count = SPIFFS_CFG_PHYS_SZ(fs) / SPIFFS_CFG_LOG_BLOCK_SZ(fs);
 800aee4:	68fb      	ldr	r3, [r7, #12]
 800aee6:	68da      	ldr	r2, [r3, #12]
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	699b      	ldr	r3, [r3, #24]
 800aeec:	fbb2 f2f3 	udiv	r2, r2, r3
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	621a      	str	r2, [r3, #32]
  fs->work = &work[0];
 800aef4:	68fb      	ldr	r3, [r7, #12]
 800aef6:	687a      	ldr	r2, [r7, #4]
 800aef8:	639a      	str	r2, [r3, #56]	; 0x38
  fs->lu_work = &work[SPIFFS_CFG_LOG_PAGE_SZ(fs)];
 800aefa:	68fb      	ldr	r3, [r7, #12]
 800aefc:	69db      	ldr	r3, [r3, #28]
 800aefe:	687a      	ldr	r2, [r7, #4]
 800af00:	441a      	add	r2, r3
 800af02:	68fb      	ldr	r3, [r7, #12]
 800af04:	635a      	str	r2, [r3, #52]	; 0x34
  memset(fd_space, 0, fd_space_size);
 800af06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800af08:	2100      	movs	r1, #0
 800af0a:	6838      	ldr	r0, [r7, #0]
 800af0c:	f00c fbd6 	bl	80176bc <memset>
  // align fd_space pointer to pointer size byte boundary
  u8_t ptr_size = sizeof(void*);
 800af10:	2304      	movs	r3, #4
 800af12:	76fb      	strb	r3, [r7, #27]
  u8_t addr_lsb = ((u8_t)(intptr_t)fd_space) & (ptr_size-1);
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	b25a      	sxtb	r2, r3
 800af18:	7efb      	ldrb	r3, [r7, #27]
 800af1a:	3b01      	subs	r3, #1
 800af1c:	b2db      	uxtb	r3, r3
 800af1e:	b25b      	sxtb	r3, r3
 800af20:	4013      	ands	r3, r2
 800af22:	b25b      	sxtb	r3, r3
 800af24:	76bb      	strb	r3, [r7, #26]
  if (addr_lsb) {
 800af26:	7ebb      	ldrb	r3, [r7, #26]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d00d      	beq.n	800af48 <SPIFFS_mount+0x94>
    fd_space += (ptr_size-addr_lsb);
 800af2c:	7efa      	ldrb	r2, [r7, #27]
 800af2e:	7ebb      	ldrb	r3, [r7, #26]
 800af30:	1ad3      	subs	r3, r2, r3
 800af32:	461a      	mov	r2, r3
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	4413      	add	r3, r2
 800af38:	603b      	str	r3, [r7, #0]
    fd_space_size -= (ptr_size-addr_lsb);
 800af3a:	7efa      	ldrb	r2, [r7, #27]
 800af3c:	7ebb      	ldrb	r3, [r7, #26]
 800af3e:	1ad3      	subs	r3, r2, r3
 800af40:	461a      	mov	r2, r3
 800af42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af44:	1a9b      	subs	r3, r3, r2
 800af46:	62bb      	str	r3, [r7, #40]	; 0x28
  }
  fs->fd_space = fd_space;
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	683a      	ldr	r2, [r7, #0]
 800af4c:	63da      	str	r2, [r3, #60]	; 0x3c
  fs->fd_count = (fd_space_size/sizeof(spiffs_fd));
 800af4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af50:	4a2d      	ldr	r2, [pc, #180]	; (800b008 <SPIFFS_mount+0x154>)
 800af52:	fba2 2303 	umull	r2, r3, r2, r3
 800af56:	095a      	lsrs	r2, r3, #5
 800af58:	68fb      	ldr	r3, [r7, #12]
 800af5a:	641a      	str	r2, [r3, #64]	; 0x40

  // align cache pointer to 4 byte boundary
  addr_lsb = ((u8_t)(intptr_t)cache) & (ptr_size-1);
 800af5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af5e:	b25a      	sxtb	r2, r3
 800af60:	7efb      	ldrb	r3, [r7, #27]
 800af62:	3b01      	subs	r3, #1
 800af64:	b2db      	uxtb	r3, r3
 800af66:	b25b      	sxtb	r3, r3
 800af68:	4013      	ands	r3, r2
 800af6a:	b25b      	sxtb	r3, r3
 800af6c:	76bb      	strb	r3, [r7, #26]
  if (addr_lsb) {
 800af6e:	7ebb      	ldrb	r3, [r7, #26]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d011      	beq.n	800af98 <SPIFFS_mount+0xe4>
    u8_t *cache_8 = (u8_t *)cache;
 800af74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af76:	617b      	str	r3, [r7, #20]
    cache_8 += (ptr_size-addr_lsb);
 800af78:	7efa      	ldrb	r2, [r7, #27]
 800af7a:	7ebb      	ldrb	r3, [r7, #26]
 800af7c:	1ad3      	subs	r3, r2, r3
 800af7e:	461a      	mov	r2, r3
 800af80:	697b      	ldr	r3, [r7, #20]
 800af82:	4413      	add	r3, r2
 800af84:	617b      	str	r3, [r7, #20]
    cache = cache_8;
 800af86:	697b      	ldr	r3, [r7, #20]
 800af88:	62fb      	str	r3, [r7, #44]	; 0x2c
    cache_size -= (ptr_size-addr_lsb);
 800af8a:	7efa      	ldrb	r2, [r7, #27]
 800af8c:	7ebb      	ldrb	r3, [r7, #26]
 800af8e:	1ad3      	subs	r3, r2, r3
 800af90:	461a      	mov	r2, r3
 800af92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af94:	1a9b      	subs	r3, r3, r2
 800af96:	633b      	str	r3, [r7, #48]	; 0x30
  }
  if (cache_size & (ptr_size-1)) {
 800af98:	7efb      	ldrb	r3, [r7, #27]
 800af9a:	3b01      	subs	r3, #1
 800af9c:	461a      	mov	r2, r3
 800af9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afa0:	4013      	ands	r3, r2
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d005      	beq.n	800afb2 <SPIFFS_mount+0xfe>
    cache_size -= (cache_size & (ptr_size-1));
 800afa6:	7efb      	ldrb	r3, [r7, #27]
 800afa8:	425b      	negs	r3, r3
 800afaa:	461a      	mov	r2, r3
 800afac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afae:	4013      	ands	r3, r2
 800afb0:	633b      	str	r3, [r7, #48]	; 0x30
  }

#if SPIFFS_CACHE
  fs->cache = cache;
 800afb2:	68fb      	ldr	r3, [r7, #12]
 800afb4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800afb6:	65da      	str	r2, [r3, #92]	; 0x5c
  fs->cache_size = (cache_size > (SPIFFS_CFG_LOG_PAGE_SZ(fs)*32)) ? SPIFFS_CFG_LOG_PAGE_SZ(fs)*32 : cache_size;
 800afb8:	68fb      	ldr	r3, [r7, #12]
 800afba:	69db      	ldr	r3, [r3, #28]
 800afbc:	015a      	lsls	r2, r3, #5
 800afbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800afc0:	429a      	cmp	r2, r3
 800afc2:	bf28      	it	cs
 800afc4:	461a      	movcs	r2, r3
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	661a      	str	r2, [r3, #96]	; 0x60
  spiffs_cache_init(fs);
 800afca:	68f8      	ldr	r0, [r7, #12]
 800afcc:	f7ff fef6 	bl	800adbc <spiffs_cache_init>
#if SPIFFS_USE_MAGIC
  res = SPIFFS_CHECK_MAGIC_POSSIBLE(fs) ? SPIFFS_OK : SPIFFS_ERR_MAGIC_NOT_POSSIBLE;
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
#endif

  fs->config_magic = SPIFFS_CONFIG_MAGIC;
 800afd0:	68fb      	ldr	r3, [r7, #12]
 800afd2:	4a0e      	ldr	r2, [pc, #56]	; (800b00c <SPIFFS_mount+0x158>)
 800afd4:	67da      	str	r2, [r3, #124]	; 0x7c

  res = spiffs_obj_lu_scan(fs);
 800afd6:	68f8      	ldr	r0, [r7, #12]
 800afd8:	f000 f9e2 	bl	800b3a0 <spiffs_obj_lu_scan>
 800afdc:	6138      	str	r0, [r7, #16]
  SPIFFS_API_CHECK_RES_UNLOCK(fs, res);
 800afde:	693b      	ldr	r3, [r7, #16]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	da04      	bge.n	800afee <SPIFFS_mount+0x13a>
 800afe4:	68fb      	ldr	r3, [r7, #12]
 800afe6:	693a      	ldr	r2, [r7, #16]
 800afe8:	645a      	str	r2, [r3, #68]	; 0x44
 800afea:	693b      	ldr	r3, [r7, #16]
 800afec:	e007      	b.n	800affe <SPIFFS_mount+0x14a>
  SPIFFS_DBG("object header index entries: "_SPIPRIi"\n", (u32_t)SPIFFS_OBJ_HDR_IX_LEN(fs));
  SPIFFS_DBG("object index entries:        "_SPIPRIi"\n", (u32_t)SPIFFS_OBJ_IX_LEN(fs));
  SPIFFS_DBG("available file descriptors:  "_SPIPRIi"\n", (u32_t)fs->fd_count);
  SPIFFS_DBG("free blocks:                 "_SPIPRIi"\n", (u32_t)fs->free_blocks);

  fs->check_cb_f = check_cb_f;
 800afee:	68fb      	ldr	r3, [r7, #12]
 800aff0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aff2:	66da      	str	r2, [r3, #108]	; 0x6c

  fs->mounted = 1;
 800aff4:	68fb      	ldr	r3, [r7, #12]
 800aff6:	2201      	movs	r2, #1
 800aff8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  SPIFFS_UNLOCK(fs);

  return 0;
 800affc:	2300      	movs	r3, #0
}
 800affe:	4618      	mov	r0, r3
 800b000:	3720      	adds	r7, #32
 800b002:	46bd      	mov	sp, r7
 800b004:	bd80      	pop	{r7, pc}
 800b006:	bf00      	nop
 800b008:	aaaaaaab 	.word	0xaaaaaaab
 800b00c:	20090315 	.word	0x20090315

0800b010 <spiffs_obj_lu_find_entry_visitor>:
    spiffs_obj_id obj_id,
    spiffs_visitor_f v,
    const void *user_const_p,
    void *user_var_p,
    spiffs_block_ix *block_ix,
    int *lu_entry) {
 800b010:	b590      	push	{r4, r7, lr}
 800b012:	b091      	sub	sp, #68	; 0x44
 800b014:	af02      	add	r7, sp, #8
 800b016:	60f8      	str	r0, [r7, #12]
 800b018:	607a      	str	r2, [r7, #4]
 800b01a:	461a      	mov	r2, r3
 800b01c:	460b      	mov	r3, r1
 800b01e:	817b      	strh	r3, [r7, #10]
 800b020:	4613      	mov	r3, r2
 800b022:	727b      	strb	r3, [r7, #9]
  s32_t res = SPIFFS_OK;
 800b024:	2300      	movs	r3, #0
 800b026:	637b      	str	r3, [r7, #52]	; 0x34
  s32_t entry_count = fs->block_count * SPIFFS_OBJ_LOOKUP_MAX_ENTRIES(fs);
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	6a1a      	ldr	r2, [r3, #32]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	6999      	ldr	r1, [r3, #24]
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	69db      	ldr	r3, [r3, #28]
 800b034:	fbb1 f1f3 	udiv	r1, r1, r3
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	6998      	ldr	r0, [r3, #24]
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	69db      	ldr	r3, [r3, #28]
 800b040:	fbb0 f3f3 	udiv	r3, r0, r3
 800b044:	0058      	lsls	r0, r3, #1
 800b046:	68fb      	ldr	r3, [r7, #12]
 800b048:	69db      	ldr	r3, [r3, #28]
 800b04a:	4298      	cmp	r0, r3
 800b04c:	d30b      	bcc.n	800b066 <spiffs_obj_lu_find_entry_visitor+0x56>
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	6998      	ldr	r0, [r3, #24]
 800b052:	68fb      	ldr	r3, [r7, #12]
 800b054:	69db      	ldr	r3, [r3, #28]
 800b056:	fbb0 f3f3 	udiv	r3, r0, r3
 800b05a:	0058      	lsls	r0, r3, #1
 800b05c:	68fb      	ldr	r3, [r7, #12]
 800b05e:	69db      	ldr	r3, [r3, #28]
 800b060:	fbb0 f3f3 	udiv	r3, r0, r3
 800b064:	e000      	b.n	800b068 <spiffs_obj_lu_find_entry_visitor+0x58>
 800b066:	2301      	movs	r3, #1
 800b068:	1acb      	subs	r3, r1, r3
 800b06a:	fb02 f303 	mul.w	r3, r2, r3
 800b06e:	633b      	str	r3, [r7, #48]	; 0x30
  spiffs_block_ix cur_block = starting_block;
 800b070:	897b      	ldrh	r3, [r7, #10]
 800b072:	85fb      	strh	r3, [r7, #46]	; 0x2e
  u32_t cur_block_addr = starting_block * SPIFFS_CFG_LOG_BLOCK_SZ(fs);
 800b074:	897b      	ldrh	r3, [r7, #10]
 800b076:	68fa      	ldr	r2, [r7, #12]
 800b078:	6992      	ldr	r2, [r2, #24]
 800b07a:	fb02 f303 	mul.w	r3, r2, r3
 800b07e:	62bb      	str	r3, [r7, #40]	; 0x28

  spiffs_obj_id *obj_lu_buf = (spiffs_obj_id *)fs->lu_work;
 800b080:	68fb      	ldr	r3, [r7, #12]
 800b082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800b084:	61fb      	str	r3, [r7, #28]
  int cur_entry = starting_lu_entry;
 800b086:	687b      	ldr	r3, [r7, #4]
 800b088:	627b      	str	r3, [r7, #36]	; 0x24
  int entries_per_page = (SPIFFS_CFG_LOG_PAGE_SZ(fs) / sizeof(spiffs_obj_id));
 800b08a:	68fb      	ldr	r3, [r7, #12]
 800b08c:	69db      	ldr	r3, [r3, #28]
 800b08e:	085b      	lsrs	r3, r3, #1
 800b090:	61bb      	str	r3, [r7, #24]

  // wrap initial
  if (cur_entry > (int)SPIFFS_OBJ_LOOKUP_MAX_ENTRIES(fs) - 1) {
 800b092:	68fb      	ldr	r3, [r7, #12]
 800b094:	699a      	ldr	r2, [r3, #24]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	69db      	ldr	r3, [r3, #28]
 800b09a:	fbb2 f2f3 	udiv	r2, r2, r3
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	6999      	ldr	r1, [r3, #24]
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	69db      	ldr	r3, [r3, #28]
 800b0a6:	fbb1 f3f3 	udiv	r3, r1, r3
 800b0aa:	0059      	lsls	r1, r3, #1
 800b0ac:	68fb      	ldr	r3, [r7, #12]
 800b0ae:	69db      	ldr	r3, [r3, #28]
 800b0b0:	4299      	cmp	r1, r3
 800b0b2:	d30b      	bcc.n	800b0cc <spiffs_obj_lu_find_entry_visitor+0xbc>
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	6999      	ldr	r1, [r3, #24]
 800b0b8:	68fb      	ldr	r3, [r7, #12]
 800b0ba:	69db      	ldr	r3, [r3, #28]
 800b0bc:	fbb1 f3f3 	udiv	r3, r1, r3
 800b0c0:	0059      	lsls	r1, r3, #1
 800b0c2:	68fb      	ldr	r3, [r7, #12]
 800b0c4:	69db      	ldr	r3, [r3, #28]
 800b0c6:	fbb1 f3f3 	udiv	r3, r1, r3
 800b0ca:	e000      	b.n	800b0ce <spiffs_obj_lu_find_entry_visitor+0xbe>
 800b0cc:	2301      	movs	r3, #1
 800b0ce:	1ad3      	subs	r3, r2, r3
 800b0d0:	461a      	mov	r2, r3
 800b0d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b0d4:	4293      	cmp	r3, r2
 800b0d6:	f2c0 811d 	blt.w	800b314 <spiffs_obj_lu_find_entry_visitor+0x304>
    cur_entry = 0;
 800b0da:	2300      	movs	r3, #0
 800b0dc:	627b      	str	r3, [r7, #36]	; 0x24
    cur_block++;
 800b0de:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	85fb      	strh	r3, [r7, #46]	; 0x2e
    cur_block_addr = cur_block * SPIFFS_CFG_LOG_BLOCK_SZ(fs);
 800b0e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b0e6:	68fa      	ldr	r2, [r7, #12]
 800b0e8:	6992      	ldr	r2, [r2, #24]
 800b0ea:	fb02 f303 	mul.w	r3, r2, r3
 800b0ee:	62bb      	str	r3, [r7, #40]	; 0x28
    if (cur_block >= fs->block_count) {
 800b0f0:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	6a1b      	ldr	r3, [r3, #32]
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	f0c0 810c 	bcc.w	800b314 <spiffs_obj_lu_find_entry_visitor+0x304>
      if (flags & SPIFFS_VIS_NO_WRAP) {
 800b0fc:	7a7b      	ldrb	r3, [r7, #9]
 800b0fe:	f003 0304 	and.w	r3, r3, #4
 800b102:	2b00      	cmp	r3, #0
 800b104:	d001      	beq.n	800b10a <spiffs_obj_lu_find_entry_visitor+0xfa>
        return SPIFFS_VIS_END;
 800b106:	4b8c      	ldr	r3, [pc, #560]	; (800b338 <spiffs_obj_lu_find_entry_visitor+0x328>)
 800b108:	e111      	b.n	800b32e <spiffs_obj_lu_find_entry_visitor+0x31e>
      } else {
        // block wrap
        cur_block = 0;
 800b10a:	2300      	movs	r3, #0
 800b10c:	85fb      	strh	r3, [r7, #46]	; 0x2e
        cur_block_addr = 0;
 800b10e:	2300      	movs	r3, #0
 800b110:	62bb      	str	r3, [r7, #40]	; 0x28
      }
    }
  }

  // check each block
  while (res == SPIFFS_OK && entry_count > 0) {
 800b112:	e0ff      	b.n	800b314 <spiffs_obj_lu_find_entry_visitor+0x304>
    int obj_lookup_page = cur_entry / entries_per_page;
 800b114:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b116:	69bb      	ldr	r3, [r7, #24]
 800b118:	fb92 f3f3 	sdiv	r3, r2, r3
 800b11c:	623b      	str	r3, [r7, #32]
    // check each object lookup page
    while (res == SPIFFS_OK && obj_lookup_page < (int)SPIFFS_OBJ_LOOKUP_PAGES(fs)) {
 800b11e:	e0bf      	b.n	800b2a0 <spiffs_obj_lu_find_entry_visitor+0x290>
      int entry_offset = obj_lookup_page * entries_per_page;
 800b120:	6a3b      	ldr	r3, [r7, #32]
 800b122:	69ba      	ldr	r2, [r7, #24]
 800b124:	fb02 f303 	mul.w	r3, r2, r3
 800b128:	617b      	str	r3, [r7, #20]
      res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ,
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	691a      	ldr	r2, [r3, #16]
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	69db      	ldr	r3, [r3, #28]
 800b132:	6a39      	ldr	r1, [r7, #32]
 800b134:	fb01 f303 	mul.w	r3, r1, r3
 800b138:	441a      	add	r2, r3
 800b13a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b13c:	18d1      	adds	r1, r2, r3
 800b13e:	68fb      	ldr	r3, [r7, #12]
 800b140:	69db      	ldr	r3, [r3, #28]
 800b142:	68fa      	ldr	r2, [r7, #12]
 800b144:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b146:	9201      	str	r2, [sp, #4]
 800b148:	9300      	str	r3, [sp, #0]
 800b14a:	460b      	mov	r3, r1
 800b14c:	2200      	movs	r2, #0
 800b14e:	2114      	movs	r1, #20
 800b150:	68f8      	ldr	r0, [r7, #12]
 800b152:	f7ff fd63 	bl	800ac1c <spiffs_phys_rd>
 800b156:	6378      	str	r0, [r7, #52]	; 0x34
          0, cur_block_addr + SPIFFS_PAGE_TO_PADDR(fs, obj_lookup_page), SPIFFS_CFG_LOG_PAGE_SZ(fs), fs->lu_work);
      // check each entry
      while (res == SPIFFS_OK &&
 800b158:	e072      	b.n	800b240 <spiffs_obj_lu_find_entry_visitor+0x230>
          cur_entry - entry_offset < entries_per_page && // for non-last obj lookup pages
          cur_entry < (int)SPIFFS_OBJ_LOOKUP_MAX_ENTRIES(fs)) // for last obj lookup page
      {
        if ((flags & SPIFFS_VIS_CHECK_ID) == 0 || obj_lu_buf[cur_entry-entry_offset] == obj_id) {
 800b15a:	7a7b      	ldrb	r3, [r7, #9]
 800b15c:	f003 0301 	and.w	r3, r3, #1
 800b160:	2b00      	cmp	r3, #0
 800b162:	d00a      	beq.n	800b17a <spiffs_obj_lu_find_entry_visitor+0x16a>
 800b164:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b166:	697b      	ldr	r3, [r7, #20]
 800b168:	1ad3      	subs	r3, r2, r3
 800b16a:	005b      	lsls	r3, r3, #1
 800b16c:	69fa      	ldr	r2, [r7, #28]
 800b16e:	4413      	add	r3, r2
 800b170:	881b      	ldrh	r3, [r3, #0]
 800b172:	f8b7 2048 	ldrh.w	r2, [r7, #72]	; 0x48
 800b176:	429a      	cmp	r2, r3
 800b178:	d15c      	bne.n	800b234 <spiffs_obj_lu_find_entry_visitor+0x224>
          if (block_ix) *block_ix = cur_block;
 800b17a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b17c:	2b00      	cmp	r3, #0
 800b17e:	d002      	beq.n	800b186 <spiffs_obj_lu_find_entry_visitor+0x176>
 800b180:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800b182:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b184:	801a      	strh	r2, [r3, #0]
          if (lu_entry) *lu_entry = cur_entry;
 800b186:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b188:	2b00      	cmp	r3, #0
 800b18a:	d002      	beq.n	800b192 <spiffs_obj_lu_find_entry_visitor+0x182>
 800b18c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800b18e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b190:	601a      	str	r2, [r3, #0]
          if (v) {
 800b192:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800b194:	2b00      	cmp	r3, #0
 800b196:	d04b      	beq.n	800b230 <spiffs_obj_lu_find_entry_visitor+0x220>
            res = v(
                fs,
                (flags & SPIFFS_VIS_CHECK_PH) ? obj_id : obj_lu_buf[cur_entry-entry_offset],
 800b198:	7a7b      	ldrb	r3, [r7, #9]
 800b19a:	f003 0302 	and.w	r3, r3, #2
            res = v(
 800b19e:	2b00      	cmp	r3, #0
 800b1a0:	d107      	bne.n	800b1b2 <spiffs_obj_lu_find_entry_visitor+0x1a2>
                (flags & SPIFFS_VIS_CHECK_PH) ? obj_id : obj_lu_buf[cur_entry-entry_offset],
 800b1a2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1a4:	697b      	ldr	r3, [r7, #20]
 800b1a6:	1ad3      	subs	r3, r2, r3
 800b1a8:	005b      	lsls	r3, r3, #1
 800b1aa:	69fa      	ldr	r2, [r7, #28]
 800b1ac:	4413      	add	r3, r2
            res = v(
 800b1ae:	8819      	ldrh	r1, [r3, #0]
 800b1b0:	e001      	b.n	800b1b6 <spiffs_obj_lu_find_entry_visitor+0x1a6>
 800b1b2:	f8b7 1048 	ldrh.w	r1, [r7, #72]	; 0x48
 800b1b6:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b1b8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800b1ba:	9301      	str	r3, [sp, #4]
 800b1bc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800b1be:	9300      	str	r3, [sp, #0]
 800b1c0:	6cfc      	ldr	r4, [r7, #76]	; 0x4c
 800b1c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c4:	68f8      	ldr	r0, [r7, #12]
 800b1c6:	47a0      	blx	r4
 800b1c8:	6378      	str	r0, [r7, #52]	; 0x34
                cur_block,
                cur_entry,
                user_const_p,
                user_var_p);
            if (res == SPIFFS_VIS_COUNTINUE || res == SPIFFS_VIS_COUNTINUE_RELOAD) {
 800b1ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1cc:	4a5b      	ldr	r2, [pc, #364]	; (800b33c <spiffs_obj_lu_find_entry_visitor+0x32c>)
 800b1ce:	4293      	cmp	r3, r2
 800b1d0:	d003      	beq.n	800b1da <spiffs_obj_lu_find_entry_visitor+0x1ca>
 800b1d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1d4:	4a5a      	ldr	r2, [pc, #360]	; (800b340 <spiffs_obj_lu_find_entry_visitor+0x330>)
 800b1d6:	4293      	cmp	r3, r2
 800b1d8:	d128      	bne.n	800b22c <spiffs_obj_lu_find_entry_visitor+0x21c>
              if (res == SPIFFS_VIS_COUNTINUE_RELOAD) {
 800b1da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b1dc:	4a58      	ldr	r2, [pc, #352]	; (800b340 <spiffs_obj_lu_find_entry_visitor+0x330>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d11b      	bne.n	800b21a <spiffs_obj_lu_find_entry_visitor+0x20a>
                res = _spiffs_rd(fs, SPIFFS_OP_T_OBJ_LU | SPIFFS_OP_C_READ,
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	691a      	ldr	r2, [r3, #16]
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	69db      	ldr	r3, [r3, #28]
 800b1ea:	6a39      	ldr	r1, [r7, #32]
 800b1ec:	fb01 f303 	mul.w	r3, r1, r3
 800b1f0:	441a      	add	r2, r3
 800b1f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b1f4:	18d1      	adds	r1, r2, r3
 800b1f6:	68fb      	ldr	r3, [r7, #12]
 800b1f8:	69db      	ldr	r3, [r3, #28]
 800b1fa:	68fa      	ldr	r2, [r7, #12]
 800b1fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800b1fe:	9201      	str	r2, [sp, #4]
 800b200:	9300      	str	r3, [sp, #0]
 800b202:	460b      	mov	r3, r1
 800b204:	2200      	movs	r2, #0
 800b206:	2114      	movs	r1, #20
 800b208:	68f8      	ldr	r0, [r7, #12]
 800b20a:	f7ff fd07 	bl	800ac1c <spiffs_phys_rd>
 800b20e:	6378      	str	r0, [r7, #52]	; 0x34
                    0, cur_block_addr + SPIFFS_PAGE_TO_PADDR(fs, obj_lookup_page), SPIFFS_CFG_LOG_PAGE_SZ(fs), fs->lu_work);
                SPIFFS_CHECK_RES(res);
 800b210:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b212:	2b00      	cmp	r3, #0
 800b214:	da01      	bge.n	800b21a <spiffs_obj_lu_find_entry_visitor+0x20a>
 800b216:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b218:	e089      	b.n	800b32e <spiffs_obj_lu_find_entry_visitor+0x31e>
              }
              res = SPIFFS_OK;
 800b21a:	2300      	movs	r3, #0
 800b21c:	637b      	str	r3, [r7, #52]	; 0x34
              cur_entry++;
 800b21e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b220:	3301      	adds	r3, #1
 800b222:	627b      	str	r3, [r7, #36]	; 0x24
              entry_count--;
 800b224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b226:	3b01      	subs	r3, #1
 800b228:	633b      	str	r3, [r7, #48]	; 0x30
              continue;
 800b22a:	e009      	b.n	800b240 <spiffs_obj_lu_find_entry_visitor+0x230>
            } else {
              return res;
 800b22c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b22e:	e07e      	b.n	800b32e <spiffs_obj_lu_find_entry_visitor+0x31e>
            }
          } else {
            return SPIFFS_OK;
 800b230:	2300      	movs	r3, #0
 800b232:	e07c      	b.n	800b32e <spiffs_obj_lu_find_entry_visitor+0x31e>
          }
        }
        entry_count--;
 800b234:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b236:	3b01      	subs	r3, #1
 800b238:	633b      	str	r3, [r7, #48]	; 0x30
        cur_entry++;
 800b23a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23c:	3301      	adds	r3, #1
 800b23e:	627b      	str	r3, [r7, #36]	; 0x24
      while (res == SPIFFS_OK &&
 800b240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b242:	2b00      	cmp	r3, #0
 800b244:	d129      	bne.n	800b29a <spiffs_obj_lu_find_entry_visitor+0x28a>
          cur_entry - entry_offset < entries_per_page && // for non-last obj lookup pages
 800b246:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	1ad3      	subs	r3, r2, r3
      while (res == SPIFFS_OK &&
 800b24c:	69ba      	ldr	r2, [r7, #24]
 800b24e:	429a      	cmp	r2, r3
 800b250:	dd23      	ble.n	800b29a <spiffs_obj_lu_find_entry_visitor+0x28a>
          cur_entry < (int)SPIFFS_OBJ_LOOKUP_MAX_ENTRIES(fs)) // for last obj lookup page
 800b252:	68fb      	ldr	r3, [r7, #12]
 800b254:	699a      	ldr	r2, [r3, #24]
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	69db      	ldr	r3, [r3, #28]
 800b25a:	fbb2 f2f3 	udiv	r2, r2, r3
 800b25e:	68fb      	ldr	r3, [r7, #12]
 800b260:	6999      	ldr	r1, [r3, #24]
 800b262:	68fb      	ldr	r3, [r7, #12]
 800b264:	69db      	ldr	r3, [r3, #28]
 800b266:	fbb1 f3f3 	udiv	r3, r1, r3
 800b26a:	0059      	lsls	r1, r3, #1
 800b26c:	68fb      	ldr	r3, [r7, #12]
 800b26e:	69db      	ldr	r3, [r3, #28]
 800b270:	4299      	cmp	r1, r3
 800b272:	d30b      	bcc.n	800b28c <spiffs_obj_lu_find_entry_visitor+0x27c>
 800b274:	68fb      	ldr	r3, [r7, #12]
 800b276:	6999      	ldr	r1, [r3, #24]
 800b278:	68fb      	ldr	r3, [r7, #12]
 800b27a:	69db      	ldr	r3, [r3, #28]
 800b27c:	fbb1 f3f3 	udiv	r3, r1, r3
 800b280:	0059      	lsls	r1, r3, #1
 800b282:	68fb      	ldr	r3, [r7, #12]
 800b284:	69db      	ldr	r3, [r3, #28]
 800b286:	fbb1 f3f3 	udiv	r3, r1, r3
 800b28a:	e000      	b.n	800b28e <spiffs_obj_lu_find_entry_visitor+0x27e>
 800b28c:	2301      	movs	r3, #1
 800b28e:	1ad3      	subs	r3, r2, r3
 800b290:	461a      	mov	r2, r3
          cur_entry - entry_offset < entries_per_page && // for non-last obj lookup pages
 800b292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b294:	4293      	cmp	r3, r2
 800b296:	f6ff af60 	blt.w	800b15a <spiffs_obj_lu_find_entry_visitor+0x14a>
      } // per entry
      obj_lookup_page++;
 800b29a:	6a3b      	ldr	r3, [r7, #32]
 800b29c:	3301      	adds	r3, #1
 800b29e:	623b      	str	r3, [r7, #32]
    while (res == SPIFFS_OK && obj_lookup_page < (int)SPIFFS_OBJ_LOOKUP_PAGES(fs)) {
 800b2a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2a2:	2b00      	cmp	r3, #0
 800b2a4:	d11c      	bne.n	800b2e0 <spiffs_obj_lu_find_entry_visitor+0x2d0>
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	699a      	ldr	r2, [r3, #24]
 800b2aa:	68fb      	ldr	r3, [r7, #12]
 800b2ac:	69db      	ldr	r3, [r3, #28]
 800b2ae:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2b2:	005a      	lsls	r2, r3, #1
 800b2b4:	68fb      	ldr	r3, [r7, #12]
 800b2b6:	69db      	ldr	r3, [r3, #28]
 800b2b8:	429a      	cmp	r2, r3
 800b2ba:	d30c      	bcc.n	800b2d6 <spiffs_obj_lu_find_entry_visitor+0x2c6>
 800b2bc:	68fb      	ldr	r3, [r7, #12]
 800b2be:	699a      	ldr	r2, [r3, #24]
 800b2c0:	68fb      	ldr	r3, [r7, #12]
 800b2c2:	69db      	ldr	r3, [r3, #28]
 800b2c4:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2c8:	005a      	lsls	r2, r3, #1
 800b2ca:	68fb      	ldr	r3, [r7, #12]
 800b2cc:	69db      	ldr	r3, [r3, #28]
 800b2ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800b2d2:	461a      	mov	r2, r3
 800b2d4:	e000      	b.n	800b2d8 <spiffs_obj_lu_find_entry_visitor+0x2c8>
 800b2d6:	2201      	movs	r2, #1
 800b2d8:	6a3b      	ldr	r3, [r7, #32]
 800b2da:	429a      	cmp	r2, r3
 800b2dc:	f73f af20 	bgt.w	800b120 <spiffs_obj_lu_find_entry_visitor+0x110>
    } // per object lookup page
    cur_entry = 0;
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	627b      	str	r3, [r7, #36]	; 0x24
    cur_block++;
 800b2e4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800b2e6:	3301      	adds	r3, #1
 800b2e8:	85fb      	strh	r3, [r7, #46]	; 0x2e
    cur_block_addr += SPIFFS_CFG_LOG_BLOCK_SZ(fs);
 800b2ea:	68fb      	ldr	r3, [r7, #12]
 800b2ec:	699b      	ldr	r3, [r3, #24]
 800b2ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b2f0:	4413      	add	r3, r2
 800b2f2:	62bb      	str	r3, [r7, #40]	; 0x28
    if (cur_block >= fs->block_count) {
 800b2f4:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	6a1b      	ldr	r3, [r3, #32]
 800b2fa:	429a      	cmp	r2, r3
 800b2fc:	d30a      	bcc.n	800b314 <spiffs_obj_lu_find_entry_visitor+0x304>
      if (flags & SPIFFS_VIS_NO_WRAP) {
 800b2fe:	7a7b      	ldrb	r3, [r7, #9]
 800b300:	f003 0304 	and.w	r3, r3, #4
 800b304:	2b00      	cmp	r3, #0
 800b306:	d001      	beq.n	800b30c <spiffs_obj_lu_find_entry_visitor+0x2fc>
        return SPIFFS_VIS_END;
 800b308:	4b0b      	ldr	r3, [pc, #44]	; (800b338 <spiffs_obj_lu_find_entry_visitor+0x328>)
 800b30a:	e010      	b.n	800b32e <spiffs_obj_lu_find_entry_visitor+0x31e>
      } else {
        // block wrap
        cur_block = 0;
 800b30c:	2300      	movs	r3, #0
 800b30e:	85fb      	strh	r3, [r7, #46]	; 0x2e
        cur_block_addr = 0;
 800b310:	2300      	movs	r3, #0
 800b312:	62bb      	str	r3, [r7, #40]	; 0x28
  while (res == SPIFFS_OK && entry_count > 0) {
 800b314:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b316:	2b00      	cmp	r3, #0
 800b318:	d103      	bne.n	800b322 <spiffs_obj_lu_find_entry_visitor+0x312>
 800b31a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b31c:	2b00      	cmp	r3, #0
 800b31e:	f73f aef9 	bgt.w	800b114 <spiffs_obj_lu_find_entry_visitor+0x104>
      }
    }
  } // per block

  SPIFFS_CHECK_RES(res);
 800b322:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b324:	2b00      	cmp	r3, #0
 800b326:	da01      	bge.n	800b32c <spiffs_obj_lu_find_entry_visitor+0x31c>
 800b328:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b32a:	e000      	b.n	800b32e <spiffs_obj_lu_find_entry_visitor+0x31e>

  return SPIFFS_VIS_END;
 800b32c:	4b02      	ldr	r3, [pc, #8]	; (800b338 <spiffs_obj_lu_find_entry_visitor+0x328>)
}
 800b32e:	4618      	mov	r0, r3
 800b330:	373c      	adds	r7, #60	; 0x3c
 800b332:	46bd      	mov	sp, r7
 800b334:	bd90      	pop	{r4, r7, pc}
 800b336:	bf00      	nop
 800b338:	ffffd8a8 	.word	0xffffd8a8
 800b33c:	ffffd8aa 	.word	0xffffd8aa
 800b340:	ffffd8a9 	.word	0xffffd8a9

0800b344 <spiffs_obj_lu_scan_v>:
    spiffs *fs,
    spiffs_obj_id obj_id,
    spiffs_block_ix bix,
    int ix_entry,
    const void *user_const_p,
    void *user_var_p) {
 800b344:	b480      	push	{r7}
 800b346:	b085      	sub	sp, #20
 800b348:	af00      	add	r7, sp, #0
 800b34a:	60f8      	str	r0, [r7, #12]
 800b34c:	607b      	str	r3, [r7, #4]
 800b34e:	460b      	mov	r3, r1
 800b350:	817b      	strh	r3, [r7, #10]
 800b352:	4613      	mov	r3, r2
 800b354:	813b      	strh	r3, [r7, #8]
  (void)bix;
  (void)user_const_p;
  (void)user_var_p;
  if (obj_id == SPIFFS_OBJ_ID_FREE) {
 800b356:	897b      	ldrh	r3, [r7, #10]
 800b358:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b35c:	4293      	cmp	r3, r2
 800b35e:	d108      	bne.n	800b372 <spiffs_obj_lu_scan_v+0x2e>
    if (ix_entry == 0) {
 800b360:	687b      	ldr	r3, [r7, #4]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d113      	bne.n	800b38e <spiffs_obj_lu_scan_v+0x4a>
      fs->free_blocks++;
 800b366:	68fb      	ldr	r3, [r7, #12]
 800b368:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b36a:	1c5a      	adds	r2, r3, #1
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	649a      	str	r2, [r3, #72]	; 0x48
 800b370:	e00d      	b.n	800b38e <spiffs_obj_lu_scan_v+0x4a>
      // todo optimize further, return SPIFFS_NEXT_BLOCK
    }
  } else if (obj_id == SPIFFS_OBJ_ID_DELETED) {
 800b372:	897b      	ldrh	r3, [r7, #10]
 800b374:	2b00      	cmp	r3, #0
 800b376:	d105      	bne.n	800b384 <spiffs_obj_lu_scan_v+0x40>
    fs->stats_p_deleted++;
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b37c:	1c5a      	adds	r2, r3, #1
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	651a      	str	r2, [r3, #80]	; 0x50
 800b382:	e004      	b.n	800b38e <spiffs_obj_lu_scan_v+0x4a>
  } else {
    fs->stats_p_allocated++;
 800b384:	68fb      	ldr	r3, [r7, #12]
 800b386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b388:	1c5a      	adds	r2, r3, #1
 800b38a:	68fb      	ldr	r3, [r7, #12]
 800b38c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  return SPIFFS_VIS_COUNTINUE;
 800b38e:	4b03      	ldr	r3, [pc, #12]	; (800b39c <spiffs_obj_lu_scan_v+0x58>)
}
 800b390:	4618      	mov	r0, r3
 800b392:	3714      	adds	r7, #20
 800b394:	46bd      	mov	sp, r7
 800b396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b39a:	4770      	bx	lr
 800b39c:	ffffd8aa 	.word	0xffffd8aa

0800b3a0 <spiffs_obj_lu_scan>:

// Scans thru all obj lu and counts free, deleted and used pages
// Find the maximum block erase count
// Checks magic if enabled
s32_t spiffs_obj_lu_scan(
    spiffs *fs) {
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	b08e      	sub	sp, #56	; 0x38
 800b3a4:	af06      	add	r7, sp, #24
 800b3a6:	6078      	str	r0, [r7, #4]
  spiffs_block_ix unerased_bix = (spiffs_block_ix)-1;
#endif

  // find out erase count
  // if enabled, check magic
  bix = 0;
 800b3a8:	2300      	movs	r3, #0
 800b3aa:	82bb      	strh	r3, [r7, #20]
  spiffs_obj_id erase_count_final;
  spiffs_obj_id erase_count_min = SPIFFS_OBJ_ID_FREE;
 800b3ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b3b0:	833b      	strh	r3, [r7, #24]
  spiffs_obj_id erase_count_max = 0;
 800b3b2:	2300      	movs	r3, #0
 800b3b4:	82fb      	strh	r3, [r7, #22]
  while (bix < fs->block_count) {
 800b3b6:	e04c      	b.n	800b452 <spiffs_obj_lu_scan+0xb2>
        SPIFFS_CHECK_RES(SPIFFS_ERR_NOT_A_FS);
      }
    }
#endif
    spiffs_obj_id erase_count;
    res = _spiffs_rd(fs,
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	691a      	ldr	r2, [r3, #16]
 800b3bc:	687b      	ldr	r3, [r7, #4]
 800b3be:	6999      	ldr	r1, [r3, #24]
 800b3c0:	687b      	ldr	r3, [r7, #4]
 800b3c2:	69db      	ldr	r3, [r3, #28]
 800b3c4:	fbb1 f3f3 	udiv	r3, r1, r3
 800b3c8:	0059      	lsls	r1, r3, #1
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	69db      	ldr	r3, [r3, #28]
 800b3ce:	4299      	cmp	r1, r3
 800b3d0:	d30b      	bcc.n	800b3ea <spiffs_obj_lu_scan+0x4a>
 800b3d2:	687b      	ldr	r3, [r7, #4]
 800b3d4:	6999      	ldr	r1, [r3, #24]
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	69db      	ldr	r3, [r3, #28]
 800b3da:	fbb1 f3f3 	udiv	r3, r1, r3
 800b3de:	0059      	lsls	r1, r3, #1
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	69db      	ldr	r3, [r3, #28]
 800b3e4:	fbb1 f3f3 	udiv	r3, r1, r3
 800b3e8:	e000      	b.n	800b3ec <spiffs_obj_lu_scan+0x4c>
 800b3ea:	2301      	movs	r3, #1
 800b3ec:	6879      	ldr	r1, [r7, #4]
 800b3ee:	69c9      	ldr	r1, [r1, #28]
 800b3f0:	fb03 f101 	mul.w	r1, r3, r1
 800b3f4:	8abb      	ldrh	r3, [r7, #20]
 800b3f6:	4618      	mov	r0, r3
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	699b      	ldr	r3, [r3, #24]
 800b3fc:	fb00 f303 	mul.w	r3, r0, r3
 800b400:	440b      	add	r3, r1
 800b402:	4413      	add	r3, r2
 800b404:	1e9a      	subs	r2, r3, #2
 800b406:	f107 030e 	add.w	r3, r7, #14
 800b40a:	9301      	str	r3, [sp, #4]
 800b40c:	2302      	movs	r3, #2
 800b40e:	9300      	str	r3, [sp, #0]
 800b410:	4613      	mov	r3, r2
 800b412:	2200      	movs	r2, #0
 800b414:	2115      	movs	r1, #21
 800b416:	6878      	ldr	r0, [r7, #4]
 800b418:	f7ff fc00 	bl	800ac1c <spiffs_phys_rd>
 800b41c:	61f8      	str	r0, [r7, #28]
        SPIFFS_OP_T_OBJ_LU2 | SPIFFS_OP_C_READ,
        0, SPIFFS_ERASE_COUNT_PADDR(fs, bix) ,
        sizeof(spiffs_obj_id), (u8_t *)&erase_count);
    SPIFFS_CHECK_RES(res);
 800b41e:	69fb      	ldr	r3, [r7, #28]
 800b420:	2b00      	cmp	r3, #0
 800b422:	da01      	bge.n	800b428 <spiffs_obj_lu_scan+0x88>
 800b424:	69fb      	ldr	r3, [r7, #28]
 800b426:	e060      	b.n	800b4ea <spiffs_obj_lu_scan+0x14a>
    if (erase_count != SPIFFS_OBJ_ID_FREE) {
 800b428:	89fb      	ldrh	r3, [r7, #14]
 800b42a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b42e:	4293      	cmp	r3, r2
 800b430:	d00b      	beq.n	800b44a <spiffs_obj_lu_scan+0xaa>
      erase_count_min = MIN(erase_count_min, erase_count);
 800b432:	89fb      	ldrh	r3, [r7, #14]
 800b434:	8b3a      	ldrh	r2, [r7, #24]
 800b436:	4293      	cmp	r3, r2
 800b438:	bf28      	it	cs
 800b43a:	4613      	movcs	r3, r2
 800b43c:	833b      	strh	r3, [r7, #24]
      erase_count_max = MAX(erase_count_max, erase_count);
 800b43e:	89fb      	ldrh	r3, [r7, #14]
 800b440:	8afa      	ldrh	r2, [r7, #22]
 800b442:	4293      	cmp	r3, r2
 800b444:	bf38      	it	cc
 800b446:	4613      	movcc	r3, r2
 800b448:	82fb      	strh	r3, [r7, #22]
    }
    bix++;
 800b44a:	8abb      	ldrh	r3, [r7, #20]
 800b44c:	3301      	adds	r3, #1
 800b44e:	b29b      	uxth	r3, r3
 800b450:	82bb      	strh	r3, [r7, #20]
  while (bix < fs->block_count) {
 800b452:	8abb      	ldrh	r3, [r7, #20]
 800b454:	461a      	mov	r2, r3
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	6a1b      	ldr	r3, [r3, #32]
 800b45a:	429a      	cmp	r2, r3
 800b45c:	d3ac      	bcc.n	800b3b8 <spiffs_obj_lu_scan+0x18>
  }

  if (erase_count_min == 0 && erase_count_max == SPIFFS_OBJ_ID_FREE) {
 800b45e:	8b3b      	ldrh	r3, [r7, #24]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d107      	bne.n	800b474 <spiffs_obj_lu_scan+0xd4>
 800b464:	8afb      	ldrh	r3, [r7, #22]
 800b466:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b46a:	4293      	cmp	r3, r2
 800b46c:	d102      	bne.n	800b474 <spiffs_obj_lu_scan+0xd4>
    // clean system, set counter to zero
    erase_count_final = 0;
 800b46e:	2300      	movs	r3, #0
 800b470:	837b      	strh	r3, [r7, #26]
 800b472:	e00c      	b.n	800b48e <spiffs_obj_lu_scan+0xee>
  } else if (erase_count_max - erase_count_min > (SPIFFS_OBJ_ID_FREE)/2) {
 800b474:	8afa      	ldrh	r2, [r7, #22]
 800b476:	8b3b      	ldrh	r3, [r7, #24]
 800b478:	1ad3      	subs	r3, r2, r3
 800b47a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b47e:	db03      	blt.n	800b488 <spiffs_obj_lu_scan+0xe8>
    // wrap, take min
    erase_count_final = erase_count_min+1;
 800b480:	8b3b      	ldrh	r3, [r7, #24]
 800b482:	3301      	adds	r3, #1
 800b484:	837b      	strh	r3, [r7, #26]
 800b486:	e002      	b.n	800b48e <spiffs_obj_lu_scan+0xee>
  } else {
    erase_count_final = erase_count_max+1;
 800b488:	8afb      	ldrh	r3, [r7, #22]
 800b48a:	3301      	adds	r3, #1
 800b48c:	837b      	strh	r3, [r7, #26]
  }

  fs->max_erase_count = erase_count_final;
 800b48e:	687b      	ldr	r3, [r7, #4]
 800b490:	8b7a      	ldrh	r2, [r7, #26]
 800b492:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  }
#endif

  // count blocks

  fs->free_blocks = 0;
 800b496:	687b      	ldr	r3, [r7, #4]
 800b498:	2200      	movs	r2, #0
 800b49a:	649a      	str	r2, [r3, #72]	; 0x48
  fs->stats_p_allocated = 0;
 800b49c:	687b      	ldr	r3, [r7, #4]
 800b49e:	2200      	movs	r2, #0
 800b4a0:	64da      	str	r2, [r3, #76]	; 0x4c
  fs->stats_p_deleted = 0;
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	2200      	movs	r2, #0
 800b4a6:	651a      	str	r2, [r3, #80]	; 0x50

  res = spiffs_obj_lu_find_entry_visitor(fs,
 800b4a8:	f107 0310 	add.w	r3, r7, #16
 800b4ac:	9305      	str	r3, [sp, #20]
 800b4ae:	f107 0314 	add.w	r3, r7, #20
 800b4b2:	9304      	str	r3, [sp, #16]
 800b4b4:	2300      	movs	r3, #0
 800b4b6:	9303      	str	r3, [sp, #12]
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	9302      	str	r3, [sp, #8]
 800b4bc:	4b0d      	ldr	r3, [pc, #52]	; (800b4f4 <spiffs_obj_lu_scan+0x154>)
 800b4be:	9301      	str	r3, [sp, #4]
 800b4c0:	2300      	movs	r3, #0
 800b4c2:	9300      	str	r3, [sp, #0]
 800b4c4:	2300      	movs	r3, #0
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	2100      	movs	r1, #0
 800b4ca:	6878      	ldr	r0, [r7, #4]
 800b4cc:	f7ff fda0 	bl	800b010 <spiffs_obj_lu_find_entry_visitor>
 800b4d0:	61f8      	str	r0, [r7, #28]
      0,
      0,
      &bix,
      &entry);

  if (res == SPIFFS_VIS_END) {
 800b4d2:	69fb      	ldr	r3, [r7, #28]
 800b4d4:	4a08      	ldr	r2, [pc, #32]	; (800b4f8 <spiffs_obj_lu_scan+0x158>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d101      	bne.n	800b4de <spiffs_obj_lu_scan+0x13e>
    res = SPIFFS_OK;
 800b4da:	2300      	movs	r3, #0
 800b4dc:	61fb      	str	r3, [r7, #28]
  }

  SPIFFS_CHECK_RES(res);
 800b4de:	69fb      	ldr	r3, [r7, #28]
 800b4e0:	2b00      	cmp	r3, #0
 800b4e2:	da01      	bge.n	800b4e8 <spiffs_obj_lu_scan+0x148>
 800b4e4:	69fb      	ldr	r3, [r7, #28]
 800b4e6:	e000      	b.n	800b4ea <spiffs_obj_lu_scan+0x14a>

  return res;
 800b4e8:	69fb      	ldr	r3, [r7, #28]
}
 800b4ea:	4618      	mov	r0, r3
 800b4ec:	3720      	adds	r7, #32
 800b4ee:	46bd      	mov	sp, r7
 800b4f0:	bd80      	pop	{r7, pc}
 800b4f2:	bf00      	nop
 800b4f4:	0800b345 	.word	0x0800b345
 800b4f8:	ffffd8a8 	.word	0xffffd8a8

0800b4fc <BSP_LED_Init>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800b4fc:	b580      	push	{r7, lr}
 800b4fe:	b08a      	sub	sp, #40	; 0x28
 800b500:	af00      	add	r7, sp, #0
 800b502:	4603      	mov	r3, r0
 800b504:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 800b506:	79fb      	ldrb	r3, [r7, #7]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d10e      	bne.n	800b52a <BSP_LED_Init+0x2e>
 800b50c:	2300      	movs	r3, #0
 800b50e:	613b      	str	r3, [r7, #16]
 800b510:	4b21      	ldr	r3, [pc, #132]	; (800b598 <BSP_LED_Init+0x9c>)
 800b512:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b514:	4a20      	ldr	r2, [pc, #128]	; (800b598 <BSP_LED_Init+0x9c>)
 800b516:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b51a:	6313      	str	r3, [r2, #48]	; 0x30
 800b51c:	4b1e      	ldr	r3, [pc, #120]	; (800b598 <BSP_LED_Init+0x9c>)
 800b51e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b520:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b524:	613b      	str	r3, [r7, #16]
 800b526:	693b      	ldr	r3, [r7, #16]
 800b528:	e010      	b.n	800b54c <BSP_LED_Init+0x50>
 800b52a:	79fb      	ldrb	r3, [r7, #7]
 800b52c:	2b01      	cmp	r3, #1
 800b52e:	d10d      	bne.n	800b54c <BSP_LED_Init+0x50>
 800b530:	2300      	movs	r3, #0
 800b532:	60fb      	str	r3, [r7, #12]
 800b534:	4b18      	ldr	r3, [pc, #96]	; (800b598 <BSP_LED_Init+0x9c>)
 800b536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b538:	4a17      	ldr	r2, [pc, #92]	; (800b598 <BSP_LED_Init+0x9c>)
 800b53a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b53e:	6313      	str	r3, [r2, #48]	; 0x30
 800b540:	4b15      	ldr	r3, [pc, #84]	; (800b598 <BSP_LED_Init+0x9c>)
 800b542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b544:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b548:	60fb      	str	r3, [r7, #12]
 800b54a:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 800b54c:	79fb      	ldrb	r3, [r7, #7]
 800b54e:	4a13      	ldr	r2, [pc, #76]	; (800b59c <BSP_LED_Init+0xa0>)
 800b550:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b554:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b556:	2301      	movs	r3, #1
 800b558:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b55a:	2301      	movs	r3, #1
 800b55c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800b55e:	2302      	movs	r3, #2
 800b560:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800b562:	79fb      	ldrb	r3, [r7, #7]
 800b564:	4a0e      	ldr	r2, [pc, #56]	; (800b5a0 <BSP_LED_Init+0xa4>)
 800b566:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b56a:	f107 0214 	add.w	r2, r7, #20
 800b56e:	4611      	mov	r1, r2
 800b570:	4618      	mov	r0, r3
 800b572:	f003 fbb7 	bl	800ece4 <HAL_GPIO_Init>
  
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800b576:	79fb      	ldrb	r3, [r7, #7]
 800b578:	4a09      	ldr	r2, [pc, #36]	; (800b5a0 <BSP_LED_Init+0xa4>)
 800b57a:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b57e:	79fb      	ldrb	r3, [r7, #7]
 800b580:	4a06      	ldr	r2, [pc, #24]	; (800b59c <BSP_LED_Init+0xa0>)
 800b582:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b586:	2200      	movs	r2, #0
 800b588:	4619      	mov	r1, r3
 800b58a:	f003 fd6f 	bl	800f06c <HAL_GPIO_WritePin>
}
 800b58e:	bf00      	nop
 800b590:	3728      	adds	r7, #40	; 0x28
 800b592:	46bd      	mov	sp, r7
 800b594:	bd80      	pop	{r7, pc}
 800b596:	bf00      	nop
 800b598:	40023800 	.word	0x40023800
 800b59c:	080193fc 	.word	0x080193fc
 800b5a0:	200001c8 	.word	0x200001c8

0800b5a4 <BSP_LED_On>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4 
  */
void BSP_LED_On(Led_TypeDef Led)
{
 800b5a4:	b580      	push	{r7, lr}
 800b5a6:	b082      	sub	sp, #8
 800b5a8:	af00      	add	r7, sp, #0
 800b5aa:	4603      	mov	r3, r0
 800b5ac:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 800b5ae:	79fb      	ldrb	r3, [r7, #7]
 800b5b0:	4a07      	ldr	r2, [pc, #28]	; (800b5d0 <BSP_LED_On+0x2c>)
 800b5b2:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b5b6:	79fb      	ldrb	r3, [r7, #7]
 800b5b8:	4a06      	ldr	r2, [pc, #24]	; (800b5d4 <BSP_LED_On+0x30>)
 800b5ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5be:	2201      	movs	r2, #1
 800b5c0:	4619      	mov	r1, r3
 800b5c2:	f003 fd53 	bl	800f06c <HAL_GPIO_WritePin>
}
 800b5c6:	bf00      	nop
 800b5c8:	3708      	adds	r7, #8
 800b5ca:	46bd      	mov	sp, r7
 800b5cc:	bd80      	pop	{r7, pc}
 800b5ce:	bf00      	nop
 800b5d0:	200001c8 	.word	0x200001c8
 800b5d4:	080193fc 	.word	0x080193fc

0800b5d8 <BSP_LED_Off>:
  *   This parameter can be one of following parameters:
  *     @arg LED3
  *     @arg LED4
  */
void BSP_LED_Off(Led_TypeDef Led)
{
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b082      	sub	sp, #8
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	4603      	mov	r3, r0
 800b5e0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800b5e2:	79fb      	ldrb	r3, [r7, #7]
 800b5e4:	4a07      	ldr	r2, [pc, #28]	; (800b604 <BSP_LED_Off+0x2c>)
 800b5e6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b5ea:	79fb      	ldrb	r3, [r7, #7]
 800b5ec:	4a06      	ldr	r2, [pc, #24]	; (800b608 <BSP_LED_Off+0x30>)
 800b5ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b5f2:	2200      	movs	r2, #0
 800b5f4:	4619      	mov	r1, r3
 800b5f6:	f003 fd39 	bl	800f06c <HAL_GPIO_WritePin>
}
 800b5fa:	bf00      	nop
 800b5fc:	3708      	adds	r7, #8
 800b5fe:	46bd      	mov	sp, r7
 800b600:	bd80      	pop	{r7, pc}
 800b602:	bf00      	nop
 800b604:	200001c8 	.word	0x200001c8
 800b608:	080193fc 	.word	0x080193fc

0800b60c <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800b60c:	b580      	push	{r7, lr}
 800b60e:	b088      	sub	sp, #32
 800b610:	af00      	add	r7, sp, #0
 800b612:	4603      	mov	r3, r0
 800b614:	460a      	mov	r2, r1
 800b616:	71fb      	strb	r3, [r7, #7]
 800b618:	4613      	mov	r3, r2
 800b61a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800b61c:	79fb      	ldrb	r3, [r7, #7]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d10d      	bne.n	800b63e <BSP_PB_Init+0x32>
 800b622:	2300      	movs	r3, #0
 800b624:	60bb      	str	r3, [r7, #8]
 800b626:	4b22      	ldr	r3, [pc, #136]	; (800b6b0 <BSP_PB_Init+0xa4>)
 800b628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b62a:	4a21      	ldr	r2, [pc, #132]	; (800b6b0 <BSP_PB_Init+0xa4>)
 800b62c:	f043 0301 	orr.w	r3, r3, #1
 800b630:	6313      	str	r3, [r2, #48]	; 0x30
 800b632:	4b1f      	ldr	r3, [pc, #124]	; (800b6b0 <BSP_PB_Init+0xa4>)
 800b634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b636:	f003 0301 	and.w	r3, r3, #1
 800b63a:	60bb      	str	r3, [r7, #8]
 800b63c:	68bb      	ldr	r3, [r7, #8]
  
  if (ButtonMode == BUTTON_MODE_GPIO)
 800b63e:	79bb      	ldrb	r3, [r7, #6]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d111      	bne.n	800b668 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800b644:	2301      	movs	r3, #1
 800b646:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800b648:	2300      	movs	r3, #0
 800b64a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800b64c:	2302      	movs	r3, #2
 800b64e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800b650:	2302      	movs	r3, #2
 800b652:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800b654:	79fb      	ldrb	r3, [r7, #7]
 800b656:	4a17      	ldr	r2, [pc, #92]	; (800b6b4 <BSP_PB_Init+0xa8>)
 800b658:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b65c:	f107 020c 	add.w	r2, r7, #12
 800b660:	4611      	mov	r1, r2
 800b662:	4618      	mov	r0, r3
 800b664:	f003 fb3e 	bl	800ece4 <HAL_GPIO_Init>
  }
  
  if (ButtonMode == BUTTON_MODE_EXTI)
 800b668:	79bb      	ldrb	r3, [r7, #6]
 800b66a:	2b01      	cmp	r3, #1
 800b66c:	d11c      	bne.n	800b6a8 <BSP_PB_Init+0x9c>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800b66e:	2301      	movs	r3, #1
 800b670:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b672:	2300      	movs	r3, #0
 800b674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800b676:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800b67a:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800b67c:	79fb      	ldrb	r3, [r7, #7]
 800b67e:	4a0d      	ldr	r2, [pc, #52]	; (800b6b4 <BSP_PB_Init+0xa8>)
 800b680:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b684:	f107 020c 	add.w	r2, r7, #12
 800b688:	4611      	mov	r1, r2
 800b68a:	4618      	mov	r0, r3
 800b68c:	f003 fb2a 	bl	800ece4 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x00, 0x02);
 800b690:	2306      	movs	r3, #6
 800b692:	b25b      	sxtb	r3, r3
 800b694:	2202      	movs	r2, #2
 800b696:	2100      	movs	r1, #0
 800b698:	4618      	mov	r0, r3
 800b69a:	f002 fc16 	bl	800deca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800b69e:	2306      	movs	r3, #6
 800b6a0:	b25b      	sxtb	r3, r3
 800b6a2:	4618      	mov	r0, r3
 800b6a4:	f002 fc2d 	bl	800df02 <HAL_NVIC_EnableIRQ>
  }
}
 800b6a8:	bf00      	nop
 800b6aa:	3720      	adds	r7, #32
 800b6ac:	46bd      	mov	sp, r7
 800b6ae:	bd80      	pop	{r7, pc}
 800b6b0:	40023800 	.word	0x40023800
 800b6b4:	200001d0 	.word	0x200001d0

0800b6b8 <BSP_SDRAM_Init>:

/**
  * @brief  Initializes the SDRAM device.
  */
void BSP_SDRAM_Init(void)
{
 800b6b8:	b580      	push	{r7, lr}
 800b6ba:	af00      	add	r7, sp, #0
  /* SDRAM device configuration */
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 800b6bc:	4b22      	ldr	r3, [pc, #136]	; (800b748 <BSP_SDRAM_Init+0x90>)
 800b6be:	4a23      	ldr	r2, [pc, #140]	; (800b74c <BSP_SDRAM_Init+0x94>)
 800b6c0:	601a      	str	r2, [r3, #0]

  /* FMC Configuration -------------------------------------------------------*/
  /* FMC SDRAM Bank configuration */
  /* Timing configuration for 90 Mhz of SD clock frequency (180Mhz/2) */
  /* TMRD: 2 Clock cycles */
  Timing.LoadToActiveDelay    = 2;
 800b6c2:	4b23      	ldr	r3, [pc, #140]	; (800b750 <BSP_SDRAM_Init+0x98>)
 800b6c4:	2202      	movs	r2, #2
 800b6c6:	601a      	str	r2, [r3, #0]
  /* TXSR: min=70ns (7x11.11ns) */
  Timing.ExitSelfRefreshDelay = 7;
 800b6c8:	4b21      	ldr	r3, [pc, #132]	; (800b750 <BSP_SDRAM_Init+0x98>)
 800b6ca:	2207      	movs	r2, #7
 800b6cc:	605a      	str	r2, [r3, #4]
  /* TRAS: min=42ns (4x11.11ns) max=120k (ns) */
  Timing.SelfRefreshTime      = 4;
 800b6ce:	4b20      	ldr	r3, [pc, #128]	; (800b750 <BSP_SDRAM_Init+0x98>)
 800b6d0:	2204      	movs	r2, #4
 800b6d2:	609a      	str	r2, [r3, #8]
  /* TRC:  min=70 (7x11.11ns) */
  Timing.RowCycleDelay        = 7;
 800b6d4:	4b1e      	ldr	r3, [pc, #120]	; (800b750 <BSP_SDRAM_Init+0x98>)
 800b6d6:	2207      	movs	r2, #7
 800b6d8:	60da      	str	r2, [r3, #12]
  /* TWR:  min=1+ 7ns (1+1x11.11ns) */
  Timing.WriteRecoveryTime    = 2;
 800b6da:	4b1d      	ldr	r3, [pc, #116]	; (800b750 <BSP_SDRAM_Init+0x98>)
 800b6dc:	2202      	movs	r2, #2
 800b6de:	611a      	str	r2, [r3, #16]
  /* TRP:  20ns => 2x11.11ns*/
  Timing.RPDelay              = 2;
 800b6e0:	4b1b      	ldr	r3, [pc, #108]	; (800b750 <BSP_SDRAM_Init+0x98>)
 800b6e2:	2202      	movs	r2, #2
 800b6e4:	615a      	str	r2, [r3, #20]
  /* TRCD: 20ns => 2x11.11ns */
  Timing.RCDDelay             = 2;
 800b6e6:	4b1a      	ldr	r3, [pc, #104]	; (800b750 <BSP_SDRAM_Init+0x98>)
 800b6e8:	2202      	movs	r2, #2
 800b6ea:	619a      	str	r2, [r3, #24]
  
  /* FMC SDRAM control configuration */
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 800b6ec:	4b16      	ldr	r3, [pc, #88]	; (800b748 <BSP_SDRAM_Init+0x90>)
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	605a      	str	r2, [r3, #4]
  /* Row addressing: [7:0] */
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 800b6f2:	4b15      	ldr	r3, [pc, #84]	; (800b748 <BSP_SDRAM_Init+0x90>)
 800b6f4:	2200      	movs	r2, #0
 800b6f6:	609a      	str	r2, [r3, #8]
  /* Column addressing: [11:0] */
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800b6f8:	4b13      	ldr	r3, [pc, #76]	; (800b748 <BSP_SDRAM_Init+0x90>)
 800b6fa:	2204      	movs	r2, #4
 800b6fc:	60da      	str	r2, [r3, #12]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 800b6fe:	4b12      	ldr	r3, [pc, #72]	; (800b748 <BSP_SDRAM_Init+0x90>)
 800b700:	2210      	movs	r2, #16
 800b702:	611a      	str	r2, [r3, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800b704:	4b10      	ldr	r3, [pc, #64]	; (800b748 <BSP_SDRAM_Init+0x90>)
 800b706:	2240      	movs	r2, #64	; 0x40
 800b708:	615a      	str	r2, [r3, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 800b70a:	4b0f      	ldr	r3, [pc, #60]	; (800b748 <BSP_SDRAM_Init+0x90>)
 800b70c:	f44f 72c0 	mov.w	r2, #384	; 0x180
 800b710:	619a      	str	r2, [r3, #24]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 800b712:	4b0d      	ldr	r3, [pc, #52]	; (800b748 <BSP_SDRAM_Init+0x90>)
 800b714:	2200      	movs	r2, #0
 800b716:	61da      	str	r2, [r3, #28]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 800b718:	4b0b      	ldr	r3, [pc, #44]	; (800b748 <BSP_SDRAM_Init+0x90>)
 800b71a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800b71e:	621a      	str	r2, [r3, #32]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 800b720:	4b09      	ldr	r3, [pc, #36]	; (800b748 <BSP_SDRAM_Init+0x90>)
 800b722:	2200      	movs	r2, #0
 800b724:	625a      	str	r2, [r3, #36]	; 0x24
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800b726:	4b08      	ldr	r3, [pc, #32]	; (800b748 <BSP_SDRAM_Init+0x90>)
 800b728:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800b72c:	629a      	str	r2, [r3, #40]	; 0x28
                    
  /* SDRAM controller initialization */
  MspInit();
 800b72e:	f000 f8ab 	bl	800b888 <MspInit>
  HAL_SDRAM_Init(&SdramHandle, &Timing);
 800b732:	4907      	ldr	r1, [pc, #28]	; (800b750 <BSP_SDRAM_Init+0x98>)
 800b734:	4804      	ldr	r0, [pc, #16]	; (800b748 <BSP_SDRAM_Init+0x90>)
 800b736:	f005 fbfb 	bl	8010f30 <HAL_SDRAM_Init>
  
  /* SDRAM initialization sequence */
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 800b73a:	f240 506a 	movw	r0, #1386	; 0x56a
 800b73e:	f000 f809 	bl	800b754 <BSP_SDRAM_Initialization_sequence>
}
 800b742:	bf00      	nop
 800b744:	bd80      	pop	{r7, pc}
 800b746:	bf00      	nop
 800b748:	200021c0 	.word	0x200021c0
 800b74c:	a0000140 	.word	0xa0000140
 800b750:	200021f4 	.word	0x200021f4

0800b754 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 800b754:	b580      	push	{r7, lr}
 800b756:	b084      	sub	sp, #16
 800b758:	af00      	add	r7, sp, #0
 800b75a:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpmrd =0;
 800b75c:	2300      	movs	r3, #0
 800b75e:	60fb      	str	r3, [r7, #12]
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800b760:	4b2a      	ldr	r3, [pc, #168]	; (800b80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800b762:	2201      	movs	r2, #1
 800b764:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800b766:	4b29      	ldr	r3, [pc, #164]	; (800b80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800b768:	2208      	movs	r2, #8
 800b76a:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800b76c:	4b27      	ldr	r3, [pc, #156]	; (800b80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800b76e:	2201      	movs	r2, #1
 800b770:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800b772:	4b26      	ldr	r3, [pc, #152]	; (800b80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800b774:	2200      	movs	r2, #0
 800b776:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800b778:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b77c:	4923      	ldr	r1, [pc, #140]	; (800b80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800b77e:	4824      	ldr	r0, [pc, #144]	; (800b810 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800b780:	f005 fd46 	bl	8011210 <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 800b784:	2001      	movs	r0, #1
 800b786:	f001 fc5f 	bl	800d048 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800b78a:	4b20      	ldr	r3, [pc, #128]	; (800b80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800b78c:	2202      	movs	r2, #2
 800b78e:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800b790:	4b1e      	ldr	r3, [pc, #120]	; (800b80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800b792:	2208      	movs	r2, #8
 800b794:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800b796:	4b1d      	ldr	r3, [pc, #116]	; (800b80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800b798:	2201      	movs	r2, #1
 800b79a:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800b79c:	4b1b      	ldr	r3, [pc, #108]	; (800b80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800b79e:	2200      	movs	r2, #0
 800b7a0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800b7a2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b7a6:	4919      	ldr	r1, [pc, #100]	; (800b80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800b7a8:	4819      	ldr	r0, [pc, #100]	; (800b810 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800b7aa:	f005 fd31 	bl	8011210 <HAL_SDRAM_SendCommand>
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 800b7ae:	4b17      	ldr	r3, [pc, #92]	; (800b80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800b7b0:	2203      	movs	r2, #3
 800b7b2:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800b7b4:	4b15      	ldr	r3, [pc, #84]	; (800b80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800b7b6:	2208      	movs	r2, #8
 800b7b8:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 4;
 800b7ba:	4b14      	ldr	r3, [pc, #80]	; (800b80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800b7bc:	2204      	movs	r2, #4
 800b7be:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = 0;
 800b7c0:	4b12      	ldr	r3, [pc, #72]	; (800b80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800b7c2:	2200      	movs	r2, #0
 800b7c4:	60da      	str	r2, [r3, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800b7c6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b7ca:	4910      	ldr	r1, [pc, #64]	; (800b80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800b7cc:	4810      	ldr	r0, [pc, #64]	; (800b810 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800b7ce:	f005 fd1f 	bl	8011210 <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 800b7d2:	f44f 730c 	mov.w	r3, #560	; 0x230
 800b7d6:	60fb      	str	r3, [r7, #12]
                     SDRAM_MODEREG_BURST_TYPE_SEQUENTIAL   |
                     SDRAM_MODEREG_CAS_LATENCY_3           |
                     SDRAM_MODEREG_OPERATING_MODE_STANDARD |
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 800b7d8:	4b0c      	ldr	r3, [pc, #48]	; (800b80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800b7da:	2204      	movs	r2, #4
 800b7dc:	601a      	str	r2, [r3, #0]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 800b7de:	4b0b      	ldr	r3, [pc, #44]	; (800b80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800b7e0:	2208      	movs	r2, #8
 800b7e2:	605a      	str	r2, [r3, #4]
  Command.AutoRefreshNumber       = 1;
 800b7e4:	4b09      	ldr	r3, [pc, #36]	; (800b80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800b7e6:	2201      	movs	r2, #1
 800b7e8:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition  = tmpmrd;
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	4a07      	ldr	r2, [pc, #28]	; (800b80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800b7ee:	60d3      	str	r3, [r2, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800b7f0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b7f4:	4905      	ldr	r1, [pc, #20]	; (800b80c <BSP_SDRAM_Initialization_sequence+0xb8>)
 800b7f6:	4806      	ldr	r0, [pc, #24]	; (800b810 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800b7f8:	f005 fd0a 	bl	8011210 <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 800b7fc:	6879      	ldr	r1, [r7, #4]
 800b7fe:	4804      	ldr	r0, [pc, #16]	; (800b810 <BSP_SDRAM_Initialization_sequence+0xbc>)
 800b800:	f005 fd3b 	bl	801127a <HAL_SDRAM_ProgramRefreshRate>
}
 800b804:	bf00      	nop
 800b806:	3710      	adds	r7, #16
 800b808:	46bd      	mov	sp, r7
 800b80a:	bd80      	pop	{r7, pc}
 800b80c:	20002210 	.word	0x20002210
 800b810:	200021c0 	.word	0x200021c0

0800b814 <BSP_SDRAM_ReadData>:
  * @param  uwStartAddress : Read start address
  * @param  pData : Pointer to data to be read  
  * @param  uwDataSize: Size of read data from the memory
  */
void BSP_SDRAM_ReadData(uint32_t uwStartAddress, uint32_t *pData, uint32_t uwDataSize)
{
 800b814:	b580      	push	{r7, lr}
 800b816:	b084      	sub	sp, #16
 800b818:	af00      	add	r7, sp, #0
 800b81a:	60f8      	str	r0, [r7, #12]
 800b81c:	60b9      	str	r1, [r7, #8]
 800b81e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_Read_32b(&SdramHandle, (uint32_t *)uwStartAddress, pData, uwDataSize); 
 800b820:	68f9      	ldr	r1, [r7, #12]
 800b822:	687b      	ldr	r3, [r7, #4]
 800b824:	68ba      	ldr	r2, [r7, #8]
 800b826:	4803      	ldr	r0, [pc, #12]	; (800b834 <BSP_SDRAM_ReadData+0x20>)
 800b828:	f005 fc7e 	bl	8011128 <HAL_SDRAM_Read_32b>
}
 800b82c:	bf00      	nop
 800b82e:	3710      	adds	r7, #16
 800b830:	46bd      	mov	sp, r7
 800b832:	bd80      	pop	{r7, pc}
 800b834:	200021c0 	.word	0x200021c0

0800b838 <BSP_SDRAM_ReadData16b>:

void BSP_SDRAM_ReadData16b(uint32_t uwStartAddress, uint16_t *pData, uint32_t uwDataSize)
{
 800b838:	b580      	push	{r7, lr}
 800b83a:	b084      	sub	sp, #16
 800b83c:	af00      	add	r7, sp, #0
 800b83e:	60f8      	str	r0, [r7, #12]
 800b840:	60b9      	str	r1, [r7, #8]
 800b842:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_Read_16b(&SdramHandle, (uint32_t *)uwStartAddress, pData, uwDataSize);
 800b844:	68f9      	ldr	r1, [r7, #12]
 800b846:	687b      	ldr	r3, [r7, #4]
 800b848:	68ba      	ldr	r2, [r7, #8]
 800b84a:	4803      	ldr	r0, [pc, #12]	; (800b858 <BSP_SDRAM_ReadData16b+0x20>)
 800b84c:	f005 fba4 	bl	8010f98 <HAL_SDRAM_Read_16b>
}
 800b850:	bf00      	nop
 800b852:	3710      	adds	r7, #16
 800b854:	46bd      	mov	sp, r7
 800b856:	bd80      	pop	{r7, pc}
 800b858:	200021c0 	.word	0x200021c0

0800b85c <BSP_SDRAM_WriteData16b>:
  /*Write 32-bit data buffer to SDRAM memory*/
  HAL_SDRAM_Write_32b(&SdramHandle, (uint32_t *)uwStartAddress, pData, uwDataSize);
}

void BSP_SDRAM_WriteData16b(uint32_t uwStartAddress, uint16_t *pData, uint32_t uwDataSize)
{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b084      	sub	sp, #16
 800b860:	af00      	add	r7, sp, #0
 800b862:	60f8      	str	r0, [r7, #12]
 800b864:	60b9      	str	r1, [r7, #8]
 800b866:	607a      	str	r2, [r7, #4]
  /* Disable write protection */
  HAL_SDRAM_WriteProtection_Disable(&SdramHandle);
 800b868:	4806      	ldr	r0, [pc, #24]	; (800b884 <BSP_SDRAM_WriteData16b+0x28>)
 800b86a:	f005 fcaa 	bl	80111c2 <HAL_SDRAM_WriteProtection_Disable>

  /*Write 32-bit data buffer to SDRAM memory*/
  HAL_SDRAM_Write_16b(&SdramHandle, (uint32_t *)uwStartAddress, pData, uwDataSize);
 800b86e:	68f9      	ldr	r1, [r7, #12]
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	68ba      	ldr	r2, [r7, #8]
 800b874:	4803      	ldr	r0, [pc, #12]	; (800b884 <BSP_SDRAM_WriteData16b+0x28>)
 800b876:	f005 fbf0 	bl	801105a <HAL_SDRAM_Write_16b>
}
 800b87a:	bf00      	nop
 800b87c:	3710      	adds	r7, #16
 800b87e:	46bd      	mov	sp, r7
 800b880:	bd80      	pop	{r7, pc}
 800b882:	bf00      	nop
 800b884:	200021c0 	.word	0x200021c0

0800b888 <MspInit>:

/**
  * @brief  Initializes SDRAM MSP.
  */
static void MspInit(void)
{
 800b888:	b580      	push	{r7, lr}
 800b88a:	b08e      	sub	sp, #56	; 0x38
 800b88c:	af00      	add	r7, sp, #0
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;
  SDRAM_HandleTypeDef  *hsdram = &SdramHandle;
 800b88e:	4b79      	ldr	r3, [pc, #484]	; (800ba74 <MspInit+0x1ec>)
 800b890:	637b      	str	r3, [r7, #52]	; 0x34

  /* Enable FMC clock */
  __FMC_CLK_ENABLE();
 800b892:	2300      	movs	r3, #0
 800b894:	61fb      	str	r3, [r7, #28]
 800b896:	4b78      	ldr	r3, [pc, #480]	; (800ba78 <MspInit+0x1f0>)
 800b898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b89a:	4a77      	ldr	r2, [pc, #476]	; (800ba78 <MspInit+0x1f0>)
 800b89c:	f043 0301 	orr.w	r3, r3, #1
 800b8a0:	6393      	str	r3, [r2, #56]	; 0x38
 800b8a2:	4b75      	ldr	r3, [pc, #468]	; (800ba78 <MspInit+0x1f0>)
 800b8a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b8a6:	f003 0301 	and.w	r3, r3, #1
 800b8aa:	61fb      	str	r3, [r7, #28]
 800b8ac:	69fb      	ldr	r3, [r7, #28]

  /* Enable chosen DMAx clock */
  __DMAx_CLK_ENABLE();
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	61bb      	str	r3, [r7, #24]
 800b8b2:	4b71      	ldr	r3, [pc, #452]	; (800ba78 <MspInit+0x1f0>)
 800b8b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8b6:	4a70      	ldr	r2, [pc, #448]	; (800ba78 <MspInit+0x1f0>)
 800b8b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800b8bc:	6313      	str	r3, [r2, #48]	; 0x30
 800b8be:	4b6e      	ldr	r3, [pc, #440]	; (800ba78 <MspInit+0x1f0>)
 800b8c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800b8c6:	61bb      	str	r3, [r7, #24]
 800b8c8:	69bb      	ldr	r3, [r7, #24]

  /* Enable GPIOs clock */
  __GPIOB_CLK_ENABLE();
 800b8ca:	2300      	movs	r3, #0
 800b8cc:	617b      	str	r3, [r7, #20]
 800b8ce:	4b6a      	ldr	r3, [pc, #424]	; (800ba78 <MspInit+0x1f0>)
 800b8d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8d2:	4a69      	ldr	r2, [pc, #420]	; (800ba78 <MspInit+0x1f0>)
 800b8d4:	f043 0302 	orr.w	r3, r3, #2
 800b8d8:	6313      	str	r3, [r2, #48]	; 0x30
 800b8da:	4b67      	ldr	r3, [pc, #412]	; (800ba78 <MspInit+0x1f0>)
 800b8dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8de:	f003 0302 	and.w	r3, r3, #2
 800b8e2:	617b      	str	r3, [r7, #20]
 800b8e4:	697b      	ldr	r3, [r7, #20]
  __GPIOC_CLK_ENABLE();
 800b8e6:	2300      	movs	r3, #0
 800b8e8:	613b      	str	r3, [r7, #16]
 800b8ea:	4b63      	ldr	r3, [pc, #396]	; (800ba78 <MspInit+0x1f0>)
 800b8ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8ee:	4a62      	ldr	r2, [pc, #392]	; (800ba78 <MspInit+0x1f0>)
 800b8f0:	f043 0304 	orr.w	r3, r3, #4
 800b8f4:	6313      	str	r3, [r2, #48]	; 0x30
 800b8f6:	4b60      	ldr	r3, [pc, #384]	; (800ba78 <MspInit+0x1f0>)
 800b8f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b8fa:	f003 0304 	and.w	r3, r3, #4
 800b8fe:	613b      	str	r3, [r7, #16]
 800b900:	693b      	ldr	r3, [r7, #16]
  __GPIOD_CLK_ENABLE();
 800b902:	2300      	movs	r3, #0
 800b904:	60fb      	str	r3, [r7, #12]
 800b906:	4b5c      	ldr	r3, [pc, #368]	; (800ba78 <MspInit+0x1f0>)
 800b908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b90a:	4a5b      	ldr	r2, [pc, #364]	; (800ba78 <MspInit+0x1f0>)
 800b90c:	f043 0308 	orr.w	r3, r3, #8
 800b910:	6313      	str	r3, [r2, #48]	; 0x30
 800b912:	4b59      	ldr	r3, [pc, #356]	; (800ba78 <MspInit+0x1f0>)
 800b914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b916:	f003 0308 	and.w	r3, r3, #8
 800b91a:	60fb      	str	r3, [r7, #12]
 800b91c:	68fb      	ldr	r3, [r7, #12]
  __GPIOE_CLK_ENABLE();
 800b91e:	2300      	movs	r3, #0
 800b920:	60bb      	str	r3, [r7, #8]
 800b922:	4b55      	ldr	r3, [pc, #340]	; (800ba78 <MspInit+0x1f0>)
 800b924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b926:	4a54      	ldr	r2, [pc, #336]	; (800ba78 <MspInit+0x1f0>)
 800b928:	f043 0310 	orr.w	r3, r3, #16
 800b92c:	6313      	str	r3, [r2, #48]	; 0x30
 800b92e:	4b52      	ldr	r3, [pc, #328]	; (800ba78 <MspInit+0x1f0>)
 800b930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b932:	f003 0310 	and.w	r3, r3, #16
 800b936:	60bb      	str	r3, [r7, #8]
 800b938:	68bb      	ldr	r3, [r7, #8]
  __GPIOF_CLK_ENABLE();
 800b93a:	2300      	movs	r3, #0
 800b93c:	607b      	str	r3, [r7, #4]
 800b93e:	4b4e      	ldr	r3, [pc, #312]	; (800ba78 <MspInit+0x1f0>)
 800b940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b942:	4a4d      	ldr	r2, [pc, #308]	; (800ba78 <MspInit+0x1f0>)
 800b944:	f043 0320 	orr.w	r3, r3, #32
 800b948:	6313      	str	r3, [r2, #48]	; 0x30
 800b94a:	4b4b      	ldr	r3, [pc, #300]	; (800ba78 <MspInit+0x1f0>)
 800b94c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b94e:	f003 0320 	and.w	r3, r3, #32
 800b952:	607b      	str	r3, [r7, #4]
 800b954:	687b      	ldr	r3, [r7, #4]
  __GPIOG_CLK_ENABLE();
 800b956:	2300      	movs	r3, #0
 800b958:	603b      	str	r3, [r7, #0]
 800b95a:	4b47      	ldr	r3, [pc, #284]	; (800ba78 <MspInit+0x1f0>)
 800b95c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b95e:	4a46      	ldr	r2, [pc, #280]	; (800ba78 <MspInit+0x1f0>)
 800b960:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b964:	6313      	str	r3, [r2, #48]	; 0x30
 800b966:	4b44      	ldr	r3, [pc, #272]	; (800ba78 <MspInit+0x1f0>)
 800b968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b96a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b96e:	603b      	str	r3, [r7, #0]
 800b970:	683b      	ldr	r3, [r7, #0]
 +-------------------+  
  
*/
  
  /* Common GPIO configuration */
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800b972:	2302      	movs	r3, #2
 800b974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800b976:	2302      	movs	r3, #2
 800b978:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800b97a:	2300      	movs	r3, #0
 800b97c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 800b97e:	230c      	movs	r3, #12
 800b980:	633b      	str	r3, [r7, #48]	; 0x30

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800b982:	2360      	movs	r3, #96	; 0x60
 800b984:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800b986:	f107 0320 	add.w	r3, r7, #32
 800b98a:	4619      	mov	r1, r3
 800b98c:	483b      	ldr	r0, [pc, #236]	; (800ba7c <MspInit+0x1f4>)
 800b98e:	f003 f9a9 	bl	800ece4 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 800b992:	2301      	movs	r3, #1
 800b994:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 800b996:	f107 0320 	add.w	r3, r7, #32
 800b99a:	4619      	mov	r1, r3
 800b99c:	4838      	ldr	r0, [pc, #224]	; (800ba80 <MspInit+0x1f8>)
 800b99e:	f003 f9a1 	bl	800ece4 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 800b9a2:	f24c 7303 	movw	r3, #50947	; 0xc703
 800b9a6:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 800b9a8:	f107 0320 	add.w	r3, r7, #32
 800b9ac:	4619      	mov	r1, r3
 800b9ae:	4835      	ldr	r0, [pc, #212]	; (800ba84 <MspInit+0x1fc>)
 800b9b0:	f003 f998 	bl	800ece4 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 800b9b4:	f64f 7383 	movw	r3, #65411	; 0xff83
 800b9b8:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 800b9ba:	f107 0320 	add.w	r3, r7, #32
 800b9be:	4619      	mov	r1, r3
 800b9c0:	4831      	ldr	r0, [pc, #196]	; (800ba88 <MspInit+0x200>)
 800b9c2:	f003 f98f 	bl	800ece4 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 800b9c6:	f64f 033f 	movw	r3, #63551	; 0xf83f
 800b9ca:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 800b9cc:	f107 0320 	add.w	r3, r7, #32
 800b9d0:	4619      	mov	r1, r3
 800b9d2:	482e      	ldr	r0, [pc, #184]	; (800ba8c <MspInit+0x204>)
 800b9d4:	f003 f986 	bl	800ece4 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 800b9d8:	f248 1333 	movw	r3, #33075	; 0x8133
 800b9dc:	623b      	str	r3, [r7, #32]
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 800b9de:	f107 0320 	add.w	r3, r7, #32
 800b9e2:	4619      	mov	r1, r3
 800b9e4:	482a      	ldr	r0, [pc, #168]	; (800ba90 <MspInit+0x208>)
 800b9e6:	f003 f97d 	bl	800ece4 <HAL_GPIO_Init>

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 800b9ea:	4b2a      	ldr	r3, [pc, #168]	; (800ba94 <MspInit+0x20c>)
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	605a      	str	r2, [r3, #4]
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 800b9f0:	4b28      	ldr	r3, [pc, #160]	; (800ba94 <MspInit+0x20c>)
 800b9f2:	2280      	movs	r2, #128	; 0x80
 800b9f4:	609a      	str	r2, [r3, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 800b9f6:	4b27      	ldr	r3, [pc, #156]	; (800ba94 <MspInit+0x20c>)
 800b9f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 800b9fc:	60da      	str	r2, [r3, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 800b9fe:	4b25      	ldr	r3, [pc, #148]	; (800ba94 <MspInit+0x20c>)
 800ba00:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800ba04:	611a      	str	r2, [r3, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800ba06:	4b23      	ldr	r3, [pc, #140]	; (800ba94 <MspInit+0x20c>)
 800ba08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800ba0c:	615a      	str	r2, [r3, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800ba0e:	4b21      	ldr	r3, [pc, #132]	; (800ba94 <MspInit+0x20c>)
 800ba10:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800ba14:	619a      	str	r2, [r3, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 800ba16:	4b1f      	ldr	r3, [pc, #124]	; (800ba94 <MspInit+0x20c>)
 800ba18:	2200      	movs	r2, #0
 800ba1a:	61da      	str	r2, [r3, #28]
  dmaHandle.Init.Priority            = DMA_PRIORITY_VERY_HIGH;
 800ba1c:	4b1d      	ldr	r3, [pc, #116]	; (800ba94 <MspInit+0x20c>)
 800ba1e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 800ba22:	621a      	str	r2, [r3, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 800ba24:	4b1b      	ldr	r3, [pc, #108]	; (800ba94 <MspInit+0x20c>)
 800ba26:	2204      	movs	r2, #4
 800ba28:	625a      	str	r2, [r3, #36]	; 0x24
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800ba2a:	4b1a      	ldr	r3, [pc, #104]	; (800ba94 <MspInit+0x20c>)
 800ba2c:	2203      	movs	r2, #3
 800ba2e:	629a      	str	r2, [r3, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800ba30:	4b18      	ldr	r3, [pc, #96]	; (800ba94 <MspInit+0x20c>)
 800ba32:	2200      	movs	r2, #0
 800ba34:	62da      	str	r2, [r3, #44]	; 0x2c
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 800ba36:	4b17      	ldr	r3, [pc, #92]	; (800ba94 <MspInit+0x20c>)
 800ba38:	2200      	movs	r2, #0
 800ba3a:	631a      	str	r2, [r3, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 800ba3c:	4b15      	ldr	r3, [pc, #84]	; (800ba94 <MspInit+0x20c>)
 800ba3e:	4a16      	ldr	r2, [pc, #88]	; (800ba98 <MspInit+0x210>)
 800ba40:	601a      	str	r2, [r3, #0]
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800ba42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba44:	4a13      	ldr	r2, [pc, #76]	; (800ba94 <MspInit+0x20c>)
 800ba46:	631a      	str	r2, [r3, #48]	; 0x30
 800ba48:	4a12      	ldr	r2, [pc, #72]	; (800ba94 <MspInit+0x20c>)
 800ba4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ba4c:	6393      	str	r3, [r2, #56]	; 0x38
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 800ba4e:	4811      	ldr	r0, [pc, #68]	; (800ba94 <MspInit+0x20c>)
 800ba50:	f002 fdb8 	bl	800e5c4 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle);
 800ba54:	480f      	ldr	r0, [pc, #60]	; (800ba94 <MspInit+0x20c>)
 800ba56:	f002 fd07 	bl	800e468 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 2, 3);
 800ba5a:	2203      	movs	r2, #3
 800ba5c:	2102      	movs	r1, #2
 800ba5e:	2038      	movs	r0, #56	; 0x38
 800ba60:	f002 fa33 	bl	800deca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 800ba64:	2038      	movs	r0, #56	; 0x38
 800ba66:	f002 fa4c 	bl	800df02 <HAL_NVIC_EnableIRQ>
}
 800ba6a:	bf00      	nop
 800ba6c:	3738      	adds	r7, #56	; 0x38
 800ba6e:	46bd      	mov	sp, r7
 800ba70:	bd80      	pop	{r7, pc}
 800ba72:	bf00      	nop
 800ba74:	200021c0 	.word	0x200021c0
 800ba78:	40023800 	.word	0x40023800
 800ba7c:	40020400 	.word	0x40020400
 800ba80:	40020800 	.word	0x40020800
 800ba84:	40020c00 	.word	0x40020c00
 800ba88:	40021000 	.word	0x40021000
 800ba8c:	40021400 	.word	0x40021400
 800ba90:	40021800 	.word	0x40021800
 800ba94:	20002220 	.word	0x20002220
 800ba98:	40026410 	.word	0x40026410

0800ba9c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800ba9c:	b580      	push	{r7, lr}
 800ba9e:	b082      	sub	sp, #8
 800baa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800baa2:	2300      	movs	r3, #0
 800baa4:	607b      	str	r3, [r7, #4]
 800baa6:	4b14      	ldr	r3, [pc, #80]	; (800baf8 <HAL_MspInit+0x5c>)
 800baa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800baaa:	4a13      	ldr	r2, [pc, #76]	; (800baf8 <HAL_MspInit+0x5c>)
 800baac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800bab0:	6453      	str	r3, [r2, #68]	; 0x44
 800bab2:	4b11      	ldr	r3, [pc, #68]	; (800baf8 <HAL_MspInit+0x5c>)
 800bab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800bab6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800baba:	607b      	str	r3, [r7, #4]
 800babc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800babe:	2300      	movs	r3, #0
 800bac0:	603b      	str	r3, [r7, #0]
 800bac2:	4b0d      	ldr	r3, [pc, #52]	; (800baf8 <HAL_MspInit+0x5c>)
 800bac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bac6:	4a0c      	ldr	r2, [pc, #48]	; (800baf8 <HAL_MspInit+0x5c>)
 800bac8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800bacc:	6413      	str	r3, [r2, #64]	; 0x40
 800bace:	4b0a      	ldr	r3, [pc, #40]	; (800baf8 <HAL_MspInit+0x5c>)
 800bad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bad2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800bad6:	603b      	str	r3, [r7, #0]
 800bad8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_2);
 800bada:	2005      	movs	r0, #5
 800badc:	f002 f9ea 	bl	800deb4 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PVD_IRQn, 0, 0);
 800bae0:	2200      	movs	r2, #0
 800bae2:	2100      	movs	r1, #0
 800bae4:	2001      	movs	r0, #1
 800bae6:	f002 f9f0 	bl	800deca <HAL_NVIC_SetPriority>
  /* PVD_IRQn interrupt configuration */
  HAL_NVIC_EnableIRQ(PVD_IRQn);
 800baea:	2001      	movs	r0, #1
 800baec:	f002 fa09 	bl	800df02 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800baf0:	bf00      	nop
 800baf2:	3708      	adds	r7, #8
 800baf4:	46bd      	mov	sp, r7
 800baf6:	bd80      	pop	{r7, pc}
 800baf8:	40023800 	.word	0x40023800

0800bafc <SVC_Handler>:
/******************************************************************************/
/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800bafc:	b480      	push	{r7}
 800bafe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800bb00:	bf00      	nop
 800bb02:	46bd      	mov	sp, r7
 800bb04:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb08:	4770      	bx	lr

0800bb0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800bb0a:	b480      	push	{r7}
 800bb0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800bb0e:	bf00      	nop
 800bb10:	46bd      	mov	sp, r7
 800bb12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb16:	4770      	bx	lr

0800bb18 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800bb18:	b580      	push	{r7, lr}
 800bb1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800bb1c:	f001 fa74 	bl	800d008 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800bb20:	bf00      	nop
 800bb22:	bd80      	pop	{r7, pc}

0800bb24 <PVD_IRQHandler>:

/**
  * @brief This function handles PVD interrupt through EXTI line 16.
  */
void PVD_IRQHandler(void)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN PVD_IRQn 0 */

  /* USER CODE END PVD_IRQn 0 */
  HAL_PWR_PVD_IRQHandler();
 800bb28:	f004 fd50 	bl	80105cc <HAL_PWR_PVD_IRQHandler>
  /* USER CODE BEGIN PVD_IRQn 1 */

  /* USER CODE END PVD_IRQn 1 */
}
 800bb2c:	bf00      	nop
 800bb2e:	bd80      	pop	{r7, pc}

0800bb30 <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ADS1256_DRDY_Pin);
 800bb34:	2004      	movs	r0, #4
 800bb36:	f003 fab3 	bl	800f0a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 800bb3a:	bf00      	nop
 800bb3c:	bd80      	pop	{r7, pc}

0800bb3e <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 800bb3e:	b580      	push	{r7, lr}
 800bb40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(ToggleFunction_Pin);
 800bb42:	2010      	movs	r0, #16
 800bb44:	f003 faac 	bl	800f0a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 800bb48:	bf00      	nop
 800bb4a:	bd80      	pop	{r7, pc}

0800bb4c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 800bb4c:	b580      	push	{r7, lr}
 800bb4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac2);
 800bb50:	4802      	ldr	r0, [pc, #8]	; (800bb5c <DMA1_Stream6_IRQHandler+0x10>)
 800bb52:	f002 fe5d 	bl	800e810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800bb56:	bf00      	nop
 800bb58:	bd80      	pop	{r7, pc}
 800bb5a:	bf00      	nop
 800bb5c:	200004f0 	.word	0x200004f0

0800bb60 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1, ADC2 and ADC3 global interrupts.
  */
void ADC_IRQHandler(void)
{
 800bb60:	b580      	push	{r7, lr}
 800bb62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800bb64:	4803      	ldr	r0, [pc, #12]	; (800bb74 <ADC_IRQHandler+0x14>)
 800bb66:	f001 fbb5 	bl	800d2d4 <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc3);
 800bb6a:	4803      	ldr	r0, [pc, #12]	; (800bb78 <ADC_IRQHandler+0x18>)
 800bb6c:	f001 fbb2 	bl	800d2d4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 800bb70:	bf00      	nop
 800bb72:	bd80      	pop	{r7, pc}
 800bb74:	200003a4 	.word	0x200003a4
 800bb78:	200003ec 	.word	0x200003ec

0800bb7c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800bb7c:	b580      	push	{r7, lr}
 800bb7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Recording_Pin);
 800bb80:	2040      	movs	r0, #64	; 0x40
 800bb82:	f003 fa8d 	bl	800f0a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Overdubbing_Pin);
 800bb86:	2080      	movs	r0, #128	; 0x80
 800bb88:	f003 fa8a 	bl	800f0a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Playback_Pin);
 800bb8c:	f44f 7000 	mov.w	r0, #512	; 0x200
 800bb90:	f003 fa86 	bl	800f0a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 800bb94:	bf00      	nop
 800bb96:	bd80      	pop	{r7, pc}

0800bb98 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800bb98:	b580      	push	{r7, lr}
 800bb9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 800bb9c:	4802      	ldr	r0, [pc, #8]	; (800bba8 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 800bb9e:	f006 fb82 	bl	80122a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800bba2:	bf00      	nop
 800bba4:	bd80      	pop	{r7, pc}
 800bba6:	bf00      	nop
 800bba8:	2000235c 	.word	0x2000235c

0800bbac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800bbac:	b580      	push	{r7, lr}
 800bbae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800bbb0:	4802      	ldr	r0, [pc, #8]	; (800bbbc <TIM2_IRQHandler+0x10>)
 800bbb2:	f006 fb78 	bl	80122a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800bbb6:	bf00      	nop
 800bbb8:	bd80      	pop	{r7, pc}
 800bbba:	bf00      	nop
 800bbbc:	20002284 	.word	0x20002284

0800bbc0 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 800bbc0:	b580      	push	{r7, lr}
 800bbc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 800bbc4:	4802      	ldr	r0, [pc, #8]	; (800bbd0 <TIM4_IRQHandler+0x10>)
 800bbc6:	f006 fb6e 	bl	80122a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800bbca:	bf00      	nop
 800bbcc:	bd80      	pop	{r7, pc}
 800bbce:	bf00      	nop
 800bbd0:	200022cc 	.word	0x200022cc

0800bbd4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800bbd4:	b580      	push	{r7, lr}
 800bbd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AD_KBD_BUT_DOWN_Pin);
 800bbd8:	f44f 6080 	mov.w	r0, #1024	; 0x400
 800bbdc:	f003 fa60 	bl	800f0a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(AD_KBD_INT_Pin);
 800bbe0:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800bbe4:	f003 fa5c 	bl	800f0a0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(Joystick_SW_Pin);
 800bbe8:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 800bbec:	f003 fa58 	bl	800f0a0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800bbf0:	bf00      	nop
 800bbf2:	bd80      	pop	{r7, pc}

0800bbf4 <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 800bbf8:	4802      	ldr	r0, [pc, #8]	; (800bc04 <TIM8_UP_TIM13_IRQHandler+0x10>)
 800bbfa:	f006 fb54 	bl	80122a6 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 800bbfe:	bf00      	nop
 800bc00:	bd80      	pop	{r7, pc}
 800bc02:	bf00      	nop
 800bc04:	20002314 	.word	0x20002314

0800bc08 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc3);
 800bc0c:	4802      	ldr	r0, [pc, #8]	; (800bc18 <DMA2_Stream1_IRQHandler+0x10>)
 800bc0e:	f002 fdff 	bl	800e810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 800bc12:	bf00      	nop
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	bf00      	nop
 800bc18:	20000434 	.word	0x20000434

0800bc1c <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_rx);
 800bc20:	4802      	ldr	r0, [pc, #8]	; (800bc2c <DMA2_Stream3_IRQHandler+0x10>)
 800bc22:	f002 fdf5 	bl	800e810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 800bc26:	bf00      	nop
 800bc28:	bd80      	pop	{r7, pc}
 800bc2a:	bf00      	nop
 800bc2c:	20002100 	.word	0x20002100

0800bc30 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi5_tx);
 800bc34:	4802      	ldr	r0, [pc, #8]	; (800bc40 <DMA2_Stream4_IRQHandler+0x10>)
 800bc36:	f002 fdeb 	bl	800e810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 800bc3a:	bf00      	nop
 800bc3c:	bd80      	pop	{r7, pc}
 800bc3e:	bf00      	nop
 800bc40:	20002160 	.word	0x20002160

0800bc44 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 800bc44:	b580      	push	{r7, lr}
 800bc46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 800bc48:	4802      	ldr	r0, [pc, #8]	; (800bc54 <OTG_HS_IRQHandler+0x10>)
 800bc4a:	f003 fb91 	bl	800f370 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 800bc4e:	bf00      	nop
 800bc50:	bd80      	pop	{r7, pc}
 800bc52:	bf00      	nop
 800bc54:	20002aec 	.word	0x20002aec

0800bc58 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	b086      	sub	sp, #24
 800bc5c:	af00      	add	r7, sp, #0
 800bc5e:	60f8      	str	r0, [r7, #12]
 800bc60:	60b9      	str	r1, [r7, #8]
 800bc62:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bc64:	2300      	movs	r3, #0
 800bc66:	617b      	str	r3, [r7, #20]
 800bc68:	e00a      	b.n	800bc80 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800bc6a:	f3af 8000 	nop.w
 800bc6e:	4601      	mov	r1, r0
 800bc70:	68bb      	ldr	r3, [r7, #8]
 800bc72:	1c5a      	adds	r2, r3, #1
 800bc74:	60ba      	str	r2, [r7, #8]
 800bc76:	b2ca      	uxtb	r2, r1
 800bc78:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bc7a:	697b      	ldr	r3, [r7, #20]
 800bc7c:	3301      	adds	r3, #1
 800bc7e:	617b      	str	r3, [r7, #20]
 800bc80:	697a      	ldr	r2, [r7, #20]
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	429a      	cmp	r2, r3
 800bc86:	dbf0      	blt.n	800bc6a <_read+0x12>
	}

return len;
 800bc88:	687b      	ldr	r3, [r7, #4]
}
 800bc8a:	4618      	mov	r0, r3
 800bc8c:	3718      	adds	r7, #24
 800bc8e:	46bd      	mov	sp, r7
 800bc90:	bd80      	pop	{r7, pc}

0800bc92 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800bc92:	b580      	push	{r7, lr}
 800bc94:	b086      	sub	sp, #24
 800bc96:	af00      	add	r7, sp, #0
 800bc98:	60f8      	str	r0, [r7, #12]
 800bc9a:	60b9      	str	r1, [r7, #8]
 800bc9c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bc9e:	2300      	movs	r3, #0
 800bca0:	617b      	str	r3, [r7, #20]
 800bca2:	e009      	b.n	800bcb8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800bca4:	68bb      	ldr	r3, [r7, #8]
 800bca6:	1c5a      	adds	r2, r3, #1
 800bca8:	60ba      	str	r2, [r7, #8]
 800bcaa:	781b      	ldrb	r3, [r3, #0]
 800bcac:	4618      	mov	r0, r3
 800bcae:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800bcb2:	697b      	ldr	r3, [r7, #20]
 800bcb4:	3301      	adds	r3, #1
 800bcb6:	617b      	str	r3, [r7, #20]
 800bcb8:	697a      	ldr	r2, [r7, #20]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	dbf1      	blt.n	800bca4 <_write+0x12>
	}
	return len;
 800bcc0:	687b      	ldr	r3, [r7, #4]
}
 800bcc2:	4618      	mov	r0, r3
 800bcc4:	3718      	adds	r7, #24
 800bcc6:	46bd      	mov	sp, r7
 800bcc8:	bd80      	pop	{r7, pc}

0800bcca <_close>:

int _close(int file)
{
 800bcca:	b480      	push	{r7}
 800bccc:	b083      	sub	sp, #12
 800bcce:	af00      	add	r7, sp, #0
 800bcd0:	6078      	str	r0, [r7, #4]
	return -1;
 800bcd2:	f04f 33ff 	mov.w	r3, #4294967295
}
 800bcd6:	4618      	mov	r0, r3
 800bcd8:	370c      	adds	r7, #12
 800bcda:	46bd      	mov	sp, r7
 800bcdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bce0:	4770      	bx	lr

0800bce2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 800bce2:	b480      	push	{r7}
 800bce4:	b083      	sub	sp, #12
 800bce6:	af00      	add	r7, sp, #0
 800bce8:	6078      	str	r0, [r7, #4]
 800bcea:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800bcf2:	605a      	str	r2, [r3, #4]
	return 0;
 800bcf4:	2300      	movs	r3, #0
}
 800bcf6:	4618      	mov	r0, r3
 800bcf8:	370c      	adds	r7, #12
 800bcfa:	46bd      	mov	sp, r7
 800bcfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd00:	4770      	bx	lr

0800bd02 <_isatty>:

int _isatty(int file)
{
 800bd02:	b480      	push	{r7}
 800bd04:	b083      	sub	sp, #12
 800bd06:	af00      	add	r7, sp, #0
 800bd08:	6078      	str	r0, [r7, #4]
	return 1;
 800bd0a:	2301      	movs	r3, #1
}
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	370c      	adds	r7, #12
 800bd10:	46bd      	mov	sp, r7
 800bd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd16:	4770      	bx	lr

0800bd18 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800bd18:	b480      	push	{r7}
 800bd1a:	b085      	sub	sp, #20
 800bd1c:	af00      	add	r7, sp, #0
 800bd1e:	60f8      	str	r0, [r7, #12]
 800bd20:	60b9      	str	r1, [r7, #8]
 800bd22:	607a      	str	r2, [r7, #4]
	return 0;
 800bd24:	2300      	movs	r3, #0
}
 800bd26:	4618      	mov	r0, r3
 800bd28:	3714      	adds	r7, #20
 800bd2a:	46bd      	mov	sp, r7
 800bd2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd30:	4770      	bx	lr
	...

0800bd34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800bd34:	b580      	push	{r7, lr}
 800bd36:	b086      	sub	sp, #24
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800bd3c:	4a14      	ldr	r2, [pc, #80]	; (800bd90 <_sbrk+0x5c>)
 800bd3e:	4b15      	ldr	r3, [pc, #84]	; (800bd94 <_sbrk+0x60>)
 800bd40:	1ad3      	subs	r3, r2, r3
 800bd42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800bd44:	697b      	ldr	r3, [r7, #20]
 800bd46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800bd48:	4b13      	ldr	r3, [pc, #76]	; (800bd98 <_sbrk+0x64>)
 800bd4a:	681b      	ldr	r3, [r3, #0]
 800bd4c:	2b00      	cmp	r3, #0
 800bd4e:	d102      	bne.n	800bd56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800bd50:	4b11      	ldr	r3, [pc, #68]	; (800bd98 <_sbrk+0x64>)
 800bd52:	4a12      	ldr	r2, [pc, #72]	; (800bd9c <_sbrk+0x68>)
 800bd54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800bd56:	4b10      	ldr	r3, [pc, #64]	; (800bd98 <_sbrk+0x64>)
 800bd58:	681a      	ldr	r2, [r3, #0]
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	4413      	add	r3, r2
 800bd5e:	693a      	ldr	r2, [r7, #16]
 800bd60:	429a      	cmp	r2, r3
 800bd62:	d207      	bcs.n	800bd74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800bd64:	f00b fc62 	bl	801762c <__errno>
 800bd68:	4603      	mov	r3, r0
 800bd6a:	220c      	movs	r2, #12
 800bd6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800bd6e:	f04f 33ff 	mov.w	r3, #4294967295
 800bd72:	e009      	b.n	800bd88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800bd74:	4b08      	ldr	r3, [pc, #32]	; (800bd98 <_sbrk+0x64>)
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800bd7a:	4b07      	ldr	r3, [pc, #28]	; (800bd98 <_sbrk+0x64>)
 800bd7c:	681a      	ldr	r2, [r3, #0]
 800bd7e:	687b      	ldr	r3, [r7, #4]
 800bd80:	4413      	add	r3, r2
 800bd82:	4a05      	ldr	r2, [pc, #20]	; (800bd98 <_sbrk+0x64>)
 800bd84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800bd86:	68fb      	ldr	r3, [r7, #12]
}
 800bd88:	4618      	mov	r0, r3
 800bd8a:	3718      	adds	r7, #24
 800bd8c:	46bd      	mov	sp, r7
 800bd8e:	bd80      	pop	{r7, pc}
 800bd90:	20030000 	.word	0x20030000
 800bd94:	00000400 	.word	0x00000400
 800bd98:	20002280 	.word	0x20002280
 800bd9c:	20003228 	.word	0x20003228

0800bda0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800bda0:	b480      	push	{r7}
 800bda2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800bda4:	4b06      	ldr	r3, [pc, #24]	; (800bdc0 <SystemInit+0x20>)
 800bda6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800bdaa:	4a05      	ldr	r2, [pc, #20]	; (800bdc0 <SystemInit+0x20>)
 800bdac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bdb0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800bdb4:	bf00      	nop
 800bdb6:	46bd      	mov	sp, r7
 800bdb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bdbc:	4770      	bx	lr
 800bdbe:	bf00      	nop
 800bdc0:	e000ed00 	.word	0xe000ed00

0800bdc4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim9;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800bdc4:	b580      	push	{r7, lr}
 800bdc6:	b086      	sub	sp, #24
 800bdc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800bdca:	f107 0308 	add.w	r3, r7, #8
 800bdce:	2200      	movs	r2, #0
 800bdd0:	601a      	str	r2, [r3, #0]
 800bdd2:	605a      	str	r2, [r3, #4]
 800bdd4:	609a      	str	r2, [r3, #8]
 800bdd6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bdd8:	463b      	mov	r3, r7
 800bdda:	2200      	movs	r2, #0
 800bddc:	601a      	str	r2, [r3, #0]
 800bdde:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800bde0:	4b1d      	ldr	r3, [pc, #116]	; (800be58 <MX_TIM2_Init+0x94>)
 800bde2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800bde6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 104;
 800bde8:	4b1b      	ldr	r3, [pc, #108]	; (800be58 <MX_TIM2_Init+0x94>)
 800bdea:	2268      	movs	r2, #104	; 0x68
 800bdec:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bdee:	4b1a      	ldr	r3, [pc, #104]	; (800be58 <MX_TIM2_Init+0x94>)
 800bdf0:	2200      	movs	r2, #0
 800bdf2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 799;
 800bdf4:	4b18      	ldr	r3, [pc, #96]	; (800be58 <MX_TIM2_Init+0x94>)
 800bdf6:	f240 321f 	movw	r2, #799	; 0x31f
 800bdfa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bdfc:	4b16      	ldr	r3, [pc, #88]	; (800be58 <MX_TIM2_Init+0x94>)
 800bdfe:	2200      	movs	r2, #0
 800be00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800be02:	4b15      	ldr	r3, [pc, #84]	; (800be58 <MX_TIM2_Init+0x94>)
 800be04:	2200      	movs	r2, #0
 800be06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800be08:	4813      	ldr	r0, [pc, #76]	; (800be58 <MX_TIM2_Init+0x94>)
 800be0a:	f006 f95d 	bl	80120c8 <HAL_TIM_Base_Init>
 800be0e:	4603      	mov	r3, r0
 800be10:	2b00      	cmp	r3, #0
 800be12:	d001      	beq.n	800be18 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 800be14:	f7fb feb6 	bl	8007b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800be18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800be1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800be1e:	f107 0308 	add.w	r3, r7, #8
 800be22:	4619      	mov	r1, r3
 800be24:	480c      	ldr	r0, [pc, #48]	; (800be58 <MX_TIM2_Init+0x94>)
 800be26:	f006 fb46 	bl	80124b6 <HAL_TIM_ConfigClockSource>
 800be2a:	4603      	mov	r3, r0
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d001      	beq.n	800be34 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800be30:	f7fb fea8 	bl	8007b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800be34:	2300      	movs	r3, #0
 800be36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800be38:	2300      	movs	r3, #0
 800be3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800be3c:	463b      	mov	r3, r7
 800be3e:	4619      	mov	r1, r3
 800be40:	4805      	ldr	r0, [pc, #20]	; (800be58 <MX_TIM2_Init+0x94>)
 800be42:	f006 fd6b 	bl	801291c <HAL_TIMEx_MasterConfigSynchronization>
 800be46:	4603      	mov	r3, r0
 800be48:	2b00      	cmp	r3, #0
 800be4a:	d001      	beq.n	800be50 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800be4c:	f7fb fe9a 	bl	8007b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800be50:	bf00      	nop
 800be52:	3718      	adds	r7, #24
 800be54:	46bd      	mov	sp, r7
 800be56:	bd80      	pop	{r7, pc}
 800be58:	20002284 	.word	0x20002284

0800be5c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800be5c:	b580      	push	{r7, lr}
 800be5e:	b086      	sub	sp, #24
 800be60:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800be62:	f107 0308 	add.w	r3, r7, #8
 800be66:	2200      	movs	r2, #0
 800be68:	601a      	str	r2, [r3, #0]
 800be6a:	605a      	str	r2, [r3, #4]
 800be6c:	609a      	str	r2, [r3, #8]
 800be6e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800be70:	463b      	mov	r3, r7
 800be72:	2200      	movs	r2, #0
 800be74:	601a      	str	r2, [r3, #0]
 800be76:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800be78:	4b1d      	ldr	r3, [pc, #116]	; (800bef0 <MX_TIM4_Init+0x94>)
 800be7a:	4a1e      	ldr	r2, [pc, #120]	; (800bef4 <MX_TIM4_Init+0x98>)
 800be7c:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 37499;
 800be7e:	4b1c      	ldr	r3, [pc, #112]	; (800bef0 <MX_TIM4_Init+0x94>)
 800be80:	f249 227b 	movw	r2, #37499	; 0x927b
 800be84:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800be86:	4b1a      	ldr	r3, [pc, #104]	; (800bef0 <MX_TIM4_Init+0x94>)
 800be88:	2200      	movs	r2, #0
 800be8a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 299;
 800be8c:	4b18      	ldr	r3, [pc, #96]	; (800bef0 <MX_TIM4_Init+0x94>)
 800be8e:	f240 122b 	movw	r2, #299	; 0x12b
 800be92:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800be94:	4b16      	ldr	r3, [pc, #88]	; (800bef0 <MX_TIM4_Init+0x94>)
 800be96:	2200      	movs	r2, #0
 800be98:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800be9a:	4b15      	ldr	r3, [pc, #84]	; (800bef0 <MX_TIM4_Init+0x94>)
 800be9c:	2200      	movs	r2, #0
 800be9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800bea0:	4813      	ldr	r0, [pc, #76]	; (800bef0 <MX_TIM4_Init+0x94>)
 800bea2:	f006 f911 	bl	80120c8 <HAL_TIM_Base_Init>
 800bea6:	4603      	mov	r3, r0
 800bea8:	2b00      	cmp	r3, #0
 800beaa:	d001      	beq.n	800beb0 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800beac:	f7fb fe6a 	bl	8007b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800beb0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800beb4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 800beb6:	f107 0308 	add.w	r3, r7, #8
 800beba:	4619      	mov	r1, r3
 800bebc:	480c      	ldr	r0, [pc, #48]	; (800bef0 <MX_TIM4_Init+0x94>)
 800bebe:	f006 fafa 	bl	80124b6 <HAL_TIM_ConfigClockSource>
 800bec2:	4603      	mov	r3, r0
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	d001      	beq.n	800becc <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 800bec8:	f7fb fe5c 	bl	8007b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800becc:	2300      	movs	r3, #0
 800bece:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bed0:	2300      	movs	r3, #0
 800bed2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800bed4:	463b      	mov	r3, r7
 800bed6:	4619      	mov	r1, r3
 800bed8:	4805      	ldr	r0, [pc, #20]	; (800bef0 <MX_TIM4_Init+0x94>)
 800beda:	f006 fd1f 	bl	801291c <HAL_TIMEx_MasterConfigSynchronization>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	d001      	beq.n	800bee8 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 800bee4:	f7fb fe4e 	bl	8007b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 800bee8:	bf00      	nop
 800beea:	3718      	adds	r7, #24
 800beec:	46bd      	mov	sp, r7
 800beee:	bd80      	pop	{r7, pc}
 800bef0:	200022cc 	.word	0x200022cc
 800bef4:	40000800 	.word	0x40000800

0800bef8 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 800bef8:	b580      	push	{r7, lr}
 800befa:	b086      	sub	sp, #24
 800befc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800befe:	f107 0308 	add.w	r3, r7, #8
 800bf02:	2200      	movs	r2, #0
 800bf04:	601a      	str	r2, [r3, #0]
 800bf06:	605a      	str	r2, [r3, #4]
 800bf08:	609a      	str	r2, [r3, #8]
 800bf0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800bf0c:	463b      	mov	r3, r7
 800bf0e:	2200      	movs	r2, #0
 800bf10:	601a      	str	r2, [r3, #0]
 800bf12:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800bf14:	4b1e      	ldr	r3, [pc, #120]	; (800bf90 <MX_TIM8_Init+0x98>)
 800bf16:	4a1f      	ldr	r2, [pc, #124]	; (800bf94 <MX_TIM8_Init+0x9c>)
 800bf18:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 399;
 800bf1a:	4b1d      	ldr	r3, [pc, #116]	; (800bf90 <MX_TIM8_Init+0x98>)
 800bf1c:	f240 128f 	movw	r2, #399	; 0x18f
 800bf20:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bf22:	4b1b      	ldr	r3, [pc, #108]	; (800bf90 <MX_TIM8_Init+0x98>)
 800bf24:	2200      	movs	r2, #0
 800bf26:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 27;
 800bf28:	4b19      	ldr	r3, [pc, #100]	; (800bf90 <MX_TIM8_Init+0x98>)
 800bf2a:	221b      	movs	r2, #27
 800bf2c:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bf2e:	4b18      	ldr	r3, [pc, #96]	; (800bf90 <MX_TIM8_Init+0x98>)
 800bf30:	2200      	movs	r2, #0
 800bf32:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800bf34:	4b16      	ldr	r3, [pc, #88]	; (800bf90 <MX_TIM8_Init+0x98>)
 800bf36:	2200      	movs	r2, #0
 800bf38:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bf3a:	4b15      	ldr	r3, [pc, #84]	; (800bf90 <MX_TIM8_Init+0x98>)
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800bf40:	4813      	ldr	r0, [pc, #76]	; (800bf90 <MX_TIM8_Init+0x98>)
 800bf42:	f006 f8c1 	bl	80120c8 <HAL_TIM_Base_Init>
 800bf46:	4603      	mov	r3, r0
 800bf48:	2b00      	cmp	r3, #0
 800bf4a:	d001      	beq.n	800bf50 <MX_TIM8_Init+0x58>
  {
    Error_Handler();
 800bf4c:	f7fb fe1a 	bl	8007b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800bf50:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bf54:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800bf56:	f107 0308 	add.w	r3, r7, #8
 800bf5a:	4619      	mov	r1, r3
 800bf5c:	480c      	ldr	r0, [pc, #48]	; (800bf90 <MX_TIM8_Init+0x98>)
 800bf5e:	f006 faaa 	bl	80124b6 <HAL_TIM_ConfigClockSource>
 800bf62:	4603      	mov	r3, r0
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d001      	beq.n	800bf6c <MX_TIM8_Init+0x74>
  {
    Error_Handler();
 800bf68:	f7fb fe0c 	bl	8007b84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800bf6c:	2320      	movs	r3, #32
 800bf6e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800bf70:	2300      	movs	r3, #0
 800bf72:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 800bf74:	463b      	mov	r3, r7
 800bf76:	4619      	mov	r1, r3
 800bf78:	4805      	ldr	r0, [pc, #20]	; (800bf90 <MX_TIM8_Init+0x98>)
 800bf7a:	f006 fccf 	bl	801291c <HAL_TIMEx_MasterConfigSynchronization>
 800bf7e:	4603      	mov	r3, r0
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d001      	beq.n	800bf88 <MX_TIM8_Init+0x90>
  {
    Error_Handler();
 800bf84:	f7fb fdfe 	bl	8007b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 800bf88:	bf00      	nop
 800bf8a:	3718      	adds	r7, #24
 800bf8c:	46bd      	mov	sp, r7
 800bf8e:	bd80      	pop	{r7, pc}
 800bf90:	20002314 	.word	0x20002314
 800bf94:	40010400 	.word	0x40010400

0800bf98 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 800bf98:	b580      	push	{r7, lr}
 800bf9a:	b084      	sub	sp, #16
 800bf9c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800bf9e:	463b      	mov	r3, r7
 800bfa0:	2200      	movs	r2, #0
 800bfa2:	601a      	str	r2, [r3, #0]
 800bfa4:	605a      	str	r2, [r3, #4]
 800bfa6:	609a      	str	r2, [r3, #8]
 800bfa8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 800bfaa:	4b15      	ldr	r3, [pc, #84]	; (800c000 <MX_TIM9_Init+0x68>)
 800bfac:	4a15      	ldr	r2, [pc, #84]	; (800c004 <MX_TIM9_Init+0x6c>)
 800bfae:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 199;
 800bfb0:	4b13      	ldr	r3, [pc, #76]	; (800c000 <MX_TIM9_Init+0x68>)
 800bfb2:	22c7      	movs	r2, #199	; 0xc7
 800bfb4:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800bfb6:	4b12      	ldr	r3, [pc, #72]	; (800c000 <MX_TIM9_Init+0x68>)
 800bfb8:	2200      	movs	r2, #0
 800bfba:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 199;
 800bfbc:	4b10      	ldr	r3, [pc, #64]	; (800c000 <MX_TIM9_Init+0x68>)
 800bfbe:	22c7      	movs	r2, #199	; 0xc7
 800bfc0:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800bfc2:	4b0f      	ldr	r3, [pc, #60]	; (800c000 <MX_TIM9_Init+0x68>)
 800bfc4:	2200      	movs	r2, #0
 800bfc6:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800bfc8:	4b0d      	ldr	r3, [pc, #52]	; (800c000 <MX_TIM9_Init+0x68>)
 800bfca:	2200      	movs	r2, #0
 800bfcc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 800bfce:	480c      	ldr	r0, [pc, #48]	; (800c000 <MX_TIM9_Init+0x68>)
 800bfd0:	f006 f87a 	bl	80120c8 <HAL_TIM_Base_Init>
 800bfd4:	4603      	mov	r3, r0
 800bfd6:	2b00      	cmp	r3, #0
 800bfd8:	d001      	beq.n	800bfde <MX_TIM9_Init+0x46>
  {
    Error_Handler();
 800bfda:	f7fb fdd3 	bl	8007b84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800bfde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800bfe2:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800bfe4:	463b      	mov	r3, r7
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	4805      	ldr	r0, [pc, #20]	; (800c000 <MX_TIM9_Init+0x68>)
 800bfea:	f006 fa64 	bl	80124b6 <HAL_TIM_ConfigClockSource>
 800bfee:	4603      	mov	r3, r0
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d001      	beq.n	800bff8 <MX_TIM9_Init+0x60>
  {
    Error_Handler();
 800bff4:	f7fb fdc6 	bl	8007b84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800bff8:	bf00      	nop
 800bffa:	3710      	adds	r7, #16
 800bffc:	46bd      	mov	sp, r7
 800bffe:	bd80      	pop	{r7, pc}
 800c000:	2000235c 	.word	0x2000235c
 800c004:	40014000 	.word	0x40014000

0800c008 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800c008:	b580      	push	{r7, lr}
 800c00a:	b086      	sub	sp, #24
 800c00c:	af00      	add	r7, sp, #0
 800c00e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	681b      	ldr	r3, [r3, #0]
 800c014:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c018:	d116      	bne.n	800c048 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800c01a:	2300      	movs	r3, #0
 800c01c:	617b      	str	r3, [r7, #20]
 800c01e:	4b36      	ldr	r3, [pc, #216]	; (800c0f8 <HAL_TIM_Base_MspInit+0xf0>)
 800c020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c022:	4a35      	ldr	r2, [pc, #212]	; (800c0f8 <HAL_TIM_Base_MspInit+0xf0>)
 800c024:	f043 0301 	orr.w	r3, r3, #1
 800c028:	6413      	str	r3, [r2, #64]	; 0x40
 800c02a:	4b33      	ldr	r3, [pc, #204]	; (800c0f8 <HAL_TIM_Base_MspInit+0xf0>)
 800c02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c02e:	f003 0301 	and.w	r3, r3, #1
 800c032:	617b      	str	r3, [r7, #20]
 800c034:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 3, 2);
 800c036:	2202      	movs	r2, #2
 800c038:	2103      	movs	r1, #3
 800c03a:	201c      	movs	r0, #28
 800c03c:	f001 ff45 	bl	800deca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800c040:	201c      	movs	r0, #28
 800c042:	f001 ff5e 	bl	800df02 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800c046:	e052      	b.n	800c0ee <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM4)
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	4a2b      	ldr	r2, [pc, #172]	; (800c0fc <HAL_TIM_Base_MspInit+0xf4>)
 800c04e:	4293      	cmp	r3, r2
 800c050:	d116      	bne.n	800c080 <HAL_TIM_Base_MspInit+0x78>
    __HAL_RCC_TIM4_CLK_ENABLE();
 800c052:	2300      	movs	r3, #0
 800c054:	613b      	str	r3, [r7, #16]
 800c056:	4b28      	ldr	r3, [pc, #160]	; (800c0f8 <HAL_TIM_Base_MspInit+0xf0>)
 800c058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c05a:	4a27      	ldr	r2, [pc, #156]	; (800c0f8 <HAL_TIM_Base_MspInit+0xf0>)
 800c05c:	f043 0304 	orr.w	r3, r3, #4
 800c060:	6413      	str	r3, [r2, #64]	; 0x40
 800c062:	4b25      	ldr	r3, [pc, #148]	; (800c0f8 <HAL_TIM_Base_MspInit+0xf0>)
 800c064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c066:	f003 0304 	and.w	r3, r3, #4
 800c06a:	613b      	str	r3, [r7, #16]
 800c06c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 3, 3);
 800c06e:	2203      	movs	r2, #3
 800c070:	2103      	movs	r1, #3
 800c072:	201e      	movs	r0, #30
 800c074:	f001 ff29 	bl	800deca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 800c078:	201e      	movs	r0, #30
 800c07a:	f001 ff42 	bl	800df02 <HAL_NVIC_EnableIRQ>
}
 800c07e:	e036      	b.n	800c0ee <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM8)
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	4a1e      	ldr	r2, [pc, #120]	; (800c100 <HAL_TIM_Base_MspInit+0xf8>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d116      	bne.n	800c0b8 <HAL_TIM_Base_MspInit+0xb0>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800c08a:	2300      	movs	r3, #0
 800c08c:	60fb      	str	r3, [r7, #12]
 800c08e:	4b1a      	ldr	r3, [pc, #104]	; (800c0f8 <HAL_TIM_Base_MspInit+0xf0>)
 800c090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c092:	4a19      	ldr	r2, [pc, #100]	; (800c0f8 <HAL_TIM_Base_MspInit+0xf0>)
 800c094:	f043 0302 	orr.w	r3, r3, #2
 800c098:	6453      	str	r3, [r2, #68]	; 0x44
 800c09a:	4b17      	ldr	r3, [pc, #92]	; (800c0f8 <HAL_TIM_Base_MspInit+0xf0>)
 800c09c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c09e:	f003 0302 	and.w	r3, r3, #2
 800c0a2:	60fb      	str	r3, [r7, #12]
 800c0a4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 800c0a6:	2200      	movs	r2, #0
 800c0a8:	2100      	movs	r1, #0
 800c0aa:	202c      	movs	r0, #44	; 0x2c
 800c0ac:	f001 ff0d 	bl	800deca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 800c0b0:	202c      	movs	r0, #44	; 0x2c
 800c0b2:	f001 ff26 	bl	800df02 <HAL_NVIC_EnableIRQ>
}
 800c0b6:	e01a      	b.n	800c0ee <HAL_TIM_Base_MspInit+0xe6>
  else if(tim_baseHandle->Instance==TIM9)
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	4a11      	ldr	r2, [pc, #68]	; (800c104 <HAL_TIM_Base_MspInit+0xfc>)
 800c0be:	4293      	cmp	r3, r2
 800c0c0:	d115      	bne.n	800c0ee <HAL_TIM_Base_MspInit+0xe6>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	60bb      	str	r3, [r7, #8]
 800c0c6:	4b0c      	ldr	r3, [pc, #48]	; (800c0f8 <HAL_TIM_Base_MspInit+0xf0>)
 800c0c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0ca:	4a0b      	ldr	r2, [pc, #44]	; (800c0f8 <HAL_TIM_Base_MspInit+0xf0>)
 800c0cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800c0d0:	6453      	str	r3, [r2, #68]	; 0x44
 800c0d2:	4b09      	ldr	r3, [pc, #36]	; (800c0f8 <HAL_TIM_Base_MspInit+0xf0>)
 800c0d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800c0d6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800c0da:	60bb      	str	r3, [r7, #8]
 800c0dc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 2, 2);
 800c0de:	2202      	movs	r2, #2
 800c0e0:	2102      	movs	r1, #2
 800c0e2:	2018      	movs	r0, #24
 800c0e4:	f001 fef1 	bl	800deca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800c0e8:	2018      	movs	r0, #24
 800c0ea:	f001 ff0a 	bl	800df02 <HAL_NVIC_EnableIRQ>
}
 800c0ee:	bf00      	nop
 800c0f0:	3718      	adds	r7, #24
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	bd80      	pop	{r7, pc}
 800c0f6:	bf00      	nop
 800c0f8:	40023800 	.word	0x40023800
 800c0fc:	40000800 	.word	0x40000800
 800c100:	40010400 	.word	0x40010400
 800c104:	40014000 	.word	0x40014000

0800c108 <TM_HD44780_Init>:
#define HD44780_2LINE               0x08
#define HD44780_1LINE               0x00
#define HD44780_5x10DOTS            0x04
#define HD44780_5x8DOTS             0x00

void TM_HD44780_Init(uint8_t cols, uint8_t rows) {
 800c108:	b580      	push	{r7, lr}
 800c10a:	b082      	sub	sp, #8
 800c10c:	af00      	add	r7, sp, #0
 800c10e:	4603      	mov	r3, r0
 800c110:	460a      	mov	r2, r1
 800c112:	71fb      	strb	r3, [r7, #7]
 800c114:	4613      	mov	r3, r2
 800c116:	71bb      	strb	r3, [r7, #6]
	/* Initialize delay */
	//TM_DELAY_Init();
	
	/* Init pinout */
	TM_HD44780_InitPins();
 800c118:	f000 f99c 	bl	800c454 <TM_HD44780_InitPins>
	
	/* At least 40ms */
	HD44780_Delay(45000);
 800c11c:	f64a 70c8 	movw	r0, #45000	; 0xafc8
 800c120:	f7f5 fbc0 	bl	80018a4 <ShortDelayUS>
	
	/* Set LCD width and height */
	HD44780_Opts.Rows = rows;
 800c124:	4a2a      	ldr	r2, [pc, #168]	; (800c1d0 <TM_HD44780_Init+0xc8>)
 800c126:	79bb      	ldrb	r3, [r7, #6]
 800c128:	70d3      	strb	r3, [r2, #3]
	HD44780_Opts.Cols = cols;
 800c12a:	4a29      	ldr	r2, [pc, #164]	; (800c1d0 <TM_HD44780_Init+0xc8>)
 800c12c:	79fb      	ldrb	r3, [r7, #7]
 800c12e:	7113      	strb	r3, [r2, #4]
	
	/* Set cursor pointer to beginning for LCD */
	HD44780_Opts.currentX = 0;
 800c130:	4b27      	ldr	r3, [pc, #156]	; (800c1d0 <TM_HD44780_Init+0xc8>)
 800c132:	2200      	movs	r2, #0
 800c134:	715a      	strb	r2, [r3, #5]
	HD44780_Opts.currentY = 0;
 800c136:	4b26      	ldr	r3, [pc, #152]	; (800c1d0 <TM_HD44780_Init+0xc8>)
 800c138:	2200      	movs	r2, #0
 800c13a:	719a      	strb	r2, [r3, #6]
	
	HD44780_Opts.DisplayFunction = HD44780_4BITMODE | HD44780_5x8DOTS | HD44780_1LINE;
 800c13c:	4b24      	ldr	r3, [pc, #144]	; (800c1d0 <TM_HD44780_Init+0xc8>)
 800c13e:	2200      	movs	r2, #0
 800c140:	705a      	strb	r2, [r3, #1]
	if (rows > 1) {
 800c142:	79bb      	ldrb	r3, [r7, #6]
 800c144:	2b01      	cmp	r3, #1
 800c146:	d906      	bls.n	800c156 <TM_HD44780_Init+0x4e>
		HD44780_Opts.DisplayFunction |= HD44780_2LINE;
 800c148:	4b21      	ldr	r3, [pc, #132]	; (800c1d0 <TM_HD44780_Init+0xc8>)
 800c14a:	785b      	ldrb	r3, [r3, #1]
 800c14c:	f043 0308 	orr.w	r3, r3, #8
 800c150:	b2da      	uxtb	r2, r3
 800c152:	4b1f      	ldr	r3, [pc, #124]	; (800c1d0 <TM_HD44780_Init+0xc8>)
 800c154:	705a      	strb	r2, [r3, #1]
	}
	
	/* Try to set 4bit mode */
	TM_HD44780_Cmd4bit(0x03);
 800c156:	2003      	movs	r0, #3
 800c158:	f000 f8f8 	bl	800c34c <TM_HD44780_Cmd4bit>
	HD44780_Delay(4500);
 800c15c:	f241 1094 	movw	r0, #4500	; 0x1194
 800c160:	f7f5 fba0 	bl	80018a4 <ShortDelayUS>
	
	/* Second try */
	TM_HD44780_Cmd4bit(0x03);
 800c164:	2003      	movs	r0, #3
 800c166:	f000 f8f1 	bl	800c34c <TM_HD44780_Cmd4bit>
	HD44780_Delay(4500);
 800c16a:	f241 1094 	movw	r0, #4500	; 0x1194
 800c16e:	f7f5 fb99 	bl	80018a4 <ShortDelayUS>
	
	/* Third goo! */
	TM_HD44780_Cmd4bit(0x03);
 800c172:	2003      	movs	r0, #3
 800c174:	f000 f8ea 	bl	800c34c <TM_HD44780_Cmd4bit>
	HD44780_Delay(4500);
 800c178:	f241 1094 	movw	r0, #4500	; 0x1194
 800c17c:	f7f5 fb92 	bl	80018a4 <ShortDelayUS>
	
	/* Set 4-bit interface */
	TM_HD44780_Cmd4bit(0x02);
 800c180:	2002      	movs	r0, #2
 800c182:	f000 f8e3 	bl	800c34c <TM_HD44780_Cmd4bit>
	HD44780_Delay(100);
 800c186:	2064      	movs	r0, #100	; 0x64
 800c188:	f7f5 fb8c 	bl	80018a4 <ShortDelayUS>
	
	/* Set # lines, font size, etc. */
	TM_HD44780_Cmd(HD44780_FUNCTIONSET | HD44780_Opts.DisplayFunction);
 800c18c:	4b10      	ldr	r3, [pc, #64]	; (800c1d0 <TM_HD44780_Init+0xc8>)
 800c18e:	785b      	ldrb	r3, [r3, #1]
 800c190:	f043 0320 	orr.w	r3, r3, #32
 800c194:	b2db      	uxtb	r3, r3
 800c196:	4618      	mov	r0, r3
 800c198:	f000 f89c 	bl	800c2d4 <TM_HD44780_Cmd>

	/* Turn the display on with no cursor or blinking default */
	HD44780_Opts.DisplayControl = HD44780_DISPLAYON;
 800c19c:	4b0c      	ldr	r3, [pc, #48]	; (800c1d0 <TM_HD44780_Init+0xc8>)
 800c19e:	2204      	movs	r2, #4
 800c1a0:	701a      	strb	r2, [r3, #0]
	TM_HD44780_DisplayOn();
 800c1a2:	f000 f881 	bl	800c2a8 <TM_HD44780_DisplayOn>

	/* Clear lcd */
	TM_HD44780_Clear();
 800c1a6:	f000 f815 	bl	800c1d4 <TM_HD44780_Clear>

	/* Default font directions */
	HD44780_Opts.DisplayMode = HD44780_ENTRYLEFT | HD44780_ENTRYSHIFTDECREMENT;
 800c1aa:	4b09      	ldr	r3, [pc, #36]	; (800c1d0 <TM_HD44780_Init+0xc8>)
 800c1ac:	2202      	movs	r2, #2
 800c1ae:	709a      	strb	r2, [r3, #2]
	TM_HD44780_Cmd(HD44780_ENTRYMODESET | HD44780_Opts.DisplayMode);
 800c1b0:	4b07      	ldr	r3, [pc, #28]	; (800c1d0 <TM_HD44780_Init+0xc8>)
 800c1b2:	789b      	ldrb	r3, [r3, #2]
 800c1b4:	f043 0304 	orr.w	r3, r3, #4
 800c1b8:	b2db      	uxtb	r3, r3
 800c1ba:	4618      	mov	r0, r3
 800c1bc:	f000 f88a 	bl	800c2d4 <TM_HD44780_Cmd>

	/* Delay */
	HD44780_Delay(4500);
 800c1c0:	f241 1094 	movw	r0, #4500	; 0x1194
 800c1c4:	f7f5 fb6e 	bl	80018a4 <ShortDelayUS>
}
 800c1c8:	bf00      	nop
 800c1ca:	3708      	adds	r7, #8
 800c1cc:	46bd      	mov	sp, r7
 800c1ce:	bd80      	pop	{r7, pc}
 800c1d0:	200023a4 	.word	0x200023a4

0800c1d4 <TM_HD44780_Clear>:

void TM_HD44780_Clear(void) {
 800c1d4:	b580      	push	{r7, lr}
 800c1d6:	af00      	add	r7, sp, #0
	TM_HD44780_Cmd(HD44780_CLEARDISPLAY);
 800c1d8:	2001      	movs	r0, #1
 800c1da:	f000 f87b 	bl	800c2d4 <TM_HD44780_Cmd>
	HD44780_Delay(3000);
 800c1de:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800c1e2:	f7f5 fb5f 	bl	80018a4 <ShortDelayUS>
}
 800c1e6:	bf00      	nop
 800c1e8:	bd80      	pop	{r7, pc}
	...

0800c1ec <TM_HD44780_Puts>:

void TM_HD44780_Puts(uint8_t x, uint8_t y, char* str) {
 800c1ec:	b580      	push	{r7, lr}
 800c1ee:	b082      	sub	sp, #8
 800c1f0:	af00      	add	r7, sp, #0
 800c1f2:	4603      	mov	r3, r0
 800c1f4:	603a      	str	r2, [r7, #0]
 800c1f6:	71fb      	strb	r3, [r7, #7]
 800c1f8:	460b      	mov	r3, r1
 800c1fa:	71bb      	strb	r3, [r7, #6]
	TM_HD44780_CursorSet(x, y);
 800c1fc:	79ba      	ldrb	r2, [r7, #6]
 800c1fe:	79fb      	ldrb	r3, [r7, #7]
 800c200:	4611      	mov	r1, r2
 800c202:	4618      	mov	r0, r3
 800c204:	f000 f8f6 	bl	800c3f4 <TM_HD44780_CursorSet>
	while (*str) {
 800c208:	e042      	b.n	800c290 <TM_HD44780_Puts+0xa4>
		if (HD44780_Opts.currentX >= HD44780_Opts.Cols) {
 800c20a:	4b26      	ldr	r3, [pc, #152]	; (800c2a4 <TM_HD44780_Puts+0xb8>)
 800c20c:	795a      	ldrb	r2, [r3, #5]
 800c20e:	4b25      	ldr	r3, [pc, #148]	; (800c2a4 <TM_HD44780_Puts+0xb8>)
 800c210:	791b      	ldrb	r3, [r3, #4]
 800c212:	429a      	cmp	r2, r3
 800c214:	d310      	bcc.n	800c238 <TM_HD44780_Puts+0x4c>
			HD44780_Opts.currentX = 0;
 800c216:	4b23      	ldr	r3, [pc, #140]	; (800c2a4 <TM_HD44780_Puts+0xb8>)
 800c218:	2200      	movs	r2, #0
 800c21a:	715a      	strb	r2, [r3, #5]
			HD44780_Opts.currentY++;
 800c21c:	4b21      	ldr	r3, [pc, #132]	; (800c2a4 <TM_HD44780_Puts+0xb8>)
 800c21e:	799b      	ldrb	r3, [r3, #6]
 800c220:	3301      	adds	r3, #1
 800c222:	b2da      	uxtb	r2, r3
 800c224:	4b1f      	ldr	r3, [pc, #124]	; (800c2a4 <TM_HD44780_Puts+0xb8>)
 800c226:	719a      	strb	r2, [r3, #6]
			TM_HD44780_CursorSet(HD44780_Opts.currentX, HD44780_Opts.currentY);
 800c228:	4b1e      	ldr	r3, [pc, #120]	; (800c2a4 <TM_HD44780_Puts+0xb8>)
 800c22a:	795b      	ldrb	r3, [r3, #5]
 800c22c:	4a1d      	ldr	r2, [pc, #116]	; (800c2a4 <TM_HD44780_Puts+0xb8>)
 800c22e:	7992      	ldrb	r2, [r2, #6]
 800c230:	4611      	mov	r1, r2
 800c232:	4618      	mov	r0, r3
 800c234:	f000 f8de 	bl	800c3f4 <TM_HD44780_CursorSet>
		}
		if (*str == '\n') {
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	2b0a      	cmp	r3, #10
 800c23e:	d10e      	bne.n	800c25e <TM_HD44780_Puts+0x72>
			HD44780_Opts.currentY++;
 800c240:	4b18      	ldr	r3, [pc, #96]	; (800c2a4 <TM_HD44780_Puts+0xb8>)
 800c242:	799b      	ldrb	r3, [r3, #6]
 800c244:	3301      	adds	r3, #1
 800c246:	b2da      	uxtb	r2, r3
 800c248:	4b16      	ldr	r3, [pc, #88]	; (800c2a4 <TM_HD44780_Puts+0xb8>)
 800c24a:	719a      	strb	r2, [r3, #6]
			TM_HD44780_CursorSet(HD44780_Opts.currentX, HD44780_Opts.currentY);
 800c24c:	4b15      	ldr	r3, [pc, #84]	; (800c2a4 <TM_HD44780_Puts+0xb8>)
 800c24e:	795b      	ldrb	r3, [r3, #5]
 800c250:	4a14      	ldr	r2, [pc, #80]	; (800c2a4 <TM_HD44780_Puts+0xb8>)
 800c252:	7992      	ldrb	r2, [r2, #6]
 800c254:	4611      	mov	r1, r2
 800c256:	4618      	mov	r0, r3
 800c258:	f000 f8cc 	bl	800c3f4 <TM_HD44780_CursorSet>
 800c25c:	e015      	b.n	800c28a <TM_HD44780_Puts+0x9e>
		} else if (*str == '\r') {
 800c25e:	683b      	ldr	r3, [r7, #0]
 800c260:	781b      	ldrb	r3, [r3, #0]
 800c262:	2b0d      	cmp	r3, #13
 800c264:	d106      	bne.n	800c274 <TM_HD44780_Puts+0x88>
			TM_HD44780_CursorSet(0, HD44780_Opts.currentY);
 800c266:	4b0f      	ldr	r3, [pc, #60]	; (800c2a4 <TM_HD44780_Puts+0xb8>)
 800c268:	799b      	ldrb	r3, [r3, #6]
 800c26a:	4619      	mov	r1, r3
 800c26c:	2000      	movs	r0, #0
 800c26e:	f000 f8c1 	bl	800c3f4 <TM_HD44780_CursorSet>
 800c272:	e00a      	b.n	800c28a <TM_HD44780_Puts+0x9e>
		} else {
			TM_HD44780_Data(*str);
 800c274:	683b      	ldr	r3, [r7, #0]
 800c276:	781b      	ldrb	r3, [r3, #0]
 800c278:	4618      	mov	r0, r3
 800c27a:	f000 f849 	bl	800c310 <TM_HD44780_Data>
			HD44780_Opts.currentX++;
 800c27e:	4b09      	ldr	r3, [pc, #36]	; (800c2a4 <TM_HD44780_Puts+0xb8>)
 800c280:	795b      	ldrb	r3, [r3, #5]
 800c282:	3301      	adds	r3, #1
 800c284:	b2da      	uxtb	r2, r3
 800c286:	4b07      	ldr	r3, [pc, #28]	; (800c2a4 <TM_HD44780_Puts+0xb8>)
 800c288:	715a      	strb	r2, [r3, #5]
		}
		str++;
 800c28a:	683b      	ldr	r3, [r7, #0]
 800c28c:	3301      	adds	r3, #1
 800c28e:	603b      	str	r3, [r7, #0]
	while (*str) {
 800c290:	683b      	ldr	r3, [r7, #0]
 800c292:	781b      	ldrb	r3, [r3, #0]
 800c294:	2b00      	cmp	r3, #0
 800c296:	d1b8      	bne.n	800c20a <TM_HD44780_Puts+0x1e>
	}
}
 800c298:	bf00      	nop
 800c29a:	bf00      	nop
 800c29c:	3708      	adds	r7, #8
 800c29e:	46bd      	mov	sp, r7
 800c2a0:	bd80      	pop	{r7, pc}
 800c2a2:	bf00      	nop
 800c2a4:	200023a4 	.word	0x200023a4

0800c2a8 <TM_HD44780_DisplayOn>:

void TM_HD44780_DisplayOn(void) {
 800c2a8:	b580      	push	{r7, lr}
 800c2aa:	af00      	add	r7, sp, #0
	HD44780_Opts.DisplayControl |= HD44780_DISPLAYON;
 800c2ac:	4b08      	ldr	r3, [pc, #32]	; (800c2d0 <TM_HD44780_DisplayOn+0x28>)
 800c2ae:	781b      	ldrb	r3, [r3, #0]
 800c2b0:	f043 0304 	orr.w	r3, r3, #4
 800c2b4:	b2da      	uxtb	r2, r3
 800c2b6:	4b06      	ldr	r3, [pc, #24]	; (800c2d0 <TM_HD44780_DisplayOn+0x28>)
 800c2b8:	701a      	strb	r2, [r3, #0]
	TM_HD44780_Cmd(HD44780_DISPLAYCONTROL | HD44780_Opts.DisplayControl);
 800c2ba:	4b05      	ldr	r3, [pc, #20]	; (800c2d0 <TM_HD44780_DisplayOn+0x28>)
 800c2bc:	781b      	ldrb	r3, [r3, #0]
 800c2be:	f043 0308 	orr.w	r3, r3, #8
 800c2c2:	b2db      	uxtb	r3, r3
 800c2c4:	4618      	mov	r0, r3
 800c2c6:	f000 f805 	bl	800c2d4 <TM_HD44780_Cmd>
}
 800c2ca:	bf00      	nop
 800c2cc:	bd80      	pop	{r7, pc}
 800c2ce:	bf00      	nop
 800c2d0:	200023a4 	.word	0x200023a4

0800c2d4 <TM_HD44780_Cmd>:
	TM_HD44780_CursorSet(x, y);
	TM_HD44780_Data(location);
}

/* Private functions */
static void TM_HD44780_Cmd(uint8_t cmd) {
 800c2d4:	b580      	push	{r7, lr}
 800c2d6:	b082      	sub	sp, #8
 800c2d8:	af00      	add	r7, sp, #0
 800c2da:	4603      	mov	r3, r0
 800c2dc:	71fb      	strb	r3, [r7, #7]
	/* Command mode */
	HD44780_RS_LOW;
 800c2de:	2200      	movs	r2, #0
 800c2e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c2e4:	4809      	ldr	r0, [pc, #36]	; (800c30c <TM_HD44780_Cmd+0x38>)
 800c2e6:	f002 fec1 	bl	800f06c <HAL_GPIO_WritePin>
	
	/* High nibble */
	TM_HD44780_Cmd4bit(cmd >> 4);
 800c2ea:	79fb      	ldrb	r3, [r7, #7]
 800c2ec:	091b      	lsrs	r3, r3, #4
 800c2ee:	b2db      	uxtb	r3, r3
 800c2f0:	4618      	mov	r0, r3
 800c2f2:	f000 f82b 	bl	800c34c <TM_HD44780_Cmd4bit>
	/* Low nibble */
	TM_HD44780_Cmd4bit(cmd & 0x0F);
 800c2f6:	79fb      	ldrb	r3, [r7, #7]
 800c2f8:	f003 030f 	and.w	r3, r3, #15
 800c2fc:	b2db      	uxtb	r3, r3
 800c2fe:	4618      	mov	r0, r3
 800c300:	f000 f824 	bl	800c34c <TM_HD44780_Cmd4bit>
}
 800c304:	bf00      	nop
 800c306:	3708      	adds	r7, #8
 800c308:	46bd      	mov	sp, r7
 800c30a:	bd80      	pop	{r7, pc}
 800c30c:	40020000 	.word	0x40020000

0800c310 <TM_HD44780_Data>:

static void TM_HD44780_Data(uint8_t data) {
 800c310:	b580      	push	{r7, lr}
 800c312:	b082      	sub	sp, #8
 800c314:	af00      	add	r7, sp, #0
 800c316:	4603      	mov	r3, r0
 800c318:	71fb      	strb	r3, [r7, #7]
	/* Data mode */
	HD44780_RS_HIGH;
 800c31a:	2201      	movs	r2, #1
 800c31c:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c320:	4809      	ldr	r0, [pc, #36]	; (800c348 <TM_HD44780_Data+0x38>)
 800c322:	f002 fea3 	bl	800f06c <HAL_GPIO_WritePin>
	
	/* High nibble */
	TM_HD44780_Cmd4bit(data >> 4);
 800c326:	79fb      	ldrb	r3, [r7, #7]
 800c328:	091b      	lsrs	r3, r3, #4
 800c32a:	b2db      	uxtb	r3, r3
 800c32c:	4618      	mov	r0, r3
 800c32e:	f000 f80d 	bl	800c34c <TM_HD44780_Cmd4bit>
	/* Low nibble */
	TM_HD44780_Cmd4bit(data & 0x0F);
 800c332:	79fb      	ldrb	r3, [r7, #7]
 800c334:	f003 030f 	and.w	r3, r3, #15
 800c338:	b2db      	uxtb	r3, r3
 800c33a:	4618      	mov	r0, r3
 800c33c:	f000 f806 	bl	800c34c <TM_HD44780_Cmd4bit>
}
 800c340:	bf00      	nop
 800c342:	3708      	adds	r7, #8
 800c344:	46bd      	mov	sp, r7
 800c346:	bd80      	pop	{r7, pc}
 800c348:	40020000 	.word	0x40020000

0800c34c <TM_HD44780_Cmd4bit>:

static void TM_HD44780_Cmd4bit(uint8_t cmd) {
 800c34c:	b580      	push	{r7, lr}
 800c34e:	b082      	sub	sp, #8
 800c350:	af00      	add	r7, sp, #0
 800c352:	4603      	mov	r3, r0
 800c354:	71fb      	strb	r3, [r7, #7]
	/* Set output port */

	HAL_GPIO_WritePin(HD44780_D7_GPIO_Port, HD44780_D7_Pin, (cmd & 0x08) != 0);
 800c356:	79fb      	ldrb	r3, [r7, #7]
 800c358:	f003 0308 	and.w	r3, r3, #8
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	bf14      	ite	ne
 800c360:	2301      	movne	r3, #1
 800c362:	2300      	moveq	r3, #0
 800c364:	b2db      	uxtb	r3, r3
 800c366:	461a      	mov	r2, r3
 800c368:	2180      	movs	r1, #128	; 0x80
 800c36a:	4820      	ldr	r0, [pc, #128]	; (800c3ec <TM_HD44780_Cmd4bit+0xa0>)
 800c36c:	f002 fe7e 	bl	800f06c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D6_GPIO_Port, HD44780_D6_Pin, (cmd & 0x04) != 0);
 800c370:	79fb      	ldrb	r3, [r7, #7]
 800c372:	f003 0304 	and.w	r3, r3, #4
 800c376:	2b00      	cmp	r3, #0
 800c378:	bf14      	ite	ne
 800c37a:	2301      	movne	r3, #1
 800c37c:	2300      	moveq	r3, #0
 800c37e:	b2db      	uxtb	r3, r3
 800c380:	461a      	mov	r2, r3
 800c382:	2140      	movs	r1, #64	; 0x40
 800c384:	481a      	ldr	r0, [pc, #104]	; (800c3f0 <TM_HD44780_Cmd4bit+0xa4>)
 800c386:	f002 fe71 	bl	800f06c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D5_GPIO_Port, HD44780_D5_Pin, (cmd & 0x02) != 0);
 800c38a:	79fb      	ldrb	r3, [r7, #7]
 800c38c:	f003 0302 	and.w	r3, r3, #2
 800c390:	2b00      	cmp	r3, #0
 800c392:	bf14      	ite	ne
 800c394:	2301      	movne	r3, #1
 800c396:	2300      	moveq	r3, #0
 800c398:	b2db      	uxtb	r3, r3
 800c39a:	461a      	mov	r2, r3
 800c39c:	2180      	movs	r1, #128	; 0x80
 800c39e:	4814      	ldr	r0, [pc, #80]	; (800c3f0 <TM_HD44780_Cmd4bit+0xa4>)
 800c3a0:	f002 fe64 	bl	800f06c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D4_GPIO_Port, HD44780_D4_Pin, (cmd & 0x01) != 0);
 800c3a4:	79fb      	ldrb	r3, [r7, #7]
 800c3a6:	f003 0301 	and.w	r3, r3, #1
 800c3aa:	2b00      	cmp	r3, #0
 800c3ac:	bf14      	ite	ne
 800c3ae:	2301      	movne	r3, #1
 800c3b0:	2300      	moveq	r3, #0
 800c3b2:	b2db      	uxtb	r3, r3
 800c3b4:	461a      	mov	r2, r3
 800c3b6:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c3ba:	480d      	ldr	r0, [pc, #52]	; (800c3f0 <TM_HD44780_Cmd4bit+0xa4>)
 800c3bc:	f002 fe56 	bl	800f06c <HAL_GPIO_WritePin>
	HD44780_E_BLINK;
 800c3c0:	2201      	movs	r2, #1
 800c3c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c3c6:	480a      	ldr	r0, [pc, #40]	; (800c3f0 <TM_HD44780_Cmd4bit+0xa4>)
 800c3c8:	f002 fe50 	bl	800f06c <HAL_GPIO_WritePin>
 800c3cc:	2014      	movs	r0, #20
 800c3ce:	f7f5 fa69 	bl	80018a4 <ShortDelayUS>
 800c3d2:	2200      	movs	r2, #0
 800c3d4:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c3d8:	4805      	ldr	r0, [pc, #20]	; (800c3f0 <TM_HD44780_Cmd4bit+0xa4>)
 800c3da:	f002 fe47 	bl	800f06c <HAL_GPIO_WritePin>
 800c3de:	2014      	movs	r0, #20
 800c3e0:	f7f5 fa60 	bl	80018a4 <ShortDelayUS>
}
 800c3e4:	bf00      	nop
 800c3e6:	3708      	adds	r7, #8
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}
 800c3ec:	40021800 	.word	0x40021800
 800c3f0:	40020800 	.word	0x40020800

0800c3f4 <TM_HD44780_CursorSet>:

static void TM_HD44780_CursorSet(uint8_t col, uint8_t row) {
 800c3f4:	b580      	push	{r7, lr}
 800c3f6:	b084      	sub	sp, #16
 800c3f8:	af00      	add	r7, sp, #0
 800c3fa:	4603      	mov	r3, r0
 800c3fc:	460a      	mov	r2, r1
 800c3fe:	71fb      	strb	r3, [r7, #7]
 800c400:	4613      	mov	r3, r2
 800c402:	71bb      	strb	r3, [r7, #6]
	uint8_t row_offsets[] = {0x00, 0x40, 0x14, 0x54};
 800c404:	4b11      	ldr	r3, [pc, #68]	; (800c44c <TM_HD44780_CursorSet+0x58>)
 800c406:	60fb      	str	r3, [r7, #12]
	
	/* Go to beginning */
	if (row >= HD44780_Opts.Rows) {
 800c408:	4b11      	ldr	r3, [pc, #68]	; (800c450 <TM_HD44780_CursorSet+0x5c>)
 800c40a:	78db      	ldrb	r3, [r3, #3]
 800c40c:	79ba      	ldrb	r2, [r7, #6]
 800c40e:	429a      	cmp	r2, r3
 800c410:	d301      	bcc.n	800c416 <TM_HD44780_CursorSet+0x22>
		row = 0;
 800c412:	2300      	movs	r3, #0
 800c414:	71bb      	strb	r3, [r7, #6]
	}
	
	/* Set current column and row */
	HD44780_Opts.currentX = col;
 800c416:	4a0e      	ldr	r2, [pc, #56]	; (800c450 <TM_HD44780_CursorSet+0x5c>)
 800c418:	79fb      	ldrb	r3, [r7, #7]
 800c41a:	7153      	strb	r3, [r2, #5]
	HD44780_Opts.currentY = row;
 800c41c:	4a0c      	ldr	r2, [pc, #48]	; (800c450 <TM_HD44780_CursorSet+0x5c>)
 800c41e:	79bb      	ldrb	r3, [r7, #6]
 800c420:	7193      	strb	r3, [r2, #6]
	
	/* Set location address */
	TM_HD44780_Cmd(HD44780_SETDDRAMADDR | (col + row_offsets[row]));
 800c422:	79bb      	ldrb	r3, [r7, #6]
 800c424:	3310      	adds	r3, #16
 800c426:	443b      	add	r3, r7
 800c428:	f813 2c04 	ldrb.w	r2, [r3, #-4]
 800c42c:	79fb      	ldrb	r3, [r7, #7]
 800c42e:	4413      	add	r3, r2
 800c430:	b2db      	uxtb	r3, r3
 800c432:	b25b      	sxtb	r3, r3
 800c434:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800c438:	b25b      	sxtb	r3, r3
 800c43a:	b2db      	uxtb	r3, r3
 800c43c:	4618      	mov	r0, r3
 800c43e:	f7ff ff49 	bl	800c2d4 <TM_HD44780_Cmd>
}
 800c442:	bf00      	nop
 800c444:	3710      	adds	r7, #16
 800c446:	46bd      	mov	sp, r7
 800c448:	bd80      	pop	{r7, pc}
 800c44a:	bf00      	nop
 800c44c:	54144000 	.word	0x54144000
 800c450:	200023a4 	.word	0x200023a4

0800c454 <TM_HD44780_InitPins>:

static void TM_HD44780_InitPins(void) {
 800c454:	b580      	push	{r7, lr}
 800c456:	af00      	add	r7, sp, #0
	/* Init all pins */
	/* Set pins low */
	HAL_GPIO_WritePin(HD44780_RS_GPIO_Port, HD44780_RS_Pin,GPIO_PIN_RESET);
 800c458:	2200      	movs	r2, #0
 800c45a:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c45e:	4810      	ldr	r0, [pc, #64]	; (800c4a0 <TM_HD44780_InitPins+0x4c>)
 800c460:	f002 fe04 	bl	800f06c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_E_GPIO_Port, HD44780_E_Pin,GPIO_PIN_RESET);
 800c464:	2200      	movs	r2, #0
 800c466:	f44f 7100 	mov.w	r1, #512	; 0x200
 800c46a:	480e      	ldr	r0, [pc, #56]	; (800c4a4 <TM_HD44780_InitPins+0x50>)
 800c46c:	f002 fdfe 	bl	800f06c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D4_GPIO_Port, HD44780_D4_Pin,GPIO_PIN_RESET);
 800c470:	2200      	movs	r2, #0
 800c472:	f44f 7180 	mov.w	r1, #256	; 0x100
 800c476:	480b      	ldr	r0, [pc, #44]	; (800c4a4 <TM_HD44780_InitPins+0x50>)
 800c478:	f002 fdf8 	bl	800f06c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D5_GPIO_Port, HD44780_D5_Pin,GPIO_PIN_RESET);
 800c47c:	2200      	movs	r2, #0
 800c47e:	2180      	movs	r1, #128	; 0x80
 800c480:	4808      	ldr	r0, [pc, #32]	; (800c4a4 <TM_HD44780_InitPins+0x50>)
 800c482:	f002 fdf3 	bl	800f06c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D6_GPIO_Port, HD44780_D6_Pin,GPIO_PIN_RESET);
 800c486:	2200      	movs	r2, #0
 800c488:	2140      	movs	r1, #64	; 0x40
 800c48a:	4806      	ldr	r0, [pc, #24]	; (800c4a4 <TM_HD44780_InitPins+0x50>)
 800c48c:	f002 fdee 	bl	800f06c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(HD44780_D7_GPIO_Port, HD44780_D7_Pin,GPIO_PIN_RESET);
 800c490:	2200      	movs	r2, #0
 800c492:	2180      	movs	r1, #128	; 0x80
 800c494:	4804      	ldr	r0, [pc, #16]	; (800c4a8 <TM_HD44780_InitPins+0x54>)
 800c496:	f002 fde9 	bl	800f06c <HAL_GPIO_WritePin>
}
 800c49a:	bf00      	nop
 800c49c:	bd80      	pop	{r7, pc}
 800c49e:	bf00      	nop
 800c4a0:	40020000 	.word	0x40020000
 800c4a4:	40020800 	.word	0x40020800
 800c4a8:	40021800 	.word	0x40021800

0800c4ac <TM_ILI9341_Init>:
void TM_ILI9341_Delay(volatile unsigned int delay);
void TM_ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2);
void TM_ILI9341_INT_Fill(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color);


void TM_ILI9341_Init() {
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	af00      	add	r7, sp, #0
	
	/* Init RST pin */
	//TM_GPIO_Init(ILI9341_RST_PORT, ILI9341_RST_PIN, TM_GPIO_Mode_OUT, TM_GPIO_OType_PP, TM_GPIO_PuPd_UP, TM_GPIO_Speed_Low);

	/* CS high */
	ILI9341_CS_SET;
 800c4b0:	2201      	movs	r2, #1
 800c4b2:	2104      	movs	r1, #4
 800c4b4:	480d      	ldr	r0, [pc, #52]	; (800c4ec <TM_ILI9341_Init+0x40>)
 800c4b6:	f002 fdd9 	bl	800f06c <HAL_GPIO_WritePin>
	
	/* Init DMA for SPI */
	//TM_SPI_DMA_Init(ILI9341_SPI);
	
	/* Init LCD */
	TM_ILI9341_InitLCD();	
 800c4ba:	f000 f81f 	bl	800c4fc <TM_ILI9341_InitLCD>
	
	/* Set default settings */
	ILI9341_x = ILI9341_y = 0;
 800c4be:	4b0c      	ldr	r3, [pc, #48]	; (800c4f0 <TM_ILI9341_Init+0x44>)
 800c4c0:	2200      	movs	r2, #0
 800c4c2:	801a      	strh	r2, [r3, #0]
 800c4c4:	4b0a      	ldr	r3, [pc, #40]	; (800c4f0 <TM_ILI9341_Init+0x44>)
 800c4c6:	881a      	ldrh	r2, [r3, #0]
 800c4c8:	4b0a      	ldr	r3, [pc, #40]	; (800c4f4 <TM_ILI9341_Init+0x48>)
 800c4ca:	801a      	strh	r2, [r3, #0]
	ILI9341_Opts.width = ILI9341_WIDTH;
 800c4cc:	4b0a      	ldr	r3, [pc, #40]	; (800c4f8 <TM_ILI9341_Init+0x4c>)
 800c4ce:	22f0      	movs	r2, #240	; 0xf0
 800c4d0:	801a      	strh	r2, [r3, #0]
	ILI9341_Opts.height = ILI9341_HEIGHT;
 800c4d2:	4b09      	ldr	r3, [pc, #36]	; (800c4f8 <TM_ILI9341_Init+0x4c>)
 800c4d4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800c4d8:	805a      	strh	r2, [r3, #2]
	ILI9341_Opts.orientation = TM_ILI9341_Portrait;
 800c4da:	4b07      	ldr	r3, [pc, #28]	; (800c4f8 <TM_ILI9341_Init+0x4c>)
 800c4dc:	2201      	movs	r2, #1
 800c4de:	711a      	strb	r2, [r3, #4]
	
	/* Fill with white color */
	TM_ILI9341_Fill(ILI9341_COLOR_WHITE);
 800c4e0:	f64f 70ff 	movw	r0, #65535	; 0xffff
 800c4e4:	f000 f9fe 	bl	800c8e4 <TM_ILI9341_Fill>
}
 800c4e8:	bf00      	nop
 800c4ea:	bd80      	pop	{r7, pc}
 800c4ec:	40020800 	.word	0x40020800
 800c4f0:	200023ae 	.word	0x200023ae
 800c4f4:	200023ac 	.word	0x200023ac
 800c4f8:	200023b0 	.word	0x200023b0

0800c4fc <TM_ILI9341_InitLCD>:

void TM_ILI9341_InitLCD(void) {
 800c4fc:	b580      	push	{r7, lr}
 800c4fe:	af00      	add	r7, sp, #0
	/* Force reset */
	ILI9341_RST_RESET;
 800c500:	2200      	movs	r2, #0
 800c502:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c506:	489a      	ldr	r0, [pc, #616]	; (800c770 <TM_ILI9341_InitLCD+0x274>)
 800c508:	f002 fdb0 	bl	800f06c <HAL_GPIO_WritePin>
	TM_ILI9341_Delay(20000);
 800c50c:	f644 6020 	movw	r0, #20000	; 0x4e20
 800c510:	f000 fa94 	bl	800ca3c <TM_ILI9341_Delay>
	ILI9341_RST_SET;
 800c514:	2201      	movs	r2, #1
 800c516:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800c51a:	4895      	ldr	r0, [pc, #596]	; (800c770 <TM_ILI9341_InitLCD+0x274>)
 800c51c:	f002 fda6 	bl	800f06c <HAL_GPIO_WritePin>
	
	/* Delay for RST response */
	TM_ILI9341_Delay(20000);
 800c520:	f644 6020 	movw	r0, #20000	; 0x4e20
 800c524:	f000 fa8a 	bl	800ca3c <TM_ILI9341_Delay>
	
	/* Software reset */
	TM_ILI9341_SendCommand(ILI9341_RESET);
 800c528:	2001      	movs	r0, #1
 800c52a:	f000 f925 	bl	800c778 <TM_ILI9341_SendCommand>
	TM_ILI9341_Delay(50000);
 800c52e:	f24c 3050 	movw	r0, #50000	; 0xc350
 800c532:	f000 fa83 	bl	800ca3c <TM_ILI9341_Delay>
	
	TM_ILI9341_SendCommand(ILI9341_POWERA);
 800c536:	20cb      	movs	r0, #203	; 0xcb
 800c538:	f000 f91e 	bl	800c778 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x39);
 800c53c:	2039      	movs	r0, #57	; 0x39
 800c53e:	f000 f941 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x2C);
 800c542:	202c      	movs	r0, #44	; 0x2c
 800c544:	f000 f93e 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 800c548:	2000      	movs	r0, #0
 800c54a:	f000 f93b 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x34);
 800c54e:	2034      	movs	r0, #52	; 0x34
 800c550:	f000 f938 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x02);
 800c554:	2002      	movs	r0, #2
 800c556:	f000 f935 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWERB);
 800c55a:	20cf      	movs	r0, #207	; 0xcf
 800c55c:	f000 f90c 	bl	800c778 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 800c560:	2000      	movs	r0, #0
 800c562:	f000 f92f 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xC1);
 800c566:	20c1      	movs	r0, #193	; 0xc1
 800c568:	f000 f92c 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x30);
 800c56c:	2030      	movs	r0, #48	; 0x30
 800c56e:	f000 f929 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DTCA);
 800c572:	20e8      	movs	r0, #232	; 0xe8
 800c574:	f000 f900 	bl	800c778 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x85);
 800c578:	2085      	movs	r0, #133	; 0x85
 800c57a:	f000 f923 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 800c57e:	2000      	movs	r0, #0
 800c580:	f000 f920 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x78);
 800c584:	2078      	movs	r0, #120	; 0x78
 800c586:	f000 f91d 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DTCB);
 800c58a:	20ea      	movs	r0, #234	; 0xea
 800c58c:	f000 f8f4 	bl	800c778 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 800c590:	2000      	movs	r0, #0
 800c592:	f000 f917 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 800c596:	2000      	movs	r0, #0
 800c598:	f000 f914 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER_SEQ);
 800c59c:	20ed      	movs	r0, #237	; 0xed
 800c59e:	f000 f8eb 	bl	800c778 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x64);
 800c5a2:	2064      	movs	r0, #100	; 0x64
 800c5a4:	f000 f90e 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 800c5a8:	2003      	movs	r0, #3
 800c5aa:	f000 f90b 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x12);
 800c5ae:	2012      	movs	r0, #18
 800c5b0:	f000 f908 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x81);
 800c5b4:	2081      	movs	r0, #129	; 0x81
 800c5b6:	f000 f905 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PRC);
 800c5ba:	20f7      	movs	r0, #247	; 0xf7
 800c5bc:	f000 f8dc 	bl	800c778 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x20);
 800c5c0:	2020      	movs	r0, #32
 800c5c2:	f000 f8ff 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER1);
 800c5c6:	20c0      	movs	r0, #192	; 0xc0
 800c5c8:	f000 f8d6 	bl	800c778 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x23);
 800c5cc:	2023      	movs	r0, #35	; 0x23
 800c5ce:	f000 f8f9 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_POWER2);
 800c5d2:	20c1      	movs	r0, #193	; 0xc1
 800c5d4:	f000 f8d0 	bl	800c778 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x10);
 800c5d8:	2010      	movs	r0, #16
 800c5da:	f000 f8f3 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_VCOM1);
 800c5de:	20c5      	movs	r0, #197	; 0xc5
 800c5e0:	f000 f8ca 	bl	800c778 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x3E);
 800c5e4:	203e      	movs	r0, #62	; 0x3e
 800c5e6:	f000 f8ed 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x28);
 800c5ea:	2028      	movs	r0, #40	; 0x28
 800c5ec:	f000 f8ea 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_VCOM2);
 800c5f0:	20c7      	movs	r0, #199	; 0xc7
 800c5f2:	f000 f8c1 	bl	800c778 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x86);
 800c5f6:	2086      	movs	r0, #134	; 0x86
 800c5f8:	f000 f8e4 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_MAC);
 800c5fc:	2036      	movs	r0, #54	; 0x36
 800c5fe:	f000 f8bb 	bl	800c778 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x48);
 800c602:	2048      	movs	r0, #72	; 0x48
 800c604:	f000 f8de 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PIXEL_FORMAT);
 800c608:	203a      	movs	r0, #58	; 0x3a
 800c60a:	f000 f8b5 	bl	800c778 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x55);
 800c60e:	2055      	movs	r0, #85	; 0x55
 800c610:	f000 f8d8 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_FRC);
 800c614:	20b1      	movs	r0, #177	; 0xb1
 800c616:	f000 f8af 	bl	800c778 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 800c61a:	2000      	movs	r0, #0
 800c61c:	f000 f8d2 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x18);
 800c620:	2018      	movs	r0, #24
 800c622:	f000 f8cf 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_DFC);
 800c626:	20b6      	movs	r0, #182	; 0xb6
 800c628:	f000 f8a6 	bl	800c778 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x08);
 800c62c:	2008      	movs	r0, #8
 800c62e:	f000 f8c9 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x82);
 800c632:	2082      	movs	r0, #130	; 0x82
 800c634:	f000 f8c6 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x27);
 800c638:	2027      	movs	r0, #39	; 0x27
 800c63a:	f000 f8c3 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_3GAMMA_EN);
 800c63e:	20f2      	movs	r0, #242	; 0xf2
 800c640:	f000 f89a 	bl	800c778 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 800c644:	2000      	movs	r0, #0
 800c646:	f000 f8bd 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_COLUMN_ADDR);
 800c64a:	202a      	movs	r0, #42	; 0x2a
 800c64c:	f000 f894 	bl	800c778 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 800c650:	2000      	movs	r0, #0
 800c652:	f000 f8b7 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 800c656:	2000      	movs	r0, #0
 800c658:	f000 f8b4 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 800c65c:	2000      	movs	r0, #0
 800c65e:	f000 f8b1 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xEF);
 800c662:	20ef      	movs	r0, #239	; 0xef
 800c664:	f000 f8ae 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PAGE_ADDR);
 800c668:	202b      	movs	r0, #43	; 0x2b
 800c66a:	f000 f885 	bl	800c778 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 800c66e:	2000      	movs	r0, #0
 800c670:	f000 f8a8 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 800c674:	2000      	movs	r0, #0
 800c676:	f000 f8a5 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x01);
 800c67a:	2001      	movs	r0, #1
 800c67c:	f000 f8a2 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x3F);
 800c680:	203f      	movs	r0, #63	; 0x3f
 800c682:	f000 f89f 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_GAMMA);
 800c686:	2026      	movs	r0, #38	; 0x26
 800c688:	f000 f876 	bl	800c778 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x01);
 800c68c:	2001      	movs	r0, #1
 800c68e:	f000 f899 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_PGAMMA);
 800c692:	20e0      	movs	r0, #224	; 0xe0
 800c694:	f000 f870 	bl	800c778 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x0F);
 800c698:	200f      	movs	r0, #15
 800c69a:	f000 f893 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 800c69e:	2031      	movs	r0, #49	; 0x31
 800c6a0:	f000 f890 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x2B);
 800c6a4:	202b      	movs	r0, #43	; 0x2b
 800c6a6:	f000 f88d 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0C);
 800c6aa:	200c      	movs	r0, #12
 800c6ac:	f000 f88a 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 800c6b0:	200e      	movs	r0, #14
 800c6b2:	f000 f887 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x08);
 800c6b6:	2008      	movs	r0, #8
 800c6b8:	f000 f884 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x4E);
 800c6bc:	204e      	movs	r0, #78	; 0x4e
 800c6be:	f000 f881 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xF1);
 800c6c2:	20f1      	movs	r0, #241	; 0xf1
 800c6c4:	f000 f87e 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x37);
 800c6c8:	2037      	movs	r0, #55	; 0x37
 800c6ca:	f000 f87b 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x07);
 800c6ce:	2007      	movs	r0, #7
 800c6d0:	f000 f878 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x10);
 800c6d4:	2010      	movs	r0, #16
 800c6d6:	f000 f875 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 800c6da:	2003      	movs	r0, #3
 800c6dc:	f000 f872 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 800c6e0:	200e      	movs	r0, #14
 800c6e2:	f000 f86f 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x09);
 800c6e6:	2009      	movs	r0, #9
 800c6e8:	f000 f86c 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x00);
 800c6ec:	2000      	movs	r0, #0
 800c6ee:	f000 f869 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_NGAMMA);
 800c6f2:	20e1      	movs	r0, #225	; 0xe1
 800c6f4:	f000 f840 	bl	800c778 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(0x00);
 800c6f8:	2000      	movs	r0, #0
 800c6fa:	f000 f863 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0E);
 800c6fe:	200e      	movs	r0, #14
 800c700:	f000 f860 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x14);
 800c704:	2014      	movs	r0, #20
 800c706:	f000 f85d 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x03);
 800c70a:	2003      	movs	r0, #3
 800c70c:	f000 f85a 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x11);
 800c710:	2011      	movs	r0, #17
 800c712:	f000 f857 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x07);
 800c716:	2007      	movs	r0, #7
 800c718:	f000 f854 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 800c71c:	2031      	movs	r0, #49	; 0x31
 800c71e:	f000 f851 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0xC1);
 800c722:	20c1      	movs	r0, #193	; 0xc1
 800c724:	f000 f84e 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x48);
 800c728:	2048      	movs	r0, #72	; 0x48
 800c72a:	f000 f84b 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x08);
 800c72e:	2008      	movs	r0, #8
 800c730:	f000 f848 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0F);
 800c734:	200f      	movs	r0, #15
 800c736:	f000 f845 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0C);
 800c73a:	200c      	movs	r0, #12
 800c73c:	f000 f842 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x31);
 800c740:	2031      	movs	r0, #49	; 0x31
 800c742:	f000 f83f 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x36);
 800c746:	2036      	movs	r0, #54	; 0x36
 800c748:	f000 f83c 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(0x0F);
 800c74c:	200f      	movs	r0, #15
 800c74e:	f000 f839 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendCommand(ILI9341_SLEEP_OUT);
 800c752:	2011      	movs	r0, #17
 800c754:	f000 f810 	bl	800c778 <TM_ILI9341_SendCommand>

	TM_ILI9341_Delay(1000000);
 800c758:	4806      	ldr	r0, [pc, #24]	; (800c774 <TM_ILI9341_InitLCD+0x278>)
 800c75a:	f000 f96f 	bl	800ca3c <TM_ILI9341_Delay>

	TM_ILI9341_SendCommand(ILI9341_DISPLAY_ON);
 800c75e:	2029      	movs	r0, #41	; 0x29
 800c760:	f000 f80a 	bl	800c778 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendCommand(ILI9341_GRAM);
 800c764:	202c      	movs	r0, #44	; 0x2c
 800c766:	f000 f807 	bl	800c778 <TM_ILI9341_SendCommand>
}
 800c76a:	bf00      	nop
 800c76c:	bd80      	pop	{r7, pc}
 800c76e:	bf00      	nop
 800c770:	40020c00 	.word	0x40020c00
 800c774:	000f4240 	.word	0x000f4240

0800c778 <TM_ILI9341_SendCommand>:

void TM_ILI9341_DisplayOff(void) {
	TM_ILI9341_SendCommand(ILI9341_DISPLAY_OFF);
}

void TM_ILI9341_SendCommand(uint8_t data) {
 800c778:	b580      	push	{r7, lr}
 800c77a:	b082      	sub	sp, #8
 800c77c:	af00      	add	r7, sp, #0
 800c77e:	4603      	mov	r3, r0
 800c780:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_RESET;
 800c782:	2200      	movs	r2, #0
 800c784:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c788:	480b      	ldr	r0, [pc, #44]	; (800c7b8 <TM_ILI9341_SendCommand+0x40>)
 800c78a:	f002 fc6f 	bl	800f06c <HAL_GPIO_WritePin>
	ILI9341_CS_RESET;
 800c78e:	2200      	movs	r2, #0
 800c790:	2104      	movs	r1, #4
 800c792:	480a      	ldr	r0, [pc, #40]	; (800c7bc <TM_ILI9341_SendCommand+0x44>)
 800c794:	f002 fc6a 	bl	800f06c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5,&data,1,100);
 800c798:	1df9      	adds	r1, r7, #7
 800c79a:	2364      	movs	r3, #100	; 0x64
 800c79c:	2201      	movs	r2, #1
 800c79e:	4808      	ldr	r0, [pc, #32]	; (800c7c0 <TM_ILI9341_SendCommand+0x48>)
 800c7a0:	f004 fe1c 	bl	80113dc <HAL_SPI_Transmit>
	//TM_SPI_Send(ILI9341_SPI, data);
	ILI9341_CS_SET;
 800c7a4:	2201      	movs	r2, #1
 800c7a6:	2104      	movs	r1, #4
 800c7a8:	4804      	ldr	r0, [pc, #16]	; (800c7bc <TM_ILI9341_SendCommand+0x44>)
 800c7aa:	f002 fc5f 	bl	800f06c <HAL_GPIO_WritePin>
}
 800c7ae:	bf00      	nop
 800c7b0:	3708      	adds	r7, #8
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	40020c00 	.word	0x40020c00
 800c7bc:	40020800 	.word	0x40020800
 800c7c0:	200020a8 	.word	0x200020a8

0800c7c4 <TM_ILI9341_SendData>:

void TM_ILI9341_SendData(uint8_t data) {
 800c7c4:	b580      	push	{r7, lr}
 800c7c6:	b082      	sub	sp, #8
 800c7c8:	af00      	add	r7, sp, #0
 800c7ca:	4603      	mov	r3, r0
 800c7cc:	71fb      	strb	r3, [r7, #7]
	ILI9341_WRX_SET;
 800c7ce:	2201      	movs	r2, #1
 800c7d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c7d4:	480b      	ldr	r0, [pc, #44]	; (800c804 <TM_ILI9341_SendData+0x40>)
 800c7d6:	f002 fc49 	bl	800f06c <HAL_GPIO_WritePin>
	ILI9341_CS_RESET;
 800c7da:	2200      	movs	r2, #0
 800c7dc:	2104      	movs	r1, #4
 800c7de:	480a      	ldr	r0, [pc, #40]	; (800c808 <TM_ILI9341_SendData+0x44>)
 800c7e0:	f002 fc44 	bl	800f06c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi5,&data,1,100);
 800c7e4:	1df9      	adds	r1, r7, #7
 800c7e6:	2364      	movs	r3, #100	; 0x64
 800c7e8:	2201      	movs	r2, #1
 800c7ea:	4808      	ldr	r0, [pc, #32]	; (800c80c <TM_ILI9341_SendData+0x48>)
 800c7ec:	f004 fdf6 	bl	80113dc <HAL_SPI_Transmit>
	//TM_SPI_Send(ILI9341_SPI, data);
	ILI9341_CS_SET;
 800c7f0:	2201      	movs	r2, #1
 800c7f2:	2104      	movs	r1, #4
 800c7f4:	4804      	ldr	r0, [pc, #16]	; (800c808 <TM_ILI9341_SendData+0x44>)
 800c7f6:	f002 fc39 	bl	800f06c <HAL_GPIO_WritePin>
}
 800c7fa:	bf00      	nop
 800c7fc:	3708      	adds	r7, #8
 800c7fe:	46bd      	mov	sp, r7
 800c800:	bd80      	pop	{r7, pc}
 800c802:	bf00      	nop
 800c804:	40020c00 	.word	0x40020c00
 800c808:	40020800 	.word	0x40020800
 800c80c:	200020a8 	.word	0x200020a8

0800c810 <TM_ILI9341_DrawPixel>:

void TM_ILI9341_DrawPixel(uint16_t x, uint16_t y, uint32_t color) {
 800c810:	b580      	push	{r7, lr}
 800c812:	b082      	sub	sp, #8
 800c814:	af00      	add	r7, sp, #0
 800c816:	4603      	mov	r3, r0
 800c818:	603a      	str	r2, [r7, #0]
 800c81a:	80fb      	strh	r3, [r7, #6]
 800c81c:	460b      	mov	r3, r1
 800c81e:	80bb      	strh	r3, [r7, #4]
	TM_ILI9341_SetCursorPosition(x, y, x, y);
 800c820:	88bb      	ldrh	r3, [r7, #4]
 800c822:	88fa      	ldrh	r2, [r7, #6]
 800c824:	88b9      	ldrh	r1, [r7, #4]
 800c826:	88f8      	ldrh	r0, [r7, #6]
 800c828:	f000 f812 	bl	800c850 <TM_ILI9341_SetCursorPosition>

	TM_ILI9341_SendCommand(ILI9341_GRAM);
 800c82c:	202c      	movs	r0, #44	; 0x2c
 800c82e:	f7ff ffa3 	bl	800c778 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(color >> 8);
 800c832:	683b      	ldr	r3, [r7, #0]
 800c834:	0a1b      	lsrs	r3, r3, #8
 800c836:	b2db      	uxtb	r3, r3
 800c838:	4618      	mov	r0, r3
 800c83a:	f7ff ffc3 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(color & 0xFF);
 800c83e:	683b      	ldr	r3, [r7, #0]
 800c840:	b2db      	uxtb	r3, r3
 800c842:	4618      	mov	r0, r3
 800c844:	f7ff ffbe 	bl	800c7c4 <TM_ILI9341_SendData>
}
 800c848:	bf00      	nop
 800c84a:	3708      	adds	r7, #8
 800c84c:	46bd      	mov	sp, r7
 800c84e:	bd80      	pop	{r7, pc}

0800c850 <TM_ILI9341_SetCursorPosition>:


void TM_ILI9341_SetCursorPosition(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 800c850:	b590      	push	{r4, r7, lr}
 800c852:	b083      	sub	sp, #12
 800c854:	af00      	add	r7, sp, #0
 800c856:	4604      	mov	r4, r0
 800c858:	4608      	mov	r0, r1
 800c85a:	4611      	mov	r1, r2
 800c85c:	461a      	mov	r2, r3
 800c85e:	4623      	mov	r3, r4
 800c860:	80fb      	strh	r3, [r7, #6]
 800c862:	4603      	mov	r3, r0
 800c864:	80bb      	strh	r3, [r7, #4]
 800c866:	460b      	mov	r3, r1
 800c868:	807b      	strh	r3, [r7, #2]
 800c86a:	4613      	mov	r3, r2
 800c86c:	803b      	strh	r3, [r7, #0]
	TM_ILI9341_SendCommand(ILI9341_COLUMN_ADDR);
 800c86e:	202a      	movs	r0, #42	; 0x2a
 800c870:	f7ff ff82 	bl	800c778 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(x1 >> 8);
 800c874:	88fb      	ldrh	r3, [r7, #6]
 800c876:	0a1b      	lsrs	r3, r3, #8
 800c878:	b29b      	uxth	r3, r3
 800c87a:	b2db      	uxtb	r3, r3
 800c87c:	4618      	mov	r0, r3
 800c87e:	f7ff ffa1 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(x1 & 0xFF);
 800c882:	88fb      	ldrh	r3, [r7, #6]
 800c884:	b2db      	uxtb	r3, r3
 800c886:	4618      	mov	r0, r3
 800c888:	f7ff ff9c 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(x2 >> 8);
 800c88c:	887b      	ldrh	r3, [r7, #2]
 800c88e:	0a1b      	lsrs	r3, r3, #8
 800c890:	b29b      	uxth	r3, r3
 800c892:	b2db      	uxtb	r3, r3
 800c894:	4618      	mov	r0, r3
 800c896:	f7ff ff95 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(x2 & 0xFF);
 800c89a:	887b      	ldrh	r3, [r7, #2]
 800c89c:	b2db      	uxtb	r3, r3
 800c89e:	4618      	mov	r0, r3
 800c8a0:	f7ff ff90 	bl	800c7c4 <TM_ILI9341_SendData>

	TM_ILI9341_SendCommand(ILI9341_PAGE_ADDR);
 800c8a4:	202b      	movs	r0, #43	; 0x2b
 800c8a6:	f7ff ff67 	bl	800c778 <TM_ILI9341_SendCommand>
	TM_ILI9341_SendData(y1 >> 8);
 800c8aa:	88bb      	ldrh	r3, [r7, #4]
 800c8ac:	0a1b      	lsrs	r3, r3, #8
 800c8ae:	b29b      	uxth	r3, r3
 800c8b0:	b2db      	uxtb	r3, r3
 800c8b2:	4618      	mov	r0, r3
 800c8b4:	f7ff ff86 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(y1 & 0xFF);
 800c8b8:	88bb      	ldrh	r3, [r7, #4]
 800c8ba:	b2db      	uxtb	r3, r3
 800c8bc:	4618      	mov	r0, r3
 800c8be:	f7ff ff81 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(y2 >> 8);
 800c8c2:	883b      	ldrh	r3, [r7, #0]
 800c8c4:	0a1b      	lsrs	r3, r3, #8
 800c8c6:	b29b      	uxth	r3, r3
 800c8c8:	b2db      	uxtb	r3, r3
 800c8ca:	4618      	mov	r0, r3
 800c8cc:	f7ff ff7a 	bl	800c7c4 <TM_ILI9341_SendData>
	TM_ILI9341_SendData(y2 & 0xFF);
 800c8d0:	883b      	ldrh	r3, [r7, #0]
 800c8d2:	b2db      	uxtb	r3, r3
 800c8d4:	4618      	mov	r0, r3
 800c8d6:	f7ff ff75 	bl	800c7c4 <TM_ILI9341_SendData>
}
 800c8da:	bf00      	nop
 800c8dc:	370c      	adds	r7, #12
 800c8de:	46bd      	mov	sp, r7
 800c8e0:	bd90      	pop	{r4, r7, pc}
	...

0800c8e4 <TM_ILI9341_Fill>:

void TM_ILI9341_Fill(uint32_t color) {
 800c8e4:	b580      	push	{r7, lr}
 800c8e6:	b084      	sub	sp, #16
 800c8e8:	af02      	add	r7, sp, #8
 800c8ea:	6078      	str	r0, [r7, #4]
	/* Fill entire screen */
	TM_ILI9341_INT_Fill(0, 0, ILI9341_Opts.width - 1, ILI9341_Opts.height, color);
 800c8ec:	4b08      	ldr	r3, [pc, #32]	; (800c910 <TM_ILI9341_Fill+0x2c>)
 800c8ee:	881b      	ldrh	r3, [r3, #0]
 800c8f0:	3b01      	subs	r3, #1
 800c8f2:	b29a      	uxth	r2, r3
 800c8f4:	4b06      	ldr	r3, [pc, #24]	; (800c910 <TM_ILI9341_Fill+0x2c>)
 800c8f6:	8859      	ldrh	r1, [r3, #2]
 800c8f8:	687b      	ldr	r3, [r7, #4]
 800c8fa:	b29b      	uxth	r3, r3
 800c8fc:	9300      	str	r3, [sp, #0]
 800c8fe:	460b      	mov	r3, r1
 800c900:	2100      	movs	r1, #0
 800c902:	2000      	movs	r0, #0
 800c904:	f000 f806 	bl	800c914 <TM_ILI9341_INT_Fill>
}
 800c908:	bf00      	nop
 800c90a:	3708      	adds	r7, #8
 800c90c:	46bd      	mov	sp, r7
 800c90e:	bd80      	pop	{r7, pc}
 800c910:	200023b0 	.word	0x200023b0

0800c914 <TM_ILI9341_INT_Fill>:

void TM_ILI9341_INT_Fill(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint16_t color) {
 800c914:	b590      	push	{r4, r7, lr}
 800c916:	b087      	sub	sp, #28
 800c918:	af00      	add	r7, sp, #0
 800c91a:	4604      	mov	r4, r0
 800c91c:	4608      	mov	r0, r1
 800c91e:	4611      	mov	r1, r2
 800c920:	461a      	mov	r2, r3
 800c922:	4623      	mov	r3, r4
 800c924:	80fb      	strh	r3, [r7, #6]
 800c926:	4603      	mov	r3, r0
 800c928:	80bb      	strh	r3, [r7, #4]
 800c92a:	460b      	mov	r3, r1
 800c92c:	807b      	strh	r3, [r7, #2]
 800c92e:	4613      	mov	r3, r2
 800c930:	803b      	strh	r3, [r7, #0]
	uint32_t pixels_count;
	uint32_t index = 0;
 800c932:	2300      	movs	r3, #0
 800c934:	613b      	str	r3, [r7, #16]
	uint8_t color_bytes[2];
	color_bytes[0] = color >> 8;
 800c936:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c938:	0a1b      	lsrs	r3, r3, #8
 800c93a:	b29b      	uxth	r3, r3
 800c93c:	b2db      	uxtb	r3, r3
 800c93e:	733b      	strb	r3, [r7, #12]
	color_bytes[1] = (uint8_t)color;
 800c940:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800c942:	b2db      	uxtb	r3, r3
 800c944:	737b      	strb	r3, [r7, #13]
	/* Set cursor position */
	TM_ILI9341_SetCursorPosition(x0, y0, x1, y1);
 800c946:	883b      	ldrh	r3, [r7, #0]
 800c948:	887a      	ldrh	r2, [r7, #2]
 800c94a:	88b9      	ldrh	r1, [r7, #4]
 800c94c:	88f8      	ldrh	r0, [r7, #6]
 800c94e:	f7ff ff7f 	bl	800c850 <TM_ILI9341_SetCursorPosition>

	/* Set command for GRAM data */
	TM_ILI9341_SendCommand(ILI9341_GRAM);
 800c952:	202c      	movs	r0, #44	; 0x2c
 800c954:	f7ff ff10 	bl	800c778 <TM_ILI9341_SendCommand>
	
	/* Calculate pixels count */
	pixels_count = (x1 - x0 + 1) * (y1 - y0 + 1);
 800c958:	887a      	ldrh	r2, [r7, #2]
 800c95a:	88fb      	ldrh	r3, [r7, #6]
 800c95c:	1ad3      	subs	r3, r2, r3
 800c95e:	3301      	adds	r3, #1
 800c960:	8839      	ldrh	r1, [r7, #0]
 800c962:	88ba      	ldrh	r2, [r7, #4]
 800c964:	1a8a      	subs	r2, r1, r2
 800c966:	3201      	adds	r2, #1
 800c968:	fb02 f303 	mul.w	r3, r2, r3
 800c96c:	617b      	str	r3, [r7, #20]

	/* Send everything */
	ILI9341_CS_RESET;
 800c96e:	2200      	movs	r2, #0
 800c970:	2104      	movs	r1, #4
 800c972:	482f      	ldr	r0, [pc, #188]	; (800ca30 <TM_ILI9341_INT_Fill+0x11c>)
 800c974:	f002 fb7a 	bl	800f06c <HAL_GPIO_WritePin>
	ILI9341_WRX_SET;
 800c978:	2201      	movs	r2, #1
 800c97a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800c97e:	482d      	ldr	r0, [pc, #180]	; (800ca34 <TM_ILI9341_INT_Fill+0x120>)
 800c980:	f002 fb74 	bl	800f06c <HAL_GPIO_WritePin>
	
	/* Go to 16-bit SPI mode */
	//TM_SPI_SetDataSize(ILI9341_SPI, TM_SPI_DataSize_16b);
	__HAL_SPI_DISABLE(&hspi5);
 800c984:	4b2c      	ldr	r3, [pc, #176]	; (800ca38 <TM_ILI9341_INT_Fill+0x124>)
 800c986:	681b      	ldr	r3, [r3, #0]
 800c988:	681a      	ldr	r2, [r3, #0]
 800c98a:	4b2b      	ldr	r3, [pc, #172]	; (800ca38 <TM_ILI9341_INT_Fill+0x124>)
 800c98c:	681b      	ldr	r3, [r3, #0]
 800c98e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c992:	601a      	str	r2, [r3, #0]
	hspi5.Init.DataSize = SPI_DATASIZE_16BIT;
 800c994:	4b28      	ldr	r3, [pc, #160]	; (800ca38 <TM_ILI9341_INT_Fill+0x124>)
 800c996:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c99a:	60da      	str	r2, [r3, #12]
	__HAL_SPI_ENABLE(&hspi5);
 800c99c:	4b26      	ldr	r3, [pc, #152]	; (800ca38 <TM_ILI9341_INT_Fill+0x124>)
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	681a      	ldr	r2, [r3, #0]
 800c9a2:	4b25      	ldr	r3, [pc, #148]	; (800ca38 <TM_ILI9341_INT_Fill+0x124>)
 800c9a4:	681b      	ldr	r3, [r3, #0]
 800c9a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c9aa:	601a      	str	r2, [r3, #0]
	/* Send first 65535 bytes, SPI MUST BE IN 16-bit MODE */
	if(pixels_count > 0xFFFF){
 800c9ac:	697b      	ldr	r3, [r7, #20]
 800c9ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800c9b2:	d31b      	bcc.n	800c9ec <TM_ILI9341_INT_Fill+0xd8>
		while(index++ < 0xFFFF){
 800c9b4:	e009      	b.n	800c9ca <TM_ILI9341_INT_Fill+0xb6>
			HAL_SPI_Transmit_DMA(&hspi5,color_bytes,2);
 800c9b6:	f107 030c 	add.w	r3, r7, #12
 800c9ba:	2202      	movs	r2, #2
 800c9bc:	4619      	mov	r1, r3
 800c9be:	481e      	ldr	r0, [pc, #120]	; (800ca38 <TM_ILI9341_INT_Fill+0x124>)
 800c9c0:	f005 f8fc 	bl	8011bbc <HAL_SPI_Transmit_DMA>
			pixels_count--;
 800c9c4:	697b      	ldr	r3, [r7, #20]
 800c9c6:	3b01      	subs	r3, #1
 800c9c8:	617b      	str	r3, [r7, #20]
		while(index++ < 0xFFFF){
 800c9ca:	693b      	ldr	r3, [r7, #16]
 800c9cc:	1c5a      	adds	r2, r3, #1
 800c9ce:	613a      	str	r2, [r7, #16]
 800c9d0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800c9d4:	4293      	cmp	r3, r2
 800c9d6:	d9ee      	bls.n	800c9b6 <TM_ILI9341_INT_Fill+0xa2>
		}

		index = 0;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	613b      	str	r3, [r7, #16]
	}
	//TM_SPI_DMA_SendHalfWord(ILI9341_SPI, color, (pixels_count > 0xFFFF) ? 0xFFFF : pixels_count);
	/* Wait till done */
	//while (TM_SPI_DMA_Working(ILI9341_SPI));
	while(index++ < pixels_count)
 800c9dc:	e006      	b.n	800c9ec <TM_ILI9341_INT_Fill+0xd8>
		HAL_SPI_Transmit_DMA(&hspi5,color_bytes,2);
 800c9de:	f107 030c 	add.w	r3, r7, #12
 800c9e2:	2202      	movs	r2, #2
 800c9e4:	4619      	mov	r1, r3
 800c9e6:	4814      	ldr	r0, [pc, #80]	; (800ca38 <TM_ILI9341_INT_Fill+0x124>)
 800c9e8:	f005 f8e8 	bl	8011bbc <HAL_SPI_Transmit_DMA>
	while(index++ < pixels_count)
 800c9ec:	693b      	ldr	r3, [r7, #16]
 800c9ee:	1c5a      	adds	r2, r3, #1
 800c9f0:	613a      	str	r2, [r7, #16]
 800c9f2:	697a      	ldr	r2, [r7, #20]
 800c9f4:	429a      	cmp	r2, r3
 800c9f6:	d8f2      	bhi.n	800c9de <TM_ILI9341_INT_Fill+0xca>
//		TM_SPI_DMA_SendHalfWord(ILI9341_SPI, color, pixels_count - 0xFFFF);
//		/* Wait till done */
//		while (TM_SPI_DMA_Working(ILI9341_SPI));
//	}
	
	ILI9341_CS_SET;
 800c9f8:	2201      	movs	r2, #1
 800c9fa:	2104      	movs	r1, #4
 800c9fc:	480c      	ldr	r0, [pc, #48]	; (800ca30 <TM_ILI9341_INT_Fill+0x11c>)
 800c9fe:	f002 fb35 	bl	800f06c <HAL_GPIO_WritePin>

	/* Go back to 8-bit SPI mode */
	//TM_SPI_SetDataSize(ILI9341_SPI, TM_SPI_DataSize_8b);
	__HAL_SPI_DISABLE(&hspi5);
 800ca02:	4b0d      	ldr	r3, [pc, #52]	; (800ca38 <TM_ILI9341_INT_Fill+0x124>)
 800ca04:	681b      	ldr	r3, [r3, #0]
 800ca06:	681a      	ldr	r2, [r3, #0]
 800ca08:	4b0b      	ldr	r3, [pc, #44]	; (800ca38 <TM_ILI9341_INT_Fill+0x124>)
 800ca0a:	681b      	ldr	r3, [r3, #0]
 800ca0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ca10:	601a      	str	r2, [r3, #0]
	hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 800ca12:	4b09      	ldr	r3, [pc, #36]	; (800ca38 <TM_ILI9341_INT_Fill+0x124>)
 800ca14:	2200      	movs	r2, #0
 800ca16:	60da      	str	r2, [r3, #12]
	__HAL_SPI_ENABLE(&hspi5);
 800ca18:	4b07      	ldr	r3, [pc, #28]	; (800ca38 <TM_ILI9341_INT_Fill+0x124>)
 800ca1a:	681b      	ldr	r3, [r3, #0]
 800ca1c:	681a      	ldr	r2, [r3, #0]
 800ca1e:	4b06      	ldr	r3, [pc, #24]	; (800ca38 <TM_ILI9341_INT_Fill+0x124>)
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ca26:	601a      	str	r2, [r3, #0]
}
 800ca28:	bf00      	nop
 800ca2a:	371c      	adds	r7, #28
 800ca2c:	46bd      	mov	sp, r7
 800ca2e:	bd90      	pop	{r4, r7, pc}
 800ca30:	40020800 	.word	0x40020800
 800ca34:	40020c00 	.word	0x40020c00
 800ca38:	200020a8 	.word	0x200020a8

0800ca3c <TM_ILI9341_Delay>:

void TM_ILI9341_Delay(volatile unsigned int delay) {
 800ca3c:	b480      	push	{r7}
 800ca3e:	b083      	sub	sp, #12
 800ca40:	af00      	add	r7, sp, #0
 800ca42:	6078      	str	r0, [r7, #4]
	for (; delay != 0; delay--); 
 800ca44:	e002      	b.n	800ca4c <TM_ILI9341_Delay+0x10>
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	3b01      	subs	r3, #1
 800ca4a:	607b      	str	r3, [r7, #4]
 800ca4c:	687b      	ldr	r3, [r7, #4]
 800ca4e:	2b00      	cmp	r3, #0
 800ca50:	d1f9      	bne.n	800ca46 <TM_ILI9341_Delay+0xa>
}
 800ca52:	bf00      	nop
 800ca54:	bf00      	nop
 800ca56:	370c      	adds	r7, #12
 800ca58:	46bd      	mov	sp, r7
 800ca5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ca5e:	4770      	bx	lr

0800ca60 <TM_ILI9341_Rotate>:

void TM_ILI9341_Rotate(TM_ILI9341_Orientation_t orientation) {
 800ca60:	b580      	push	{r7, lr}
 800ca62:	b082      	sub	sp, #8
 800ca64:	af00      	add	r7, sp, #0
 800ca66:	4603      	mov	r3, r0
 800ca68:	71fb      	strb	r3, [r7, #7]
	TM_ILI9341_SendCommand(ILI9341_MAC);
 800ca6a:	2036      	movs	r0, #54	; 0x36
 800ca6c:	f7ff fe84 	bl	800c778 <TM_ILI9341_SendCommand>
	if (orientation == TM_ILI9341_Orientation_Portrait_1) {
 800ca70:	79fb      	ldrb	r3, [r7, #7]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	d103      	bne.n	800ca7e <TM_ILI9341_Rotate+0x1e>
		TM_ILI9341_SendData(0x58);
 800ca76:	2058      	movs	r0, #88	; 0x58
 800ca78:	f7ff fea4 	bl	800c7c4 <TM_ILI9341_SendData>
 800ca7c:	e013      	b.n	800caa6 <TM_ILI9341_Rotate+0x46>
	} else if (orientation == TM_ILI9341_Orientation_Portrait_2) {
 800ca7e:	79fb      	ldrb	r3, [r7, #7]
 800ca80:	2b01      	cmp	r3, #1
 800ca82:	d103      	bne.n	800ca8c <TM_ILI9341_Rotate+0x2c>
		TM_ILI9341_SendData(0x88);
 800ca84:	2088      	movs	r0, #136	; 0x88
 800ca86:	f7ff fe9d 	bl	800c7c4 <TM_ILI9341_SendData>
 800ca8a:	e00c      	b.n	800caa6 <TM_ILI9341_Rotate+0x46>
	} else if (orientation == TM_ILI9341_Orientation_Landscape_1) {
 800ca8c:	79fb      	ldrb	r3, [r7, #7]
 800ca8e:	2b02      	cmp	r3, #2
 800ca90:	d103      	bne.n	800ca9a <TM_ILI9341_Rotate+0x3a>
		TM_ILI9341_SendData(0x28);
 800ca92:	2028      	movs	r0, #40	; 0x28
 800ca94:	f7ff fe96 	bl	800c7c4 <TM_ILI9341_SendData>
 800ca98:	e005      	b.n	800caa6 <TM_ILI9341_Rotate+0x46>
	} else if (orientation == TM_ILI9341_Orientation_Landscape_2) {
 800ca9a:	79fb      	ldrb	r3, [r7, #7]
 800ca9c:	2b03      	cmp	r3, #3
 800ca9e:	d102      	bne.n	800caa6 <TM_ILI9341_Rotate+0x46>
		TM_ILI9341_SendData(0xE8);
 800caa0:	20e8      	movs	r0, #232	; 0xe8
 800caa2:	f7ff fe8f 	bl	800c7c4 <TM_ILI9341_SendData>
	}
	
	if (orientation == TM_ILI9341_Orientation_Portrait_1 || orientation == TM_ILI9341_Orientation_Portrait_2) {
 800caa6:	79fb      	ldrb	r3, [r7, #7]
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	d002      	beq.n	800cab2 <TM_ILI9341_Rotate+0x52>
 800caac:	79fb      	ldrb	r3, [r7, #7]
 800caae:	2b01      	cmp	r3, #1
 800cab0:	d10a      	bne.n	800cac8 <TM_ILI9341_Rotate+0x68>
		ILI9341_Opts.width = ILI9341_WIDTH;
 800cab2:	4b0d      	ldr	r3, [pc, #52]	; (800cae8 <TM_ILI9341_Rotate+0x88>)
 800cab4:	22f0      	movs	r2, #240	; 0xf0
 800cab6:	801a      	strh	r2, [r3, #0]
		ILI9341_Opts.height = ILI9341_HEIGHT;
 800cab8:	4b0b      	ldr	r3, [pc, #44]	; (800cae8 <TM_ILI9341_Rotate+0x88>)
 800caba:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800cabe:	805a      	strh	r2, [r3, #2]
		ILI9341_Opts.orientation = TM_ILI9341_Portrait;
 800cac0:	4b09      	ldr	r3, [pc, #36]	; (800cae8 <TM_ILI9341_Rotate+0x88>)
 800cac2:	2201      	movs	r2, #1
 800cac4:	711a      	strb	r2, [r3, #4]
 800cac6:	e00a      	b.n	800cade <TM_ILI9341_Rotate+0x7e>
	} else {
		ILI9341_Opts.width = ILI9341_HEIGHT;
 800cac8:	4b07      	ldr	r3, [pc, #28]	; (800cae8 <TM_ILI9341_Rotate+0x88>)
 800caca:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800cace:	801a      	strh	r2, [r3, #0]
		ILI9341_Opts.height = ILI9341_WIDTH;
 800cad0:	4b05      	ldr	r3, [pc, #20]	; (800cae8 <TM_ILI9341_Rotate+0x88>)
 800cad2:	22f0      	movs	r2, #240	; 0xf0
 800cad4:	805a      	strh	r2, [r3, #2]
		ILI9341_Opts.orientation = TM_ILI9341_Landscape;
 800cad6:	4b04      	ldr	r3, [pc, #16]	; (800cae8 <TM_ILI9341_Rotate+0x88>)
 800cad8:	2200      	movs	r2, #0
 800cada:	711a      	strb	r2, [r3, #4]
	}
}
 800cadc:	bf00      	nop
 800cade:	bf00      	nop
 800cae0:	3708      	adds	r7, #8
 800cae2:	46bd      	mov	sp, r7
 800cae4:	bd80      	pop	{r7, pc}
 800cae6:	bf00      	nop
 800cae8:	200023b0 	.word	0x200023b0

0800caec <TM_ILI9341_Puts>:

void TM_ILI9341_Puts(uint16_t x, uint16_t y, char *str, TM_FontDef_t *font, uint32_t foreground, uint32_t background) {
 800caec:	b580      	push	{r7, lr}
 800caee:	b088      	sub	sp, #32
 800caf0:	af02      	add	r7, sp, #8
 800caf2:	60ba      	str	r2, [r7, #8]
 800caf4:	607b      	str	r3, [r7, #4]
 800caf6:	4603      	mov	r3, r0
 800caf8:	81fb      	strh	r3, [r7, #14]
 800cafa:	460b      	mov	r3, r1
 800cafc:	81bb      	strh	r3, [r7, #12]
	uint16_t startX = x;
 800cafe:	89fb      	ldrh	r3, [r7, #14]
 800cb00:	82fb      	strh	r3, [r7, #22]
	
	/* Set X and Y coordinates */
	ILI9341_x = x;
 800cb02:	4a24      	ldr	r2, [pc, #144]	; (800cb94 <TM_ILI9341_Puts+0xa8>)
 800cb04:	89fb      	ldrh	r3, [r7, #14]
 800cb06:	8013      	strh	r3, [r2, #0]
	ILI9341_y = y;
 800cb08:	4a23      	ldr	r2, [pc, #140]	; (800cb98 <TM_ILI9341_Puts+0xac>)
 800cb0a:	89bb      	ldrh	r3, [r7, #12]
 800cb0c:	8013      	strh	r3, [r2, #0]
	
	while (*str) {
 800cb0e:	e038      	b.n	800cb82 <TM_ILI9341_Puts+0x96>
		/* New line */
		if (*str == '\n') {
 800cb10:	68bb      	ldr	r3, [r7, #8]
 800cb12:	781b      	ldrb	r3, [r3, #0]
 800cb14:	2b0a      	cmp	r3, #10
 800cb16:	d11d      	bne.n	800cb54 <TM_ILI9341_Puts+0x68>
			ILI9341_y += font->FontHeight + 1;
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	785b      	ldrb	r3, [r3, #1]
 800cb1c:	b29a      	uxth	r2, r3
 800cb1e:	4b1e      	ldr	r3, [pc, #120]	; (800cb98 <TM_ILI9341_Puts+0xac>)
 800cb20:	881b      	ldrh	r3, [r3, #0]
 800cb22:	4413      	add	r3, r2
 800cb24:	b29b      	uxth	r3, r3
 800cb26:	3301      	adds	r3, #1
 800cb28:	b29a      	uxth	r2, r3
 800cb2a:	4b1b      	ldr	r3, [pc, #108]	; (800cb98 <TM_ILI9341_Puts+0xac>)
 800cb2c:	801a      	strh	r2, [r3, #0]
			/* if after \n is also \r, than go to the left of the screen */
			if (*(str + 1) == '\r') {
 800cb2e:	68bb      	ldr	r3, [r7, #8]
 800cb30:	3301      	adds	r3, #1
 800cb32:	781b      	ldrb	r3, [r3, #0]
 800cb34:	2b0d      	cmp	r3, #13
 800cb36:	d106      	bne.n	800cb46 <TM_ILI9341_Puts+0x5a>
				ILI9341_x = 0;
 800cb38:	4b16      	ldr	r3, [pc, #88]	; (800cb94 <TM_ILI9341_Puts+0xa8>)
 800cb3a:	2200      	movs	r2, #0
 800cb3c:	801a      	strh	r2, [r3, #0]
				str++;
 800cb3e:	68bb      	ldr	r3, [r7, #8]
 800cb40:	3301      	adds	r3, #1
 800cb42:	60bb      	str	r3, [r7, #8]
 800cb44:	e002      	b.n	800cb4c <TM_ILI9341_Puts+0x60>
			} else {
				ILI9341_x = startX;
 800cb46:	4a13      	ldr	r2, [pc, #76]	; (800cb94 <TM_ILI9341_Puts+0xa8>)
 800cb48:	8afb      	ldrh	r3, [r7, #22]
 800cb4a:	8013      	strh	r3, [r2, #0]
			}
			str++;
 800cb4c:	68bb      	ldr	r3, [r7, #8]
 800cb4e:	3301      	adds	r3, #1
 800cb50:	60bb      	str	r3, [r7, #8]
			continue;
 800cb52:	e016      	b.n	800cb82 <TM_ILI9341_Puts+0x96>
		} else if (*str == '\r') {
 800cb54:	68bb      	ldr	r3, [r7, #8]
 800cb56:	781b      	ldrb	r3, [r3, #0]
 800cb58:	2b0d      	cmp	r3, #13
 800cb5a:	d103      	bne.n	800cb64 <TM_ILI9341_Puts+0x78>
			str++;
 800cb5c:	68bb      	ldr	r3, [r7, #8]
 800cb5e:	3301      	adds	r3, #1
 800cb60:	60bb      	str	r3, [r7, #8]
			continue;
 800cb62:	e00e      	b.n	800cb82 <TM_ILI9341_Puts+0x96>
		}
		
		/* Put character to LCD */
		TM_ILI9341_Putc(ILI9341_x, ILI9341_y, *str++, font, foreground, background);
 800cb64:	4b0b      	ldr	r3, [pc, #44]	; (800cb94 <TM_ILI9341_Puts+0xa8>)
 800cb66:	8818      	ldrh	r0, [r3, #0]
 800cb68:	4b0b      	ldr	r3, [pc, #44]	; (800cb98 <TM_ILI9341_Puts+0xac>)
 800cb6a:	8819      	ldrh	r1, [r3, #0]
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	1c5a      	adds	r2, r3, #1
 800cb70:	60ba      	str	r2, [r7, #8]
 800cb72:	781a      	ldrb	r2, [r3, #0]
 800cb74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cb76:	9301      	str	r3, [sp, #4]
 800cb78:	6a3b      	ldr	r3, [r7, #32]
 800cb7a:	9300      	str	r3, [sp, #0]
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	f000 f80d 	bl	800cb9c <TM_ILI9341_Putc>
	while (*str) {
 800cb82:	68bb      	ldr	r3, [r7, #8]
 800cb84:	781b      	ldrb	r3, [r3, #0]
 800cb86:	2b00      	cmp	r3, #0
 800cb88:	d1c2      	bne.n	800cb10 <TM_ILI9341_Puts+0x24>
	}
}
 800cb8a:	bf00      	nop
 800cb8c:	bf00      	nop
 800cb8e:	3718      	adds	r7, #24
 800cb90:	46bd      	mov	sp, r7
 800cb92:	bd80      	pop	{r7, pc}
 800cb94:	200023ac 	.word	0x200023ac
 800cb98:	200023ae 	.word	0x200023ae

0800cb9c <TM_ILI9341_Putc>:
		w += font->FontWidth;
	}
	*width = w;
}

void TM_ILI9341_Putc(uint16_t x, uint16_t y, char c, TM_FontDef_t *font, uint32_t foreground, uint32_t background) {
 800cb9c:	b590      	push	{r4, r7, lr}
 800cb9e:	b08b      	sub	sp, #44	; 0x2c
 800cba0:	af02      	add	r7, sp, #8
 800cba2:	607b      	str	r3, [r7, #4]
 800cba4:	4603      	mov	r3, r0
 800cba6:	81fb      	strh	r3, [r7, #14]
 800cba8:	460b      	mov	r3, r1
 800cbaa:	81bb      	strh	r3, [r7, #12]
 800cbac:	4613      	mov	r3, r2
 800cbae:	72fb      	strb	r3, [r7, #11]
	uint32_t i, b, j;
	/* Set coordinates */
	ILI9341_x = x;
 800cbb0:	4a40      	ldr	r2, [pc, #256]	; (800ccb4 <TM_ILI9341_Putc+0x118>)
 800cbb2:	89fb      	ldrh	r3, [r7, #14]
 800cbb4:	8013      	strh	r3, [r2, #0]
	ILI9341_y = y;
 800cbb6:	4a40      	ldr	r2, [pc, #256]	; (800ccb8 <TM_ILI9341_Putc+0x11c>)
 800cbb8:	89bb      	ldrh	r3, [r7, #12]
 800cbba:	8013      	strh	r3, [r2, #0]
	
	if ((ILI9341_x + font->FontWidth) > ILI9341_Opts.width) {
 800cbbc:	4b3d      	ldr	r3, [pc, #244]	; (800ccb4 <TM_ILI9341_Putc+0x118>)
 800cbbe:	881b      	ldrh	r3, [r3, #0]
 800cbc0:	461a      	mov	r2, r3
 800cbc2:	687b      	ldr	r3, [r7, #4]
 800cbc4:	781b      	ldrb	r3, [r3, #0]
 800cbc6:	4413      	add	r3, r2
 800cbc8:	4a3c      	ldr	r2, [pc, #240]	; (800ccbc <TM_ILI9341_Putc+0x120>)
 800cbca:	8812      	ldrh	r2, [r2, #0]
 800cbcc:	4293      	cmp	r3, r2
 800cbce:	dd0b      	ble.n	800cbe8 <TM_ILI9341_Putc+0x4c>
		/* If at the end of a line of display, go to new line and set x to 0 position */
		ILI9341_y += font->FontHeight;
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	785b      	ldrb	r3, [r3, #1]
 800cbd4:	b29a      	uxth	r2, r3
 800cbd6:	4b38      	ldr	r3, [pc, #224]	; (800ccb8 <TM_ILI9341_Putc+0x11c>)
 800cbd8:	881b      	ldrh	r3, [r3, #0]
 800cbda:	4413      	add	r3, r2
 800cbdc:	b29a      	uxth	r2, r3
 800cbde:	4b36      	ldr	r3, [pc, #216]	; (800ccb8 <TM_ILI9341_Putc+0x11c>)
 800cbe0:	801a      	strh	r2, [r3, #0]
		ILI9341_x = 0;
 800cbe2:	4b34      	ldr	r3, [pc, #208]	; (800ccb4 <TM_ILI9341_Putc+0x118>)
 800cbe4:	2200      	movs	r2, #0
 800cbe6:	801a      	strh	r2, [r3, #0]
	}
	
	/* Draw rectangle for background */
	TM_ILI9341_INT_Fill(ILI9341_x, ILI9341_y, ILI9341_x + font->FontWidth, ILI9341_y + font->FontHeight, background);
 800cbe8:	4b32      	ldr	r3, [pc, #200]	; (800ccb4 <TM_ILI9341_Putc+0x118>)
 800cbea:	8818      	ldrh	r0, [r3, #0]
 800cbec:	4b32      	ldr	r3, [pc, #200]	; (800ccb8 <TM_ILI9341_Putc+0x11c>)
 800cbee:	8819      	ldrh	r1, [r3, #0]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	781b      	ldrb	r3, [r3, #0]
 800cbf4:	b29a      	uxth	r2, r3
 800cbf6:	4b2f      	ldr	r3, [pc, #188]	; (800ccb4 <TM_ILI9341_Putc+0x118>)
 800cbf8:	881b      	ldrh	r3, [r3, #0]
 800cbfa:	4413      	add	r3, r2
 800cbfc:	b29c      	uxth	r4, r3
 800cbfe:	687b      	ldr	r3, [r7, #4]
 800cc00:	785b      	ldrb	r3, [r3, #1]
 800cc02:	b29a      	uxth	r2, r3
 800cc04:	4b2c      	ldr	r3, [pc, #176]	; (800ccb8 <TM_ILI9341_Putc+0x11c>)
 800cc06:	881b      	ldrh	r3, [r3, #0]
 800cc08:	4413      	add	r3, r2
 800cc0a:	b29a      	uxth	r2, r3
 800cc0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800cc0e:	b29b      	uxth	r3, r3
 800cc10:	9300      	str	r3, [sp, #0]
 800cc12:	4613      	mov	r3, r2
 800cc14:	4622      	mov	r2, r4
 800cc16:	f7ff fe7d 	bl	800c914 <TM_ILI9341_INT_Fill>
	
	/* Draw font data */
	for (i = 0; i < font->FontHeight; i++) {
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	61fb      	str	r3, [r7, #28]
 800cc1e:	e035      	b.n	800cc8c <TM_ILI9341_Putc+0xf0>
		b = font->data[(c - 32) * font->FontHeight + i];
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	685a      	ldr	r2, [r3, #4]
 800cc24:	7afb      	ldrb	r3, [r7, #11]
 800cc26:	3b20      	subs	r3, #32
 800cc28:	6879      	ldr	r1, [r7, #4]
 800cc2a:	7849      	ldrb	r1, [r1, #1]
 800cc2c:	fb01 f303 	mul.w	r3, r1, r3
 800cc30:	4619      	mov	r1, r3
 800cc32:	69fb      	ldr	r3, [r7, #28]
 800cc34:	440b      	add	r3, r1
 800cc36:	005b      	lsls	r3, r3, #1
 800cc38:	4413      	add	r3, r2
 800cc3a:	881b      	ldrh	r3, [r3, #0]
 800cc3c:	617b      	str	r3, [r7, #20]
		for (j = 0; j < font->FontWidth; j++) {
 800cc3e:	2300      	movs	r3, #0
 800cc40:	61bb      	str	r3, [r7, #24]
 800cc42:	e01a      	b.n	800cc7a <TM_ILI9341_Putc+0xde>
			if ((b << j) & 0x8000) {
 800cc44:	697a      	ldr	r2, [r7, #20]
 800cc46:	69bb      	ldr	r3, [r7, #24]
 800cc48:	fa02 f303 	lsl.w	r3, r2, r3
 800cc4c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	d00f      	beq.n	800cc74 <TM_ILI9341_Putc+0xd8>
				TM_ILI9341_DrawPixel(ILI9341_x + j, (ILI9341_y + i), foreground);
 800cc54:	69bb      	ldr	r3, [r7, #24]
 800cc56:	b29a      	uxth	r2, r3
 800cc58:	4b16      	ldr	r3, [pc, #88]	; (800ccb4 <TM_ILI9341_Putc+0x118>)
 800cc5a:	881b      	ldrh	r3, [r3, #0]
 800cc5c:	4413      	add	r3, r2
 800cc5e:	b298      	uxth	r0, r3
 800cc60:	69fb      	ldr	r3, [r7, #28]
 800cc62:	b29a      	uxth	r2, r3
 800cc64:	4b14      	ldr	r3, [pc, #80]	; (800ccb8 <TM_ILI9341_Putc+0x11c>)
 800cc66:	881b      	ldrh	r3, [r3, #0]
 800cc68:	4413      	add	r3, r2
 800cc6a:	b29b      	uxth	r3, r3
 800cc6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc6e:	4619      	mov	r1, r3
 800cc70:	f7ff fdce 	bl	800c810 <TM_ILI9341_DrawPixel>
		for (j = 0; j < font->FontWidth; j++) {
 800cc74:	69bb      	ldr	r3, [r7, #24]
 800cc76:	3301      	adds	r3, #1
 800cc78:	61bb      	str	r3, [r7, #24]
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	781b      	ldrb	r3, [r3, #0]
 800cc7e:	461a      	mov	r2, r3
 800cc80:	69bb      	ldr	r3, [r7, #24]
 800cc82:	4293      	cmp	r3, r2
 800cc84:	d3de      	bcc.n	800cc44 <TM_ILI9341_Putc+0xa8>
	for (i = 0; i < font->FontHeight; i++) {
 800cc86:	69fb      	ldr	r3, [r7, #28]
 800cc88:	3301      	adds	r3, #1
 800cc8a:	61fb      	str	r3, [r7, #28]
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	785b      	ldrb	r3, [r3, #1]
 800cc90:	461a      	mov	r2, r3
 800cc92:	69fb      	ldr	r3, [r7, #28]
 800cc94:	4293      	cmp	r3, r2
 800cc96:	d3c3      	bcc.n	800cc20 <TM_ILI9341_Putc+0x84>
			}
		}
	}
	
	/* Set new pointer */
	ILI9341_x += font->FontWidth;
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	781b      	ldrb	r3, [r3, #0]
 800cc9c:	b29a      	uxth	r2, r3
 800cc9e:	4b05      	ldr	r3, [pc, #20]	; (800ccb4 <TM_ILI9341_Putc+0x118>)
 800cca0:	881b      	ldrh	r3, [r3, #0]
 800cca2:	4413      	add	r3, r2
 800cca4:	b29a      	uxth	r2, r3
 800cca6:	4b03      	ldr	r3, [pc, #12]	; (800ccb4 <TM_ILI9341_Putc+0x118>)
 800cca8:	801a      	strh	r2, [r3, #0]
}
 800ccaa:	bf00      	nop
 800ccac:	3724      	adds	r7, #36	; 0x24
 800ccae:	46bd      	mov	sp, r7
 800ccb0:	bd90      	pop	{r4, r7, pc}
 800ccb2:	bf00      	nop
 800ccb4:	200023ac 	.word	0x200023ac
 800ccb8:	200023ae 	.word	0x200023ae
 800ccbc:	200023b0 	.word	0x200023b0

0800ccc0 <TM_ILI9341_DrawFilledRectangle>:
	TM_ILI9341_DrawLine(x0, y0, x0, y1, color);	//Left
	TM_ILI9341_DrawLine(x1, y0, x1, y1, color);	//Right
	TM_ILI9341_DrawLine(x0, y1, x1, y1, color);	//Bottom
}

void TM_ILI9341_DrawFilledRectangle(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1, uint32_t color) {	
 800ccc0:	b590      	push	{r4, r7, lr}
 800ccc2:	b087      	sub	sp, #28
 800ccc4:	af02      	add	r7, sp, #8
 800ccc6:	4604      	mov	r4, r0
 800ccc8:	4608      	mov	r0, r1
 800ccca:	4611      	mov	r1, r2
 800cccc:	461a      	mov	r2, r3
 800ccce:	4623      	mov	r3, r4
 800ccd0:	80fb      	strh	r3, [r7, #6]
 800ccd2:	4603      	mov	r3, r0
 800ccd4:	80bb      	strh	r3, [r7, #4]
 800ccd6:	460b      	mov	r3, r1
 800ccd8:	807b      	strh	r3, [r7, #2]
 800ccda:	4613      	mov	r3, r2
 800ccdc:	803b      	strh	r3, [r7, #0]
	uint16_t tmp;
	
	/* Check correction */
	if (x0 > x1) {
 800ccde:	88fa      	ldrh	r2, [r7, #6]
 800cce0:	887b      	ldrh	r3, [r7, #2]
 800cce2:	429a      	cmp	r2, r3
 800cce4:	d905      	bls.n	800ccf2 <TM_ILI9341_DrawFilledRectangle+0x32>
		tmp = x0;
 800cce6:	88fb      	ldrh	r3, [r7, #6]
 800cce8:	81fb      	strh	r3, [r7, #14]
		x0 = x1;
 800ccea:	887b      	ldrh	r3, [r7, #2]
 800ccec:	80fb      	strh	r3, [r7, #6]
		x1 = tmp;
 800ccee:	89fb      	ldrh	r3, [r7, #14]
 800ccf0:	807b      	strh	r3, [r7, #2]
	}
	if (y0 > y1) {
 800ccf2:	88ba      	ldrh	r2, [r7, #4]
 800ccf4:	883b      	ldrh	r3, [r7, #0]
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d905      	bls.n	800cd06 <TM_ILI9341_DrawFilledRectangle+0x46>
		tmp = y0;
 800ccfa:	88bb      	ldrh	r3, [r7, #4]
 800ccfc:	81fb      	strh	r3, [r7, #14]
		y0 = y1;
 800ccfe:	883b      	ldrh	r3, [r7, #0]
 800cd00:	80bb      	strh	r3, [r7, #4]
		y1 = tmp;
 800cd02:	89fb      	ldrh	r3, [r7, #14]
 800cd04:	803b      	strh	r3, [r7, #0]
	}
	
	/* Fill rectangle */
	TM_ILI9341_INT_Fill(x0, y0, x1, y1, color);
 800cd06:	6a3b      	ldr	r3, [r7, #32]
 800cd08:	b29b      	uxth	r3, r3
 800cd0a:	883c      	ldrh	r4, [r7, #0]
 800cd0c:	887a      	ldrh	r2, [r7, #2]
 800cd0e:	88b9      	ldrh	r1, [r7, #4]
 800cd10:	88f8      	ldrh	r0, [r7, #6]
 800cd12:	9300      	str	r3, [sp, #0]
 800cd14:	4623      	mov	r3, r4
 800cd16:	f7ff fdfd 	bl	800c914 <TM_ILI9341_INT_Fill>
	
	/* CS HIGH back */
	ILI9341_CS_SET;
 800cd1a:	2201      	movs	r2, #1
 800cd1c:	2104      	movs	r1, #4
 800cd1e:	4803      	ldr	r0, [pc, #12]	; (800cd2c <TM_ILI9341_DrawFilledRectangle+0x6c>)
 800cd20:	f002 f9a4 	bl	800f06c <HAL_GPIO_WritePin>
}
 800cd24:	bf00      	nop
 800cd26:	3714      	adds	r7, #20
 800cd28:	46bd      	mov	sp, r7
 800cd2a:	bd90      	pop	{r4, r7, pc}
 800cd2c:	40020800 	.word	0x40020800

0800cd30 <TM_KEYPAD_Init>:
static TM_KEYPAD_Button_t KeypadStatus = TM_KEYPAD_Button_NOPRESSED;
static TM_KEYPAD_Button_t KeyCode = TM_KEYPAD_Button_NOPRESSED;
static uint8_t KeyPressCount = 0;
static uint16_t millis = 0;

void TM_KEYPAD_Init() {
 800cd30:	b580      	push	{r7, lr}
 800cd32:	af00      	add	r7, sp, #0
	
	TM_KEYPAD_INT_SetColumn(0);
 800cd34:	2000      	movs	r0, #0
 800cd36:	f000 f833 	bl	800cda0 <TM_KEYPAD_INT_SetColumn>
}
 800cd3a:	bf00      	nop
 800cd3c:	bd80      	pop	{r7, pc}
	...

0800cd40 <TM_KEYPAD_GetChar>:

char TM_KEYPAD_GetChar(TM_KEYPAD_Button_t key){
 800cd40:	b480      	push	{r7}
 800cd42:	b083      	sub	sp, #12
 800cd44:	af00      	add	r7, sp, #0
 800cd46:	4603      	mov	r3, r0
 800cd48:	71fb      	strb	r3, [r7, #7]
	return KEYPAD_INT_Chars[key];
 800cd4a:	79fb      	ldrb	r3, [r7, #7]
 800cd4c:	4a03      	ldr	r2, [pc, #12]	; (800cd5c <TM_KEYPAD_GetChar+0x1c>)
 800cd4e:	5cd3      	ldrb	r3, [r2, r3]
}
 800cd50:	4618      	mov	r0, r3
 800cd52:	370c      	adds	r7, #12
 800cd54:	46bd      	mov	sp, r7
 800cd56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd5a:	4770      	bx	lr
 800cd5c:	200001e8 	.word	0x200001e8

0800cd60 <TM_KEYPAD_Read>:

TM_KEYPAD_Button_t TM_KEYPAD_Read(void) {
 800cd60:	b480      	push	{r7}
 800cd62:	af00      	add	r7, sp, #0

	if(KeyCode != TM_KEYPAD_Button_NOPRESSED && KeypadStatus != TM_KEYPAD_Button_PRESSED){
 800cd64:	4b0b      	ldr	r3, [pc, #44]	; (800cd94 <TM_KEYPAD_Read+0x34>)
 800cd66:	781b      	ldrb	r3, [r3, #0]
 800cd68:	2bff      	cmp	r3, #255	; 0xff
 800cd6a:	d00c      	beq.n	800cd86 <TM_KEYPAD_Read+0x26>
 800cd6c:	4b0a      	ldr	r3, [pc, #40]	; (800cd98 <TM_KEYPAD_Read+0x38>)
 800cd6e:	781b      	ldrb	r3, [r3, #0]
 800cd70:	2bfe      	cmp	r3, #254	; 0xfe
 800cd72:	d008      	beq.n	800cd86 <TM_KEYPAD_Read+0x26>
		millis = 0;
 800cd74:	4b09      	ldr	r3, [pc, #36]	; (800cd9c <TM_KEYPAD_Read+0x3c>)
 800cd76:	2200      	movs	r2, #0
 800cd78:	801a      	strh	r2, [r3, #0]
		KeypadStatus = TM_KEYPAD_Button_PRESSED;
 800cd7a:	4b07      	ldr	r3, [pc, #28]	; (800cd98 <TM_KEYPAD_Read+0x38>)
 800cd7c:	22fe      	movs	r2, #254	; 0xfe
 800cd7e:	701a      	strb	r2, [r3, #0]
		return KeyCode;
 800cd80:	4b04      	ldr	r3, [pc, #16]	; (800cd94 <TM_KEYPAD_Read+0x34>)
 800cd82:	781b      	ldrb	r3, [r3, #0]
 800cd84:	e000      	b.n	800cd88 <TM_KEYPAD_Read+0x28>
	}
		return TM_KEYPAD_Button_NOPRESSED;
 800cd86:	23ff      	movs	r3, #255	; 0xff

}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	46bd      	mov	sp, r7
 800cd8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd90:	4770      	bx	lr
 800cd92:	bf00      	nop
 800cd94:	200001f9 	.word	0x200001f9
 800cd98:	200001f8 	.word	0x200001f8
 800cd9c:	200023b6 	.word	0x200023b6

0800cda0 <TM_KEYPAD_INT_SetColumn>:

/* Private */
void TM_KEYPAD_INT_SetColumn(uint8_t column) {
 800cda0:	b580      	push	{r7, lr}
 800cda2:	b082      	sub	sp, #8
 800cda4:	af00      	add	r7, sp, #0
 800cda6:	4603      	mov	r3, r0
 800cda8:	71fb      	strb	r3, [r7, #7]
	/* Set rows high */
	KEYPAD_COLUMN_1_HIGH;
 800cdaa:	2201      	movs	r2, #1
 800cdac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800cdb0:	481b      	ldr	r0, [pc, #108]	; (800ce20 <TM_KEYPAD_INT_SetColumn+0x80>)
 800cdb2:	f002 f95b 	bl	800f06c <HAL_GPIO_WritePin>
	KEYPAD_COLUMN_2_HIGH;
 800cdb6:	2201      	movs	r2, #1
 800cdb8:	2120      	movs	r1, #32
 800cdba:	4819      	ldr	r0, [pc, #100]	; (800ce20 <TM_KEYPAD_INT_SetColumn+0x80>)
 800cdbc:	f002 f956 	bl	800f06c <HAL_GPIO_WritePin>
	KEYPAD_COLUMN_3_HIGH;
 800cdc0:	2201      	movs	r2, #1
 800cdc2:	2140      	movs	r1, #64	; 0x40
 800cdc4:	4816      	ldr	r0, [pc, #88]	; (800ce20 <TM_KEYPAD_INT_SetColumn+0x80>)
 800cdc6:	f002 f951 	bl	800f06c <HAL_GPIO_WritePin>
	KEYPAD_COLUMN_4_HIGH;
 800cdca:	2201      	movs	r2, #1
 800cdcc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800cdd0:	4814      	ldr	r0, [pc, #80]	; (800ce24 <TM_KEYPAD_INT_SetColumn+0x84>)
 800cdd2:	f002 f94b 	bl	800f06c <HAL_GPIO_WritePin>

	/* Set column low */
	if (column == 1) {
 800cdd6:	79fb      	ldrb	r3, [r7, #7]
 800cdd8:	2b01      	cmp	r3, #1
 800cdda:	d104      	bne.n	800cde6 <TM_KEYPAD_INT_SetColumn+0x46>
		KEYPAD_COLUMN_1_LOW;
 800cddc:	2200      	movs	r2, #0
 800cdde:	2110      	movs	r1, #16
 800cde0:	480f      	ldr	r0, [pc, #60]	; (800ce20 <TM_KEYPAD_INT_SetColumn+0x80>)
 800cde2:	f002 f943 	bl	800f06c <HAL_GPIO_WritePin>
	}
	if (column == 2) {
 800cde6:	79fb      	ldrb	r3, [r7, #7]
 800cde8:	2b02      	cmp	r3, #2
 800cdea:	d104      	bne.n	800cdf6 <TM_KEYPAD_INT_SetColumn+0x56>
		KEYPAD_COLUMN_2_LOW;
 800cdec:	2200      	movs	r2, #0
 800cdee:	2120      	movs	r1, #32
 800cdf0:	480b      	ldr	r0, [pc, #44]	; (800ce20 <TM_KEYPAD_INT_SetColumn+0x80>)
 800cdf2:	f002 f93b 	bl	800f06c <HAL_GPIO_WritePin>
	}
	if (column == 3) {
 800cdf6:	79fb      	ldrb	r3, [r7, #7]
 800cdf8:	2b03      	cmp	r3, #3
 800cdfa:	d104      	bne.n	800ce06 <TM_KEYPAD_INT_SetColumn+0x66>
		KEYPAD_COLUMN_3_LOW;
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	2140      	movs	r1, #64	; 0x40
 800ce00:	4807      	ldr	r0, [pc, #28]	; (800ce20 <TM_KEYPAD_INT_SetColumn+0x80>)
 800ce02:	f002 f933 	bl	800f06c <HAL_GPIO_WritePin>
	}
	if (column == 4) {
 800ce06:	79fb      	ldrb	r3, [r7, #7]
 800ce08:	2b04      	cmp	r3, #4
 800ce0a:	d105      	bne.n	800ce18 <TM_KEYPAD_INT_SetColumn+0x78>
		KEYPAD_COLUMN_4_LOW;
 800ce0c:	2200      	movs	r2, #0
 800ce0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800ce12:	4804      	ldr	r0, [pc, #16]	; (800ce24 <TM_KEYPAD_INT_SetColumn+0x84>)
 800ce14:	f002 f92a 	bl	800f06c <HAL_GPIO_WritePin>
	}
}
 800ce18:	bf00      	nop
 800ce1a:	3708      	adds	r7, #8
 800ce1c:	46bd      	mov	sp, r7
 800ce1e:	bd80      	pop	{r7, pc}
 800ce20:	40021000 	.word	0x40021000
 800ce24:	40020800 	.word	0x40020800

0800ce28 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800ce28:	b580      	push	{r7, lr}
 800ce2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800ce2c:	4b12      	ldr	r3, [pc, #72]	; (800ce78 <MX_USART1_UART_Init+0x50>)
 800ce2e:	4a13      	ldr	r2, [pc, #76]	; (800ce7c <MX_USART1_UART_Init+0x54>)
 800ce30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 31250;
 800ce32:	4b11      	ldr	r3, [pc, #68]	; (800ce78 <MX_USART1_UART_Init+0x50>)
 800ce34:	f647 2212 	movw	r2, #31250	; 0x7a12
 800ce38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800ce3a:	4b0f      	ldr	r3, [pc, #60]	; (800ce78 <MX_USART1_UART_Init+0x50>)
 800ce3c:	2200      	movs	r2, #0
 800ce3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800ce40:	4b0d      	ldr	r3, [pc, #52]	; (800ce78 <MX_USART1_UART_Init+0x50>)
 800ce42:	2200      	movs	r2, #0
 800ce44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800ce46:	4b0c      	ldr	r3, [pc, #48]	; (800ce78 <MX_USART1_UART_Init+0x50>)
 800ce48:	2200      	movs	r2, #0
 800ce4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800ce4c:	4b0a      	ldr	r3, [pc, #40]	; (800ce78 <MX_USART1_UART_Init+0x50>)
 800ce4e:	220c      	movs	r2, #12
 800ce50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800ce52:	4b09      	ldr	r3, [pc, #36]	; (800ce78 <MX_USART1_UART_Init+0x50>)
 800ce54:	2200      	movs	r2, #0
 800ce56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800ce58:	4b07      	ldr	r3, [pc, #28]	; (800ce78 <MX_USART1_UART_Init+0x50>)
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	61da      	str	r2, [r3, #28]
  if (HAL_MultiProcessor_Init(&huart1, 0, UART_WAKEUPMETHOD_IDLELINE) != HAL_OK)
 800ce5e:	2200      	movs	r2, #0
 800ce60:	2100      	movs	r1, #0
 800ce62:	4805      	ldr	r0, [pc, #20]	; (800ce78 <MX_USART1_UART_Init+0x50>)
 800ce64:	f005 fdea 	bl	8012a3c <HAL_MultiProcessor_Init>
 800ce68:	4603      	mov	r3, r0
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d001      	beq.n	800ce72 <MX_USART1_UART_Init+0x4a>
  {
    Error_Handler();
 800ce6e:	f7fa fe89 	bl	8007b84 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800ce72:	bf00      	nop
 800ce74:	bd80      	pop	{r7, pc}
 800ce76:	bf00      	nop
 800ce78:	200023b8 	.word	0x200023b8
 800ce7c:	40011000 	.word	0x40011000

0800ce80 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800ce80:	b580      	push	{r7, lr}
 800ce82:	b08a      	sub	sp, #40	; 0x28
 800ce84:	af00      	add	r7, sp, #0
 800ce86:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ce88:	f107 0314 	add.w	r3, r7, #20
 800ce8c:	2200      	movs	r2, #0
 800ce8e:	601a      	str	r2, [r3, #0]
 800ce90:	605a      	str	r2, [r3, #4]
 800ce92:	609a      	str	r2, [r3, #8]
 800ce94:	60da      	str	r2, [r3, #12]
 800ce96:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	4a19      	ldr	r2, [pc, #100]	; (800cf04 <HAL_UART_MspInit+0x84>)
 800ce9e:	4293      	cmp	r3, r2
 800cea0:	d12c      	bne.n	800cefc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800cea2:	2300      	movs	r3, #0
 800cea4:	613b      	str	r3, [r7, #16]
 800cea6:	4b18      	ldr	r3, [pc, #96]	; (800cf08 <HAL_UART_MspInit+0x88>)
 800cea8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ceaa:	4a17      	ldr	r2, [pc, #92]	; (800cf08 <HAL_UART_MspInit+0x88>)
 800ceac:	f043 0310 	orr.w	r3, r3, #16
 800ceb0:	6453      	str	r3, [r2, #68]	; 0x44
 800ceb2:	4b15      	ldr	r3, [pc, #84]	; (800cf08 <HAL_UART_MspInit+0x88>)
 800ceb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ceb6:	f003 0310 	and.w	r3, r3, #16
 800ceba:	613b      	str	r3, [r7, #16]
 800cebc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800cebe:	2300      	movs	r3, #0
 800cec0:	60fb      	str	r3, [r7, #12]
 800cec2:	4b11      	ldr	r3, [pc, #68]	; (800cf08 <HAL_UART_MspInit+0x88>)
 800cec4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800cec6:	4a10      	ldr	r2, [pc, #64]	; (800cf08 <HAL_UART_MspInit+0x88>)
 800cec8:	f043 0301 	orr.w	r3, r3, #1
 800cecc:	6313      	str	r3, [r2, #48]	; 0x30
 800cece:	4b0e      	ldr	r3, [pc, #56]	; (800cf08 <HAL_UART_MspInit+0x88>)
 800ced0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ced2:	f003 0301 	and.w	r3, r3, #1
 800ced6:	60fb      	str	r3, [r7, #12]
 800ced8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 800ceda:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800cede:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800cee0:	2302      	movs	r3, #2
 800cee2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800cee4:	2300      	movs	r3, #0
 800cee6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800cee8:	2303      	movs	r3, #3
 800ceea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800ceec:	2307      	movs	r3, #7
 800ceee:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800cef0:	f107 0314 	add.w	r3, r7, #20
 800cef4:	4619      	mov	r1, r3
 800cef6:	4805      	ldr	r0, [pc, #20]	; (800cf0c <HAL_UART_MspInit+0x8c>)
 800cef8:	f001 fef4 	bl	800ece4 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800cefc:	bf00      	nop
 800cefe:	3728      	adds	r7, #40	; 0x28
 800cf00:	46bd      	mov	sp, r7
 800cf02:	bd80      	pop	{r7, pc}
 800cf04:	40011000 	.word	0x40011000
 800cf08:	40023800 	.word	0x40023800
 800cf0c:	40020000 	.word	0x40020000

0800cf10 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 800cf10:	f8df d034 	ldr.w	sp, [pc, #52]	; 800cf48 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800cf14:	480d      	ldr	r0, [pc, #52]	; (800cf4c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800cf16:	490e      	ldr	r1, [pc, #56]	; (800cf50 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800cf18:	4a0e      	ldr	r2, [pc, #56]	; (800cf54 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800cf1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800cf1c:	e002      	b.n	800cf24 <LoopCopyDataInit>

0800cf1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800cf1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800cf20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800cf22:	3304      	adds	r3, #4

0800cf24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800cf24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800cf26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800cf28:	d3f9      	bcc.n	800cf1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800cf2a:	4a0b      	ldr	r2, [pc, #44]	; (800cf58 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800cf2c:	4c0b      	ldr	r4, [pc, #44]	; (800cf5c <LoopFillZerobss+0x26>)
  movs r3, #0
 800cf2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 800cf30:	e001      	b.n	800cf36 <LoopFillZerobss>

0800cf32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800cf32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800cf34:	3204      	adds	r2, #4

0800cf36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800cf36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800cf38:	d3fb      	bcc.n	800cf32 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800cf3a:	f7fe ff31 	bl	800bda0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800cf3e:	f00a fb7b 	bl	8017638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800cf42:	f7fa fc17 	bl	8007774 <main>
  bx  lr    
 800cf46:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800cf48:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800cf4c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800cf50:	20000358 	.word	0x20000358
  ldr r2, =_sidata
 800cf54:	0801a9b8 	.word	0x0801a9b8
  ldr r2, =_sbss
 800cf58:	20000358 	.word	0x20000358
  ldr r4, =_ebss
 800cf5c:	20003228 	.word	0x20003228

0800cf60 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800cf60:	e7fe      	b.n	800cf60 <BusFault_Handler>
	...

0800cf64 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800cf68:	4b0e      	ldr	r3, [pc, #56]	; (800cfa4 <HAL_Init+0x40>)
 800cf6a:	681b      	ldr	r3, [r3, #0]
 800cf6c:	4a0d      	ldr	r2, [pc, #52]	; (800cfa4 <HAL_Init+0x40>)
 800cf6e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800cf72:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800cf74:	4b0b      	ldr	r3, [pc, #44]	; (800cfa4 <HAL_Init+0x40>)
 800cf76:	681b      	ldr	r3, [r3, #0]
 800cf78:	4a0a      	ldr	r2, [pc, #40]	; (800cfa4 <HAL_Init+0x40>)
 800cf7a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800cf7e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800cf80:	4b08      	ldr	r3, [pc, #32]	; (800cfa4 <HAL_Init+0x40>)
 800cf82:	681b      	ldr	r3, [r3, #0]
 800cf84:	4a07      	ldr	r2, [pc, #28]	; (800cfa4 <HAL_Init+0x40>)
 800cf86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800cf8a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800cf8c:	2003      	movs	r0, #3
 800cf8e:	f000 ff91 	bl	800deb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800cf92:	2000      	movs	r0, #0
 800cf94:	f000 f808 	bl	800cfa8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800cf98:	f7fe fd80 	bl	800ba9c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800cf9c:	2300      	movs	r3, #0
}
 800cf9e:	4618      	mov	r0, r3
 800cfa0:	bd80      	pop	{r7, pc}
 800cfa2:	bf00      	nop
 800cfa4:	40023c00 	.word	0x40023c00

0800cfa8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800cfa8:	b580      	push	{r7, lr}
 800cfaa:	b082      	sub	sp, #8
 800cfac:	af00      	add	r7, sp, #0
 800cfae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800cfb0:	4b12      	ldr	r3, [pc, #72]	; (800cffc <HAL_InitTick+0x54>)
 800cfb2:	681a      	ldr	r2, [r3, #0]
 800cfb4:	4b12      	ldr	r3, [pc, #72]	; (800d000 <HAL_InitTick+0x58>)
 800cfb6:	781b      	ldrb	r3, [r3, #0]
 800cfb8:	4619      	mov	r1, r3
 800cfba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800cfbe:	fbb3 f3f1 	udiv	r3, r3, r1
 800cfc2:	fbb2 f3f3 	udiv	r3, r2, r3
 800cfc6:	4618      	mov	r0, r3
 800cfc8:	f000 ffb7 	bl	800df3a <HAL_SYSTICK_Config>
 800cfcc:	4603      	mov	r3, r0
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d001      	beq.n	800cfd6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800cfd2:	2301      	movs	r3, #1
 800cfd4:	e00e      	b.n	800cff4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	2b0f      	cmp	r3, #15
 800cfda:	d80a      	bhi.n	800cff2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800cfdc:	2200      	movs	r2, #0
 800cfde:	6879      	ldr	r1, [r7, #4]
 800cfe0:	f04f 30ff 	mov.w	r0, #4294967295
 800cfe4:	f000 ff71 	bl	800deca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800cfe8:	4a06      	ldr	r2, [pc, #24]	; (800d004 <HAL_InitTick+0x5c>)
 800cfea:	687b      	ldr	r3, [r7, #4]
 800cfec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800cfee:	2300      	movs	r3, #0
 800cff0:	e000      	b.n	800cff4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800cff2:	2301      	movs	r3, #1
}
 800cff4:	4618      	mov	r0, r3
 800cff6:	3708      	adds	r7, #8
 800cff8:	46bd      	mov	sp, r7
 800cffa:	bd80      	pop	{r7, pc}
 800cffc:	200001d4 	.word	0x200001d4
 800d000:	20000200 	.word	0x20000200
 800d004:	200001fc 	.word	0x200001fc

0800d008 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800d008:	b480      	push	{r7}
 800d00a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800d00c:	4b06      	ldr	r3, [pc, #24]	; (800d028 <HAL_IncTick+0x20>)
 800d00e:	781b      	ldrb	r3, [r3, #0]
 800d010:	461a      	mov	r2, r3
 800d012:	4b06      	ldr	r3, [pc, #24]	; (800d02c <HAL_IncTick+0x24>)
 800d014:	681b      	ldr	r3, [r3, #0]
 800d016:	4413      	add	r3, r2
 800d018:	4a04      	ldr	r2, [pc, #16]	; (800d02c <HAL_IncTick+0x24>)
 800d01a:	6013      	str	r3, [r2, #0]
}
 800d01c:	bf00      	nop
 800d01e:	46bd      	mov	sp, r7
 800d020:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d024:	4770      	bx	lr
 800d026:	bf00      	nop
 800d028:	20000200 	.word	0x20000200
 800d02c:	200023fc 	.word	0x200023fc

0800d030 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800d030:	b480      	push	{r7}
 800d032:	af00      	add	r7, sp, #0
  return uwTick;
 800d034:	4b03      	ldr	r3, [pc, #12]	; (800d044 <HAL_GetTick+0x14>)
 800d036:	681b      	ldr	r3, [r3, #0]
}
 800d038:	4618      	mov	r0, r3
 800d03a:	46bd      	mov	sp, r7
 800d03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d040:	4770      	bx	lr
 800d042:	bf00      	nop
 800d044:	200023fc 	.word	0x200023fc

0800d048 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800d048:	b580      	push	{r7, lr}
 800d04a:	b084      	sub	sp, #16
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800d050:	f7ff ffee 	bl	800d030 <HAL_GetTick>
 800d054:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800d056:	687b      	ldr	r3, [r7, #4]
 800d058:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800d05a:	68fb      	ldr	r3, [r7, #12]
 800d05c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d060:	d005      	beq.n	800d06e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800d062:	4b0a      	ldr	r3, [pc, #40]	; (800d08c <HAL_Delay+0x44>)
 800d064:	781b      	ldrb	r3, [r3, #0]
 800d066:	461a      	mov	r2, r3
 800d068:	68fb      	ldr	r3, [r7, #12]
 800d06a:	4413      	add	r3, r2
 800d06c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800d06e:	bf00      	nop
 800d070:	f7ff ffde 	bl	800d030 <HAL_GetTick>
 800d074:	4602      	mov	r2, r0
 800d076:	68bb      	ldr	r3, [r7, #8]
 800d078:	1ad3      	subs	r3, r2, r3
 800d07a:	68fa      	ldr	r2, [r7, #12]
 800d07c:	429a      	cmp	r2, r3
 800d07e:	d8f7      	bhi.n	800d070 <HAL_Delay+0x28>
  {
  }
}
 800d080:	bf00      	nop
 800d082:	bf00      	nop
 800d084:	3710      	adds	r7, #16
 800d086:	46bd      	mov	sp, r7
 800d088:	bd80      	pop	{r7, pc}
 800d08a:	bf00      	nop
 800d08c:	20000200 	.word	0x20000200

0800d090 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800d090:	b580      	push	{r7, lr}
 800d092:	b084      	sub	sp, #16
 800d094:	af00      	add	r7, sp, #0
 800d096:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800d098:	2300      	movs	r3, #0
 800d09a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d101      	bne.n	800d0a6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	e033      	b.n	800d10e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800d0a6:	687b      	ldr	r3, [r7, #4]
 800d0a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d109      	bne.n	800d0c2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800d0ae:	6878      	ldr	r0, [r7, #4]
 800d0b0:	f7f4 fb3e 	bl	8001730 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800d0b4:	687b      	ldr	r3, [r7, #4]
 800d0b6:	2200      	movs	r2, #0
 800d0b8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800d0ba:	687b      	ldr	r3, [r7, #4]
 800d0bc:	2200      	movs	r2, #0
 800d0be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0c6:	f003 0310 	and.w	r3, r3, #16
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d118      	bne.n	800d100 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800d0ce:	687b      	ldr	r3, [r7, #4]
 800d0d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800d0d6:	f023 0302 	bic.w	r3, r3, #2
 800d0da:	f043 0202 	orr.w	r2, r3, #2
 800d0de:	687b      	ldr	r3, [r7, #4]
 800d0e0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800d0e2:	6878      	ldr	r0, [r7, #4]
 800d0e4:	f000 fc6a 	bl	800d9bc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800d0e8:	687b      	ldr	r3, [r7, #4]
 800d0ea:	2200      	movs	r2, #0
 800d0ec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d0f2:	f023 0303 	bic.w	r3, r3, #3
 800d0f6:	f043 0201 	orr.w	r2, r3, #1
 800d0fa:	687b      	ldr	r3, [r7, #4]
 800d0fc:	641a      	str	r2, [r3, #64]	; 0x40
 800d0fe:	e001      	b.n	800d104 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800d100:	2301      	movs	r3, #1
 800d102:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800d104:	687b      	ldr	r3, [r7, #4]
 800d106:	2200      	movs	r2, #0
 800d108:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 800d10c:	7bfb      	ldrb	r3, [r7, #15]
}
 800d10e:	4618      	mov	r0, r3
 800d110:	3710      	adds	r7, #16
 800d112:	46bd      	mov	sp, r7
 800d114:	bd80      	pop	{r7, pc}
	...

0800d118 <HAL_ADC_Start_IT>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 800d118:	b480      	push	{r7}
 800d11a:	b085      	sub	sp, #20
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800d120:	2300      	movs	r3, #0
 800d122:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d12a:	2b01      	cmp	r3, #1
 800d12c:	d101      	bne.n	800d132 <HAL_ADC_Start_IT+0x1a>
 800d12e:	2302      	movs	r3, #2
 800d130:	e0bd      	b.n	800d2ae <HAL_ADC_Start_IT+0x196>
 800d132:	687b      	ldr	r3, [r7, #4]
 800d134:	2201      	movs	r2, #1
 800d136:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	681b      	ldr	r3, [r3, #0]
 800d13e:	689b      	ldr	r3, [r3, #8]
 800d140:	f003 0301 	and.w	r3, r3, #1
 800d144:	2b01      	cmp	r3, #1
 800d146:	d018      	beq.n	800d17a <HAL_ADC_Start_IT+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800d148:	687b      	ldr	r3, [r7, #4]
 800d14a:	681b      	ldr	r3, [r3, #0]
 800d14c:	689a      	ldr	r2, [r3, #8]
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	f042 0201 	orr.w	r2, r2, #1
 800d156:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800d158:	4b58      	ldr	r3, [pc, #352]	; (800d2bc <HAL_ADC_Start_IT+0x1a4>)
 800d15a:	681b      	ldr	r3, [r3, #0]
 800d15c:	4a58      	ldr	r2, [pc, #352]	; (800d2c0 <HAL_ADC_Start_IT+0x1a8>)
 800d15e:	fba2 2303 	umull	r2, r3, r2, r3
 800d162:	0c9a      	lsrs	r2, r3, #18
 800d164:	4613      	mov	r3, r2
 800d166:	005b      	lsls	r3, r3, #1
 800d168:	4413      	add	r3, r2
 800d16a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800d16c:	e002      	b.n	800d174 <HAL_ADC_Start_IT+0x5c>
    {
      counter--;
 800d16e:	68bb      	ldr	r3, [r7, #8]
 800d170:	3b01      	subs	r3, #1
 800d172:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800d174:	68bb      	ldr	r3, [r7, #8]
 800d176:	2b00      	cmp	r3, #0
 800d178:	d1f9      	bne.n	800d16e <HAL_ADC_Start_IT+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	689b      	ldr	r3, [r3, #8]
 800d180:	f003 0301 	and.w	r3, r3, #1
 800d184:	2b01      	cmp	r3, #1
 800d186:	f040 8085 	bne.w	800d294 <HAL_ADC_Start_IT+0x17c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d18e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800d192:	f023 0301 	bic.w	r3, r3, #1
 800d196:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	685b      	ldr	r3, [r3, #4]
 800d1a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d1a8:	2b00      	cmp	r3, #0
 800d1aa:	d007      	beq.n	800d1bc <HAL_ADC_Start_IT+0xa4>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800d1b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800d1b8:	687b      	ldr	r3, [r7, #4]
 800d1ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800d1bc:	687b      	ldr	r3, [r7, #4]
 800d1be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d1c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d1c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d1c8:	d106      	bne.n	800d1d8 <HAL_ADC_Start_IT+0xc0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800d1ca:	687b      	ldr	r3, [r7, #4]
 800d1cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d1ce:	f023 0206 	bic.w	r2, r3, #6
 800d1d2:	687b      	ldr	r3, [r7, #4]
 800d1d4:	645a      	str	r2, [r3, #68]	; 0x44
 800d1d6:	e002      	b.n	800d1de <HAL_ADC_Start_IT+0xc6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	2200      	movs	r2, #0
 800d1dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	2200      	movs	r2, #0
 800d1e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800d1e6:	4b37      	ldr	r3, [pc, #220]	; (800d2c4 <HAL_ADC_Start_IT+0x1ac>)
 800d1e8:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800d1ea:	687b      	ldr	r3, [r7, #4]
 800d1ec:	681b      	ldr	r3, [r3, #0]
 800d1ee:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800d1f2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_OVR));
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	685b      	ldr	r3, [r3, #4]
 800d1fa:	687a      	ldr	r2, [r7, #4]
 800d1fc:	6812      	ldr	r2, [r2, #0]
 800d1fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800d202:	f043 0320 	orr.w	r3, r3, #32
 800d206:	6053      	str	r3, [r2, #4]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800d208:	68fb      	ldr	r3, [r7, #12]
 800d20a:	685b      	ldr	r3, [r3, #4]
 800d20c:	f003 031f 	and.w	r3, r3, #31
 800d210:	2b00      	cmp	r3, #0
 800d212:	d12a      	bne.n	800d26a <HAL_ADC_Start_IT+0x152>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800d214:	687b      	ldr	r3, [r7, #4]
 800d216:	681b      	ldr	r3, [r3, #0]
 800d218:	4a2b      	ldr	r2, [pc, #172]	; (800d2c8 <HAL_ADC_Start_IT+0x1b0>)
 800d21a:	4293      	cmp	r3, r2
 800d21c:	d015      	beq.n	800d24a <HAL_ADC_Start_IT+0x132>
 800d21e:	687b      	ldr	r3, [r7, #4]
 800d220:	681b      	ldr	r3, [r3, #0]
 800d222:	4a2a      	ldr	r2, [pc, #168]	; (800d2cc <HAL_ADC_Start_IT+0x1b4>)
 800d224:	4293      	cmp	r3, r2
 800d226:	d105      	bne.n	800d234 <HAL_ADC_Start_IT+0x11c>
 800d228:	4b26      	ldr	r3, [pc, #152]	; (800d2c4 <HAL_ADC_Start_IT+0x1ac>)
 800d22a:	685b      	ldr	r3, [r3, #4]
 800d22c:	f003 031f 	and.w	r3, r3, #31
 800d230:	2b00      	cmp	r3, #0
 800d232:	d00a      	beq.n	800d24a <HAL_ADC_Start_IT+0x132>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	4a25      	ldr	r2, [pc, #148]	; (800d2d0 <HAL_ADC_Start_IT+0x1b8>)
 800d23a:	4293      	cmp	r3, r2
 800d23c:	d136      	bne.n	800d2ac <HAL_ADC_Start_IT+0x194>
 800d23e:	4b21      	ldr	r3, [pc, #132]	; (800d2c4 <HAL_ADC_Start_IT+0x1ac>)
 800d240:	685b      	ldr	r3, [r3, #4]
 800d242:	f003 0310 	and.w	r3, r3, #16
 800d246:	2b00      	cmp	r3, #0
 800d248:	d130      	bne.n	800d2ac <HAL_ADC_Start_IT+0x194>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	689b      	ldr	r3, [r3, #8]
 800d250:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d254:	2b00      	cmp	r3, #0
 800d256:	d129      	bne.n	800d2ac <HAL_ADC_Start_IT+0x194>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800d258:	687b      	ldr	r3, [r7, #4]
 800d25a:	681b      	ldr	r3, [r3, #0]
 800d25c:	689a      	ldr	r2, [r3, #8]
 800d25e:	687b      	ldr	r3, [r7, #4]
 800d260:	681b      	ldr	r3, [r3, #0]
 800d262:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d266:	609a      	str	r2, [r3, #8]
 800d268:	e020      	b.n	800d2ac <HAL_ADC_Start_IT+0x194>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	681b      	ldr	r3, [r3, #0]
 800d26e:	4a16      	ldr	r2, [pc, #88]	; (800d2c8 <HAL_ADC_Start_IT+0x1b0>)
 800d270:	4293      	cmp	r3, r2
 800d272:	d11b      	bne.n	800d2ac <HAL_ADC_Start_IT+0x194>
 800d274:	687b      	ldr	r3, [r7, #4]
 800d276:	681b      	ldr	r3, [r3, #0]
 800d278:	689b      	ldr	r3, [r3, #8]
 800d27a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d27e:	2b00      	cmp	r3, #0
 800d280:	d114      	bne.n	800d2ac <HAL_ADC_Start_IT+0x194>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	689a      	ldr	r2, [r3, #8]
 800d288:	687b      	ldr	r3, [r7, #4]
 800d28a:	681b      	ldr	r3, [r3, #0]
 800d28c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d290:	609a      	str	r2, [r3, #8]
 800d292:	e00b      	b.n	800d2ac <HAL_ADC_Start_IT+0x194>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d294:	687b      	ldr	r3, [r7, #4]
 800d296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d298:	f043 0210 	orr.w	r2, r3, #16
 800d29c:	687b      	ldr	r3, [r7, #4]
 800d29e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d2a4:	f043 0201 	orr.w	r2, r3, #1
 800d2a8:	687b      	ldr	r3, [r7, #4]
 800d2aa:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800d2ac:	2300      	movs	r3, #0
}
 800d2ae:	4618      	mov	r0, r3
 800d2b0:	3714      	adds	r7, #20
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2b8:	4770      	bx	lr
 800d2ba:	bf00      	nop
 800d2bc:	200001d4 	.word	0x200001d4
 800d2c0:	431bde83 	.word	0x431bde83
 800d2c4:	40012300 	.word	0x40012300
 800d2c8:	40012000 	.word	0x40012000
 800d2cc:	40012100 	.word	0x40012100
 800d2d0:	40012200 	.word	0x40012200

0800d2d4 <HAL_ADC_IRQHandler>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800d2d4:	b580      	push	{r7, lr}
 800d2d6:	b086      	sub	sp, #24
 800d2d8:	af00      	add	r7, sp, #0
 800d2da:	6078      	str	r0, [r7, #4]
  uint32_t tmp1 = 0U, tmp2 = 0U;
 800d2dc:	2300      	movs	r3, #0
 800d2de:	617b      	str	r3, [r7, #20]
 800d2e0:	2300      	movs	r3, #0
 800d2e2:	613b      	str	r3, [r7, #16]
  
  uint32_t tmp_sr = hadc->Instance->SR;
 800d2e4:	687b      	ldr	r3, [r7, #4]
 800d2e6:	681b      	ldr	r3, [r3, #0]
 800d2e8:	681b      	ldr	r3, [r3, #0]
 800d2ea:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800d2ec:	687b      	ldr	r3, [r7, #4]
 800d2ee:	681b      	ldr	r3, [r3, #0]
 800d2f0:	685b      	ldr	r3, [r3, #4]
 800d2f2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_LENGTH(hadc->Init.NbrOfConversion));
  assert_param(IS_ADC_EOCSelection(hadc->Init.EOCSelection));
  
  tmp1 = tmp_sr & ADC_FLAG_EOC;
 800d2f4:	68fb      	ldr	r3, [r7, #12]
 800d2f6:	f003 0302 	and.w	r3, r3, #2
 800d2fa:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_EOC;
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	f003 0320 	and.w	r3, r3, #32
 800d302:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for regular channels */
  if(tmp1 && tmp2)
 800d304:	697b      	ldr	r3, [r7, #20]
 800d306:	2b00      	cmp	r3, #0
 800d308:	d049      	beq.n	800d39e <HAL_ADC_IRQHandler+0xca>
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d046      	beq.n	800d39e <HAL_ADC_IRQHandler+0xca>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d314:	f003 0310 	and.w	r3, r3, #16
 800d318:	2b00      	cmp	r3, #0
 800d31a:	d105      	bne.n	800d328 <HAL_ADC_IRQHandler+0x54>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 800d31c:	687b      	ldr	r3, [r7, #4]
 800d31e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d320:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800d328:	687b      	ldr	r3, [r7, #4]
 800d32a:	681b      	ldr	r3, [r3, #0]
 800d32c:	689b      	ldr	r3, [r3, #8]
 800d32e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d332:	2b00      	cmp	r3, #0
 800d334:	d12b      	bne.n	800d38e <HAL_ADC_IRQHandler+0xba>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800d33a:	2b00      	cmp	r3, #0
 800d33c:	d127      	bne.n	800d38e <HAL_ADC_IRQHandler+0xba>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	681b      	ldr	r3, [r3, #0]
 800d342:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d344:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800d348:	2b00      	cmp	r3, #0
 800d34a:	d006      	beq.n	800d35a <HAL_ADC_IRQHandler+0x86>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800d34c:	687b      	ldr	r3, [r7, #4]
 800d34e:	681b      	ldr	r3, [r3, #0]
 800d350:	689b      	ldr	r3, [r3, #8]
 800d352:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800d356:	2b00      	cmp	r3, #0
 800d358:	d119      	bne.n	800d38e <HAL_ADC_IRQHandler+0xba>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800d35a:	687b      	ldr	r3, [r7, #4]
 800d35c:	681b      	ldr	r3, [r3, #0]
 800d35e:	685a      	ldr	r2, [r3, #4]
 800d360:	687b      	ldr	r3, [r7, #4]
 800d362:	681b      	ldr	r3, [r3, #0]
 800d364:	f022 0220 	bic.w	r2, r2, #32
 800d368:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d36e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d37a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d37e:	2b00      	cmp	r3, #0
 800d380:	d105      	bne.n	800d38e <HAL_ADC_IRQHandler+0xba>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d386:	f043 0201 	orr.w	r2, r3, #1
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800d38e:	6878      	ldr	r0, [r7, #4]
 800d390:	f7f4 f89e 	bl	80014d0 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800d394:	687b      	ldr	r3, [r7, #4]
 800d396:	681b      	ldr	r3, [r3, #0]
 800d398:	f06f 0212 	mvn.w	r2, #18
 800d39c:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_JEOC;
 800d39e:	68fb      	ldr	r3, [r7, #12]
 800d3a0:	f003 0304 	and.w	r3, r3, #4
 800d3a4:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_JEOC;
 800d3a6:	68bb      	ldr	r3, [r7, #8]
 800d3a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d3ac:	613b      	str	r3, [r7, #16]
  /* Check End of conversion flag for injected channels */
  if(tmp1 && tmp2)
 800d3ae:	697b      	ldr	r3, [r7, #20]
 800d3b0:	2b00      	cmp	r3, #0
 800d3b2:	d057      	beq.n	800d464 <HAL_ADC_IRQHandler+0x190>
 800d3b4:	693b      	ldr	r3, [r7, #16]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d054      	beq.n	800d464 <HAL_ADC_IRQHandler+0x190>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3be:	f003 0310 	and.w	r3, r3, #16
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d105      	bne.n	800d3d2 <HAL_ADC_IRQHandler+0xfe>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800d3c6:	687b      	ldr	r3, [r7, #4]
 800d3c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d3ca:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Determine whether any further conversion upcoming on group injected  */
    /* by external trigger, scan sequence on going or by automatic injected */
    /* conversion from group regular (same conditions as group regular      */
    /* interruption disabling above).                                       */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	689b      	ldr	r3, [r3, #8]
 800d3d8:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800d3dc:	2b00      	cmp	r3, #0
 800d3de:	d139      	bne.n	800d454 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800d3e0:	687b      	ldr	r3, [r7, #4]
 800d3e2:	681b      	ldr	r3, [r3, #0]
 800d3e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3e6:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                    &&
 800d3ea:	2b00      	cmp	r3, #0
 800d3ec:	d006      	beq.n	800d3fc <HAL_ADC_IRQHandler+0x128>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800d3ee:	687b      	ldr	r3, [r7, #4]
 800d3f0:	681b      	ldr	r3, [r3, #0]
 800d3f2:	689b      	ldr	r3, [r3, #8]
 800d3f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->JSQR, ADC_JSQR_JL)  ||
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d12b      	bne.n	800d454 <HAL_ADC_IRQHandler+0x180>
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	685b      	ldr	r3, [r3, #4]
 800d402:	f403 6380 	and.w	r3, r3, #1024	; 0x400
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)    ) &&
 800d406:	2b00      	cmp	r3, #0
 800d408:	d124      	bne.n	800d454 <HAL_ADC_IRQHandler+0x180>
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800d40a:	687b      	ldr	r3, [r7, #4]
 800d40c:	681b      	ldr	r3, [r3, #0]
 800d40e:	689b      	ldr	r3, [r3, #8]
 800d410:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
       (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&
 800d414:	2b00      	cmp	r3, #0
 800d416:	d11d      	bne.n	800d454 <HAL_ADC_IRQHandler+0x180>
        (hadc->Init.ContinuousConvMode == DISABLE)   )       )   )
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	7e1b      	ldrb	r3, [r3, #24]
        (ADC_IS_SOFTWARE_START_REGULAR(hadc)       &&
 800d41c:	2b00      	cmp	r3, #0
 800d41e:	d119      	bne.n	800d454 <HAL_ADC_IRQHandler+0x180>
    {
      /* Disable ADC end of single conversion interrupt on group injected */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800d420:	687b      	ldr	r3, [r7, #4]
 800d422:	681b      	ldr	r3, [r3, #0]
 800d424:	685a      	ldr	r2, [r3, #4]
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	681b      	ldr	r3, [r3, #0]
 800d42a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800d42e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800d430:	687b      	ldr	r3, [r7, #4]
 800d432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d434:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	641a      	str	r2, [r3, #64]	; 0x40

      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d440:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d444:	2b00      	cmp	r3, #0
 800d446:	d105      	bne.n	800d454 <HAL_ADC_IRQHandler+0x180>
      { 
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d44c:	f043 0201 	orr.w	r2, r3, #1
 800d450:	687b      	ldr	r3, [r7, #4]
 800d452:	641a      	str	r2, [r3, #64]	; 0x40
    /* Conversion complete callback */ 
    /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800d454:	6878      	ldr	r0, [r7, #4]
 800d456:	f000 fc2f 	bl	800dcb8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	681b      	ldr	r3, [r3, #0]
 800d45e:	f06f 020c 	mvn.w	r2, #12
 800d462:	601a      	str	r2, [r3, #0]
  }
  
  tmp1 = tmp_sr & ADC_FLAG_AWD;
 800d464:	68fb      	ldr	r3, [r7, #12]
 800d466:	f003 0301 	and.w	r3, r3, #1
 800d46a:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_AWD;
 800d46c:	68bb      	ldr	r3, [r7, #8]
 800d46e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d472:	613b      	str	r3, [r7, #16]
  /* Check Analog watchdog flag */
  if(tmp1 && tmp2)
 800d474:	697b      	ldr	r3, [r7, #20]
 800d476:	2b00      	cmp	r3, #0
 800d478:	d017      	beq.n	800d4aa <HAL_ADC_IRQHandler+0x1d6>
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	2b00      	cmp	r3, #0
 800d47e:	d014      	beq.n	800d4aa <HAL_ADC_IRQHandler+0x1d6>
  {
    if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_AWD))
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	681b      	ldr	r3, [r3, #0]
 800d486:	f003 0301 	and.w	r3, r3, #1
 800d48a:	2b01      	cmp	r3, #1
 800d48c:	d10d      	bne.n	800d4aa <HAL_ADC_IRQHandler+0x1d6>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800d48e:	687b      	ldr	r3, [r7, #4]
 800d490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d492:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	641a      	str	r2, [r3, #64]	; 0x40
      
      /* Level out of window callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 800d49a:	6878      	ldr	r0, [r7, #4]
 800d49c:	f000 f951 	bl	800d742 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	681b      	ldr	r3, [r3, #0]
 800d4a4:	f06f 0201 	mvn.w	r2, #1
 800d4a8:	601a      	str	r2, [r3, #0]
    }
  }
  
  tmp1 = tmp_sr & ADC_FLAG_OVR;
 800d4aa:	68fb      	ldr	r3, [r7, #12]
 800d4ac:	f003 0320 	and.w	r3, r3, #32
 800d4b0:	617b      	str	r3, [r7, #20]
  tmp2 = tmp_cr1 & ADC_IT_OVR;
 800d4b2:	68bb      	ldr	r3, [r7, #8]
 800d4b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800d4b8:	613b      	str	r3, [r7, #16]
  /* Check Overrun flag */
  if(tmp1 && tmp2)
 800d4ba:	697b      	ldr	r3, [r7, #20]
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d015      	beq.n	800d4ec <HAL_ADC_IRQHandler+0x218>
 800d4c0:	693b      	ldr	r3, [r7, #16]
 800d4c2:	2b00      	cmp	r3, #0
 800d4c4:	d012      	beq.n	800d4ec <HAL_ADC_IRQHandler+0x218>
    /* Note: On STM32F4, ADC overrun can be set through other parameters    */
    /*       refer to description of parameter "EOCSelection" for more      */
    /*       details.                                                       */
    
    /* Set ADC error code to overrun */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800d4c6:	687b      	ldr	r3, [r7, #4]
 800d4c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d4ca:	f043 0202 	orr.w	r2, r3, #2
 800d4ce:	687b      	ldr	r3, [r7, #4]
 800d4d0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800d4d2:	687b      	ldr	r3, [r7, #4]
 800d4d4:	681b      	ldr	r3, [r3, #0]
 800d4d6:	f06f 0220 	mvn.w	r2, #32
 800d4da:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800d4dc:	6878      	ldr	r0, [r7, #4]
 800d4de:	f7f3 ffe1 	bl	80014a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800d4e2:	687b      	ldr	r3, [r7, #4]
 800d4e4:	681b      	ldr	r3, [r3, #0]
 800d4e6:	f06f 0220 	mvn.w	r2, #32
 800d4ea:	601a      	str	r2, [r3, #0]
  }
}
 800d4ec:	bf00      	nop
 800d4ee:	3718      	adds	r7, #24
 800d4f0:	46bd      	mov	sp, r7
 800d4f2:	bd80      	pop	{r7, pc}

0800d4f4 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800d4f4:	b580      	push	{r7, lr}
 800d4f6:	b086      	sub	sp, #24
 800d4f8:	af00      	add	r7, sp, #0
 800d4fa:	60f8      	str	r0, [r7, #12]
 800d4fc:	60b9      	str	r1, [r7, #8]
 800d4fe:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800d500:	2300      	movs	r3, #0
 800d502:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d50a:	2b01      	cmp	r3, #1
 800d50c:	d101      	bne.n	800d512 <HAL_ADC_Start_DMA+0x1e>
 800d50e:	2302      	movs	r3, #2
 800d510:	e0e9      	b.n	800d6e6 <HAL_ADC_Start_DMA+0x1f2>
 800d512:	68fb      	ldr	r3, [r7, #12]
 800d514:	2201      	movs	r2, #1
 800d516:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 800d51a:	68fb      	ldr	r3, [r7, #12]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	689b      	ldr	r3, [r3, #8]
 800d520:	f003 0301 	and.w	r3, r3, #1
 800d524:	2b01      	cmp	r3, #1
 800d526:	d018      	beq.n	800d55a <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800d528:	68fb      	ldr	r3, [r7, #12]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	689a      	ldr	r2, [r3, #8]
 800d52e:	68fb      	ldr	r3, [r7, #12]
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	f042 0201 	orr.w	r2, r2, #1
 800d536:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800d538:	4b6d      	ldr	r3, [pc, #436]	; (800d6f0 <HAL_ADC_Start_DMA+0x1fc>)
 800d53a:	681b      	ldr	r3, [r3, #0]
 800d53c:	4a6d      	ldr	r2, [pc, #436]	; (800d6f4 <HAL_ADC_Start_DMA+0x200>)
 800d53e:	fba2 2303 	umull	r2, r3, r2, r3
 800d542:	0c9a      	lsrs	r2, r3, #18
 800d544:	4613      	mov	r3, r2
 800d546:	005b      	lsls	r3, r3, #1
 800d548:	4413      	add	r3, r2
 800d54a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800d54c:	e002      	b.n	800d554 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 800d54e:	693b      	ldr	r3, [r7, #16]
 800d550:	3b01      	subs	r3, #1
 800d552:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 800d554:	693b      	ldr	r3, [r7, #16]
 800d556:	2b00      	cmp	r3, #0
 800d558:	d1f9      	bne.n	800d54e <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800d55a:	68fb      	ldr	r3, [r7, #12]
 800d55c:	681b      	ldr	r3, [r3, #0]
 800d55e:	689b      	ldr	r3, [r3, #8]
 800d560:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800d564:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d568:	d107      	bne.n	800d57a <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800d56a:	68fb      	ldr	r3, [r7, #12]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	689a      	ldr	r2, [r3, #8]
 800d570:	68fb      	ldr	r3, [r7, #12]
 800d572:	681b      	ldr	r3, [r3, #0]
 800d574:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d578:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800d57a:	68fb      	ldr	r3, [r7, #12]
 800d57c:	681b      	ldr	r3, [r3, #0]
 800d57e:	689b      	ldr	r3, [r3, #8]
 800d580:	f003 0301 	and.w	r3, r3, #1
 800d584:	2b01      	cmp	r3, #1
 800d586:	f040 80a1 	bne.w	800d6cc <HAL_ADC_Start_DMA+0x1d8>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800d58a:	68fb      	ldr	r3, [r7, #12]
 800d58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d58e:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800d592:	f023 0301 	bic.w	r3, r3, #1
 800d596:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800d59a:	68fb      	ldr	r3, [r7, #12]
 800d59c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	681b      	ldr	r3, [r3, #0]
 800d5a2:	685b      	ldr	r3, [r3, #4]
 800d5a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d007      	beq.n	800d5bc <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800d5ac:	68fb      	ldr	r3, [r7, #12]
 800d5ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800d5b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800d5b8:	68fb      	ldr	r3, [r7, #12]
 800d5ba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800d5bc:	68fb      	ldr	r3, [r7, #12]
 800d5be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d5c0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800d5c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d5c8:	d106      	bne.n	800d5d8 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800d5ca:	68fb      	ldr	r3, [r7, #12]
 800d5cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d5ce:	f023 0206 	bic.w	r2, r3, #6
 800d5d2:	68fb      	ldr	r3, [r7, #12]
 800d5d4:	645a      	str	r2, [r3, #68]	; 0x44
 800d5d6:	e002      	b.n	800d5de <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800d5d8:	68fb      	ldr	r3, [r7, #12]
 800d5da:	2200      	movs	r2, #0
 800d5dc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800d5de:	68fb      	ldr	r3, [r7, #12]
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800d5e6:	4b44      	ldr	r3, [pc, #272]	; (800d6f8 <HAL_ADC_Start_DMA+0x204>)
 800d5e8:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800d5ea:	68fb      	ldr	r3, [r7, #12]
 800d5ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5ee:	4a43      	ldr	r2, [pc, #268]	; (800d6fc <HAL_ADC_Start_DMA+0x208>)
 800d5f0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5f6:	4a42      	ldr	r2, [pc, #264]	; (800d700 <HAL_ADC_Start_DMA+0x20c>)
 800d5f8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800d5fa:	68fb      	ldr	r3, [r7, #12]
 800d5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5fe:	4a41      	ldr	r2, [pc, #260]	; (800d704 <HAL_ADC_Start_DMA+0x210>)
 800d600:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800d602:	68fb      	ldr	r3, [r7, #12]
 800d604:	681b      	ldr	r3, [r3, #0]
 800d606:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800d60a:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 800d60c:	68fb      	ldr	r3, [r7, #12]
 800d60e:	681b      	ldr	r3, [r3, #0]
 800d610:	685a      	ldr	r2, [r3, #4]
 800d612:	68fb      	ldr	r3, [r7, #12]
 800d614:	681b      	ldr	r3, [r3, #0]
 800d616:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800d61a:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	681b      	ldr	r3, [r3, #0]
 800d620:	689a      	ldr	r2, [r3, #8]
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800d62a:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800d62c:	68fb      	ldr	r3, [r7, #12]
 800d62e:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	681b      	ldr	r3, [r3, #0]
 800d634:	334c      	adds	r3, #76	; 0x4c
 800d636:	4619      	mov	r1, r3
 800d638:	68ba      	ldr	r2, [r7, #8]
 800d63a:	687b      	ldr	r3, [r7, #4]
 800d63c:	f001 f820 	bl	800e680 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800d640:	697b      	ldr	r3, [r7, #20]
 800d642:	685b      	ldr	r3, [r3, #4]
 800d644:	f003 031f 	and.w	r3, r3, #31
 800d648:	2b00      	cmp	r3, #0
 800d64a:	d12a      	bne.n	800d6a2 <HAL_ADC_Start_DMA+0x1ae>
    {
#if defined(ADC2) && defined(ADC3)
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 800d64c:	68fb      	ldr	r3, [r7, #12]
 800d64e:	681b      	ldr	r3, [r3, #0]
 800d650:	4a2d      	ldr	r2, [pc, #180]	; (800d708 <HAL_ADC_Start_DMA+0x214>)
 800d652:	4293      	cmp	r3, r2
 800d654:	d015      	beq.n	800d682 <HAL_ADC_Start_DMA+0x18e>
 800d656:	68fb      	ldr	r3, [r7, #12]
 800d658:	681b      	ldr	r3, [r3, #0]
 800d65a:	4a2c      	ldr	r2, [pc, #176]	; (800d70c <HAL_ADC_Start_DMA+0x218>)
 800d65c:	4293      	cmp	r3, r2
 800d65e:	d105      	bne.n	800d66c <HAL_ADC_Start_DMA+0x178>
 800d660:	4b25      	ldr	r3, [pc, #148]	; (800d6f8 <HAL_ADC_Start_DMA+0x204>)
 800d662:	685b      	ldr	r3, [r3, #4]
 800d664:	f003 031f 	and.w	r3, r3, #31
 800d668:	2b00      	cmp	r3, #0
 800d66a:	d00a      	beq.n	800d682 <HAL_ADC_Start_DMA+0x18e>
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	681b      	ldr	r3, [r3, #0]
 800d670:	4a27      	ldr	r2, [pc, #156]	; (800d710 <HAL_ADC_Start_DMA+0x21c>)
 800d672:	4293      	cmp	r3, r2
 800d674:	d136      	bne.n	800d6e4 <HAL_ADC_Start_DMA+0x1f0>
 800d676:	4b20      	ldr	r3, [pc, #128]	; (800d6f8 <HAL_ADC_Start_DMA+0x204>)
 800d678:	685b      	ldr	r3, [r3, #4]
 800d67a:	f003 0310 	and.w	r3, r3, #16
 800d67e:	2b00      	cmp	r3, #0
 800d680:	d130      	bne.n	800d6e4 <HAL_ADC_Start_DMA+0x1f0>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800d682:	68fb      	ldr	r3, [r7, #12]
 800d684:	681b      	ldr	r3, [r3, #0]
 800d686:	689b      	ldr	r3, [r3, #8]
 800d688:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d68c:	2b00      	cmp	r3, #0
 800d68e:	d129      	bne.n	800d6e4 <HAL_ADC_Start_DMA+0x1f0>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800d690:	68fb      	ldr	r3, [r7, #12]
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	689a      	ldr	r2, [r3, #8]
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	681b      	ldr	r3, [r3, #0]
 800d69a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d69e:	609a      	str	r2, [r3, #8]
 800d6a0:	e020      	b.n	800d6e4 <HAL_ADC_Start_DMA+0x1f0>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	681b      	ldr	r3, [r3, #0]
 800d6a6:	4a18      	ldr	r2, [pc, #96]	; (800d708 <HAL_ADC_Start_DMA+0x214>)
 800d6a8:	4293      	cmp	r3, r2
 800d6aa:	d11b      	bne.n	800d6e4 <HAL_ADC_Start_DMA+0x1f0>
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	689b      	ldr	r3, [r3, #8]
 800d6b2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d114      	bne.n	800d6e4 <HAL_ADC_Start_DMA+0x1f0>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800d6ba:	68fb      	ldr	r3, [r7, #12]
 800d6bc:	681b      	ldr	r3, [r3, #0]
 800d6be:	689a      	ldr	r2, [r3, #8]
 800d6c0:	68fb      	ldr	r3, [r7, #12]
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800d6c8:	609a      	str	r2, [r3, #8]
 800d6ca:	e00b      	b.n	800d6e4 <HAL_ADC_Start_DMA+0x1f0>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800d6cc:	68fb      	ldr	r3, [r7, #12]
 800d6ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d6d0:	f043 0210 	orr.w	r2, r3, #16
 800d6d4:	68fb      	ldr	r3, [r7, #12]
 800d6d6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800d6dc:	f043 0201 	orr.w	r2, r3, #1
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800d6e4:	2300      	movs	r3, #0
}
 800d6e6:	4618      	mov	r0, r3
 800d6e8:	3718      	adds	r7, #24
 800d6ea:	46bd      	mov	sp, r7
 800d6ec:	bd80      	pop	{r7, pc}
 800d6ee:	bf00      	nop
 800d6f0:	200001d4 	.word	0x200001d4
 800d6f4:	431bde83 	.word	0x431bde83
 800d6f8:	40012300 	.word	0x40012300
 800d6fc:	0800dbb5 	.word	0x0800dbb5
 800d700:	0800dc6f 	.word	0x0800dc6f
 800d704:	0800dc8b 	.word	0x0800dc8b
 800d708:	40012000 	.word	0x40012000
 800d70c:	40012100 	.word	0x40012100
 800d710:	40012200 	.word	0x40012200

0800d714 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800d714:	b480      	push	{r7}
 800d716:	b083      	sub	sp, #12
 800d718:	af00      	add	r7, sp, #0
 800d71a:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	681b      	ldr	r3, [r3, #0]
 800d720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800d722:	4618      	mov	r0, r3
 800d724:	370c      	adds	r7, #12
 800d726:	46bd      	mov	sp, r7
 800d728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d72c:	4770      	bx	lr

0800d72e <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 800d72e:	b480      	push	{r7}
 800d730:	b083      	sub	sp, #12
 800d732:	af00      	add	r7, sp, #0
 800d734:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800d736:	bf00      	nop
 800d738:	370c      	adds	r7, #12
 800d73a:	46bd      	mov	sp, r7
 800d73c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d740:	4770      	bx	lr

0800d742 <HAL_ADC_LevelOutOfWindowCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 800d742:	b480      	push	{r7}
 800d744:	b083      	sub	sp, #12
 800d746:	af00      	add	r7, sp, #0
 800d748:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_LevelOoutOfWindowCallback could be implemented in the user file
   */
}
 800d74a:	bf00      	nop
 800d74c:	370c      	adds	r7, #12
 800d74e:	46bd      	mov	sp, r7
 800d750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d754:	4770      	bx	lr
	...

0800d758 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800d758:	b480      	push	{r7}
 800d75a:	b085      	sub	sp, #20
 800d75c:	af00      	add	r7, sp, #0
 800d75e:	6078      	str	r0, [r7, #4]
 800d760:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800d762:	2300      	movs	r3, #0
 800d764:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800d766:	687b      	ldr	r3, [r7, #4]
 800d768:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800d76c:	2b01      	cmp	r3, #1
 800d76e:	d101      	bne.n	800d774 <HAL_ADC_ConfigChannel+0x1c>
 800d770:	2302      	movs	r3, #2
 800d772:	e113      	b.n	800d99c <HAL_ADC_ConfigChannel+0x244>
 800d774:	687b      	ldr	r3, [r7, #4]
 800d776:	2201      	movs	r2, #1
 800d778:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800d77c:	683b      	ldr	r3, [r7, #0]
 800d77e:	681b      	ldr	r3, [r3, #0]
 800d780:	2b09      	cmp	r3, #9
 800d782:	d925      	bls.n	800d7d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800d784:	687b      	ldr	r3, [r7, #4]
 800d786:	681b      	ldr	r3, [r3, #0]
 800d788:	68d9      	ldr	r1, [r3, #12]
 800d78a:	683b      	ldr	r3, [r7, #0]
 800d78c:	681b      	ldr	r3, [r3, #0]
 800d78e:	b29b      	uxth	r3, r3
 800d790:	461a      	mov	r2, r3
 800d792:	4613      	mov	r3, r2
 800d794:	005b      	lsls	r3, r3, #1
 800d796:	4413      	add	r3, r2
 800d798:	3b1e      	subs	r3, #30
 800d79a:	2207      	movs	r2, #7
 800d79c:	fa02 f303 	lsl.w	r3, r2, r3
 800d7a0:	43da      	mvns	r2, r3
 800d7a2:	687b      	ldr	r3, [r7, #4]
 800d7a4:	681b      	ldr	r3, [r3, #0]
 800d7a6:	400a      	ands	r2, r1
 800d7a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800d7aa:	687b      	ldr	r3, [r7, #4]
 800d7ac:	681b      	ldr	r3, [r3, #0]
 800d7ae:	68d9      	ldr	r1, [r3, #12]
 800d7b0:	683b      	ldr	r3, [r7, #0]
 800d7b2:	689a      	ldr	r2, [r3, #8]
 800d7b4:	683b      	ldr	r3, [r7, #0]
 800d7b6:	681b      	ldr	r3, [r3, #0]
 800d7b8:	b29b      	uxth	r3, r3
 800d7ba:	4618      	mov	r0, r3
 800d7bc:	4603      	mov	r3, r0
 800d7be:	005b      	lsls	r3, r3, #1
 800d7c0:	4403      	add	r3, r0
 800d7c2:	3b1e      	subs	r3, #30
 800d7c4:	409a      	lsls	r2, r3
 800d7c6:	687b      	ldr	r3, [r7, #4]
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	430a      	orrs	r2, r1
 800d7cc:	60da      	str	r2, [r3, #12]
 800d7ce:	e022      	b.n	800d816 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	681b      	ldr	r3, [r3, #0]
 800d7d4:	6919      	ldr	r1, [r3, #16]
 800d7d6:	683b      	ldr	r3, [r7, #0]
 800d7d8:	681b      	ldr	r3, [r3, #0]
 800d7da:	b29b      	uxth	r3, r3
 800d7dc:	461a      	mov	r2, r3
 800d7de:	4613      	mov	r3, r2
 800d7e0:	005b      	lsls	r3, r3, #1
 800d7e2:	4413      	add	r3, r2
 800d7e4:	2207      	movs	r2, #7
 800d7e6:	fa02 f303 	lsl.w	r3, r2, r3
 800d7ea:	43da      	mvns	r2, r3
 800d7ec:	687b      	ldr	r3, [r7, #4]
 800d7ee:	681b      	ldr	r3, [r3, #0]
 800d7f0:	400a      	ands	r2, r1
 800d7f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	6919      	ldr	r1, [r3, #16]
 800d7fa:	683b      	ldr	r3, [r7, #0]
 800d7fc:	689a      	ldr	r2, [r3, #8]
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	b29b      	uxth	r3, r3
 800d804:	4618      	mov	r0, r3
 800d806:	4603      	mov	r3, r0
 800d808:	005b      	lsls	r3, r3, #1
 800d80a:	4403      	add	r3, r0
 800d80c:	409a      	lsls	r2, r3
 800d80e:	687b      	ldr	r3, [r7, #4]
 800d810:	681b      	ldr	r3, [r3, #0]
 800d812:	430a      	orrs	r2, r1
 800d814:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800d816:	683b      	ldr	r3, [r7, #0]
 800d818:	685b      	ldr	r3, [r3, #4]
 800d81a:	2b06      	cmp	r3, #6
 800d81c:	d824      	bhi.n	800d868 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800d824:	683b      	ldr	r3, [r7, #0]
 800d826:	685a      	ldr	r2, [r3, #4]
 800d828:	4613      	mov	r3, r2
 800d82a:	009b      	lsls	r3, r3, #2
 800d82c:	4413      	add	r3, r2
 800d82e:	3b05      	subs	r3, #5
 800d830:	221f      	movs	r2, #31
 800d832:	fa02 f303 	lsl.w	r3, r2, r3
 800d836:	43da      	mvns	r2, r3
 800d838:	687b      	ldr	r3, [r7, #4]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	400a      	ands	r2, r1
 800d83e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800d846:	683b      	ldr	r3, [r7, #0]
 800d848:	681b      	ldr	r3, [r3, #0]
 800d84a:	b29b      	uxth	r3, r3
 800d84c:	4618      	mov	r0, r3
 800d84e:	683b      	ldr	r3, [r7, #0]
 800d850:	685a      	ldr	r2, [r3, #4]
 800d852:	4613      	mov	r3, r2
 800d854:	009b      	lsls	r3, r3, #2
 800d856:	4413      	add	r3, r2
 800d858:	3b05      	subs	r3, #5
 800d85a:	fa00 f203 	lsl.w	r2, r0, r3
 800d85e:	687b      	ldr	r3, [r7, #4]
 800d860:	681b      	ldr	r3, [r3, #0]
 800d862:	430a      	orrs	r2, r1
 800d864:	635a      	str	r2, [r3, #52]	; 0x34
 800d866:	e04c      	b.n	800d902 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800d868:	683b      	ldr	r3, [r7, #0]
 800d86a:	685b      	ldr	r3, [r3, #4]
 800d86c:	2b0c      	cmp	r3, #12
 800d86e:	d824      	bhi.n	800d8ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800d870:	687b      	ldr	r3, [r7, #4]
 800d872:	681b      	ldr	r3, [r3, #0]
 800d874:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d876:	683b      	ldr	r3, [r7, #0]
 800d878:	685a      	ldr	r2, [r3, #4]
 800d87a:	4613      	mov	r3, r2
 800d87c:	009b      	lsls	r3, r3, #2
 800d87e:	4413      	add	r3, r2
 800d880:	3b23      	subs	r3, #35	; 0x23
 800d882:	221f      	movs	r2, #31
 800d884:	fa02 f303 	lsl.w	r3, r2, r3
 800d888:	43da      	mvns	r2, r3
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	681b      	ldr	r3, [r3, #0]
 800d88e:	400a      	ands	r2, r1
 800d890:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800d898:	683b      	ldr	r3, [r7, #0]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	b29b      	uxth	r3, r3
 800d89e:	4618      	mov	r0, r3
 800d8a0:	683b      	ldr	r3, [r7, #0]
 800d8a2:	685a      	ldr	r2, [r3, #4]
 800d8a4:	4613      	mov	r3, r2
 800d8a6:	009b      	lsls	r3, r3, #2
 800d8a8:	4413      	add	r3, r2
 800d8aa:	3b23      	subs	r3, #35	; 0x23
 800d8ac:	fa00 f203 	lsl.w	r2, r0, r3
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	430a      	orrs	r2, r1
 800d8b6:	631a      	str	r2, [r3, #48]	; 0x30
 800d8b8:	e023      	b.n	800d902 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800d8ba:	687b      	ldr	r3, [r7, #4]
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800d8c0:	683b      	ldr	r3, [r7, #0]
 800d8c2:	685a      	ldr	r2, [r3, #4]
 800d8c4:	4613      	mov	r3, r2
 800d8c6:	009b      	lsls	r3, r3, #2
 800d8c8:	4413      	add	r3, r2
 800d8ca:	3b41      	subs	r3, #65	; 0x41
 800d8cc:	221f      	movs	r2, #31
 800d8ce:	fa02 f303 	lsl.w	r3, r2, r3
 800d8d2:	43da      	mvns	r2, r3
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	400a      	ands	r2, r1
 800d8da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800d8dc:	687b      	ldr	r3, [r7, #4]
 800d8de:	681b      	ldr	r3, [r3, #0]
 800d8e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800d8e2:	683b      	ldr	r3, [r7, #0]
 800d8e4:	681b      	ldr	r3, [r3, #0]
 800d8e6:	b29b      	uxth	r3, r3
 800d8e8:	4618      	mov	r0, r3
 800d8ea:	683b      	ldr	r3, [r7, #0]
 800d8ec:	685a      	ldr	r2, [r3, #4]
 800d8ee:	4613      	mov	r3, r2
 800d8f0:	009b      	lsls	r3, r3, #2
 800d8f2:	4413      	add	r3, r2
 800d8f4:	3b41      	subs	r3, #65	; 0x41
 800d8f6:	fa00 f203 	lsl.w	r2, r0, r3
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	430a      	orrs	r2, r1
 800d900:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800d902:	4b29      	ldr	r3, [pc, #164]	; (800d9a8 <HAL_ADC_ConfigChannel+0x250>)
 800d904:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800d906:	687b      	ldr	r3, [r7, #4]
 800d908:	681b      	ldr	r3, [r3, #0]
 800d90a:	4a28      	ldr	r2, [pc, #160]	; (800d9ac <HAL_ADC_ConfigChannel+0x254>)
 800d90c:	4293      	cmp	r3, r2
 800d90e:	d10f      	bne.n	800d930 <HAL_ADC_ConfigChannel+0x1d8>
 800d910:	683b      	ldr	r3, [r7, #0]
 800d912:	681b      	ldr	r3, [r3, #0]
 800d914:	2b12      	cmp	r3, #18
 800d916:	d10b      	bne.n	800d930 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 800d918:	68fb      	ldr	r3, [r7, #12]
 800d91a:	685b      	ldr	r3, [r3, #4]
 800d91c:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800d920:	68fb      	ldr	r3, [r7, #12]
 800d922:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	685b      	ldr	r3, [r3, #4]
 800d928:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800d930:	687b      	ldr	r3, [r7, #4]
 800d932:	681b      	ldr	r3, [r3, #0]
 800d934:	4a1d      	ldr	r2, [pc, #116]	; (800d9ac <HAL_ADC_ConfigChannel+0x254>)
 800d936:	4293      	cmp	r3, r2
 800d938:	d12b      	bne.n	800d992 <HAL_ADC_ConfigChannel+0x23a>
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	681b      	ldr	r3, [r3, #0]
 800d93e:	4a1c      	ldr	r2, [pc, #112]	; (800d9b0 <HAL_ADC_ConfigChannel+0x258>)
 800d940:	4293      	cmp	r3, r2
 800d942:	d003      	beq.n	800d94c <HAL_ADC_ConfigChannel+0x1f4>
 800d944:	683b      	ldr	r3, [r7, #0]
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	2b11      	cmp	r3, #17
 800d94a:	d122      	bne.n	800d992 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	685b      	ldr	r3, [r3, #4]
 800d950:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	685b      	ldr	r3, [r3, #4]
 800d95c:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800d960:	68fb      	ldr	r3, [r7, #12]
 800d962:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800d964:	683b      	ldr	r3, [r7, #0]
 800d966:	681b      	ldr	r3, [r3, #0]
 800d968:	4a11      	ldr	r2, [pc, #68]	; (800d9b0 <HAL_ADC_ConfigChannel+0x258>)
 800d96a:	4293      	cmp	r3, r2
 800d96c:	d111      	bne.n	800d992 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800d96e:	4b11      	ldr	r3, [pc, #68]	; (800d9b4 <HAL_ADC_ConfigChannel+0x25c>)
 800d970:	681b      	ldr	r3, [r3, #0]
 800d972:	4a11      	ldr	r2, [pc, #68]	; (800d9b8 <HAL_ADC_ConfigChannel+0x260>)
 800d974:	fba2 2303 	umull	r2, r3, r2, r3
 800d978:	0c9a      	lsrs	r2, r3, #18
 800d97a:	4613      	mov	r3, r2
 800d97c:	009b      	lsls	r3, r3, #2
 800d97e:	4413      	add	r3, r2
 800d980:	005b      	lsls	r3, r3, #1
 800d982:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800d984:	e002      	b.n	800d98c <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 800d986:	68bb      	ldr	r3, [r7, #8]
 800d988:	3b01      	subs	r3, #1
 800d98a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800d98c:	68bb      	ldr	r3, [r7, #8]
 800d98e:	2b00      	cmp	r3, #0
 800d990:	d1f9      	bne.n	800d986 <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2200      	movs	r2, #0
 800d996:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800d99a:	2300      	movs	r3, #0
}
 800d99c:	4618      	mov	r0, r3
 800d99e:	3714      	adds	r7, #20
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d9a6:	4770      	bx	lr
 800d9a8:	40012300 	.word	0x40012300
 800d9ac:	40012000 	.word	0x40012000
 800d9b0:	10000012 	.word	0x10000012
 800d9b4:	200001d4 	.word	0x200001d4
 800d9b8:	431bde83 	.word	0x431bde83

0800d9bc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800d9bc:	b480      	push	{r7}
 800d9be:	b085      	sub	sp, #20
 800d9c0:	af00      	add	r7, sp, #0
 800d9c2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800d9c4:	4b79      	ldr	r3, [pc, #484]	; (800dbac <ADC_Init+0x1f0>)
 800d9c6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	685b      	ldr	r3, [r3, #4]
 800d9cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	685a      	ldr	r2, [r3, #4]
 800d9d8:	687b      	ldr	r3, [r7, #4]
 800d9da:	685b      	ldr	r3, [r3, #4]
 800d9dc:	431a      	orrs	r2, r3
 800d9de:	68fb      	ldr	r3, [r7, #12]
 800d9e0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800d9e2:	687b      	ldr	r3, [r7, #4]
 800d9e4:	681b      	ldr	r3, [r3, #0]
 800d9e6:	685a      	ldr	r2, [r3, #4]
 800d9e8:	687b      	ldr	r3, [r7, #4]
 800d9ea:	681b      	ldr	r3, [r3, #0]
 800d9ec:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800d9f0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800d9f2:	687b      	ldr	r3, [r7, #4]
 800d9f4:	681b      	ldr	r3, [r3, #0]
 800d9f6:	6859      	ldr	r1, [r3, #4]
 800d9f8:	687b      	ldr	r3, [r7, #4]
 800d9fa:	691b      	ldr	r3, [r3, #16]
 800d9fc:	021a      	lsls	r2, r3, #8
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	430a      	orrs	r2, r1
 800da04:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	685a      	ldr	r2, [r3, #4]
 800da0c:	687b      	ldr	r3, [r7, #4]
 800da0e:	681b      	ldr	r3, [r3, #0]
 800da10:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800da14:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800da16:	687b      	ldr	r3, [r7, #4]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	6859      	ldr	r1, [r3, #4]
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	689a      	ldr	r2, [r3, #8]
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	681b      	ldr	r3, [r3, #0]
 800da24:	430a      	orrs	r2, r1
 800da26:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800da28:	687b      	ldr	r3, [r7, #4]
 800da2a:	681b      	ldr	r3, [r3, #0]
 800da2c:	689a      	ldr	r2, [r3, #8]
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	681b      	ldr	r3, [r3, #0]
 800da32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800da36:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	681b      	ldr	r3, [r3, #0]
 800da3c:	6899      	ldr	r1, [r3, #8]
 800da3e:	687b      	ldr	r3, [r7, #4]
 800da40:	68da      	ldr	r2, [r3, #12]
 800da42:	687b      	ldr	r3, [r7, #4]
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	430a      	orrs	r2, r1
 800da48:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800da4a:	687b      	ldr	r3, [r7, #4]
 800da4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800da4e:	4a58      	ldr	r2, [pc, #352]	; (800dbb0 <ADC_Init+0x1f4>)
 800da50:	4293      	cmp	r3, r2
 800da52:	d022      	beq.n	800da9a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	689a      	ldr	r2, [r3, #8]
 800da5a:	687b      	ldr	r3, [r7, #4]
 800da5c:	681b      	ldr	r3, [r3, #0]
 800da5e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800da62:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800da64:	687b      	ldr	r3, [r7, #4]
 800da66:	681b      	ldr	r3, [r3, #0]
 800da68:	6899      	ldr	r1, [r3, #8]
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800da6e:	687b      	ldr	r3, [r7, #4]
 800da70:	681b      	ldr	r3, [r3, #0]
 800da72:	430a      	orrs	r2, r1
 800da74:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800da76:	687b      	ldr	r3, [r7, #4]
 800da78:	681b      	ldr	r3, [r3, #0]
 800da7a:	689a      	ldr	r2, [r3, #8]
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	681b      	ldr	r3, [r3, #0]
 800da80:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800da84:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800da86:	687b      	ldr	r3, [r7, #4]
 800da88:	681b      	ldr	r3, [r3, #0]
 800da8a:	6899      	ldr	r1, [r3, #8]
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	430a      	orrs	r2, r1
 800da96:	609a      	str	r2, [r3, #8]
 800da98:	e00f      	b.n	800daba <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	681b      	ldr	r3, [r3, #0]
 800da9e:	689a      	ldr	r2, [r3, #8]
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	681b      	ldr	r3, [r3, #0]
 800daa4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800daa8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	681b      	ldr	r3, [r3, #0]
 800daae:	689a      	ldr	r2, [r3, #8]
 800dab0:	687b      	ldr	r3, [r7, #4]
 800dab2:	681b      	ldr	r3, [r3, #0]
 800dab4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800dab8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	681b      	ldr	r3, [r3, #0]
 800dabe:	689a      	ldr	r2, [r3, #8]
 800dac0:	687b      	ldr	r3, [r7, #4]
 800dac2:	681b      	ldr	r3, [r3, #0]
 800dac4:	f022 0202 	bic.w	r2, r2, #2
 800dac8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	6899      	ldr	r1, [r3, #8]
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	7e1b      	ldrb	r3, [r3, #24]
 800dad4:	005a      	lsls	r2, r3, #1
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	430a      	orrs	r2, r1
 800dadc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800dade:	687b      	ldr	r3, [r7, #4]
 800dae0:	f893 3020 	ldrb.w	r3, [r3, #32]
 800dae4:	2b00      	cmp	r3, #0
 800dae6:	d01b      	beq.n	800db20 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	681b      	ldr	r3, [r3, #0]
 800daec:	685a      	ldr	r2, [r3, #4]
 800daee:	687b      	ldr	r3, [r7, #4]
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800daf6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	681b      	ldr	r3, [r3, #0]
 800dafc:	685a      	ldr	r2, [r3, #4]
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800db06:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800db08:	687b      	ldr	r3, [r7, #4]
 800db0a:	681b      	ldr	r3, [r3, #0]
 800db0c:	6859      	ldr	r1, [r3, #4]
 800db0e:	687b      	ldr	r3, [r7, #4]
 800db10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800db12:	3b01      	subs	r3, #1
 800db14:	035a      	lsls	r2, r3, #13
 800db16:	687b      	ldr	r3, [r7, #4]
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	430a      	orrs	r2, r1
 800db1c:	605a      	str	r2, [r3, #4]
 800db1e:	e007      	b.n	800db30 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800db20:	687b      	ldr	r3, [r7, #4]
 800db22:	681b      	ldr	r3, [r3, #0]
 800db24:	685a      	ldr	r2, [r3, #4]
 800db26:	687b      	ldr	r3, [r7, #4]
 800db28:	681b      	ldr	r3, [r3, #0]
 800db2a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800db2e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800db30:	687b      	ldr	r3, [r7, #4]
 800db32:	681b      	ldr	r3, [r3, #0]
 800db34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800db36:	687b      	ldr	r3, [r7, #4]
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800db3e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	681b      	ldr	r3, [r3, #0]
 800db44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800db46:	687b      	ldr	r3, [r7, #4]
 800db48:	69db      	ldr	r3, [r3, #28]
 800db4a:	3b01      	subs	r3, #1
 800db4c:	051a      	lsls	r2, r3, #20
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	681b      	ldr	r3, [r3, #0]
 800db52:	430a      	orrs	r2, r1
 800db54:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800db56:	687b      	ldr	r3, [r7, #4]
 800db58:	681b      	ldr	r3, [r3, #0]
 800db5a:	689a      	ldr	r2, [r3, #8]
 800db5c:	687b      	ldr	r3, [r7, #4]
 800db5e:	681b      	ldr	r3, [r3, #0]
 800db60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800db64:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800db66:	687b      	ldr	r3, [r7, #4]
 800db68:	681b      	ldr	r3, [r3, #0]
 800db6a:	6899      	ldr	r1, [r3, #8]
 800db6c:	687b      	ldr	r3, [r7, #4]
 800db6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800db72:	025a      	lsls	r2, r3, #9
 800db74:	687b      	ldr	r3, [r7, #4]
 800db76:	681b      	ldr	r3, [r3, #0]
 800db78:	430a      	orrs	r2, r1
 800db7a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	689a      	ldr	r2, [r3, #8]
 800db82:	687b      	ldr	r3, [r7, #4]
 800db84:	681b      	ldr	r3, [r3, #0]
 800db86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800db8a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800db8c:	687b      	ldr	r3, [r7, #4]
 800db8e:	681b      	ldr	r3, [r3, #0]
 800db90:	6899      	ldr	r1, [r3, #8]
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	695b      	ldr	r3, [r3, #20]
 800db96:	029a      	lsls	r2, r3, #10
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	681b      	ldr	r3, [r3, #0]
 800db9c:	430a      	orrs	r2, r1
 800db9e:	609a      	str	r2, [r3, #8]
}
 800dba0:	bf00      	nop
 800dba2:	3714      	adds	r7, #20
 800dba4:	46bd      	mov	sp, r7
 800dba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbaa:	4770      	bx	lr
 800dbac:	40012300 	.word	0x40012300
 800dbb0:	0f000001 	.word	0x0f000001

0800dbb4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b084      	sub	sp, #16
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbc0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800dbc2:	68fb      	ldr	r3, [r7, #12]
 800dbc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbc6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dbca:	2b00      	cmp	r3, #0
 800dbcc:	d13c      	bne.n	800dc48 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800dbce:	68fb      	ldr	r3, [r7, #12]
 800dbd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbd2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800dbd6:	68fb      	ldr	r3, [r7, #12]
 800dbd8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	681b      	ldr	r3, [r3, #0]
 800dbde:	689b      	ldr	r3, [r3, #8]
 800dbe0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d12b      	bne.n	800dc40 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800dbe8:	68fb      	ldr	r3, [r7, #12]
 800dbea:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d127      	bne.n	800dc40 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800dbf0:	68fb      	ldr	r3, [r7, #12]
 800dbf2:	681b      	ldr	r3, [r3, #0]
 800dbf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dbf6:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800dbfa:	2b00      	cmp	r3, #0
 800dbfc:	d006      	beq.n	800dc0c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800dbfe:	68fb      	ldr	r3, [r7, #12]
 800dc00:	681b      	ldr	r3, [r3, #0]
 800dc02:	689b      	ldr	r3, [r3, #8]
 800dc04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800dc08:	2b00      	cmp	r3, #0
 800dc0a:	d119      	bne.n	800dc40 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800dc0c:	68fb      	ldr	r3, [r7, #12]
 800dc0e:	681b      	ldr	r3, [r3, #0]
 800dc10:	685a      	ldr	r2, [r3, #4]
 800dc12:	68fb      	ldr	r3, [r7, #12]
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	f022 0220 	bic.w	r2, r2, #32
 800dc1a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800dc1c:	68fb      	ldr	r3, [r7, #12]
 800dc1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc20:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800dc24:	68fb      	ldr	r3, [r7, #12]
 800dc26:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc2c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800dc30:	2b00      	cmp	r3, #0
 800dc32:	d105      	bne.n	800dc40 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc38:	f043 0201 	orr.w	r2, r3, #1
 800dc3c:	68fb      	ldr	r3, [r7, #12]
 800dc3e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 800dc40:	68f8      	ldr	r0, [r7, #12]
 800dc42:	f7f3 fc45 	bl	80014d0 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800dc46:	e00e      	b.n	800dc66 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800dc48:	68fb      	ldr	r3, [r7, #12]
 800dc4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dc4c:	f003 0310 	and.w	r3, r3, #16
 800dc50:	2b00      	cmp	r3, #0
 800dc52:	d003      	beq.n	800dc5c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 800dc54:	68f8      	ldr	r0, [r7, #12]
 800dc56:	f7f3 fc25 	bl	80014a4 <HAL_ADC_ErrorCallback>
}
 800dc5a:	e004      	b.n	800dc66 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800dc5c:	68fb      	ldr	r3, [r7, #12]
 800dc5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800dc62:	6878      	ldr	r0, [r7, #4]
 800dc64:	4798      	blx	r3
}
 800dc66:	bf00      	nop
 800dc68:	3710      	adds	r7, #16
 800dc6a:	46bd      	mov	sp, r7
 800dc6c:	bd80      	pop	{r7, pc}

0800dc6e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800dc6e:	b580      	push	{r7, lr}
 800dc70:	b084      	sub	sp, #16
 800dc72:	af00      	add	r7, sp, #0
 800dc74:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800dc76:	687b      	ldr	r3, [r7, #4]
 800dc78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc7a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800dc7c:	68f8      	ldr	r0, [r7, #12]
 800dc7e:	f7ff fd56 	bl	800d72e <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800dc82:	bf00      	nop
 800dc84:	3710      	adds	r7, #16
 800dc86:	46bd      	mov	sp, r7
 800dc88:	bd80      	pop	{r7, pc}

0800dc8a <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800dc8a:	b580      	push	{r7, lr}
 800dc8c:	b084      	sub	sp, #16
 800dc8e:	af00      	add	r7, sp, #0
 800dc90:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800dc92:	687b      	ldr	r3, [r7, #4]
 800dc94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc96:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 800dc98:	68fb      	ldr	r3, [r7, #12]
 800dc9a:	2240      	movs	r2, #64	; 0x40
 800dc9c:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 800dc9e:	68fb      	ldr	r3, [r7, #12]
 800dca0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800dca2:	f043 0204 	orr.w	r2, r3, #4
 800dca6:	68fb      	ldr	r3, [r7, #12]
 800dca8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800dcaa:	68f8      	ldr	r0, [r7, #12]
 800dcac:	f7f3 fbfa 	bl	80014a4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800dcb0:	bf00      	nop
 800dcb2:	3710      	adds	r7, #16
 800dcb4:	46bd      	mov	sp, r7
 800dcb6:	bd80      	pop	{r7, pc}

0800dcb8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800dcb8:	b480      	push	{r7}
 800dcba:	b083      	sub	sp, #12
 800dcbc:	af00      	add	r7, sp, #0
 800dcbe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_InjectedConvCpltCallback could be implemented in the user file
   */
}
 800dcc0:	bf00      	nop
 800dcc2:	370c      	adds	r7, #12
 800dcc4:	46bd      	mov	sp, r7
 800dcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dcca:	4770      	bx	lr

0800dccc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800dccc:	b480      	push	{r7}
 800dcce:	b085      	sub	sp, #20
 800dcd0:	af00      	add	r7, sp, #0
 800dcd2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800dcd4:	687b      	ldr	r3, [r7, #4]
 800dcd6:	f003 0307 	and.w	r3, r3, #7
 800dcda:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800dcdc:	4b0c      	ldr	r3, [pc, #48]	; (800dd10 <__NVIC_SetPriorityGrouping+0x44>)
 800dcde:	68db      	ldr	r3, [r3, #12]
 800dce0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800dce2:	68ba      	ldr	r2, [r7, #8]
 800dce4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800dce8:	4013      	ands	r3, r2
 800dcea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800dcec:	68fb      	ldr	r3, [r7, #12]
 800dcee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800dcf0:	68bb      	ldr	r3, [r7, #8]
 800dcf2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800dcf4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800dcf8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800dcfc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800dcfe:	4a04      	ldr	r2, [pc, #16]	; (800dd10 <__NVIC_SetPriorityGrouping+0x44>)
 800dd00:	68bb      	ldr	r3, [r7, #8]
 800dd02:	60d3      	str	r3, [r2, #12]
}
 800dd04:	bf00      	nop
 800dd06:	3714      	adds	r7, #20
 800dd08:	46bd      	mov	sp, r7
 800dd0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd0e:	4770      	bx	lr
 800dd10:	e000ed00 	.word	0xe000ed00

0800dd14 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800dd14:	b480      	push	{r7}
 800dd16:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800dd18:	4b04      	ldr	r3, [pc, #16]	; (800dd2c <__NVIC_GetPriorityGrouping+0x18>)
 800dd1a:	68db      	ldr	r3, [r3, #12]
 800dd1c:	0a1b      	lsrs	r3, r3, #8
 800dd1e:	f003 0307 	and.w	r3, r3, #7
}
 800dd22:	4618      	mov	r0, r3
 800dd24:	46bd      	mov	sp, r7
 800dd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd2a:	4770      	bx	lr
 800dd2c:	e000ed00 	.word	0xe000ed00

0800dd30 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800dd30:	b480      	push	{r7}
 800dd32:	b083      	sub	sp, #12
 800dd34:	af00      	add	r7, sp, #0
 800dd36:	4603      	mov	r3, r0
 800dd38:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dd3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd3e:	2b00      	cmp	r3, #0
 800dd40:	db0b      	blt.n	800dd5a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800dd42:	79fb      	ldrb	r3, [r7, #7]
 800dd44:	f003 021f 	and.w	r2, r3, #31
 800dd48:	4907      	ldr	r1, [pc, #28]	; (800dd68 <__NVIC_EnableIRQ+0x38>)
 800dd4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd4e:	095b      	lsrs	r3, r3, #5
 800dd50:	2001      	movs	r0, #1
 800dd52:	fa00 f202 	lsl.w	r2, r0, r2
 800dd56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800dd5a:	bf00      	nop
 800dd5c:	370c      	adds	r7, #12
 800dd5e:	46bd      	mov	sp, r7
 800dd60:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd64:	4770      	bx	lr
 800dd66:	bf00      	nop
 800dd68:	e000e100 	.word	0xe000e100

0800dd6c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800dd6c:	b480      	push	{r7}
 800dd6e:	b083      	sub	sp, #12
 800dd70:	af00      	add	r7, sp, #0
 800dd72:	4603      	mov	r3, r0
 800dd74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800dd76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	db12      	blt.n	800dda4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800dd7e:	79fb      	ldrb	r3, [r7, #7]
 800dd80:	f003 021f 	and.w	r2, r3, #31
 800dd84:	490a      	ldr	r1, [pc, #40]	; (800ddb0 <__NVIC_DisableIRQ+0x44>)
 800dd86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800dd8a:	095b      	lsrs	r3, r3, #5
 800dd8c:	2001      	movs	r0, #1
 800dd8e:	fa00 f202 	lsl.w	r2, r0, r2
 800dd92:	3320      	adds	r3, #32
 800dd94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800dd98:	f3bf 8f4f 	dsb	sy
}
 800dd9c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800dd9e:	f3bf 8f6f 	isb	sy
}
 800dda2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 800dda4:	bf00      	nop
 800dda6:	370c      	adds	r7, #12
 800dda8:	46bd      	mov	sp, r7
 800ddaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddae:	4770      	bx	lr
 800ddb0:	e000e100 	.word	0xe000e100

0800ddb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800ddb4:	b480      	push	{r7}
 800ddb6:	b083      	sub	sp, #12
 800ddb8:	af00      	add	r7, sp, #0
 800ddba:	4603      	mov	r3, r0
 800ddbc:	6039      	str	r1, [r7, #0]
 800ddbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ddc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	db0a      	blt.n	800ddde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ddc8:	683b      	ldr	r3, [r7, #0]
 800ddca:	b2da      	uxtb	r2, r3
 800ddcc:	490c      	ldr	r1, [pc, #48]	; (800de00 <__NVIC_SetPriority+0x4c>)
 800ddce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ddd2:	0112      	lsls	r2, r2, #4
 800ddd4:	b2d2      	uxtb	r2, r2
 800ddd6:	440b      	add	r3, r1
 800ddd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800dddc:	e00a      	b.n	800ddf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ddde:	683b      	ldr	r3, [r7, #0]
 800dde0:	b2da      	uxtb	r2, r3
 800dde2:	4908      	ldr	r1, [pc, #32]	; (800de04 <__NVIC_SetPriority+0x50>)
 800dde4:	79fb      	ldrb	r3, [r7, #7]
 800dde6:	f003 030f 	and.w	r3, r3, #15
 800ddea:	3b04      	subs	r3, #4
 800ddec:	0112      	lsls	r2, r2, #4
 800ddee:	b2d2      	uxtb	r2, r2
 800ddf0:	440b      	add	r3, r1
 800ddf2:	761a      	strb	r2, [r3, #24]
}
 800ddf4:	bf00      	nop
 800ddf6:	370c      	adds	r7, #12
 800ddf8:	46bd      	mov	sp, r7
 800ddfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddfe:	4770      	bx	lr
 800de00:	e000e100 	.word	0xe000e100
 800de04:	e000ed00 	.word	0xe000ed00

0800de08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800de08:	b480      	push	{r7}
 800de0a:	b089      	sub	sp, #36	; 0x24
 800de0c:	af00      	add	r7, sp, #0
 800de0e:	60f8      	str	r0, [r7, #12]
 800de10:	60b9      	str	r1, [r7, #8]
 800de12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800de14:	68fb      	ldr	r3, [r7, #12]
 800de16:	f003 0307 	and.w	r3, r3, #7
 800de1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800de1c:	69fb      	ldr	r3, [r7, #28]
 800de1e:	f1c3 0307 	rsb	r3, r3, #7
 800de22:	2b04      	cmp	r3, #4
 800de24:	bf28      	it	cs
 800de26:	2304      	movcs	r3, #4
 800de28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800de2a:	69fb      	ldr	r3, [r7, #28]
 800de2c:	3304      	adds	r3, #4
 800de2e:	2b06      	cmp	r3, #6
 800de30:	d902      	bls.n	800de38 <NVIC_EncodePriority+0x30>
 800de32:	69fb      	ldr	r3, [r7, #28]
 800de34:	3b03      	subs	r3, #3
 800de36:	e000      	b.n	800de3a <NVIC_EncodePriority+0x32>
 800de38:	2300      	movs	r3, #0
 800de3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800de3c:	f04f 32ff 	mov.w	r2, #4294967295
 800de40:	69bb      	ldr	r3, [r7, #24]
 800de42:	fa02 f303 	lsl.w	r3, r2, r3
 800de46:	43da      	mvns	r2, r3
 800de48:	68bb      	ldr	r3, [r7, #8]
 800de4a:	401a      	ands	r2, r3
 800de4c:	697b      	ldr	r3, [r7, #20]
 800de4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800de50:	f04f 31ff 	mov.w	r1, #4294967295
 800de54:	697b      	ldr	r3, [r7, #20]
 800de56:	fa01 f303 	lsl.w	r3, r1, r3
 800de5a:	43d9      	mvns	r1, r3
 800de5c:	687b      	ldr	r3, [r7, #4]
 800de5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800de60:	4313      	orrs	r3, r2
         );
}
 800de62:	4618      	mov	r0, r3
 800de64:	3724      	adds	r7, #36	; 0x24
 800de66:	46bd      	mov	sp, r7
 800de68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de6c:	4770      	bx	lr
	...

0800de70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800de70:	b580      	push	{r7, lr}
 800de72:	b082      	sub	sp, #8
 800de74:	af00      	add	r7, sp, #0
 800de76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800de78:	687b      	ldr	r3, [r7, #4]
 800de7a:	3b01      	subs	r3, #1
 800de7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800de80:	d301      	bcc.n	800de86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800de82:	2301      	movs	r3, #1
 800de84:	e00f      	b.n	800dea6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800de86:	4a0a      	ldr	r2, [pc, #40]	; (800deb0 <SysTick_Config+0x40>)
 800de88:	687b      	ldr	r3, [r7, #4]
 800de8a:	3b01      	subs	r3, #1
 800de8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800de8e:	210f      	movs	r1, #15
 800de90:	f04f 30ff 	mov.w	r0, #4294967295
 800de94:	f7ff ff8e 	bl	800ddb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800de98:	4b05      	ldr	r3, [pc, #20]	; (800deb0 <SysTick_Config+0x40>)
 800de9a:	2200      	movs	r2, #0
 800de9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800de9e:	4b04      	ldr	r3, [pc, #16]	; (800deb0 <SysTick_Config+0x40>)
 800dea0:	2207      	movs	r2, #7
 800dea2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800dea4:	2300      	movs	r3, #0
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	3708      	adds	r7, #8
 800deaa:	46bd      	mov	sp, r7
 800deac:	bd80      	pop	{r7, pc}
 800deae:	bf00      	nop
 800deb0:	e000e010 	.word	0xe000e010

0800deb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800deb4:	b580      	push	{r7, lr}
 800deb6:	b082      	sub	sp, #8
 800deb8:	af00      	add	r7, sp, #0
 800deba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800debc:	6878      	ldr	r0, [r7, #4]
 800debe:	f7ff ff05 	bl	800dccc <__NVIC_SetPriorityGrouping>
}
 800dec2:	bf00      	nop
 800dec4:	3708      	adds	r7, #8
 800dec6:	46bd      	mov	sp, r7
 800dec8:	bd80      	pop	{r7, pc}

0800deca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800deca:	b580      	push	{r7, lr}
 800decc:	b086      	sub	sp, #24
 800dece:	af00      	add	r7, sp, #0
 800ded0:	4603      	mov	r3, r0
 800ded2:	60b9      	str	r1, [r7, #8]
 800ded4:	607a      	str	r2, [r7, #4]
 800ded6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800ded8:	2300      	movs	r3, #0
 800deda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800dedc:	f7ff ff1a 	bl	800dd14 <__NVIC_GetPriorityGrouping>
 800dee0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800dee2:	687a      	ldr	r2, [r7, #4]
 800dee4:	68b9      	ldr	r1, [r7, #8]
 800dee6:	6978      	ldr	r0, [r7, #20]
 800dee8:	f7ff ff8e 	bl	800de08 <NVIC_EncodePriority>
 800deec:	4602      	mov	r2, r0
 800deee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800def2:	4611      	mov	r1, r2
 800def4:	4618      	mov	r0, r3
 800def6:	f7ff ff5d 	bl	800ddb4 <__NVIC_SetPriority>
}
 800defa:	bf00      	nop
 800defc:	3718      	adds	r7, #24
 800defe:	46bd      	mov	sp, r7
 800df00:	bd80      	pop	{r7, pc}

0800df02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800df02:	b580      	push	{r7, lr}
 800df04:	b082      	sub	sp, #8
 800df06:	af00      	add	r7, sp, #0
 800df08:	4603      	mov	r3, r0
 800df0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800df0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800df10:	4618      	mov	r0, r3
 800df12:	f7ff ff0d 	bl	800dd30 <__NVIC_EnableIRQ>
}
 800df16:	bf00      	nop
 800df18:	3708      	adds	r7, #8
 800df1a:	46bd      	mov	sp, r7
 800df1c:	bd80      	pop	{r7, pc}

0800df1e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800df1e:	b580      	push	{r7, lr}
 800df20:	b082      	sub	sp, #8
 800df22:	af00      	add	r7, sp, #0
 800df24:	4603      	mov	r3, r0
 800df26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 800df28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800df2c:	4618      	mov	r0, r3
 800df2e:	f7ff ff1d 	bl	800dd6c <__NVIC_DisableIRQ>
}
 800df32:	bf00      	nop
 800df34:	3708      	adds	r7, #8
 800df36:	46bd      	mov	sp, r7
 800df38:	bd80      	pop	{r7, pc}

0800df3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800df3a:	b580      	push	{r7, lr}
 800df3c:	b082      	sub	sp, #8
 800df3e:	af00      	add	r7, sp, #0
 800df40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800df42:	6878      	ldr	r0, [r7, #4]
 800df44:	f7ff ff94 	bl	800de70 <SysTick_Config>
 800df48:	4603      	mov	r3, r0
}
 800df4a:	4618      	mov	r0, r3
 800df4c:	3708      	adds	r7, #8
 800df4e:	46bd      	mov	sp, r7
 800df50:	bd80      	pop	{r7, pc}

0800df52 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 800df52:	b580      	push	{r7, lr}
 800df54:	b082      	sub	sp, #8
 800df56:	af00      	add	r7, sp, #0
 800df58:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	d101      	bne.n	800df64 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 800df60:	2301      	movs	r3, #1
 800df62:	e014      	b.n	800df8e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	791b      	ldrb	r3, [r3, #4]
 800df68:	b2db      	uxtb	r3, r3
 800df6a:	2b00      	cmp	r3, #0
 800df6c:	d105      	bne.n	800df7a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 800df6e:	687b      	ldr	r3, [r7, #4]
 800df70:	2200      	movs	r2, #0
 800df72:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800df74:	6878      	ldr	r0, [r7, #4]
 800df76:	f7f4 fbcb 	bl	8002710 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	2202      	movs	r2, #2
 800df7e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 800df80:	687b      	ldr	r3, [r7, #4]
 800df82:	2200      	movs	r2, #0
 800df84:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	2201      	movs	r2, #1
 800df8a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800df8c:	2300      	movs	r3, #0
}
 800df8e:	4618      	mov	r0, r3
 800df90:	3708      	adds	r7, #8
 800df92:	46bd      	mov	sp, r7
 800df94:	bd80      	pop	{r7, pc}

0800df96 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800df96:	b480      	push	{r7}
 800df98:	b083      	sub	sp, #12
 800df9a:	af00      	add	r7, sp, #0
 800df9c:	6078      	str	r0, [r7, #4]
 800df9e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	795b      	ldrb	r3, [r3, #5]
 800dfa4:	2b01      	cmp	r3, #1
 800dfa6:	d101      	bne.n	800dfac <HAL_DAC_Start+0x16>
 800dfa8:	2302      	movs	r3, #2
 800dfaa:	e040      	b.n	800e02e <HAL_DAC_Start+0x98>
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	2201      	movs	r2, #1
 800dfb0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800dfb2:	687b      	ldr	r3, [r7, #4]
 800dfb4:	2202      	movs	r2, #2
 800dfb6:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800dfb8:	687b      	ldr	r3, [r7, #4]
 800dfba:	681b      	ldr	r3, [r3, #0]
 800dfbc:	6819      	ldr	r1, [r3, #0]
 800dfbe:	683b      	ldr	r3, [r7, #0]
 800dfc0:	f003 0310 	and.w	r3, r3, #16
 800dfc4:	2201      	movs	r2, #1
 800dfc6:	409a      	lsls	r2, r3
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	430a      	orrs	r2, r1
 800dfce:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 800dfd0:	683b      	ldr	r3, [r7, #0]
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d10f      	bne.n	800dff6 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 800dfd6:	687b      	ldr	r3, [r7, #4]
 800dfd8:	681b      	ldr	r3, [r3, #0]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 800dfe0:	2b3c      	cmp	r3, #60	; 0x3c
 800dfe2:	d11d      	bne.n	800e020 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800dfe4:	687b      	ldr	r3, [r7, #4]
 800dfe6:	681b      	ldr	r3, [r3, #0]
 800dfe8:	685a      	ldr	r2, [r3, #4]
 800dfea:	687b      	ldr	r3, [r7, #4]
 800dfec:	681b      	ldr	r3, [r3, #0]
 800dfee:	f042 0201 	orr.w	r2, r2, #1
 800dff2:	605a      	str	r2, [r3, #4]
 800dff4:	e014      	b.n	800e020 <HAL_DAC_Start+0x8a>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	681b      	ldr	r3, [r3, #0]
 800dffa:	681b      	ldr	r3, [r3, #0]
 800dffc:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800e000:	683b      	ldr	r3, [r7, #0]
 800e002:	f003 0310 	and.w	r3, r3, #16
 800e006:	213c      	movs	r1, #60	; 0x3c
 800e008:	fa01 f303 	lsl.w	r3, r1, r3
 800e00c:	429a      	cmp	r2, r3
 800e00e:	d107      	bne.n	800e020 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	685a      	ldr	r2, [r3, #4]
 800e016:	687b      	ldr	r3, [r7, #4]
 800e018:	681b      	ldr	r3, [r3, #0]
 800e01a:	f042 0202 	orr.w	r2, r2, #2
 800e01e:	605a      	str	r2, [r3, #4]
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800e020:	687b      	ldr	r3, [r7, #4]
 800e022:	2201      	movs	r2, #1
 800e024:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800e026:	687b      	ldr	r3, [r7, #4]
 800e028:	2200      	movs	r2, #0
 800e02a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800e02c:	2300      	movs	r3, #0
}
 800e02e:	4618      	mov	r0, r3
 800e030:	370c      	adds	r7, #12
 800e032:	46bd      	mov	sp, r7
 800e034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e038:	4770      	bx	lr

0800e03a <HAL_DAC_Stop>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800e03a:	b480      	push	{r7}
 800e03c:	b083      	sub	sp, #12
 800e03e:	af00      	add	r7, sp, #0
 800e040:	6078      	str	r0, [r7, #4]
 800e042:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	681b      	ldr	r3, [r3, #0]
 800e048:	6819      	ldr	r1, [r3, #0]
 800e04a:	683b      	ldr	r3, [r7, #0]
 800e04c:	f003 0310 	and.w	r3, r3, #16
 800e050:	2201      	movs	r2, #1
 800e052:	fa02 f303 	lsl.w	r3, r2, r3
 800e056:	43da      	mvns	r2, r3
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	681b      	ldr	r3, [r3, #0]
 800e05c:	400a      	ands	r2, r1
 800e05e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2201      	movs	r2, #1
 800e064:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800e066:	2300      	movs	r3, #0
}
 800e068:	4618      	mov	r0, r3
 800e06a:	370c      	adds	r7, #12
 800e06c:	46bd      	mov	sp, r7
 800e06e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e072:	4770      	bx	lr

0800e074 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b086      	sub	sp, #24
 800e078:	af00      	add	r7, sp, #0
 800e07a:	60f8      	str	r0, [r7, #12]
 800e07c:	60b9      	str	r1, [r7, #8]
 800e07e:	607a      	str	r2, [r7, #4]
 800e080:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e082:	2300      	movs	r3, #0
 800e084:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 800e086:	2300      	movs	r3, #0
 800e088:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 800e08a:	68fb      	ldr	r3, [r7, #12]
 800e08c:	795b      	ldrb	r3, [r3, #5]
 800e08e:	2b01      	cmp	r3, #1
 800e090:	d101      	bne.n	800e096 <HAL_DAC_Start_DMA+0x22>
 800e092:	2302      	movs	r3, #2
 800e094:	e0ab      	b.n	800e1ee <HAL_DAC_Start_DMA+0x17a>
 800e096:	68fb      	ldr	r3, [r7, #12]
 800e098:	2201      	movs	r2, #1
 800e09a:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800e09c:	68fb      	ldr	r3, [r7, #12]
 800e09e:	2202      	movs	r2, #2
 800e0a0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 800e0a2:	68bb      	ldr	r3, [r7, #8]
 800e0a4:	2b00      	cmp	r3, #0
 800e0a6:	d12f      	bne.n	800e108 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 800e0a8:	68fb      	ldr	r3, [r7, #12]
 800e0aa:	689b      	ldr	r3, [r3, #8]
 800e0ac:	4a52      	ldr	r2, [pc, #328]	; (800e1f8 <HAL_DAC_Start_DMA+0x184>)
 800e0ae:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 800e0b0:	68fb      	ldr	r3, [r7, #12]
 800e0b2:	689b      	ldr	r3, [r3, #8]
 800e0b4:	4a51      	ldr	r2, [pc, #324]	; (800e1fc <HAL_DAC_Start_DMA+0x188>)
 800e0b6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 800e0b8:	68fb      	ldr	r3, [r7, #12]
 800e0ba:	689b      	ldr	r3, [r3, #8]
 800e0bc:	4a50      	ldr	r2, [pc, #320]	; (800e200 <HAL_DAC_Start_DMA+0x18c>)
 800e0be:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 800e0c0:	68fb      	ldr	r3, [r7, #12]
 800e0c2:	681b      	ldr	r3, [r3, #0]
 800e0c4:	681a      	ldr	r2, [r3, #0]
 800e0c6:	68fb      	ldr	r3, [r7, #12]
 800e0c8:	681b      	ldr	r3, [r3, #0]
 800e0ca:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800e0ce:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 800e0d0:	6a3b      	ldr	r3, [r7, #32]
 800e0d2:	2b08      	cmp	r3, #8
 800e0d4:	d013      	beq.n	800e0fe <HAL_DAC_Start_DMA+0x8a>
 800e0d6:	6a3b      	ldr	r3, [r7, #32]
 800e0d8:	2b08      	cmp	r3, #8
 800e0da:	d845      	bhi.n	800e168 <HAL_DAC_Start_DMA+0xf4>
 800e0dc:	6a3b      	ldr	r3, [r7, #32]
 800e0de:	2b00      	cmp	r3, #0
 800e0e0:	d003      	beq.n	800e0ea <HAL_DAC_Start_DMA+0x76>
 800e0e2:	6a3b      	ldr	r3, [r7, #32]
 800e0e4:	2b04      	cmp	r3, #4
 800e0e6:	d005      	beq.n	800e0f4 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800e0e8:	e03e      	b.n	800e168 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800e0ea:	68fb      	ldr	r3, [r7, #12]
 800e0ec:	681b      	ldr	r3, [r3, #0]
 800e0ee:	3308      	adds	r3, #8
 800e0f0:	613b      	str	r3, [r7, #16]
        break;
 800e0f2:	e03c      	b.n	800e16e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800e0f4:	68fb      	ldr	r3, [r7, #12]
 800e0f6:	681b      	ldr	r3, [r3, #0]
 800e0f8:	330c      	adds	r3, #12
 800e0fa:	613b      	str	r3, [r7, #16]
        break;
 800e0fc:	e037      	b.n	800e16e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800e0fe:	68fb      	ldr	r3, [r7, #12]
 800e100:	681b      	ldr	r3, [r3, #0]
 800e102:	3310      	adds	r3, #16
 800e104:	613b      	str	r3, [r7, #16]
        break;
 800e106:	e032      	b.n	800e16e <HAL_DAC_Start_DMA+0xfa>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800e108:	68fb      	ldr	r3, [r7, #12]
 800e10a:	68db      	ldr	r3, [r3, #12]
 800e10c:	4a3d      	ldr	r2, [pc, #244]	; (800e204 <HAL_DAC_Start_DMA+0x190>)
 800e10e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	68db      	ldr	r3, [r3, #12]
 800e114:	4a3c      	ldr	r2, [pc, #240]	; (800e208 <HAL_DAC_Start_DMA+0x194>)
 800e116:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800e118:	68fb      	ldr	r3, [r7, #12]
 800e11a:	68db      	ldr	r3, [r3, #12]
 800e11c:	4a3b      	ldr	r2, [pc, #236]	; (800e20c <HAL_DAC_Start_DMA+0x198>)
 800e11e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800e120:	68fb      	ldr	r3, [r7, #12]
 800e122:	681b      	ldr	r3, [r3, #0]
 800e124:	681a      	ldr	r2, [r3, #0]
 800e126:	68fb      	ldr	r3, [r7, #12]
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800e12e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 800e130:	6a3b      	ldr	r3, [r7, #32]
 800e132:	2b08      	cmp	r3, #8
 800e134:	d013      	beq.n	800e15e <HAL_DAC_Start_DMA+0xea>
 800e136:	6a3b      	ldr	r3, [r7, #32]
 800e138:	2b08      	cmp	r3, #8
 800e13a:	d817      	bhi.n	800e16c <HAL_DAC_Start_DMA+0xf8>
 800e13c:	6a3b      	ldr	r3, [r7, #32]
 800e13e:	2b00      	cmp	r3, #0
 800e140:	d003      	beq.n	800e14a <HAL_DAC_Start_DMA+0xd6>
 800e142:	6a3b      	ldr	r3, [r7, #32]
 800e144:	2b04      	cmp	r3, #4
 800e146:	d005      	beq.n	800e154 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800e148:	e010      	b.n	800e16c <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800e14a:	68fb      	ldr	r3, [r7, #12]
 800e14c:	681b      	ldr	r3, [r3, #0]
 800e14e:	3314      	adds	r3, #20
 800e150:	613b      	str	r3, [r7, #16]
        break;
 800e152:	e00c      	b.n	800e16e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 800e154:	68fb      	ldr	r3, [r7, #12]
 800e156:	681b      	ldr	r3, [r3, #0]
 800e158:	3318      	adds	r3, #24
 800e15a:	613b      	str	r3, [r7, #16]
        break;
 800e15c:	e007      	b.n	800e16e <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 800e15e:	68fb      	ldr	r3, [r7, #12]
 800e160:	681b      	ldr	r3, [r3, #0]
 800e162:	331c      	adds	r3, #28
 800e164:	613b      	str	r3, [r7, #16]
        break;
 800e166:	e002      	b.n	800e16e <HAL_DAC_Start_DMA+0xfa>
        break;
 800e168:	bf00      	nop
 800e16a:	e000      	b.n	800e16e <HAL_DAC_Start_DMA+0xfa>
        break;
 800e16c:	bf00      	nop
    }
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 800e16e:	68bb      	ldr	r3, [r7, #8]
 800e170:	2b00      	cmp	r3, #0
 800e172:	d111      	bne.n	800e198 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 800e174:	68fb      	ldr	r3, [r7, #12]
 800e176:	681b      	ldr	r3, [r3, #0]
 800e178:	681a      	ldr	r2, [r3, #0]
 800e17a:	68fb      	ldr	r3, [r7, #12]
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800e182:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	6898      	ldr	r0, [r3, #8]
 800e188:	6879      	ldr	r1, [r7, #4]
 800e18a:	683b      	ldr	r3, [r7, #0]
 800e18c:	693a      	ldr	r2, [r7, #16]
 800e18e:	f000 fa77 	bl	800e680 <HAL_DMA_Start_IT>
 800e192:	4603      	mov	r3, r0
 800e194:	75fb      	strb	r3, [r7, #23]
 800e196:	e010      	b.n	800e1ba <HAL_DAC_Start_DMA+0x146>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	681a      	ldr	r2, [r3, #0]
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	681b      	ldr	r3, [r3, #0]
 800e1a2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 800e1a6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	68d8      	ldr	r0, [r3, #12]
 800e1ac:	6879      	ldr	r1, [r7, #4]
 800e1ae:	683b      	ldr	r3, [r7, #0]
 800e1b0:	693a      	ldr	r2, [r7, #16]
 800e1b2:	f000 fa65 	bl	800e680 <HAL_DMA_Start_IT>
 800e1b6:	4603      	mov	r3, r0
 800e1b8:	75fb      	strb	r3, [r7, #23]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	2200      	movs	r2, #0
 800e1be:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 800e1c0:	7dfb      	ldrb	r3, [r7, #23]
 800e1c2:	2b00      	cmp	r3, #0
 800e1c4:	d10c      	bne.n	800e1e0 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800e1c6:	68fb      	ldr	r3, [r7, #12]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	6819      	ldr	r1, [r3, #0]
 800e1cc:	68bb      	ldr	r3, [r7, #8]
 800e1ce:	f003 0310 	and.w	r3, r3, #16
 800e1d2:	2201      	movs	r2, #1
 800e1d4:	409a      	lsls	r2, r3
 800e1d6:	68fb      	ldr	r3, [r7, #12]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	430a      	orrs	r2, r1
 800e1dc:	601a      	str	r2, [r3, #0]
 800e1de:	e005      	b.n	800e1ec <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800e1e0:	68fb      	ldr	r3, [r7, #12]
 800e1e2:	691b      	ldr	r3, [r3, #16]
 800e1e4:	f043 0204 	orr.w	r2, r3, #4
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800e1ec:	7dfb      	ldrb	r3, [r7, #23]
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	3718      	adds	r7, #24
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd80      	pop	{r7, pc}
 800e1f6:	bf00      	nop
 800e1f8:	0800e37b 	.word	0x0800e37b
 800e1fc:	0800e39d 	.word	0x0800e39d
 800e200:	0800e3b9 	.word	0x0800e3b9
 800e204:	0800e3fb 	.word	0x0800e3fb
 800e208:	0800e41d 	.word	0x0800e41d
 800e20c:	0800e439 	.word	0x0800e439

0800e210 <HAL_DAC_Stop_DMA>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Stop_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800e210:	b580      	push	{r7, lr}
 800e212:	b082      	sub	sp, #8
 800e214:	af00      	add	r7, sp, #0
 800e216:	6078      	str	r0, [r7, #4]
 800e218:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Disable the selected DAC channel DMA request */
  hdac->Instance->CR &= ~(DAC_CR_DMAEN1 << (Channel & 0x10UL));
 800e21a:	687b      	ldr	r3, [r7, #4]
 800e21c:	681b      	ldr	r3, [r3, #0]
 800e21e:	6819      	ldr	r1, [r3, #0]
 800e220:	683b      	ldr	r3, [r7, #0]
 800e222:	f003 0310 	and.w	r3, r3, #16
 800e226:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800e22a:	fa02 f303 	lsl.w	r3, r2, r3
 800e22e:	43da      	mvns	r2, r3
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	400a      	ands	r2, r1
 800e236:	601a      	str	r2, [r3, #0]

  /* Disable the Peripheral */
  __HAL_DAC_DISABLE(hdac, Channel);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	681b      	ldr	r3, [r3, #0]
 800e23c:	6819      	ldr	r1, [r3, #0]
 800e23e:	683b      	ldr	r3, [r7, #0]
 800e240:	f003 0310 	and.w	r3, r3, #16
 800e244:	2201      	movs	r2, #1
 800e246:	fa02 f303 	lsl.w	r3, r2, r3
 800e24a:	43da      	mvns	r2, r3
 800e24c:	687b      	ldr	r3, [r7, #4]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	400a      	ands	r2, r1
 800e252:	601a      	str	r2, [r3, #0]

  /* Disable the DMA Stream */

  /* Channel1 is used */
  if (Channel == DAC_CHANNEL_1)
 800e254:	683b      	ldr	r3, [r7, #0]
 800e256:	2b00      	cmp	r3, #0
 800e258:	d10d      	bne.n	800e276 <HAL_DAC_Stop_DMA+0x66>
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle1);
 800e25a:	687b      	ldr	r3, [r7, #4]
 800e25c:	689b      	ldr	r3, [r3, #8]
 800e25e:	4618      	mov	r0, r3
 800e260:	f000 fa66 	bl	800e730 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR1);
 800e264:	687b      	ldr	r3, [r7, #4]
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	681a      	ldr	r2, [r3, #0]
 800e26a:	687b      	ldr	r3, [r7, #4]
 800e26c:	681b      	ldr	r3, [r3, #0]
 800e26e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800e272:	601a      	str	r2, [r3, #0]
 800e274:	e00c      	b.n	800e290 <HAL_DAC_Stop_DMA+0x80>
  }
#if defined(DAC_CHANNEL2_SUPPORT)
  else /* Channel2 is used for */
  {
    /* Disable the DMA Stream */
    (void)HAL_DMA_Abort(hdac->DMA_Handle2);
 800e276:	687b      	ldr	r3, [r7, #4]
 800e278:	68db      	ldr	r3, [r3, #12]
 800e27a:	4618      	mov	r0, r3
 800e27c:	f000 fa58 	bl	800e730 <HAL_DMA_Abort>

    /* Disable the DAC DMA underrun interrupt */
    __HAL_DAC_DISABLE_IT(hdac, DAC_IT_DMAUDR2);
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	681b      	ldr	r3, [r3, #0]
 800e284:	681a      	ldr	r2, [r3, #0]
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	f022 5200 	bic.w	r2, r2, #536870912	; 0x20000000
 800e28e:	601a      	str	r2, [r3, #0]
  }
#endif /* DAC_CHANNEL2_SUPPORT */

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	2201      	movs	r2, #1
 800e294:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800e296:	2300      	movs	r3, #0
}
 800e298:	4618      	mov	r0, r3
 800e29a:	3708      	adds	r7, #8
 800e29c:	46bd      	mov	sp, r7
 800e29e:	bd80      	pop	{r7, pc}

0800e2a0 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800e2a0:	b480      	push	{r7}
 800e2a2:	b083      	sub	sp, #12
 800e2a4:	af00      	add	r7, sp, #0
 800e2a6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 800e2a8:	bf00      	nop
 800e2aa:	370c      	adds	r7, #12
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2b2:	4770      	bx	lr

0800e2b4 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800e2b4:	b480      	push	{r7}
 800e2b6:	b083      	sub	sp, #12
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 800e2bc:	bf00      	nop
 800e2be:	370c      	adds	r7, #12
 800e2c0:	46bd      	mov	sp, r7
 800e2c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2c6:	4770      	bx	lr

0800e2c8 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800e2c8:	b480      	push	{r7}
 800e2ca:	b083      	sub	sp, #12
 800e2cc:	af00      	add	r7, sp, #0
 800e2ce:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800e2d0:	bf00      	nop
 800e2d2:	370c      	adds	r7, #12
 800e2d4:	46bd      	mov	sp, r7
 800e2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2da:	4770      	bx	lr

0800e2dc <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800e2dc:	b480      	push	{r7}
 800e2de:	b087      	sub	sp, #28
 800e2e0:	af00      	add	r7, sp, #0
 800e2e2:	60f8      	str	r0, [r7, #12]
 800e2e4:	60b9      	str	r1, [r7, #8]
 800e2e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800e2e8:	68fb      	ldr	r3, [r7, #12]
 800e2ea:	795b      	ldrb	r3, [r3, #5]
 800e2ec:	2b01      	cmp	r3, #1
 800e2ee:	d101      	bne.n	800e2f4 <HAL_DAC_ConfigChannel+0x18>
 800e2f0:	2302      	movs	r3, #2
 800e2f2:	e03c      	b.n	800e36e <HAL_DAC_ConfigChannel+0x92>
 800e2f4:	68fb      	ldr	r3, [r7, #12]
 800e2f6:	2201      	movs	r2, #1
 800e2f8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800e2fa:	68fb      	ldr	r3, [r7, #12]
 800e2fc:	2202      	movs	r2, #2
 800e2fe:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	681b      	ldr	r3, [r3, #0]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 800e308:	687b      	ldr	r3, [r7, #4]
 800e30a:	f003 0310 	and.w	r3, r3, #16
 800e30e:	f640 72fe 	movw	r2, #4094	; 0xffe
 800e312:	fa02 f303 	lsl.w	r3, r2, r3
 800e316:	43db      	mvns	r3, r3
 800e318:	697a      	ldr	r2, [r7, #20]
 800e31a:	4013      	ands	r3, r2
 800e31c:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 800e31e:	68bb      	ldr	r3, [r7, #8]
 800e320:	681a      	ldr	r2, [r3, #0]
 800e322:	68bb      	ldr	r3, [r7, #8]
 800e324:	685b      	ldr	r3, [r3, #4]
 800e326:	4313      	orrs	r3, r2
 800e328:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800e32a:	687b      	ldr	r3, [r7, #4]
 800e32c:	f003 0310 	and.w	r3, r3, #16
 800e330:	693a      	ldr	r2, [r7, #16]
 800e332:	fa02 f303 	lsl.w	r3, r2, r3
 800e336:	697a      	ldr	r2, [r7, #20]
 800e338:	4313      	orrs	r3, r2
 800e33a:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800e33c:	68fb      	ldr	r3, [r7, #12]
 800e33e:	681b      	ldr	r3, [r3, #0]
 800e340:	697a      	ldr	r2, [r7, #20]
 800e342:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	681b      	ldr	r3, [r3, #0]
 800e348:	6819      	ldr	r1, [r3, #0]
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	f003 0310 	and.w	r3, r3, #16
 800e350:	22c0      	movs	r2, #192	; 0xc0
 800e352:	fa02 f303 	lsl.w	r3, r2, r3
 800e356:	43da      	mvns	r2, r3
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	400a      	ands	r2, r1
 800e35e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	2201      	movs	r2, #1
 800e364:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	2200      	movs	r2, #0
 800e36a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800e36c:	2300      	movs	r3, #0
}
 800e36e:	4618      	mov	r0, r3
 800e370:	371c      	adds	r7, #28
 800e372:	46bd      	mov	sp, r7
 800e374:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e378:	4770      	bx	lr

0800e37a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800e37a:	b580      	push	{r7, lr}
 800e37c:	b084      	sub	sp, #16
 800e37e:	af00      	add	r7, sp, #0
 800e380:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e382:	687b      	ldr	r3, [r7, #4]
 800e384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e386:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 800e388:	68f8      	ldr	r0, [r7, #12]
 800e38a:	f7ff ff89 	bl	800e2a0 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800e38e:	68fb      	ldr	r3, [r7, #12]
 800e390:	2201      	movs	r2, #1
 800e392:	711a      	strb	r2, [r3, #4]
}
 800e394:	bf00      	nop
 800e396:	3710      	adds	r7, #16
 800e398:	46bd      	mov	sp, r7
 800e39a:	bd80      	pop	{r7, pc}

0800e39c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800e39c:	b580      	push	{r7, lr}
 800e39e:	b084      	sub	sp, #16
 800e3a0:	af00      	add	r7, sp, #0
 800e3a2:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e3a4:	687b      	ldr	r3, [r7, #4]
 800e3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3a8:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 800e3aa:	68f8      	ldr	r0, [r7, #12]
 800e3ac:	f7ff ff82 	bl	800e2b4 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800e3b0:	bf00      	nop
 800e3b2:	3710      	adds	r7, #16
 800e3b4:	46bd      	mov	sp, r7
 800e3b6:	bd80      	pop	{r7, pc}

0800e3b8 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 800e3b8:	b580      	push	{r7, lr}
 800e3ba:	b084      	sub	sp, #16
 800e3bc:	af00      	add	r7, sp, #0
 800e3be:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e3c0:	687b      	ldr	r3, [r7, #4]
 800e3c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e3c4:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	691b      	ldr	r3, [r3, #16]
 800e3ca:	f043 0204 	orr.w	r2, r3, #4
 800e3ce:	68fb      	ldr	r3, [r7, #12]
 800e3d0:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 800e3d2:	68f8      	ldr	r0, [r7, #12]
 800e3d4:	f7ff ff78 	bl	800e2c8 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800e3d8:	68fb      	ldr	r3, [r7, #12]
 800e3da:	2201      	movs	r2, #1
 800e3dc:	711a      	strb	r2, [r3, #4]
}
 800e3de:	bf00      	nop
 800e3e0:	3710      	adds	r7, #16
 800e3e2:	46bd      	mov	sp, r7
 800e3e4:	bd80      	pop	{r7, pc}

0800e3e6 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800e3e6:	b480      	push	{r7}
 800e3e8:	b083      	sub	sp, #12
 800e3ea:	af00      	add	r7, sp, #0
 800e3ec:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 800e3ee:	bf00      	nop
 800e3f0:	370c      	adds	r7, #12
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3f8:	4770      	bx	lr

0800e3fa <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800e3fa:	b580      	push	{r7, lr}
 800e3fc:	b084      	sub	sp, #16
 800e3fe:	af00      	add	r7, sp, #0
 800e400:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e402:	687b      	ldr	r3, [r7, #4]
 800e404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e406:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800e408:	68f8      	ldr	r0, [r7, #12]
 800e40a:	f7f9 fbbf 	bl	8007b8c <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	2201      	movs	r2, #1
 800e412:	711a      	strb	r2, [r3, #4]
}
 800e414:	bf00      	nop
 800e416:	3710      	adds	r7, #16
 800e418:	46bd      	mov	sp, r7
 800e41a:	bd80      	pop	{r7, pc}

0800e41c <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 800e41c:	b580      	push	{r7, lr}
 800e41e:	b084      	sub	sp, #16
 800e420:	af00      	add	r7, sp, #0
 800e422:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e424:	687b      	ldr	r3, [r7, #4]
 800e426:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e428:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 800e42a:	68f8      	ldr	r0, [r7, #12]
 800e42c:	f7f9 fbc2 	bl	8007bb4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800e430:	bf00      	nop
 800e432:	3710      	adds	r7, #16
 800e434:	46bd      	mov	sp, r7
 800e436:	bd80      	pop	{r7, pc}

0800e438 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800e438:	b580      	push	{r7, lr}
 800e43a:	b084      	sub	sp, #16
 800e43c:	af00      	add	r7, sp, #0
 800e43e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800e440:	687b      	ldr	r3, [r7, #4]
 800e442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800e444:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800e446:	68fb      	ldr	r3, [r7, #12]
 800e448:	691b      	ldr	r3, [r3, #16]
 800e44a:	f043 0204 	orr.w	r2, r3, #4
 800e44e:	68fb      	ldr	r3, [r7, #12]
 800e450:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800e452:	68f8      	ldr	r0, [r7, #12]
 800e454:	f7ff ffc7 	bl	800e3e6 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	2201      	movs	r2, #1
 800e45c:	711a      	strb	r2, [r3, #4]
}
 800e45e:	bf00      	nop
 800e460:	3710      	adds	r7, #16
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}
	...

0800e468 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800e468:	b580      	push	{r7, lr}
 800e46a:	b086      	sub	sp, #24
 800e46c:	af00      	add	r7, sp, #0
 800e46e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800e470:	2300      	movs	r3, #0
 800e472:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800e474:	f7fe fddc 	bl	800d030 <HAL_GetTick>
 800e478:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800e47a:	687b      	ldr	r3, [r7, #4]
 800e47c:	2b00      	cmp	r3, #0
 800e47e:	d101      	bne.n	800e484 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800e480:	2301      	movs	r3, #1
 800e482:	e099      	b.n	800e5b8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800e484:	687b      	ldr	r3, [r7, #4]
 800e486:	2202      	movs	r2, #2
 800e488:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 800e48c:	687b      	ldr	r3, [r7, #4]
 800e48e:	2200      	movs	r2, #0
 800e490:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	681a      	ldr	r2, [r3, #0]
 800e49a:	687b      	ldr	r3, [r7, #4]
 800e49c:	681b      	ldr	r3, [r3, #0]
 800e49e:	f022 0201 	bic.w	r2, r2, #1
 800e4a2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e4a4:	e00f      	b.n	800e4c6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800e4a6:	f7fe fdc3 	bl	800d030 <HAL_GetTick>
 800e4aa:	4602      	mov	r2, r0
 800e4ac:	693b      	ldr	r3, [r7, #16]
 800e4ae:	1ad3      	subs	r3, r2, r3
 800e4b0:	2b05      	cmp	r3, #5
 800e4b2:	d908      	bls.n	800e4c6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800e4b4:	687b      	ldr	r3, [r7, #4]
 800e4b6:	2220      	movs	r2, #32
 800e4b8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800e4ba:	687b      	ldr	r3, [r7, #4]
 800e4bc:	2203      	movs	r2, #3
 800e4be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800e4c2:	2303      	movs	r3, #3
 800e4c4:	e078      	b.n	800e5b8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e4c6:	687b      	ldr	r3, [r7, #4]
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	f003 0301 	and.w	r3, r3, #1
 800e4d0:	2b00      	cmp	r3, #0
 800e4d2:	d1e8      	bne.n	800e4a6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800e4d4:	687b      	ldr	r3, [r7, #4]
 800e4d6:	681b      	ldr	r3, [r3, #0]
 800e4d8:	681b      	ldr	r3, [r3, #0]
 800e4da:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800e4dc:	697a      	ldr	r2, [r7, #20]
 800e4de:	4b38      	ldr	r3, [pc, #224]	; (800e5c0 <HAL_DMA_Init+0x158>)
 800e4e0:	4013      	ands	r3, r2
 800e4e2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800e4e4:	687b      	ldr	r3, [r7, #4]
 800e4e6:	685a      	ldr	r2, [r3, #4]
 800e4e8:	687b      	ldr	r3, [r7, #4]
 800e4ea:	689b      	ldr	r3, [r3, #8]
 800e4ec:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e4ee:	687b      	ldr	r3, [r7, #4]
 800e4f0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800e4f2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e4f4:	687b      	ldr	r3, [r7, #4]
 800e4f6:	691b      	ldr	r3, [r3, #16]
 800e4f8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e4fa:	687b      	ldr	r3, [r7, #4]
 800e4fc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800e4fe:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	699b      	ldr	r3, [r3, #24]
 800e504:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e506:	687b      	ldr	r3, [r7, #4]
 800e508:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800e50a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	6a1b      	ldr	r3, [r3, #32]
 800e510:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800e512:	697a      	ldr	r2, [r7, #20]
 800e514:	4313      	orrs	r3, r2
 800e516:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e518:	687b      	ldr	r3, [r7, #4]
 800e51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e51c:	2b04      	cmp	r3, #4
 800e51e:	d107      	bne.n	800e530 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800e520:	687b      	ldr	r3, [r7, #4]
 800e522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e528:	4313      	orrs	r3, r2
 800e52a:	697a      	ldr	r2, [r7, #20]
 800e52c:	4313      	orrs	r3, r2
 800e52e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 800e530:	687b      	ldr	r3, [r7, #4]
 800e532:	681b      	ldr	r3, [r3, #0]
 800e534:	697a      	ldr	r2, [r7, #20]
 800e536:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800e538:	687b      	ldr	r3, [r7, #4]
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	695b      	ldr	r3, [r3, #20]
 800e53e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800e540:	697b      	ldr	r3, [r7, #20]
 800e542:	f023 0307 	bic.w	r3, r3, #7
 800e546:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800e548:	687b      	ldr	r3, [r7, #4]
 800e54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e54c:	697a      	ldr	r2, [r7, #20]
 800e54e:	4313      	orrs	r3, r2
 800e550:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800e552:	687b      	ldr	r3, [r7, #4]
 800e554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e556:	2b04      	cmp	r3, #4
 800e558:	d117      	bne.n	800e58a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800e55a:	687b      	ldr	r3, [r7, #4]
 800e55c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e55e:	697a      	ldr	r2, [r7, #20]
 800e560:	4313      	orrs	r3, r2
 800e562:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800e564:	687b      	ldr	r3, [r7, #4]
 800e566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e568:	2b00      	cmp	r3, #0
 800e56a:	d00e      	beq.n	800e58a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 800e56c:	6878      	ldr	r0, [r7, #4]
 800e56e:	f000 fb3d 	bl	800ebec <DMA_CheckFifoParam>
 800e572:	4603      	mov	r3, r0
 800e574:	2b00      	cmp	r3, #0
 800e576:	d008      	beq.n	800e58a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800e578:	687b      	ldr	r3, [r7, #4]
 800e57a:	2240      	movs	r2, #64	; 0x40
 800e57c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800e57e:	687b      	ldr	r3, [r7, #4]
 800e580:	2201      	movs	r2, #1
 800e582:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800e586:	2301      	movs	r3, #1
 800e588:	e016      	b.n	800e5b8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	681b      	ldr	r3, [r3, #0]
 800e58e:	697a      	ldr	r2, [r7, #20]
 800e590:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800e592:	6878      	ldr	r0, [r7, #4]
 800e594:	f000 faf4 	bl	800eb80 <DMA_CalcBaseAndBitshift>
 800e598:	4603      	mov	r3, r0
 800e59a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e59c:	687b      	ldr	r3, [r7, #4]
 800e59e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e5a0:	223f      	movs	r2, #63	; 0x3f
 800e5a2:	409a      	lsls	r2, r3
 800e5a4:	68fb      	ldr	r3, [r7, #12]
 800e5a6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	2200      	movs	r2, #0
 800e5ac:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800e5ae:	687b      	ldr	r3, [r7, #4]
 800e5b0:	2201      	movs	r2, #1
 800e5b2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800e5b6:	2300      	movs	r3, #0
}
 800e5b8:	4618      	mov	r0, r3
 800e5ba:	3718      	adds	r7, #24
 800e5bc:	46bd      	mov	sp, r7
 800e5be:	bd80      	pop	{r7, pc}
 800e5c0:	f010803f 	.word	0xf010803f

0800e5c4 <HAL_DMA_DeInit>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 800e5c4:	b580      	push	{r7, lr}
 800e5c6:	b084      	sub	sp, #16
 800e5c8:	af00      	add	r7, sp, #0
 800e5ca:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800e5cc:	687b      	ldr	r3, [r7, #4]
 800e5ce:	2b00      	cmp	r3, #0
 800e5d0:	d101      	bne.n	800e5d6 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800e5d2:	2301      	movs	r3, #1
 800e5d4:	e050      	b.n	800e678 <HAL_DMA_DeInit+0xb4>
  }
  
  /* Check the DMA peripheral state */
  if(hdma->State == HAL_DMA_STATE_BUSY)
 800e5d6:	687b      	ldr	r3, [r7, #4]
 800e5d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e5dc:	b2db      	uxtb	r3, r3
 800e5de:	2b02      	cmp	r3, #2
 800e5e0:	d101      	bne.n	800e5e6 <HAL_DMA_DeInit+0x22>
  {
    /* Return error status */
    return HAL_BUSY;
 800e5e2:	2302      	movs	r3, #2
 800e5e4:	e048      	b.n	800e678 <HAL_DMA_DeInit+0xb4>

  /* Check the parameters */
  assert_param(IS_DMA_STREAM_ALL_INSTANCE(hdma->Instance));

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800e5e6:	687b      	ldr	r3, [r7, #4]
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	681a      	ldr	r2, [r3, #0]
 800e5ec:	687b      	ldr	r3, [r7, #4]
 800e5ee:	681b      	ldr	r3, [r3, #0]
 800e5f0:	f022 0201 	bic.w	r2, r2, #1
 800e5f4:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx control register */
  hdma->Instance->CR   = 0U;
 800e5f6:	687b      	ldr	r3, [r7, #4]
 800e5f8:	681b      	ldr	r3, [r3, #0]
 800e5fa:	2200      	movs	r2, #0
 800e5fc:	601a      	str	r2, [r3, #0]

  /* Reset DMA Streamx number of data to transfer register */
  hdma->Instance->NDTR = 0U;
 800e5fe:	687b      	ldr	r3, [r7, #4]
 800e600:	681b      	ldr	r3, [r3, #0]
 800e602:	2200      	movs	r2, #0
 800e604:	605a      	str	r2, [r3, #4]

  /* Reset DMA Streamx peripheral address register */
  hdma->Instance->PAR  = 0U;
 800e606:	687b      	ldr	r3, [r7, #4]
 800e608:	681b      	ldr	r3, [r3, #0]
 800e60a:	2200      	movs	r2, #0
 800e60c:	609a      	str	r2, [r3, #8]

  /* Reset DMA Streamx memory 0 address register */
  hdma->Instance->M0AR = 0U;
 800e60e:	687b      	ldr	r3, [r7, #4]
 800e610:	681b      	ldr	r3, [r3, #0]
 800e612:	2200      	movs	r2, #0
 800e614:	60da      	str	r2, [r3, #12]
  
  /* Reset DMA Streamx memory 1 address register */
  hdma->Instance->M1AR = 0U;
 800e616:	687b      	ldr	r3, [r7, #4]
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	2200      	movs	r2, #0
 800e61c:	611a      	str	r2, [r3, #16]
  
  /* Reset DMA Streamx FIFO control register */
  hdma->Instance->FCR  = 0x00000021U;
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	681b      	ldr	r3, [r3, #0]
 800e622:	2221      	movs	r2, #33	; 0x21
 800e624:	615a      	str	r2, [r3, #20]
  
  /* Get DMA steam Base Address */  
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800e626:	6878      	ldr	r0, [r7, #4]
 800e628:	f000 faaa 	bl	800eb80 <DMA_CalcBaseAndBitshift>
 800e62c:	4603      	mov	r3, r0
 800e62e:	60fb      	str	r3, [r7, #12]
  
  /* Clean all callbacks */
  hdma->XferCpltCallback = NULL;
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	2200      	movs	r2, #0
 800e634:	63da      	str	r2, [r3, #60]	; 0x3c
  hdma->XferHalfCpltCallback = NULL;
 800e636:	687b      	ldr	r3, [r7, #4]
 800e638:	2200      	movs	r2, #0
 800e63a:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 800e63c:	687b      	ldr	r3, [r7, #4]
 800e63e:	2200      	movs	r2, #0
 800e640:	645a      	str	r2, [r3, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800e642:	687b      	ldr	r3, [r7, #4]
 800e644:	2200      	movs	r2, #0
 800e646:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 800e648:	687b      	ldr	r3, [r7, #4]
 800e64a:	2200      	movs	r2, #0
 800e64c:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2200      	movs	r2, #0
 800e652:	651a      	str	r2, [r3, #80]	; 0x50

  /* Clear all interrupt flags at correct offset within the register */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e658:	223f      	movs	r2, #63	; 0x3f
 800e65a:	409a      	lsls	r2, r3
 800e65c:	68fb      	ldr	r3, [r7, #12]
 800e65e:	609a      	str	r2, [r3, #8]

  /* Reset the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e660:	687b      	ldr	r3, [r7, #4]
 800e662:	2200      	movs	r2, #0
 800e664:	655a      	str	r2, [r3, #84]	; 0x54

  /* Reset the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	2200      	movs	r2, #0
 800e66a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800e66e:	687b      	ldr	r3, [r7, #4]
 800e670:	2200      	movs	r2, #0
 800e672:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800e676:	2300      	movs	r3, #0
}
 800e678:	4618      	mov	r0, r3
 800e67a:	3710      	adds	r7, #16
 800e67c:	46bd      	mov	sp, r7
 800e67e:	bd80      	pop	{r7, pc}

0800e680 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800e680:	b580      	push	{r7, lr}
 800e682:	b086      	sub	sp, #24
 800e684:	af00      	add	r7, sp, #0
 800e686:	60f8      	str	r0, [r7, #12]
 800e688:	60b9      	str	r1, [r7, #8]
 800e68a:	607a      	str	r2, [r7, #4]
 800e68c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800e68e:	2300      	movs	r3, #0
 800e690:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e692:	68fb      	ldr	r3, [r7, #12]
 800e694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e696:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 800e698:	68fb      	ldr	r3, [r7, #12]
 800e69a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800e69e:	2b01      	cmp	r3, #1
 800e6a0:	d101      	bne.n	800e6a6 <HAL_DMA_Start_IT+0x26>
 800e6a2:	2302      	movs	r3, #2
 800e6a4:	e040      	b.n	800e728 <HAL_DMA_Start_IT+0xa8>
 800e6a6:	68fb      	ldr	r3, [r7, #12]
 800e6a8:	2201      	movs	r2, #1
 800e6aa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800e6ae:	68fb      	ldr	r3, [r7, #12]
 800e6b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e6b4:	b2db      	uxtb	r3, r3
 800e6b6:	2b01      	cmp	r3, #1
 800e6b8:	d12f      	bne.n	800e71a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	2202      	movs	r2, #2
 800e6be:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800e6c2:	68fb      	ldr	r3, [r7, #12]
 800e6c4:	2200      	movs	r2, #0
 800e6c6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800e6c8:	683b      	ldr	r3, [r7, #0]
 800e6ca:	687a      	ldr	r2, [r7, #4]
 800e6cc:	68b9      	ldr	r1, [r7, #8]
 800e6ce:	68f8      	ldr	r0, [r7, #12]
 800e6d0:	f000 fa28 	bl	800eb24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e6d4:	68fb      	ldr	r3, [r7, #12]
 800e6d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e6d8:	223f      	movs	r2, #63	; 0x3f
 800e6da:	409a      	lsls	r2, r3
 800e6dc:	693b      	ldr	r3, [r7, #16]
 800e6de:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800e6e0:	68fb      	ldr	r3, [r7, #12]
 800e6e2:	681b      	ldr	r3, [r3, #0]
 800e6e4:	681a      	ldr	r2, [r3, #0]
 800e6e6:	68fb      	ldr	r3, [r7, #12]
 800e6e8:	681b      	ldr	r3, [r3, #0]
 800e6ea:	f042 0216 	orr.w	r2, r2, #22
 800e6ee:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800e6f0:	68fb      	ldr	r3, [r7, #12]
 800e6f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e6f4:	2b00      	cmp	r3, #0
 800e6f6:	d007      	beq.n	800e708 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800e6f8:	68fb      	ldr	r3, [r7, #12]
 800e6fa:	681b      	ldr	r3, [r3, #0]
 800e6fc:	681a      	ldr	r2, [r3, #0]
 800e6fe:	68fb      	ldr	r3, [r7, #12]
 800e700:	681b      	ldr	r3, [r3, #0]
 800e702:	f042 0208 	orr.w	r2, r2, #8
 800e706:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800e708:	68fb      	ldr	r3, [r7, #12]
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	681a      	ldr	r2, [r3, #0]
 800e70e:	68fb      	ldr	r3, [r7, #12]
 800e710:	681b      	ldr	r3, [r3, #0]
 800e712:	f042 0201 	orr.w	r2, r2, #1
 800e716:	601a      	str	r2, [r3, #0]
 800e718:	e005      	b.n	800e726 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	2200      	movs	r2, #0
 800e71e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800e722:	2302      	movs	r3, #2
 800e724:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800e726:	7dfb      	ldrb	r3, [r7, #23]
}
 800e728:	4618      	mov	r0, r3
 800e72a:	3718      	adds	r7, #24
 800e72c:	46bd      	mov	sp, r7
 800e72e:	bd80      	pop	{r7, pc}

0800e730 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800e730:	b580      	push	{r7, lr}
 800e732:	b084      	sub	sp, #16
 800e734:	af00      	add	r7, sp, #0
 800e736:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e73c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800e73e:	f7fe fc77 	bl	800d030 <HAL_GetTick>
 800e742:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800e744:	687b      	ldr	r3, [r7, #4]
 800e746:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e74a:	b2db      	uxtb	r3, r3
 800e74c:	2b02      	cmp	r3, #2
 800e74e:	d008      	beq.n	800e762 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800e750:	687b      	ldr	r3, [r7, #4]
 800e752:	2280      	movs	r2, #128	; 0x80
 800e754:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2200      	movs	r2, #0
 800e75a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800e75e:	2301      	movs	r3, #1
 800e760:	e052      	b.n	800e808 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	681a      	ldr	r2, [r3, #0]
 800e768:	687b      	ldr	r3, [r7, #4]
 800e76a:	681b      	ldr	r3, [r3, #0]
 800e76c:	f022 0216 	bic.w	r2, r2, #22
 800e770:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	695a      	ldr	r2, [r3, #20]
 800e778:	687b      	ldr	r3, [r7, #4]
 800e77a:	681b      	ldr	r3, [r3, #0]
 800e77c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e780:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800e782:	687b      	ldr	r3, [r7, #4]
 800e784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e786:	2b00      	cmp	r3, #0
 800e788:	d103      	bne.n	800e792 <HAL_DMA_Abort+0x62>
 800e78a:	687b      	ldr	r3, [r7, #4]
 800e78c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e78e:	2b00      	cmp	r3, #0
 800e790:	d007      	beq.n	800e7a2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e792:	687b      	ldr	r3, [r7, #4]
 800e794:	681b      	ldr	r3, [r3, #0]
 800e796:	681a      	ldr	r2, [r3, #0]
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	681b      	ldr	r3, [r3, #0]
 800e79c:	f022 0208 	bic.w	r2, r2, #8
 800e7a0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	681a      	ldr	r2, [r3, #0]
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	f022 0201 	bic.w	r2, r2, #1
 800e7b0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e7b2:	e013      	b.n	800e7dc <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800e7b4:	f7fe fc3c 	bl	800d030 <HAL_GetTick>
 800e7b8:	4602      	mov	r2, r0
 800e7ba:	68bb      	ldr	r3, [r7, #8]
 800e7bc:	1ad3      	subs	r3, r2, r3
 800e7be:	2b05      	cmp	r3, #5
 800e7c0:	d90c      	bls.n	800e7dc <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2220      	movs	r2, #32
 800e7c6:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800e7c8:	687b      	ldr	r3, [r7, #4]
 800e7ca:	2203      	movs	r2, #3
 800e7cc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800e7d0:	687b      	ldr	r3, [r7, #4]
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800e7d8:	2303      	movs	r3, #3
 800e7da:	e015      	b.n	800e808 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800e7dc:	687b      	ldr	r3, [r7, #4]
 800e7de:	681b      	ldr	r3, [r3, #0]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	f003 0301 	and.w	r3, r3, #1
 800e7e6:	2b00      	cmp	r3, #0
 800e7e8:	d1e4      	bne.n	800e7b4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e7ea:	687b      	ldr	r3, [r7, #4]
 800e7ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e7ee:	223f      	movs	r2, #63	; 0x3f
 800e7f0:	409a      	lsls	r2, r3
 800e7f2:	68fb      	ldr	r3, [r7, #12]
 800e7f4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800e7f6:	687b      	ldr	r3, [r7, #4]
 800e7f8:	2201      	movs	r2, #1
 800e7fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	2200      	movs	r2, #0
 800e802:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800e806:	2300      	movs	r3, #0
}
 800e808:	4618      	mov	r0, r3
 800e80a:	3710      	adds	r7, #16
 800e80c:	46bd      	mov	sp, r7
 800e80e:	bd80      	pop	{r7, pc}

0800e810 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800e810:	b580      	push	{r7, lr}
 800e812:	b086      	sub	sp, #24
 800e814:	af00      	add	r7, sp, #0
 800e816:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800e818:	2300      	movs	r3, #0
 800e81a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800e81c:	4b8e      	ldr	r3, [pc, #568]	; (800ea58 <HAL_DMA_IRQHandler+0x248>)
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	4a8e      	ldr	r2, [pc, #568]	; (800ea5c <HAL_DMA_IRQHandler+0x24c>)
 800e822:	fba2 2303 	umull	r2, r3, r2, r3
 800e826:	0a9b      	lsrs	r3, r3, #10
 800e828:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800e82a:	687b      	ldr	r3, [r7, #4]
 800e82c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800e82e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800e830:	693b      	ldr	r3, [r7, #16]
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800e836:	687b      	ldr	r3, [r7, #4]
 800e838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e83a:	2208      	movs	r2, #8
 800e83c:	409a      	lsls	r2, r3
 800e83e:	68fb      	ldr	r3, [r7, #12]
 800e840:	4013      	ands	r3, r2
 800e842:	2b00      	cmp	r3, #0
 800e844:	d01a      	beq.n	800e87c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800e846:	687b      	ldr	r3, [r7, #4]
 800e848:	681b      	ldr	r3, [r3, #0]
 800e84a:	681b      	ldr	r3, [r3, #0]
 800e84c:	f003 0304 	and.w	r3, r3, #4
 800e850:	2b00      	cmp	r3, #0
 800e852:	d013      	beq.n	800e87c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800e854:	687b      	ldr	r3, [r7, #4]
 800e856:	681b      	ldr	r3, [r3, #0]
 800e858:	681a      	ldr	r2, [r3, #0]
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	f022 0204 	bic.w	r2, r2, #4
 800e862:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e868:	2208      	movs	r2, #8
 800e86a:	409a      	lsls	r2, r3
 800e86c:	693b      	ldr	r3, [r7, #16]
 800e86e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e874:	f043 0201 	orr.w	r2, r3, #1
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800e87c:	687b      	ldr	r3, [r7, #4]
 800e87e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e880:	2201      	movs	r2, #1
 800e882:	409a      	lsls	r2, r3
 800e884:	68fb      	ldr	r3, [r7, #12]
 800e886:	4013      	ands	r3, r2
 800e888:	2b00      	cmp	r3, #0
 800e88a:	d012      	beq.n	800e8b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800e88c:	687b      	ldr	r3, [r7, #4]
 800e88e:	681b      	ldr	r3, [r3, #0]
 800e890:	695b      	ldr	r3, [r3, #20]
 800e892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e896:	2b00      	cmp	r3, #0
 800e898:	d00b      	beq.n	800e8b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800e89a:	687b      	ldr	r3, [r7, #4]
 800e89c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e89e:	2201      	movs	r2, #1
 800e8a0:	409a      	lsls	r2, r3
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800e8a6:	687b      	ldr	r3, [r7, #4]
 800e8a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8aa:	f043 0202 	orr.w	r2, r3, #2
 800e8ae:	687b      	ldr	r3, [r7, #4]
 800e8b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e8b6:	2204      	movs	r2, #4
 800e8b8:	409a      	lsls	r2, r3
 800e8ba:	68fb      	ldr	r3, [r7, #12]
 800e8bc:	4013      	ands	r3, r2
 800e8be:	2b00      	cmp	r3, #0
 800e8c0:	d012      	beq.n	800e8e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800e8c2:	687b      	ldr	r3, [r7, #4]
 800e8c4:	681b      	ldr	r3, [r3, #0]
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	f003 0302 	and.w	r3, r3, #2
 800e8cc:	2b00      	cmp	r3, #0
 800e8ce:	d00b      	beq.n	800e8e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800e8d0:	687b      	ldr	r3, [r7, #4]
 800e8d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e8d4:	2204      	movs	r2, #4
 800e8d6:	409a      	lsls	r2, r3
 800e8d8:	693b      	ldr	r3, [r7, #16]
 800e8da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800e8dc:	687b      	ldr	r3, [r7, #4]
 800e8de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e8e0:	f043 0204 	orr.w	r2, r3, #4
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800e8e8:	687b      	ldr	r3, [r7, #4]
 800e8ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e8ec:	2210      	movs	r2, #16
 800e8ee:	409a      	lsls	r2, r3
 800e8f0:	68fb      	ldr	r3, [r7, #12]
 800e8f2:	4013      	ands	r3, r2
 800e8f4:	2b00      	cmp	r3, #0
 800e8f6:	d043      	beq.n	800e980 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800e8f8:	687b      	ldr	r3, [r7, #4]
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	681b      	ldr	r3, [r3, #0]
 800e8fe:	f003 0308 	and.w	r3, r3, #8
 800e902:	2b00      	cmp	r3, #0
 800e904:	d03c      	beq.n	800e980 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800e906:	687b      	ldr	r3, [r7, #4]
 800e908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e90a:	2210      	movs	r2, #16
 800e90c:	409a      	lsls	r2, r3
 800e90e:	693b      	ldr	r3, [r7, #16]
 800e910:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800e912:	687b      	ldr	r3, [r7, #4]
 800e914:	681b      	ldr	r3, [r3, #0]
 800e916:	681b      	ldr	r3, [r3, #0]
 800e918:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800e91c:	2b00      	cmp	r3, #0
 800e91e:	d018      	beq.n	800e952 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800e92a:	2b00      	cmp	r3, #0
 800e92c:	d108      	bne.n	800e940 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800e92e:	687b      	ldr	r3, [r7, #4]
 800e930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e932:	2b00      	cmp	r3, #0
 800e934:	d024      	beq.n	800e980 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800e936:	687b      	ldr	r3, [r7, #4]
 800e938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e93a:	6878      	ldr	r0, [r7, #4]
 800e93c:	4798      	blx	r3
 800e93e:	e01f      	b.n	800e980 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800e940:	687b      	ldr	r3, [r7, #4]
 800e942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e944:	2b00      	cmp	r3, #0
 800e946:	d01b      	beq.n	800e980 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800e948:	687b      	ldr	r3, [r7, #4]
 800e94a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e94c:	6878      	ldr	r0, [r7, #4]
 800e94e:	4798      	blx	r3
 800e950:	e016      	b.n	800e980 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800e952:	687b      	ldr	r3, [r7, #4]
 800e954:	681b      	ldr	r3, [r3, #0]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800e95c:	2b00      	cmp	r3, #0
 800e95e:	d107      	bne.n	800e970 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e960:	687b      	ldr	r3, [r7, #4]
 800e962:	681b      	ldr	r3, [r3, #0]
 800e964:	681a      	ldr	r2, [r3, #0]
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	681b      	ldr	r3, [r3, #0]
 800e96a:	f022 0208 	bic.w	r2, r2, #8
 800e96e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e974:	2b00      	cmp	r3, #0
 800e976:	d003      	beq.n	800e980 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800e978:	687b      	ldr	r3, [r7, #4]
 800e97a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e97c:	6878      	ldr	r0, [r7, #4]
 800e97e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e984:	2220      	movs	r2, #32
 800e986:	409a      	lsls	r2, r3
 800e988:	68fb      	ldr	r3, [r7, #12]
 800e98a:	4013      	ands	r3, r2
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	f000 808f 	beq.w	800eab0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800e992:	687b      	ldr	r3, [r7, #4]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	f003 0310 	and.w	r3, r3, #16
 800e99c:	2b00      	cmp	r3, #0
 800e99e:	f000 8087 	beq.w	800eab0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e9a6:	2220      	movs	r2, #32
 800e9a8:	409a      	lsls	r2, r3
 800e9aa:	693b      	ldr	r3, [r7, #16]
 800e9ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800e9ae:	687b      	ldr	r3, [r7, #4]
 800e9b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800e9b4:	b2db      	uxtb	r3, r3
 800e9b6:	2b05      	cmp	r3, #5
 800e9b8:	d136      	bne.n	800ea28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800e9ba:	687b      	ldr	r3, [r7, #4]
 800e9bc:	681b      	ldr	r3, [r3, #0]
 800e9be:	681a      	ldr	r2, [r3, #0]
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	681b      	ldr	r3, [r3, #0]
 800e9c4:	f022 0216 	bic.w	r2, r2, #22
 800e9c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	681b      	ldr	r3, [r3, #0]
 800e9ce:	695a      	ldr	r2, [r3, #20]
 800e9d0:	687b      	ldr	r3, [r7, #4]
 800e9d2:	681b      	ldr	r3, [r3, #0]
 800e9d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800e9d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800e9da:	687b      	ldr	r3, [r7, #4]
 800e9dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800e9de:	2b00      	cmp	r3, #0
 800e9e0:	d103      	bne.n	800e9ea <HAL_DMA_IRQHandler+0x1da>
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	d007      	beq.n	800e9fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	681b      	ldr	r3, [r3, #0]
 800e9ee:	681a      	ldr	r2, [r3, #0]
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	f022 0208 	bic.w	r2, r2, #8
 800e9f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800e9fe:	223f      	movs	r2, #63	; 0x3f
 800ea00:	409a      	lsls	r2, r3
 800ea02:	693b      	ldr	r3, [r7, #16]
 800ea04:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2201      	movs	r2, #1
 800ea0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2200      	movs	r2, #0
 800ea12:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea1a:	2b00      	cmp	r3, #0
 800ea1c:	d07e      	beq.n	800eb1c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800ea1e:	687b      	ldr	r3, [r7, #4]
 800ea20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ea22:	6878      	ldr	r0, [r7, #4]
 800ea24:	4798      	blx	r3
        }
        return;
 800ea26:	e079      	b.n	800eb1c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800ea28:	687b      	ldr	r3, [r7, #4]
 800ea2a:	681b      	ldr	r3, [r3, #0]
 800ea2c:	681b      	ldr	r3, [r3, #0]
 800ea2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d01d      	beq.n	800ea72 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800ea36:	687b      	ldr	r3, [r7, #4]
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	681b      	ldr	r3, [r3, #0]
 800ea3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800ea40:	2b00      	cmp	r3, #0
 800ea42:	d10d      	bne.n	800ea60 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea48:	2b00      	cmp	r3, #0
 800ea4a:	d031      	beq.n	800eab0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800ea4c:	687b      	ldr	r3, [r7, #4]
 800ea4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ea50:	6878      	ldr	r0, [r7, #4]
 800ea52:	4798      	blx	r3
 800ea54:	e02c      	b.n	800eab0 <HAL_DMA_IRQHandler+0x2a0>
 800ea56:	bf00      	nop
 800ea58:	200001d4 	.word	0x200001d4
 800ea5c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800ea60:	687b      	ldr	r3, [r7, #4]
 800ea62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea64:	2b00      	cmp	r3, #0
 800ea66:	d023      	beq.n	800eab0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ea6c:	6878      	ldr	r0, [r7, #4]
 800ea6e:	4798      	blx	r3
 800ea70:	e01e      	b.n	800eab0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	681b      	ldr	r3, [r3, #0]
 800ea78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ea7c:	2b00      	cmp	r3, #0
 800ea7e:	d10f      	bne.n	800eaa0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	681b      	ldr	r3, [r3, #0]
 800ea84:	681a      	ldr	r2, [r3, #0]
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	f022 0210 	bic.w	r2, r2, #16
 800ea8e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2201      	movs	r2, #1
 800ea94:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800ea98:	687b      	ldr	r3, [r7, #4]
 800ea9a:	2200      	movs	r2, #0
 800ea9c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800eaa0:	687b      	ldr	r3, [r7, #4]
 800eaa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaa4:	2b00      	cmp	r3, #0
 800eaa6:	d003      	beq.n	800eab0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800eaac:	6878      	ldr	r0, [r7, #4]
 800eaae:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eab4:	2b00      	cmp	r3, #0
 800eab6:	d032      	beq.n	800eb1e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800eab8:	687b      	ldr	r3, [r7, #4]
 800eaba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800eabc:	f003 0301 	and.w	r3, r3, #1
 800eac0:	2b00      	cmp	r3, #0
 800eac2:	d022      	beq.n	800eb0a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800eac4:	687b      	ldr	r3, [r7, #4]
 800eac6:	2205      	movs	r2, #5
 800eac8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800eacc:	687b      	ldr	r3, [r7, #4]
 800eace:	681b      	ldr	r3, [r3, #0]
 800ead0:	681a      	ldr	r2, [r3, #0]
 800ead2:	687b      	ldr	r3, [r7, #4]
 800ead4:	681b      	ldr	r3, [r3, #0]
 800ead6:	f022 0201 	bic.w	r2, r2, #1
 800eada:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800eadc:	68bb      	ldr	r3, [r7, #8]
 800eade:	3301      	adds	r3, #1
 800eae0:	60bb      	str	r3, [r7, #8]
 800eae2:	697a      	ldr	r2, [r7, #20]
 800eae4:	429a      	cmp	r2, r3
 800eae6:	d307      	bcc.n	800eaf8 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800eae8:	687b      	ldr	r3, [r7, #4]
 800eaea:	681b      	ldr	r3, [r3, #0]
 800eaec:	681b      	ldr	r3, [r3, #0]
 800eaee:	f003 0301 	and.w	r3, r3, #1
 800eaf2:	2b00      	cmp	r3, #0
 800eaf4:	d1f2      	bne.n	800eadc <HAL_DMA_IRQHandler+0x2cc>
 800eaf6:	e000      	b.n	800eafa <HAL_DMA_IRQHandler+0x2ea>
          break;
 800eaf8:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800eafa:	687b      	ldr	r3, [r7, #4]
 800eafc:	2201      	movs	r2, #1
 800eafe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	2200      	movs	r2, #0
 800eb06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800eb0a:	687b      	ldr	r3, [r7, #4]
 800eb0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb0e:	2b00      	cmp	r3, #0
 800eb10:	d005      	beq.n	800eb1e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eb16:	6878      	ldr	r0, [r7, #4]
 800eb18:	4798      	blx	r3
 800eb1a:	e000      	b.n	800eb1e <HAL_DMA_IRQHandler+0x30e>
        return;
 800eb1c:	bf00      	nop
    }
  }
}
 800eb1e:	3718      	adds	r7, #24
 800eb20:	46bd      	mov	sp, r7
 800eb22:	bd80      	pop	{r7, pc}

0800eb24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800eb24:	b480      	push	{r7}
 800eb26:	b085      	sub	sp, #20
 800eb28:	af00      	add	r7, sp, #0
 800eb2a:	60f8      	str	r0, [r7, #12]
 800eb2c:	60b9      	str	r1, [r7, #8]
 800eb2e:	607a      	str	r2, [r7, #4]
 800eb30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800eb32:	68fb      	ldr	r3, [r7, #12]
 800eb34:	681b      	ldr	r3, [r3, #0]
 800eb36:	681a      	ldr	r2, [r3, #0]
 800eb38:	68fb      	ldr	r3, [r7, #12]
 800eb3a:	681b      	ldr	r3, [r3, #0]
 800eb3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800eb40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800eb42:	68fb      	ldr	r3, [r7, #12]
 800eb44:	681b      	ldr	r3, [r3, #0]
 800eb46:	683a      	ldr	r2, [r7, #0]
 800eb48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800eb4a:	68fb      	ldr	r3, [r7, #12]
 800eb4c:	689b      	ldr	r3, [r3, #8]
 800eb4e:	2b40      	cmp	r3, #64	; 0x40
 800eb50:	d108      	bne.n	800eb64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800eb52:	68fb      	ldr	r3, [r7, #12]
 800eb54:	681b      	ldr	r3, [r3, #0]
 800eb56:	687a      	ldr	r2, [r7, #4]
 800eb58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800eb5a:	68fb      	ldr	r3, [r7, #12]
 800eb5c:	681b      	ldr	r3, [r3, #0]
 800eb5e:	68ba      	ldr	r2, [r7, #8]
 800eb60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800eb62:	e007      	b.n	800eb74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800eb64:	68fb      	ldr	r3, [r7, #12]
 800eb66:	681b      	ldr	r3, [r3, #0]
 800eb68:	68ba      	ldr	r2, [r7, #8]
 800eb6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800eb6c:	68fb      	ldr	r3, [r7, #12]
 800eb6e:	681b      	ldr	r3, [r3, #0]
 800eb70:	687a      	ldr	r2, [r7, #4]
 800eb72:	60da      	str	r2, [r3, #12]
}
 800eb74:	bf00      	nop
 800eb76:	3714      	adds	r7, #20
 800eb78:	46bd      	mov	sp, r7
 800eb7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb7e:	4770      	bx	lr

0800eb80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800eb80:	b480      	push	{r7}
 800eb82:	b085      	sub	sp, #20
 800eb84:	af00      	add	r7, sp, #0
 800eb86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	b2db      	uxtb	r3, r3
 800eb8e:	3b10      	subs	r3, #16
 800eb90:	4a14      	ldr	r2, [pc, #80]	; (800ebe4 <DMA_CalcBaseAndBitshift+0x64>)
 800eb92:	fba2 2303 	umull	r2, r3, r2, r3
 800eb96:	091b      	lsrs	r3, r3, #4
 800eb98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800eb9a:	4a13      	ldr	r2, [pc, #76]	; (800ebe8 <DMA_CalcBaseAndBitshift+0x68>)
 800eb9c:	68fb      	ldr	r3, [r7, #12]
 800eb9e:	4413      	add	r3, r2
 800eba0:	781b      	ldrb	r3, [r3, #0]
 800eba2:	461a      	mov	r2, r3
 800eba4:	687b      	ldr	r3, [r7, #4]
 800eba6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800eba8:	68fb      	ldr	r3, [r7, #12]
 800ebaa:	2b03      	cmp	r3, #3
 800ebac:	d909      	bls.n	800ebc2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	681b      	ldr	r3, [r3, #0]
 800ebb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ebb6:	f023 0303 	bic.w	r3, r3, #3
 800ebba:	1d1a      	adds	r2, r3, #4
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	659a      	str	r2, [r3, #88]	; 0x58
 800ebc0:	e007      	b.n	800ebd2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	681b      	ldr	r3, [r3, #0]
 800ebc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800ebca:	f023 0303 	bic.w	r3, r3, #3
 800ebce:	687a      	ldr	r2, [r7, #4]
 800ebd0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800ebd2:	687b      	ldr	r3, [r7, #4]
 800ebd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800ebd6:	4618      	mov	r0, r3
 800ebd8:	3714      	adds	r7, #20
 800ebda:	46bd      	mov	sp, r7
 800ebdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe0:	4770      	bx	lr
 800ebe2:	bf00      	nop
 800ebe4:	aaaaaaab 	.word	0xaaaaaaab
 800ebe8:	0801a8e0 	.word	0x0801a8e0

0800ebec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800ebec:	b480      	push	{r7}
 800ebee:	b085      	sub	sp, #20
 800ebf0:	af00      	add	r7, sp, #0
 800ebf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800ebf4:	2300      	movs	r3, #0
 800ebf6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ebfc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800ebfe:	687b      	ldr	r3, [r7, #4]
 800ec00:	699b      	ldr	r3, [r3, #24]
 800ec02:	2b00      	cmp	r3, #0
 800ec04:	d11f      	bne.n	800ec46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800ec06:	68bb      	ldr	r3, [r7, #8]
 800ec08:	2b03      	cmp	r3, #3
 800ec0a:	d856      	bhi.n	800ecba <DMA_CheckFifoParam+0xce>
 800ec0c:	a201      	add	r2, pc, #4	; (adr r2, 800ec14 <DMA_CheckFifoParam+0x28>)
 800ec0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec12:	bf00      	nop
 800ec14:	0800ec25 	.word	0x0800ec25
 800ec18:	0800ec37 	.word	0x0800ec37
 800ec1c:	0800ec25 	.word	0x0800ec25
 800ec20:	0800ecbb 	.word	0x0800ecbb
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ec24:	687b      	ldr	r3, [r7, #4]
 800ec26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ec2c:	2b00      	cmp	r3, #0
 800ec2e:	d046      	beq.n	800ecbe <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800ec30:	2301      	movs	r3, #1
 800ec32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ec34:	e043      	b.n	800ecbe <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ec3e:	d140      	bne.n	800ecc2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800ec40:	2301      	movs	r3, #1
 800ec42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ec44:	e03d      	b.n	800ecc2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	699b      	ldr	r3, [r3, #24]
 800ec4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ec4e:	d121      	bne.n	800ec94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800ec50:	68bb      	ldr	r3, [r7, #8]
 800ec52:	2b03      	cmp	r3, #3
 800ec54:	d837      	bhi.n	800ecc6 <DMA_CheckFifoParam+0xda>
 800ec56:	a201      	add	r2, pc, #4	; (adr r2, 800ec5c <DMA_CheckFifoParam+0x70>)
 800ec58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ec5c:	0800ec6d 	.word	0x0800ec6d
 800ec60:	0800ec73 	.word	0x0800ec73
 800ec64:	0800ec6d 	.word	0x0800ec6d
 800ec68:	0800ec85 	.word	0x0800ec85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800ec6c:	2301      	movs	r3, #1
 800ec6e:	73fb      	strb	r3, [r7, #15]
      break;
 800ec70:	e030      	b.n	800ecd4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ec7a:	2b00      	cmp	r3, #0
 800ec7c:	d025      	beq.n	800ecca <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800ec7e:	2301      	movs	r3, #1
 800ec80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800ec82:	e022      	b.n	800ecca <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ec88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800ec8c:	d11f      	bne.n	800ecce <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800ec8e:	2301      	movs	r3, #1
 800ec90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800ec92:	e01c      	b.n	800ecce <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800ec94:	68bb      	ldr	r3, [r7, #8]
 800ec96:	2b02      	cmp	r3, #2
 800ec98:	d903      	bls.n	800eca2 <DMA_CheckFifoParam+0xb6>
 800ec9a:	68bb      	ldr	r3, [r7, #8]
 800ec9c:	2b03      	cmp	r3, #3
 800ec9e:	d003      	beq.n	800eca8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800eca0:	e018      	b.n	800ecd4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800eca2:	2301      	movs	r3, #1
 800eca4:	73fb      	strb	r3, [r7, #15]
      break;
 800eca6:	e015      	b.n	800ecd4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800eca8:	687b      	ldr	r3, [r7, #4]
 800ecaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ecac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ecb0:	2b00      	cmp	r3, #0
 800ecb2:	d00e      	beq.n	800ecd2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800ecb4:	2301      	movs	r3, #1
 800ecb6:	73fb      	strb	r3, [r7, #15]
      break;
 800ecb8:	e00b      	b.n	800ecd2 <DMA_CheckFifoParam+0xe6>
      break;
 800ecba:	bf00      	nop
 800ecbc:	e00a      	b.n	800ecd4 <DMA_CheckFifoParam+0xe8>
      break;
 800ecbe:	bf00      	nop
 800ecc0:	e008      	b.n	800ecd4 <DMA_CheckFifoParam+0xe8>
      break;
 800ecc2:	bf00      	nop
 800ecc4:	e006      	b.n	800ecd4 <DMA_CheckFifoParam+0xe8>
      break;
 800ecc6:	bf00      	nop
 800ecc8:	e004      	b.n	800ecd4 <DMA_CheckFifoParam+0xe8>
      break;
 800ecca:	bf00      	nop
 800eccc:	e002      	b.n	800ecd4 <DMA_CheckFifoParam+0xe8>
      break;   
 800ecce:	bf00      	nop
 800ecd0:	e000      	b.n	800ecd4 <DMA_CheckFifoParam+0xe8>
      break;
 800ecd2:	bf00      	nop
    }
  } 
  
  return status; 
 800ecd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800ecd6:	4618      	mov	r0, r3
 800ecd8:	3714      	adds	r7, #20
 800ecda:	46bd      	mov	sp, r7
 800ecdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ece0:	4770      	bx	lr
 800ece2:	bf00      	nop

0800ece4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800ece4:	b480      	push	{r7}
 800ece6:	b089      	sub	sp, #36	; 0x24
 800ece8:	af00      	add	r7, sp, #0
 800ecea:	6078      	str	r0, [r7, #4]
 800ecec:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800ecf2:	2300      	movs	r3, #0
 800ecf4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800ecf6:	2300      	movs	r3, #0
 800ecf8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800ecfa:	2300      	movs	r3, #0
 800ecfc:	61fb      	str	r3, [r7, #28]
 800ecfe:	e177      	b.n	800eff0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800ed00:	2201      	movs	r2, #1
 800ed02:	69fb      	ldr	r3, [r7, #28]
 800ed04:	fa02 f303 	lsl.w	r3, r2, r3
 800ed08:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800ed0a:	683b      	ldr	r3, [r7, #0]
 800ed0c:	681b      	ldr	r3, [r3, #0]
 800ed0e:	697a      	ldr	r2, [r7, #20]
 800ed10:	4013      	ands	r3, r2
 800ed12:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800ed14:	693a      	ldr	r2, [r7, #16]
 800ed16:	697b      	ldr	r3, [r7, #20]
 800ed18:	429a      	cmp	r2, r3
 800ed1a:	f040 8166 	bne.w	800efea <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ed1e:	683b      	ldr	r3, [r7, #0]
 800ed20:	685b      	ldr	r3, [r3, #4]
 800ed22:	f003 0303 	and.w	r3, r3, #3
 800ed26:	2b01      	cmp	r3, #1
 800ed28:	d005      	beq.n	800ed36 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800ed2a:	683b      	ldr	r3, [r7, #0]
 800ed2c:	685b      	ldr	r3, [r3, #4]
 800ed2e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800ed32:	2b02      	cmp	r3, #2
 800ed34:	d130      	bne.n	800ed98 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	689b      	ldr	r3, [r3, #8]
 800ed3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800ed3c:	69fb      	ldr	r3, [r7, #28]
 800ed3e:	005b      	lsls	r3, r3, #1
 800ed40:	2203      	movs	r2, #3
 800ed42:	fa02 f303 	lsl.w	r3, r2, r3
 800ed46:	43db      	mvns	r3, r3
 800ed48:	69ba      	ldr	r2, [r7, #24]
 800ed4a:	4013      	ands	r3, r2
 800ed4c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800ed4e:	683b      	ldr	r3, [r7, #0]
 800ed50:	68da      	ldr	r2, [r3, #12]
 800ed52:	69fb      	ldr	r3, [r7, #28]
 800ed54:	005b      	lsls	r3, r3, #1
 800ed56:	fa02 f303 	lsl.w	r3, r2, r3
 800ed5a:	69ba      	ldr	r2, [r7, #24]
 800ed5c:	4313      	orrs	r3, r2
 800ed5e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	69ba      	ldr	r2, [r7, #24]
 800ed64:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800ed66:	687b      	ldr	r3, [r7, #4]
 800ed68:	685b      	ldr	r3, [r3, #4]
 800ed6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800ed6c:	2201      	movs	r2, #1
 800ed6e:	69fb      	ldr	r3, [r7, #28]
 800ed70:	fa02 f303 	lsl.w	r3, r2, r3
 800ed74:	43db      	mvns	r3, r3
 800ed76:	69ba      	ldr	r2, [r7, #24]
 800ed78:	4013      	ands	r3, r2
 800ed7a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	685b      	ldr	r3, [r3, #4]
 800ed80:	091b      	lsrs	r3, r3, #4
 800ed82:	f003 0201 	and.w	r2, r3, #1
 800ed86:	69fb      	ldr	r3, [r7, #28]
 800ed88:	fa02 f303 	lsl.w	r3, r2, r3
 800ed8c:	69ba      	ldr	r2, [r7, #24]
 800ed8e:	4313      	orrs	r3, r2
 800ed90:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800ed92:	687b      	ldr	r3, [r7, #4]
 800ed94:	69ba      	ldr	r2, [r7, #24]
 800ed96:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800ed98:	683b      	ldr	r3, [r7, #0]
 800ed9a:	685b      	ldr	r3, [r3, #4]
 800ed9c:	f003 0303 	and.w	r3, r3, #3
 800eda0:	2b03      	cmp	r3, #3
 800eda2:	d017      	beq.n	800edd4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	68db      	ldr	r3, [r3, #12]
 800eda8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800edaa:	69fb      	ldr	r3, [r7, #28]
 800edac:	005b      	lsls	r3, r3, #1
 800edae:	2203      	movs	r2, #3
 800edb0:	fa02 f303 	lsl.w	r3, r2, r3
 800edb4:	43db      	mvns	r3, r3
 800edb6:	69ba      	ldr	r2, [r7, #24]
 800edb8:	4013      	ands	r3, r2
 800edba:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800edbc:	683b      	ldr	r3, [r7, #0]
 800edbe:	689a      	ldr	r2, [r3, #8]
 800edc0:	69fb      	ldr	r3, [r7, #28]
 800edc2:	005b      	lsls	r3, r3, #1
 800edc4:	fa02 f303 	lsl.w	r3, r2, r3
 800edc8:	69ba      	ldr	r2, [r7, #24]
 800edca:	4313      	orrs	r3, r2
 800edcc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800edce:	687b      	ldr	r3, [r7, #4]
 800edd0:	69ba      	ldr	r2, [r7, #24]
 800edd2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800edd4:	683b      	ldr	r3, [r7, #0]
 800edd6:	685b      	ldr	r3, [r3, #4]
 800edd8:	f003 0303 	and.w	r3, r3, #3
 800eddc:	2b02      	cmp	r3, #2
 800edde:	d123      	bne.n	800ee28 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800ede0:	69fb      	ldr	r3, [r7, #28]
 800ede2:	08da      	lsrs	r2, r3, #3
 800ede4:	687b      	ldr	r3, [r7, #4]
 800ede6:	3208      	adds	r2, #8
 800ede8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800edec:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800edee:	69fb      	ldr	r3, [r7, #28]
 800edf0:	f003 0307 	and.w	r3, r3, #7
 800edf4:	009b      	lsls	r3, r3, #2
 800edf6:	220f      	movs	r2, #15
 800edf8:	fa02 f303 	lsl.w	r3, r2, r3
 800edfc:	43db      	mvns	r3, r3
 800edfe:	69ba      	ldr	r2, [r7, #24]
 800ee00:	4013      	ands	r3, r2
 800ee02:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800ee04:	683b      	ldr	r3, [r7, #0]
 800ee06:	691a      	ldr	r2, [r3, #16]
 800ee08:	69fb      	ldr	r3, [r7, #28]
 800ee0a:	f003 0307 	and.w	r3, r3, #7
 800ee0e:	009b      	lsls	r3, r3, #2
 800ee10:	fa02 f303 	lsl.w	r3, r2, r3
 800ee14:	69ba      	ldr	r2, [r7, #24]
 800ee16:	4313      	orrs	r3, r2
 800ee18:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800ee1a:	69fb      	ldr	r3, [r7, #28]
 800ee1c:	08da      	lsrs	r2, r3, #3
 800ee1e:	687b      	ldr	r3, [r7, #4]
 800ee20:	3208      	adds	r2, #8
 800ee22:	69b9      	ldr	r1, [r7, #24]
 800ee24:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800ee28:	687b      	ldr	r3, [r7, #4]
 800ee2a:	681b      	ldr	r3, [r3, #0]
 800ee2c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800ee2e:	69fb      	ldr	r3, [r7, #28]
 800ee30:	005b      	lsls	r3, r3, #1
 800ee32:	2203      	movs	r2, #3
 800ee34:	fa02 f303 	lsl.w	r3, r2, r3
 800ee38:	43db      	mvns	r3, r3
 800ee3a:	69ba      	ldr	r2, [r7, #24]
 800ee3c:	4013      	ands	r3, r2
 800ee3e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800ee40:	683b      	ldr	r3, [r7, #0]
 800ee42:	685b      	ldr	r3, [r3, #4]
 800ee44:	f003 0203 	and.w	r2, r3, #3
 800ee48:	69fb      	ldr	r3, [r7, #28]
 800ee4a:	005b      	lsls	r3, r3, #1
 800ee4c:	fa02 f303 	lsl.w	r3, r2, r3
 800ee50:	69ba      	ldr	r2, [r7, #24]
 800ee52:	4313      	orrs	r3, r2
 800ee54:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800ee56:	687b      	ldr	r3, [r7, #4]
 800ee58:	69ba      	ldr	r2, [r7, #24]
 800ee5a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800ee5c:	683b      	ldr	r3, [r7, #0]
 800ee5e:	685b      	ldr	r3, [r3, #4]
 800ee60:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800ee64:	2b00      	cmp	r3, #0
 800ee66:	f000 80c0 	beq.w	800efea <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800ee6a:	2300      	movs	r3, #0
 800ee6c:	60fb      	str	r3, [r7, #12]
 800ee6e:	4b66      	ldr	r3, [pc, #408]	; (800f008 <HAL_GPIO_Init+0x324>)
 800ee70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee72:	4a65      	ldr	r2, [pc, #404]	; (800f008 <HAL_GPIO_Init+0x324>)
 800ee74:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800ee78:	6453      	str	r3, [r2, #68]	; 0x44
 800ee7a:	4b63      	ldr	r3, [pc, #396]	; (800f008 <HAL_GPIO_Init+0x324>)
 800ee7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800ee7e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800ee82:	60fb      	str	r3, [r7, #12]
 800ee84:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ee86:	4a61      	ldr	r2, [pc, #388]	; (800f00c <HAL_GPIO_Init+0x328>)
 800ee88:	69fb      	ldr	r3, [r7, #28]
 800ee8a:	089b      	lsrs	r3, r3, #2
 800ee8c:	3302      	adds	r3, #2
 800ee8e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ee92:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800ee94:	69fb      	ldr	r3, [r7, #28]
 800ee96:	f003 0303 	and.w	r3, r3, #3
 800ee9a:	009b      	lsls	r3, r3, #2
 800ee9c:	220f      	movs	r2, #15
 800ee9e:	fa02 f303 	lsl.w	r3, r2, r3
 800eea2:	43db      	mvns	r3, r3
 800eea4:	69ba      	ldr	r2, [r7, #24]
 800eea6:	4013      	ands	r3, r2
 800eea8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	4a58      	ldr	r2, [pc, #352]	; (800f010 <HAL_GPIO_Init+0x32c>)
 800eeae:	4293      	cmp	r3, r2
 800eeb0:	d037      	beq.n	800ef22 <HAL_GPIO_Init+0x23e>
 800eeb2:	687b      	ldr	r3, [r7, #4]
 800eeb4:	4a57      	ldr	r2, [pc, #348]	; (800f014 <HAL_GPIO_Init+0x330>)
 800eeb6:	4293      	cmp	r3, r2
 800eeb8:	d031      	beq.n	800ef1e <HAL_GPIO_Init+0x23a>
 800eeba:	687b      	ldr	r3, [r7, #4]
 800eebc:	4a56      	ldr	r2, [pc, #344]	; (800f018 <HAL_GPIO_Init+0x334>)
 800eebe:	4293      	cmp	r3, r2
 800eec0:	d02b      	beq.n	800ef1a <HAL_GPIO_Init+0x236>
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	4a55      	ldr	r2, [pc, #340]	; (800f01c <HAL_GPIO_Init+0x338>)
 800eec6:	4293      	cmp	r3, r2
 800eec8:	d025      	beq.n	800ef16 <HAL_GPIO_Init+0x232>
 800eeca:	687b      	ldr	r3, [r7, #4]
 800eecc:	4a54      	ldr	r2, [pc, #336]	; (800f020 <HAL_GPIO_Init+0x33c>)
 800eece:	4293      	cmp	r3, r2
 800eed0:	d01f      	beq.n	800ef12 <HAL_GPIO_Init+0x22e>
 800eed2:	687b      	ldr	r3, [r7, #4]
 800eed4:	4a53      	ldr	r2, [pc, #332]	; (800f024 <HAL_GPIO_Init+0x340>)
 800eed6:	4293      	cmp	r3, r2
 800eed8:	d019      	beq.n	800ef0e <HAL_GPIO_Init+0x22a>
 800eeda:	687b      	ldr	r3, [r7, #4]
 800eedc:	4a52      	ldr	r2, [pc, #328]	; (800f028 <HAL_GPIO_Init+0x344>)
 800eede:	4293      	cmp	r3, r2
 800eee0:	d013      	beq.n	800ef0a <HAL_GPIO_Init+0x226>
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	4a51      	ldr	r2, [pc, #324]	; (800f02c <HAL_GPIO_Init+0x348>)
 800eee6:	4293      	cmp	r3, r2
 800eee8:	d00d      	beq.n	800ef06 <HAL_GPIO_Init+0x222>
 800eeea:	687b      	ldr	r3, [r7, #4]
 800eeec:	4a50      	ldr	r2, [pc, #320]	; (800f030 <HAL_GPIO_Init+0x34c>)
 800eeee:	4293      	cmp	r3, r2
 800eef0:	d007      	beq.n	800ef02 <HAL_GPIO_Init+0x21e>
 800eef2:	687b      	ldr	r3, [r7, #4]
 800eef4:	4a4f      	ldr	r2, [pc, #316]	; (800f034 <HAL_GPIO_Init+0x350>)
 800eef6:	4293      	cmp	r3, r2
 800eef8:	d101      	bne.n	800eefe <HAL_GPIO_Init+0x21a>
 800eefa:	2309      	movs	r3, #9
 800eefc:	e012      	b.n	800ef24 <HAL_GPIO_Init+0x240>
 800eefe:	230a      	movs	r3, #10
 800ef00:	e010      	b.n	800ef24 <HAL_GPIO_Init+0x240>
 800ef02:	2308      	movs	r3, #8
 800ef04:	e00e      	b.n	800ef24 <HAL_GPIO_Init+0x240>
 800ef06:	2307      	movs	r3, #7
 800ef08:	e00c      	b.n	800ef24 <HAL_GPIO_Init+0x240>
 800ef0a:	2306      	movs	r3, #6
 800ef0c:	e00a      	b.n	800ef24 <HAL_GPIO_Init+0x240>
 800ef0e:	2305      	movs	r3, #5
 800ef10:	e008      	b.n	800ef24 <HAL_GPIO_Init+0x240>
 800ef12:	2304      	movs	r3, #4
 800ef14:	e006      	b.n	800ef24 <HAL_GPIO_Init+0x240>
 800ef16:	2303      	movs	r3, #3
 800ef18:	e004      	b.n	800ef24 <HAL_GPIO_Init+0x240>
 800ef1a:	2302      	movs	r3, #2
 800ef1c:	e002      	b.n	800ef24 <HAL_GPIO_Init+0x240>
 800ef1e:	2301      	movs	r3, #1
 800ef20:	e000      	b.n	800ef24 <HAL_GPIO_Init+0x240>
 800ef22:	2300      	movs	r3, #0
 800ef24:	69fa      	ldr	r2, [r7, #28]
 800ef26:	f002 0203 	and.w	r2, r2, #3
 800ef2a:	0092      	lsls	r2, r2, #2
 800ef2c:	4093      	lsls	r3, r2
 800ef2e:	69ba      	ldr	r2, [r7, #24]
 800ef30:	4313      	orrs	r3, r2
 800ef32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800ef34:	4935      	ldr	r1, [pc, #212]	; (800f00c <HAL_GPIO_Init+0x328>)
 800ef36:	69fb      	ldr	r3, [r7, #28]
 800ef38:	089b      	lsrs	r3, r3, #2
 800ef3a:	3302      	adds	r3, #2
 800ef3c:	69ba      	ldr	r2, [r7, #24]
 800ef3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800ef42:	4b3d      	ldr	r3, [pc, #244]	; (800f038 <HAL_GPIO_Init+0x354>)
 800ef44:	689b      	ldr	r3, [r3, #8]
 800ef46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ef48:	693b      	ldr	r3, [r7, #16]
 800ef4a:	43db      	mvns	r3, r3
 800ef4c:	69ba      	ldr	r2, [r7, #24]
 800ef4e:	4013      	ands	r3, r2
 800ef50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ef52:	683b      	ldr	r3, [r7, #0]
 800ef54:	685b      	ldr	r3, [r3, #4]
 800ef56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800ef5a:	2b00      	cmp	r3, #0
 800ef5c:	d003      	beq.n	800ef66 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800ef5e:	69ba      	ldr	r2, [r7, #24]
 800ef60:	693b      	ldr	r3, [r7, #16]
 800ef62:	4313      	orrs	r3, r2
 800ef64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800ef66:	4a34      	ldr	r2, [pc, #208]	; (800f038 <HAL_GPIO_Init+0x354>)
 800ef68:	69bb      	ldr	r3, [r7, #24]
 800ef6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800ef6c:	4b32      	ldr	r3, [pc, #200]	; (800f038 <HAL_GPIO_Init+0x354>)
 800ef6e:	68db      	ldr	r3, [r3, #12]
 800ef70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ef72:	693b      	ldr	r3, [r7, #16]
 800ef74:	43db      	mvns	r3, r3
 800ef76:	69ba      	ldr	r2, [r7, #24]
 800ef78:	4013      	ands	r3, r2
 800ef7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ef7c:	683b      	ldr	r3, [r7, #0]
 800ef7e:	685b      	ldr	r3, [r3, #4]
 800ef80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800ef84:	2b00      	cmp	r3, #0
 800ef86:	d003      	beq.n	800ef90 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800ef88:	69ba      	ldr	r2, [r7, #24]
 800ef8a:	693b      	ldr	r3, [r7, #16]
 800ef8c:	4313      	orrs	r3, r2
 800ef8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800ef90:	4a29      	ldr	r2, [pc, #164]	; (800f038 <HAL_GPIO_Init+0x354>)
 800ef92:	69bb      	ldr	r3, [r7, #24]
 800ef94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800ef96:	4b28      	ldr	r3, [pc, #160]	; (800f038 <HAL_GPIO_Init+0x354>)
 800ef98:	685b      	ldr	r3, [r3, #4]
 800ef9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800ef9c:	693b      	ldr	r3, [r7, #16]
 800ef9e:	43db      	mvns	r3, r3
 800efa0:	69ba      	ldr	r2, [r7, #24]
 800efa2:	4013      	ands	r3, r2
 800efa4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800efa6:	683b      	ldr	r3, [r7, #0]
 800efa8:	685b      	ldr	r3, [r3, #4]
 800efaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800efae:	2b00      	cmp	r3, #0
 800efb0:	d003      	beq.n	800efba <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800efb2:	69ba      	ldr	r2, [r7, #24]
 800efb4:	693b      	ldr	r3, [r7, #16]
 800efb6:	4313      	orrs	r3, r2
 800efb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800efba:	4a1f      	ldr	r2, [pc, #124]	; (800f038 <HAL_GPIO_Init+0x354>)
 800efbc:	69bb      	ldr	r3, [r7, #24]
 800efbe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800efc0:	4b1d      	ldr	r3, [pc, #116]	; (800f038 <HAL_GPIO_Init+0x354>)
 800efc2:	681b      	ldr	r3, [r3, #0]
 800efc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800efc6:	693b      	ldr	r3, [r7, #16]
 800efc8:	43db      	mvns	r3, r3
 800efca:	69ba      	ldr	r2, [r7, #24]
 800efcc:	4013      	ands	r3, r2
 800efce:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800efd0:	683b      	ldr	r3, [r7, #0]
 800efd2:	685b      	ldr	r3, [r3, #4]
 800efd4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800efd8:	2b00      	cmp	r3, #0
 800efda:	d003      	beq.n	800efe4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 800efdc:	69ba      	ldr	r2, [r7, #24]
 800efde:	693b      	ldr	r3, [r7, #16]
 800efe0:	4313      	orrs	r3, r2
 800efe2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800efe4:	4a14      	ldr	r2, [pc, #80]	; (800f038 <HAL_GPIO_Init+0x354>)
 800efe6:	69bb      	ldr	r3, [r7, #24]
 800efe8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800efea:	69fb      	ldr	r3, [r7, #28]
 800efec:	3301      	adds	r3, #1
 800efee:	61fb      	str	r3, [r7, #28]
 800eff0:	69fb      	ldr	r3, [r7, #28]
 800eff2:	2b0f      	cmp	r3, #15
 800eff4:	f67f ae84 	bls.w	800ed00 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800eff8:	bf00      	nop
 800effa:	bf00      	nop
 800effc:	3724      	adds	r7, #36	; 0x24
 800effe:	46bd      	mov	sp, r7
 800f000:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f004:	4770      	bx	lr
 800f006:	bf00      	nop
 800f008:	40023800 	.word	0x40023800
 800f00c:	40013800 	.word	0x40013800
 800f010:	40020000 	.word	0x40020000
 800f014:	40020400 	.word	0x40020400
 800f018:	40020800 	.word	0x40020800
 800f01c:	40020c00 	.word	0x40020c00
 800f020:	40021000 	.word	0x40021000
 800f024:	40021400 	.word	0x40021400
 800f028:	40021800 	.word	0x40021800
 800f02c:	40021c00 	.word	0x40021c00
 800f030:	40022000 	.word	0x40022000
 800f034:	40022400 	.word	0x40022400
 800f038:	40013c00 	.word	0x40013c00

0800f03c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800f03c:	b480      	push	{r7}
 800f03e:	b085      	sub	sp, #20
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
 800f044:	460b      	mov	r3, r1
 800f046:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800f048:	687b      	ldr	r3, [r7, #4]
 800f04a:	691a      	ldr	r2, [r3, #16]
 800f04c:	887b      	ldrh	r3, [r7, #2]
 800f04e:	4013      	ands	r3, r2
 800f050:	2b00      	cmp	r3, #0
 800f052:	d002      	beq.n	800f05a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800f054:	2301      	movs	r3, #1
 800f056:	73fb      	strb	r3, [r7, #15]
 800f058:	e001      	b.n	800f05e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800f05a:	2300      	movs	r3, #0
 800f05c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800f05e:	7bfb      	ldrb	r3, [r7, #15]
}
 800f060:	4618      	mov	r0, r3
 800f062:	3714      	adds	r7, #20
 800f064:	46bd      	mov	sp, r7
 800f066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f06a:	4770      	bx	lr

0800f06c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800f06c:	b480      	push	{r7}
 800f06e:	b083      	sub	sp, #12
 800f070:	af00      	add	r7, sp, #0
 800f072:	6078      	str	r0, [r7, #4]
 800f074:	460b      	mov	r3, r1
 800f076:	807b      	strh	r3, [r7, #2]
 800f078:	4613      	mov	r3, r2
 800f07a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800f07c:	787b      	ldrb	r3, [r7, #1]
 800f07e:	2b00      	cmp	r3, #0
 800f080:	d003      	beq.n	800f08a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800f082:	887a      	ldrh	r2, [r7, #2]
 800f084:	687b      	ldr	r3, [r7, #4]
 800f086:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800f088:	e003      	b.n	800f092 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800f08a:	887b      	ldrh	r3, [r7, #2]
 800f08c:	041a      	lsls	r2, r3, #16
 800f08e:	687b      	ldr	r3, [r7, #4]
 800f090:	619a      	str	r2, [r3, #24]
}
 800f092:	bf00      	nop
 800f094:	370c      	adds	r7, #12
 800f096:	46bd      	mov	sp, r7
 800f098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f09c:	4770      	bx	lr
	...

0800f0a0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800f0a0:	b580      	push	{r7, lr}
 800f0a2:	b082      	sub	sp, #8
 800f0a4:	af00      	add	r7, sp, #0
 800f0a6:	4603      	mov	r3, r0
 800f0a8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800f0aa:	4b08      	ldr	r3, [pc, #32]	; (800f0cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800f0ac:	695a      	ldr	r2, [r3, #20]
 800f0ae:	88fb      	ldrh	r3, [r7, #6]
 800f0b0:	4013      	ands	r3, r2
 800f0b2:	2b00      	cmp	r3, #0
 800f0b4:	d006      	beq.n	800f0c4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800f0b6:	4a05      	ldr	r2, [pc, #20]	; (800f0cc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800f0b8:	88fb      	ldrh	r3, [r7, #6]
 800f0ba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 800f0bc:	88fb      	ldrh	r3, [r7, #6]
 800f0be:	4618      	mov	r0, r3
 800f0c0:	f7f8 f852 	bl	8007168 <HAL_GPIO_EXTI_Callback>
  }
}
 800f0c4:	bf00      	nop
 800f0c6:	3708      	adds	r7, #8
 800f0c8:	46bd      	mov	sp, r7
 800f0ca:	bd80      	pop	{r7, pc}
 800f0cc:	40013c00 	.word	0x40013c00

0800f0d0 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800f0d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f0d2:	b08f      	sub	sp, #60	; 0x3c
 800f0d4:	af0a      	add	r7, sp, #40	; 0x28
 800f0d6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800f0d8:	687b      	ldr	r3, [r7, #4]
 800f0da:	2b00      	cmp	r3, #0
 800f0dc:	d101      	bne.n	800f0e2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800f0de:	2301      	movs	r3, #1
 800f0e0:	e10f      	b.n	800f302 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800f0e2:	687b      	ldr	r3, [r7, #4]
 800f0e4:	681b      	ldr	r3, [r3, #0]
 800f0e6:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800f0e8:	687b      	ldr	r3, [r7, #4]
 800f0ea:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800f0ee:	b2db      	uxtb	r3, r3
 800f0f0:	2b00      	cmp	r3, #0
 800f0f2:	d106      	bne.n	800f102 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800f0f4:	687b      	ldr	r3, [r7, #4]
 800f0f6:	2200      	movs	r2, #0
 800f0f8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800f0fc:	6878      	ldr	r0, [r7, #4]
 800f0fe:	f007 ff61 	bl	8016fc4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2203      	movs	r2, #3
 800f106:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800f10a:	68bb      	ldr	r3, [r7, #8]
 800f10c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f10e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800f112:	2b00      	cmp	r3, #0
 800f114:	d102      	bne.n	800f11c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2200      	movs	r2, #0
 800f11a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	681b      	ldr	r3, [r3, #0]
 800f120:	4618      	mov	r0, r3
 800f122:	f004 fab4 	bl	801368e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800f126:	687b      	ldr	r3, [r7, #4]
 800f128:	681b      	ldr	r3, [r3, #0]
 800f12a:	603b      	str	r3, [r7, #0]
 800f12c:	687e      	ldr	r6, [r7, #4]
 800f12e:	466d      	mov	r5, sp
 800f130:	f106 0410 	add.w	r4, r6, #16
 800f134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f136:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f138:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f13a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f13c:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f140:	e885 0003 	stmia.w	r5, {r0, r1}
 800f144:	1d33      	adds	r3, r6, #4
 800f146:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f148:	6838      	ldr	r0, [r7, #0]
 800f14a:	f004 f98b 	bl	8013464 <USB_CoreInit>
 800f14e:	4603      	mov	r3, r0
 800f150:	2b00      	cmp	r3, #0
 800f152:	d005      	beq.n	800f160 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800f154:	687b      	ldr	r3, [r7, #4]
 800f156:	2202      	movs	r2, #2
 800f158:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800f15c:	2301      	movs	r3, #1
 800f15e:	e0d0      	b.n	800f302 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800f160:	687b      	ldr	r3, [r7, #4]
 800f162:	681b      	ldr	r3, [r3, #0]
 800f164:	2100      	movs	r1, #0
 800f166:	4618      	mov	r0, r3
 800f168:	f004 faa2 	bl	80136b0 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f16c:	2300      	movs	r3, #0
 800f16e:	73fb      	strb	r3, [r7, #15]
 800f170:	e04a      	b.n	800f208 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800f172:	7bfa      	ldrb	r2, [r7, #15]
 800f174:	6879      	ldr	r1, [r7, #4]
 800f176:	4613      	mov	r3, r2
 800f178:	00db      	lsls	r3, r3, #3
 800f17a:	4413      	add	r3, r2
 800f17c:	009b      	lsls	r3, r3, #2
 800f17e:	440b      	add	r3, r1
 800f180:	333d      	adds	r3, #61	; 0x3d
 800f182:	2201      	movs	r2, #1
 800f184:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800f186:	7bfa      	ldrb	r2, [r7, #15]
 800f188:	6879      	ldr	r1, [r7, #4]
 800f18a:	4613      	mov	r3, r2
 800f18c:	00db      	lsls	r3, r3, #3
 800f18e:	4413      	add	r3, r2
 800f190:	009b      	lsls	r3, r3, #2
 800f192:	440b      	add	r3, r1
 800f194:	333c      	adds	r3, #60	; 0x3c
 800f196:	7bfa      	ldrb	r2, [r7, #15]
 800f198:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800f19a:	7bfa      	ldrb	r2, [r7, #15]
 800f19c:	7bfb      	ldrb	r3, [r7, #15]
 800f19e:	b298      	uxth	r0, r3
 800f1a0:	6879      	ldr	r1, [r7, #4]
 800f1a2:	4613      	mov	r3, r2
 800f1a4:	00db      	lsls	r3, r3, #3
 800f1a6:	4413      	add	r3, r2
 800f1a8:	009b      	lsls	r3, r3, #2
 800f1aa:	440b      	add	r3, r1
 800f1ac:	3344      	adds	r3, #68	; 0x44
 800f1ae:	4602      	mov	r2, r0
 800f1b0:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800f1b2:	7bfa      	ldrb	r2, [r7, #15]
 800f1b4:	6879      	ldr	r1, [r7, #4]
 800f1b6:	4613      	mov	r3, r2
 800f1b8:	00db      	lsls	r3, r3, #3
 800f1ba:	4413      	add	r3, r2
 800f1bc:	009b      	lsls	r3, r3, #2
 800f1be:	440b      	add	r3, r1
 800f1c0:	3340      	adds	r3, #64	; 0x40
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800f1c6:	7bfa      	ldrb	r2, [r7, #15]
 800f1c8:	6879      	ldr	r1, [r7, #4]
 800f1ca:	4613      	mov	r3, r2
 800f1cc:	00db      	lsls	r3, r3, #3
 800f1ce:	4413      	add	r3, r2
 800f1d0:	009b      	lsls	r3, r3, #2
 800f1d2:	440b      	add	r3, r1
 800f1d4:	3348      	adds	r3, #72	; 0x48
 800f1d6:	2200      	movs	r2, #0
 800f1d8:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800f1da:	7bfa      	ldrb	r2, [r7, #15]
 800f1dc:	6879      	ldr	r1, [r7, #4]
 800f1de:	4613      	mov	r3, r2
 800f1e0:	00db      	lsls	r3, r3, #3
 800f1e2:	4413      	add	r3, r2
 800f1e4:	009b      	lsls	r3, r3, #2
 800f1e6:	440b      	add	r3, r1
 800f1e8:	334c      	adds	r3, #76	; 0x4c
 800f1ea:	2200      	movs	r2, #0
 800f1ec:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800f1ee:	7bfa      	ldrb	r2, [r7, #15]
 800f1f0:	6879      	ldr	r1, [r7, #4]
 800f1f2:	4613      	mov	r3, r2
 800f1f4:	00db      	lsls	r3, r3, #3
 800f1f6:	4413      	add	r3, r2
 800f1f8:	009b      	lsls	r3, r3, #2
 800f1fa:	440b      	add	r3, r1
 800f1fc:	3354      	adds	r3, #84	; 0x54
 800f1fe:	2200      	movs	r2, #0
 800f200:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f202:	7bfb      	ldrb	r3, [r7, #15]
 800f204:	3301      	adds	r3, #1
 800f206:	73fb      	strb	r3, [r7, #15]
 800f208:	7bfa      	ldrb	r2, [r7, #15]
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	685b      	ldr	r3, [r3, #4]
 800f20e:	429a      	cmp	r2, r3
 800f210:	d3af      	bcc.n	800f172 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f212:	2300      	movs	r3, #0
 800f214:	73fb      	strb	r3, [r7, #15]
 800f216:	e044      	b.n	800f2a2 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800f218:	7bfa      	ldrb	r2, [r7, #15]
 800f21a:	6879      	ldr	r1, [r7, #4]
 800f21c:	4613      	mov	r3, r2
 800f21e:	00db      	lsls	r3, r3, #3
 800f220:	4413      	add	r3, r2
 800f222:	009b      	lsls	r3, r3, #2
 800f224:	440b      	add	r3, r1
 800f226:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800f22a:	2200      	movs	r2, #0
 800f22c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800f22e:	7bfa      	ldrb	r2, [r7, #15]
 800f230:	6879      	ldr	r1, [r7, #4]
 800f232:	4613      	mov	r3, r2
 800f234:	00db      	lsls	r3, r3, #3
 800f236:	4413      	add	r3, r2
 800f238:	009b      	lsls	r3, r3, #2
 800f23a:	440b      	add	r3, r1
 800f23c:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800f240:	7bfa      	ldrb	r2, [r7, #15]
 800f242:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800f244:	7bfa      	ldrb	r2, [r7, #15]
 800f246:	6879      	ldr	r1, [r7, #4]
 800f248:	4613      	mov	r3, r2
 800f24a:	00db      	lsls	r3, r3, #3
 800f24c:	4413      	add	r3, r2
 800f24e:	009b      	lsls	r3, r3, #2
 800f250:	440b      	add	r3, r1
 800f252:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800f256:	2200      	movs	r2, #0
 800f258:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800f25a:	7bfa      	ldrb	r2, [r7, #15]
 800f25c:	6879      	ldr	r1, [r7, #4]
 800f25e:	4613      	mov	r3, r2
 800f260:	00db      	lsls	r3, r3, #3
 800f262:	4413      	add	r3, r2
 800f264:	009b      	lsls	r3, r3, #2
 800f266:	440b      	add	r3, r1
 800f268:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800f26c:	2200      	movs	r2, #0
 800f26e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800f270:	7bfa      	ldrb	r2, [r7, #15]
 800f272:	6879      	ldr	r1, [r7, #4]
 800f274:	4613      	mov	r3, r2
 800f276:	00db      	lsls	r3, r3, #3
 800f278:	4413      	add	r3, r2
 800f27a:	009b      	lsls	r3, r3, #2
 800f27c:	440b      	add	r3, r1
 800f27e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800f282:	2200      	movs	r2, #0
 800f284:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800f286:	7bfa      	ldrb	r2, [r7, #15]
 800f288:	6879      	ldr	r1, [r7, #4]
 800f28a:	4613      	mov	r3, r2
 800f28c:	00db      	lsls	r3, r3, #3
 800f28e:	4413      	add	r3, r2
 800f290:	009b      	lsls	r3, r3, #2
 800f292:	440b      	add	r3, r1
 800f294:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800f298:	2200      	movs	r2, #0
 800f29a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f29c:	7bfb      	ldrb	r3, [r7, #15]
 800f29e:	3301      	adds	r3, #1
 800f2a0:	73fb      	strb	r3, [r7, #15]
 800f2a2:	7bfa      	ldrb	r2, [r7, #15]
 800f2a4:	687b      	ldr	r3, [r7, #4]
 800f2a6:	685b      	ldr	r3, [r3, #4]
 800f2a8:	429a      	cmp	r2, r3
 800f2aa:	d3b5      	bcc.n	800f218 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800f2ac:	687b      	ldr	r3, [r7, #4]
 800f2ae:	681b      	ldr	r3, [r3, #0]
 800f2b0:	603b      	str	r3, [r7, #0]
 800f2b2:	687e      	ldr	r6, [r7, #4]
 800f2b4:	466d      	mov	r5, sp
 800f2b6:	f106 0410 	add.w	r4, r6, #16
 800f2ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f2bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f2be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800f2c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800f2c2:	e894 0003 	ldmia.w	r4, {r0, r1}
 800f2c6:	e885 0003 	stmia.w	r5, {r0, r1}
 800f2ca:	1d33      	adds	r3, r6, #4
 800f2cc:	cb0e      	ldmia	r3, {r1, r2, r3}
 800f2ce:	6838      	ldr	r0, [r7, #0]
 800f2d0:	f004 fa3a 	bl	8013748 <USB_DevInit>
 800f2d4:	4603      	mov	r3, r0
 800f2d6:	2b00      	cmp	r3, #0
 800f2d8:	d005      	beq.n	800f2e6 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800f2da:	687b      	ldr	r3, [r7, #4]
 800f2dc:	2202      	movs	r2, #2
 800f2de:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800f2e2:	2301      	movs	r3, #1
 800f2e4:	e00d      	b.n	800f302 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800f2e6:	687b      	ldr	r3, [r7, #4]
 800f2e8:	2200      	movs	r2, #0
 800f2ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800f2ee:	687b      	ldr	r3, [r7, #4]
 800f2f0:	2201      	movs	r2, #1
 800f2f2:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800f2f6:	687b      	ldr	r3, [r7, #4]
 800f2f8:	681b      	ldr	r3, [r3, #0]
 800f2fa:	4618      	mov	r0, r3
 800f2fc:	f005 fb89 	bl	8014a12 <USB_DevDisconnect>

  return HAL_OK;
 800f300:	2300      	movs	r3, #0
}
 800f302:	4618      	mov	r0, r3
 800f304:	3714      	adds	r7, #20
 800f306:	46bd      	mov	sp, r7
 800f308:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f30a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800f30a:	b580      	push	{r7, lr}
 800f30c:	b084      	sub	sp, #16
 800f30e:	af00      	add	r7, sp, #0
 800f310:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800f31e:	2b01      	cmp	r3, #1
 800f320:	d101      	bne.n	800f326 <HAL_PCD_Start+0x1c>
 800f322:	2302      	movs	r3, #2
 800f324:	e020      	b.n	800f368 <HAL_PCD_Start+0x5e>
 800f326:	687b      	ldr	r3, [r7, #4]
 800f328:	2201      	movs	r2, #1
 800f32a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800f332:	2b01      	cmp	r3, #1
 800f334:	d109      	bne.n	800f34a <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800f33a:	2b01      	cmp	r3, #1
 800f33c:	d005      	beq.n	800f34a <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800f33e:	68fb      	ldr	r3, [r7, #12]
 800f340:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f342:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800f346:	68fb      	ldr	r3, [r7, #12]
 800f348:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	681b      	ldr	r3, [r3, #0]
 800f34e:	4618      	mov	r0, r3
 800f350:	f004 f98c 	bl	801366c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	4618      	mov	r0, r3
 800f35a:	f005 fb39 	bl	80149d0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800f35e:	687b      	ldr	r3, [r7, #4]
 800f360:	2200      	movs	r2, #0
 800f362:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800f366:	2300      	movs	r3, #0
}
 800f368:	4618      	mov	r0, r3
 800f36a:	3710      	adds	r7, #16
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bd80      	pop	{r7, pc}

0800f370 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800f370:	b590      	push	{r4, r7, lr}
 800f372:	b08d      	sub	sp, #52	; 0x34
 800f374:	af00      	add	r7, sp, #0
 800f376:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800f378:	687b      	ldr	r3, [r7, #4]
 800f37a:	681b      	ldr	r3, [r3, #0]
 800f37c:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800f37e:	6a3b      	ldr	r3, [r7, #32]
 800f380:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 800f382:	687b      	ldr	r3, [r7, #4]
 800f384:	681b      	ldr	r3, [r3, #0]
 800f386:	4618      	mov	r0, r3
 800f388:	f005 fbf7 	bl	8014b7a <USB_GetMode>
 800f38c:	4603      	mov	r3, r0
 800f38e:	2b00      	cmp	r3, #0
 800f390:	f040 848a 	bne.w	800fca8 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800f394:	687b      	ldr	r3, [r7, #4]
 800f396:	681b      	ldr	r3, [r3, #0]
 800f398:	4618      	mov	r0, r3
 800f39a:	f005 fb5b 	bl	8014a54 <USB_ReadInterrupts>
 800f39e:	4603      	mov	r3, r0
 800f3a0:	2b00      	cmp	r3, #0
 800f3a2:	f000 8480 	beq.w	800fca6 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 800f3a6:	69fb      	ldr	r3, [r7, #28]
 800f3a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f3ac:	689b      	ldr	r3, [r3, #8]
 800f3ae:	0a1b      	lsrs	r3, r3, #8
 800f3b0:	f3c3 020d 	ubfx	r2, r3, #0, #14
 800f3b4:	687b      	ldr	r3, [r7, #4]
 800f3b6:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	681b      	ldr	r3, [r3, #0]
 800f3be:	4618      	mov	r0, r3
 800f3c0:	f005 fb48 	bl	8014a54 <USB_ReadInterrupts>
 800f3c4:	4603      	mov	r3, r0
 800f3c6:	f003 0302 	and.w	r3, r3, #2
 800f3ca:	2b02      	cmp	r3, #2
 800f3cc:	d107      	bne.n	800f3de <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 800f3ce:	687b      	ldr	r3, [r7, #4]
 800f3d0:	681b      	ldr	r3, [r3, #0]
 800f3d2:	695a      	ldr	r2, [r3, #20]
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	f002 0202 	and.w	r2, r2, #2
 800f3dc:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 800f3de:	687b      	ldr	r3, [r7, #4]
 800f3e0:	681b      	ldr	r3, [r3, #0]
 800f3e2:	4618      	mov	r0, r3
 800f3e4:	f005 fb36 	bl	8014a54 <USB_ReadInterrupts>
 800f3e8:	4603      	mov	r3, r0
 800f3ea:	f003 0310 	and.w	r3, r3, #16
 800f3ee:	2b10      	cmp	r3, #16
 800f3f0:	d161      	bne.n	800f4b6 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800f3f2:	687b      	ldr	r3, [r7, #4]
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	699a      	ldr	r2, [r3, #24]
 800f3f8:	687b      	ldr	r3, [r7, #4]
 800f3fa:	681b      	ldr	r3, [r3, #0]
 800f3fc:	f022 0210 	bic.w	r2, r2, #16
 800f400:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800f402:	6a3b      	ldr	r3, [r7, #32]
 800f404:	6a1b      	ldr	r3, [r3, #32]
 800f406:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800f408:	69bb      	ldr	r3, [r7, #24]
 800f40a:	f003 020f 	and.w	r2, r3, #15
 800f40e:	4613      	mov	r3, r2
 800f410:	00db      	lsls	r3, r3, #3
 800f412:	4413      	add	r3, r2
 800f414:	009b      	lsls	r3, r3, #2
 800f416:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f41a:	687a      	ldr	r2, [r7, #4]
 800f41c:	4413      	add	r3, r2
 800f41e:	3304      	adds	r3, #4
 800f420:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800f422:	69bb      	ldr	r3, [r7, #24]
 800f424:	0c5b      	lsrs	r3, r3, #17
 800f426:	f003 030f 	and.w	r3, r3, #15
 800f42a:	2b02      	cmp	r3, #2
 800f42c:	d124      	bne.n	800f478 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 800f42e:	69ba      	ldr	r2, [r7, #24]
 800f430:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800f434:	4013      	ands	r3, r2
 800f436:	2b00      	cmp	r3, #0
 800f438:	d035      	beq.n	800f4a6 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800f43a:	697b      	ldr	r3, [r7, #20]
 800f43c:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 800f43e:	69bb      	ldr	r3, [r7, #24]
 800f440:	091b      	lsrs	r3, r3, #4
 800f442:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800f444:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f448:	b29b      	uxth	r3, r3
 800f44a:	461a      	mov	r2, r3
 800f44c:	6a38      	ldr	r0, [r7, #32]
 800f44e:	f005 f96d 	bl	801472c <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800f452:	697b      	ldr	r3, [r7, #20]
 800f454:	691a      	ldr	r2, [r3, #16]
 800f456:	69bb      	ldr	r3, [r7, #24]
 800f458:	091b      	lsrs	r3, r3, #4
 800f45a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f45e:	441a      	add	r2, r3
 800f460:	697b      	ldr	r3, [r7, #20]
 800f462:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800f464:	697b      	ldr	r3, [r7, #20]
 800f466:	6a1a      	ldr	r2, [r3, #32]
 800f468:	69bb      	ldr	r3, [r7, #24]
 800f46a:	091b      	lsrs	r3, r3, #4
 800f46c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f470:	441a      	add	r2, r3
 800f472:	697b      	ldr	r3, [r7, #20]
 800f474:	621a      	str	r2, [r3, #32]
 800f476:	e016      	b.n	800f4a6 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800f478:	69bb      	ldr	r3, [r7, #24]
 800f47a:	0c5b      	lsrs	r3, r3, #17
 800f47c:	f003 030f 	and.w	r3, r3, #15
 800f480:	2b06      	cmp	r3, #6
 800f482:	d110      	bne.n	800f4a6 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f48a:	2208      	movs	r2, #8
 800f48c:	4619      	mov	r1, r3
 800f48e:	6a38      	ldr	r0, [r7, #32]
 800f490:	f005 f94c 	bl	801472c <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800f494:	697b      	ldr	r3, [r7, #20]
 800f496:	6a1a      	ldr	r2, [r3, #32]
 800f498:	69bb      	ldr	r3, [r7, #24]
 800f49a:	091b      	lsrs	r3, r3, #4
 800f49c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800f4a0:	441a      	add	r2, r3
 800f4a2:	697b      	ldr	r3, [r7, #20]
 800f4a4:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800f4a6:	687b      	ldr	r3, [r7, #4]
 800f4a8:	681b      	ldr	r3, [r3, #0]
 800f4aa:	699a      	ldr	r2, [r3, #24]
 800f4ac:	687b      	ldr	r3, [r7, #4]
 800f4ae:	681b      	ldr	r3, [r3, #0]
 800f4b0:	f042 0210 	orr.w	r2, r2, #16
 800f4b4:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800f4b6:	687b      	ldr	r3, [r7, #4]
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	4618      	mov	r0, r3
 800f4bc:	f005 faca 	bl	8014a54 <USB_ReadInterrupts>
 800f4c0:	4603      	mov	r3, r0
 800f4c2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800f4c6:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800f4ca:	f040 80a7 	bne.w	800f61c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 800f4ce:	2300      	movs	r3, #0
 800f4d0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800f4d2:	687b      	ldr	r3, [r7, #4]
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	4618      	mov	r0, r3
 800f4d8:	f005 facf 	bl	8014a7a <USB_ReadDevAllOutEpInterrupt>
 800f4dc:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 800f4de:	e099      	b.n	800f614 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 800f4e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4e2:	f003 0301 	and.w	r3, r3, #1
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	f000 808e 	beq.w	800f608 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	681b      	ldr	r3, [r3, #0]
 800f4f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f4f2:	b2d2      	uxtb	r2, r2
 800f4f4:	4611      	mov	r1, r2
 800f4f6:	4618      	mov	r0, r3
 800f4f8:	f005 faf3 	bl	8014ae2 <USB_ReadDevOutEPInterrupt>
 800f4fc:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 800f4fe:	693b      	ldr	r3, [r7, #16]
 800f500:	f003 0301 	and.w	r3, r3, #1
 800f504:	2b00      	cmp	r3, #0
 800f506:	d00c      	beq.n	800f522 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800f508:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f50a:	015a      	lsls	r2, r3, #5
 800f50c:	69fb      	ldr	r3, [r7, #28]
 800f50e:	4413      	add	r3, r2
 800f510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f514:	461a      	mov	r2, r3
 800f516:	2301      	movs	r3, #1
 800f518:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800f51a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f51c:	6878      	ldr	r0, [r7, #4]
 800f51e:	f000 fec3 	bl	80102a8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800f522:	693b      	ldr	r3, [r7, #16]
 800f524:	f003 0308 	and.w	r3, r3, #8
 800f528:	2b00      	cmp	r3, #0
 800f52a:	d00c      	beq.n	800f546 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 800f52c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f52e:	015a      	lsls	r2, r3, #5
 800f530:	69fb      	ldr	r3, [r7, #28]
 800f532:	4413      	add	r3, r2
 800f534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f538:	461a      	mov	r2, r3
 800f53a:	2308      	movs	r3, #8
 800f53c:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 800f53e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f540:	6878      	ldr	r0, [r7, #4]
 800f542:	f000 ff99 	bl	8010478 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800f546:	693b      	ldr	r3, [r7, #16]
 800f548:	f003 0310 	and.w	r3, r3, #16
 800f54c:	2b00      	cmp	r3, #0
 800f54e:	d008      	beq.n	800f562 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 800f550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f552:	015a      	lsls	r2, r3, #5
 800f554:	69fb      	ldr	r3, [r7, #28]
 800f556:	4413      	add	r3, r2
 800f558:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f55c:	461a      	mov	r2, r3
 800f55e:	2310      	movs	r3, #16
 800f560:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800f562:	693b      	ldr	r3, [r7, #16]
 800f564:	f003 0302 	and.w	r3, r3, #2
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d030      	beq.n	800f5ce <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 800f56c:	6a3b      	ldr	r3, [r7, #32]
 800f56e:	695b      	ldr	r3, [r3, #20]
 800f570:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f574:	2b80      	cmp	r3, #128	; 0x80
 800f576:	d109      	bne.n	800f58c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800f578:	69fb      	ldr	r3, [r7, #28]
 800f57a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f57e:	685b      	ldr	r3, [r3, #4]
 800f580:	69fa      	ldr	r2, [r7, #28]
 800f582:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f586:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800f58a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 800f58c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f58e:	4613      	mov	r3, r2
 800f590:	00db      	lsls	r3, r3, #3
 800f592:	4413      	add	r3, r2
 800f594:	009b      	lsls	r3, r3, #2
 800f596:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800f59a:	687a      	ldr	r2, [r7, #4]
 800f59c:	4413      	add	r3, r2
 800f59e:	3304      	adds	r3, #4
 800f5a0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800f5a2:	697b      	ldr	r3, [r7, #20]
 800f5a4:	78db      	ldrb	r3, [r3, #3]
 800f5a6:	2b01      	cmp	r3, #1
 800f5a8:	d108      	bne.n	800f5bc <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 800f5aa:	697b      	ldr	r3, [r7, #20]
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 800f5b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b2:	b2db      	uxtb	r3, r3
 800f5b4:	4619      	mov	r1, r3
 800f5b6:	6878      	ldr	r0, [r7, #4]
 800f5b8:	f007 fe24 	bl	8017204 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 800f5bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5be:	015a      	lsls	r2, r3, #5
 800f5c0:	69fb      	ldr	r3, [r7, #28]
 800f5c2:	4413      	add	r3, r2
 800f5c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5c8:	461a      	mov	r2, r3
 800f5ca:	2302      	movs	r3, #2
 800f5cc:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 800f5ce:	693b      	ldr	r3, [r7, #16]
 800f5d0:	f003 0320 	and.w	r3, r3, #32
 800f5d4:	2b00      	cmp	r3, #0
 800f5d6:	d008      	beq.n	800f5ea <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800f5d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5da:	015a      	lsls	r2, r3, #5
 800f5dc:	69fb      	ldr	r3, [r7, #28]
 800f5de:	4413      	add	r3, r2
 800f5e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f5e4:	461a      	mov	r2, r3
 800f5e6:	2320      	movs	r3, #32
 800f5e8:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800f5ea:	693b      	ldr	r3, [r7, #16]
 800f5ec:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800f5f0:	2b00      	cmp	r3, #0
 800f5f2:	d009      	beq.n	800f608 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 800f5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f6:	015a      	lsls	r2, r3, #5
 800f5f8:	69fb      	ldr	r3, [r7, #28]
 800f5fa:	4413      	add	r3, r2
 800f5fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f600:	461a      	mov	r2, r3
 800f602:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800f606:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800f608:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f60a:	3301      	adds	r3, #1
 800f60c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800f60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f610:	085b      	lsrs	r3, r3, #1
 800f612:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800f614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f616:	2b00      	cmp	r3, #0
 800f618:	f47f af62 	bne.w	800f4e0 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 800f61c:	687b      	ldr	r3, [r7, #4]
 800f61e:	681b      	ldr	r3, [r3, #0]
 800f620:	4618      	mov	r0, r3
 800f622:	f005 fa17 	bl	8014a54 <USB_ReadInterrupts>
 800f626:	4603      	mov	r3, r0
 800f628:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800f62c:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800f630:	f040 80db 	bne.w	800f7ea <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800f634:	687b      	ldr	r3, [r7, #4]
 800f636:	681b      	ldr	r3, [r3, #0]
 800f638:	4618      	mov	r0, r3
 800f63a:	f005 fa38 	bl	8014aae <USB_ReadDevAllInEpInterrupt>
 800f63e:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 800f640:	2300      	movs	r3, #0
 800f642:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800f644:	e0cd      	b.n	800f7e2 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800f646:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f648:	f003 0301 	and.w	r3, r3, #1
 800f64c:	2b00      	cmp	r3, #0
 800f64e:	f000 80c2 	beq.w	800f7d6 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	681b      	ldr	r3, [r3, #0]
 800f656:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f658:	b2d2      	uxtb	r2, r2
 800f65a:	4611      	mov	r1, r2
 800f65c:	4618      	mov	r0, r3
 800f65e:	f005 fa5e 	bl	8014b1e <USB_ReadDevInEPInterrupt>
 800f662:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800f664:	693b      	ldr	r3, [r7, #16]
 800f666:	f003 0301 	and.w	r3, r3, #1
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d057      	beq.n	800f71e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800f66e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f670:	f003 030f 	and.w	r3, r3, #15
 800f674:	2201      	movs	r2, #1
 800f676:	fa02 f303 	lsl.w	r3, r2, r3
 800f67a:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800f67c:	69fb      	ldr	r3, [r7, #28]
 800f67e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f682:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800f684:	68fb      	ldr	r3, [r7, #12]
 800f686:	43db      	mvns	r3, r3
 800f688:	69f9      	ldr	r1, [r7, #28]
 800f68a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800f68e:	4013      	ands	r3, r2
 800f690:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 800f692:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f694:	015a      	lsls	r2, r3, #5
 800f696:	69fb      	ldr	r3, [r7, #28]
 800f698:	4413      	add	r3, r2
 800f69a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f69e:	461a      	mov	r2, r3
 800f6a0:	2301      	movs	r3, #1
 800f6a2:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 800f6a4:	687b      	ldr	r3, [r7, #4]
 800f6a6:	691b      	ldr	r3, [r3, #16]
 800f6a8:	2b01      	cmp	r3, #1
 800f6aa:	d132      	bne.n	800f712 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800f6ac:	6879      	ldr	r1, [r7, #4]
 800f6ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6b0:	4613      	mov	r3, r2
 800f6b2:	00db      	lsls	r3, r3, #3
 800f6b4:	4413      	add	r3, r2
 800f6b6:	009b      	lsls	r3, r3, #2
 800f6b8:	440b      	add	r3, r1
 800f6ba:	334c      	adds	r3, #76	; 0x4c
 800f6bc:	6819      	ldr	r1, [r3, #0]
 800f6be:	6878      	ldr	r0, [r7, #4]
 800f6c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6c2:	4613      	mov	r3, r2
 800f6c4:	00db      	lsls	r3, r3, #3
 800f6c6:	4413      	add	r3, r2
 800f6c8:	009b      	lsls	r3, r3, #2
 800f6ca:	4403      	add	r3, r0
 800f6cc:	3348      	adds	r3, #72	; 0x48
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	4419      	add	r1, r3
 800f6d2:	6878      	ldr	r0, [r7, #4]
 800f6d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6d6:	4613      	mov	r3, r2
 800f6d8:	00db      	lsls	r3, r3, #3
 800f6da:	4413      	add	r3, r2
 800f6dc:	009b      	lsls	r3, r3, #2
 800f6de:	4403      	add	r3, r0
 800f6e0:	334c      	adds	r3, #76	; 0x4c
 800f6e2:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 800f6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d113      	bne.n	800f712 <HAL_PCD_IRQHandler+0x3a2>
 800f6ea:	6879      	ldr	r1, [r7, #4]
 800f6ec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6ee:	4613      	mov	r3, r2
 800f6f0:	00db      	lsls	r3, r3, #3
 800f6f2:	4413      	add	r3, r2
 800f6f4:	009b      	lsls	r3, r3, #2
 800f6f6:	440b      	add	r3, r1
 800f6f8:	3354      	adds	r3, #84	; 0x54
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d108      	bne.n	800f712 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6818      	ldr	r0, [r3, #0]
 800f704:	687b      	ldr	r3, [r7, #4]
 800f706:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800f70a:	461a      	mov	r2, r3
 800f70c:	2101      	movs	r1, #1
 800f70e:	f005 fa65 	bl	8014bdc <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 800f712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f714:	b2db      	uxtb	r3, r3
 800f716:	4619      	mov	r1, r3
 800f718:	6878      	ldr	r0, [r7, #4]
 800f71a:	f007 fcee 	bl	80170fa <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 800f71e:	693b      	ldr	r3, [r7, #16]
 800f720:	f003 0308 	and.w	r3, r3, #8
 800f724:	2b00      	cmp	r3, #0
 800f726:	d008      	beq.n	800f73a <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800f728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f72a:	015a      	lsls	r2, r3, #5
 800f72c:	69fb      	ldr	r3, [r7, #28]
 800f72e:	4413      	add	r3, r2
 800f730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f734:	461a      	mov	r2, r3
 800f736:	2308      	movs	r3, #8
 800f738:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800f73a:	693b      	ldr	r3, [r7, #16]
 800f73c:	f003 0310 	and.w	r3, r3, #16
 800f740:	2b00      	cmp	r3, #0
 800f742:	d008      	beq.n	800f756 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800f744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f746:	015a      	lsls	r2, r3, #5
 800f748:	69fb      	ldr	r3, [r7, #28]
 800f74a:	4413      	add	r3, r2
 800f74c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f750:	461a      	mov	r2, r3
 800f752:	2310      	movs	r3, #16
 800f754:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800f756:	693b      	ldr	r3, [r7, #16]
 800f758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800f75c:	2b00      	cmp	r3, #0
 800f75e:	d008      	beq.n	800f772 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 800f760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f762:	015a      	lsls	r2, r3, #5
 800f764:	69fb      	ldr	r3, [r7, #28]
 800f766:	4413      	add	r3, r2
 800f768:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f76c:	461a      	mov	r2, r3
 800f76e:	2340      	movs	r3, #64	; 0x40
 800f770:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 800f772:	693b      	ldr	r3, [r7, #16]
 800f774:	f003 0302 	and.w	r3, r3, #2
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d023      	beq.n	800f7c4 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800f77c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f77e:	6a38      	ldr	r0, [r7, #32]
 800f780:	f004 f946 	bl	8013a10 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800f784:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f786:	4613      	mov	r3, r2
 800f788:	00db      	lsls	r3, r3, #3
 800f78a:	4413      	add	r3, r2
 800f78c:	009b      	lsls	r3, r3, #2
 800f78e:	3338      	adds	r3, #56	; 0x38
 800f790:	687a      	ldr	r2, [r7, #4]
 800f792:	4413      	add	r3, r2
 800f794:	3304      	adds	r3, #4
 800f796:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800f798:	697b      	ldr	r3, [r7, #20]
 800f79a:	78db      	ldrb	r3, [r3, #3]
 800f79c:	2b01      	cmp	r3, #1
 800f79e:	d108      	bne.n	800f7b2 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800f7a0:	697b      	ldr	r3, [r7, #20]
 800f7a2:	2200      	movs	r2, #0
 800f7a4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 800f7a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7a8:	b2db      	uxtb	r3, r3
 800f7aa:	4619      	mov	r1, r3
 800f7ac:	6878      	ldr	r0, [r7, #4]
 800f7ae:	f007 fd3b 	bl	8017228 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 800f7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7b4:	015a      	lsls	r2, r3, #5
 800f7b6:	69fb      	ldr	r3, [r7, #28]
 800f7b8:	4413      	add	r3, r2
 800f7ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f7be:	461a      	mov	r2, r3
 800f7c0:	2302      	movs	r3, #2
 800f7c2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 800f7c4:	693b      	ldr	r3, [r7, #16]
 800f7c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d003      	beq.n	800f7d6 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800f7ce:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800f7d0:	6878      	ldr	r0, [r7, #4]
 800f7d2:	f000 fcdb 	bl	801018c <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800f7d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f7d8:	3301      	adds	r3, #1
 800f7da:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800f7dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7de:	085b      	lsrs	r3, r3, #1
 800f7e0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800f7e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7e4:	2b00      	cmp	r3, #0
 800f7e6:	f47f af2e 	bne.w	800f646 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800f7ea:	687b      	ldr	r3, [r7, #4]
 800f7ec:	681b      	ldr	r3, [r3, #0]
 800f7ee:	4618      	mov	r0, r3
 800f7f0:	f005 f930 	bl	8014a54 <USB_ReadInterrupts>
 800f7f4:	4603      	mov	r3, r0
 800f7f6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800f7fa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800f7fe:	d122      	bne.n	800f846 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800f800:	69fb      	ldr	r3, [r7, #28]
 800f802:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f806:	685b      	ldr	r3, [r3, #4]
 800f808:	69fa      	ldr	r2, [r7, #28]
 800f80a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f80e:	f023 0301 	bic.w	r3, r3, #1
 800f812:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800f81a:	2b01      	cmp	r3, #1
 800f81c:	d108      	bne.n	800f830 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 800f81e:	687b      	ldr	r3, [r7, #4]
 800f820:	2200      	movs	r2, #0
 800f822:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800f826:	2100      	movs	r1, #0
 800f828:	6878      	ldr	r0, [r7, #4]
 800f82a:	f000 fec3 	bl	80105b4 <HAL_PCDEx_LPM_Callback>
 800f82e:	e002      	b.n	800f836 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 800f830:	6878      	ldr	r0, [r7, #4]
 800f832:	f007 fcd9 	bl	80171e8 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	695a      	ldr	r2, [r3, #20]
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	681b      	ldr	r3, [r3, #0]
 800f840:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800f844:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800f846:	687b      	ldr	r3, [r7, #4]
 800f848:	681b      	ldr	r3, [r3, #0]
 800f84a:	4618      	mov	r0, r3
 800f84c:	f005 f902 	bl	8014a54 <USB_ReadInterrupts>
 800f850:	4603      	mov	r3, r0
 800f852:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800f856:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800f85a:	d112      	bne.n	800f882 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 800f85c:	69fb      	ldr	r3, [r7, #28]
 800f85e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f862:	689b      	ldr	r3, [r3, #8]
 800f864:	f003 0301 	and.w	r3, r3, #1
 800f868:	2b01      	cmp	r3, #1
 800f86a:	d102      	bne.n	800f872 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 800f86c:	6878      	ldr	r0, [r7, #4]
 800f86e:	f007 fc95 	bl	801719c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 800f872:	687b      	ldr	r3, [r7, #4]
 800f874:	681b      	ldr	r3, [r3, #0]
 800f876:	695a      	ldr	r2, [r3, #20]
 800f878:	687b      	ldr	r3, [r7, #4]
 800f87a:	681b      	ldr	r3, [r3, #0]
 800f87c:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800f880:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 800f882:	687b      	ldr	r3, [r7, #4]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	4618      	mov	r0, r3
 800f888:	f005 f8e4 	bl	8014a54 <USB_ReadInterrupts>
 800f88c:	4603      	mov	r3, r0
 800f88e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800f892:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800f896:	f040 80b7 	bne.w	800fa08 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800f89a:	69fb      	ldr	r3, [r7, #28]
 800f89c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f8a0:	685b      	ldr	r3, [r3, #4]
 800f8a2:	69fa      	ldr	r2, [r7, #28]
 800f8a4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f8a8:	f023 0301 	bic.w	r3, r3, #1
 800f8ac:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800f8ae:	687b      	ldr	r3, [r7, #4]
 800f8b0:	681b      	ldr	r3, [r3, #0]
 800f8b2:	2110      	movs	r1, #16
 800f8b4:	4618      	mov	r0, r3
 800f8b6:	f004 f8ab 	bl	8013a10 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f8ba:	2300      	movs	r3, #0
 800f8bc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f8be:	e046      	b.n	800f94e <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800f8c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8c2:	015a      	lsls	r2, r3, #5
 800f8c4:	69fb      	ldr	r3, [r7, #28]
 800f8c6:	4413      	add	r3, r2
 800f8c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8cc:	461a      	mov	r2, r3
 800f8ce:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f8d2:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 800f8d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8d6:	015a      	lsls	r2, r3, #5
 800f8d8:	69fb      	ldr	r3, [r7, #28]
 800f8da:	4413      	add	r3, r2
 800f8dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800f8e0:	681b      	ldr	r3, [r3, #0]
 800f8e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f8e4:	0151      	lsls	r1, r2, #5
 800f8e6:	69fa      	ldr	r2, [r7, #28]
 800f8e8:	440a      	add	r2, r1
 800f8ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800f8ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f8f2:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800f8f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8f6:	015a      	lsls	r2, r3, #5
 800f8f8:	69fb      	ldr	r3, [r7, #28]
 800f8fa:	4413      	add	r3, r2
 800f8fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f900:	461a      	mov	r2, r3
 800f902:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800f906:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800f908:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f90a:	015a      	lsls	r2, r3, #5
 800f90c:	69fb      	ldr	r3, [r7, #28]
 800f90e:	4413      	add	r3, r2
 800f910:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f914:	681b      	ldr	r3, [r3, #0]
 800f916:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f918:	0151      	lsls	r1, r2, #5
 800f91a:	69fa      	ldr	r2, [r7, #28]
 800f91c:	440a      	add	r2, r1
 800f91e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f922:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800f926:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800f928:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f92a:	015a      	lsls	r2, r3, #5
 800f92c:	69fb      	ldr	r3, [r7, #28]
 800f92e:	4413      	add	r3, r2
 800f930:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800f934:	681b      	ldr	r3, [r3, #0]
 800f936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f938:	0151      	lsls	r1, r2, #5
 800f93a:	69fa      	ldr	r2, [r7, #28]
 800f93c:	440a      	add	r2, r1
 800f93e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800f942:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800f946:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f948:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f94a:	3301      	adds	r3, #1
 800f94c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800f94e:	687b      	ldr	r3, [r7, #4]
 800f950:	685b      	ldr	r3, [r3, #4]
 800f952:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f954:	429a      	cmp	r2, r3
 800f956:	d3b3      	bcc.n	800f8c0 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800f958:	69fb      	ldr	r3, [r7, #28]
 800f95a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f95e:	69db      	ldr	r3, [r3, #28]
 800f960:	69fa      	ldr	r2, [r7, #28]
 800f962:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f966:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 800f96a:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800f96c:	687b      	ldr	r3, [r7, #4]
 800f96e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800f970:	2b00      	cmp	r3, #0
 800f972:	d016      	beq.n	800f9a2 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800f974:	69fb      	ldr	r3, [r7, #28]
 800f976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f97a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800f97e:	69fa      	ldr	r2, [r7, #28]
 800f980:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f984:	f043 030b 	orr.w	r3, r3, #11
 800f988:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800f98c:	69fb      	ldr	r3, [r7, #28]
 800f98e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800f994:	69fa      	ldr	r2, [r7, #28]
 800f996:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f99a:	f043 030b 	orr.w	r3, r3, #11
 800f99e:	6453      	str	r3, [r2, #68]	; 0x44
 800f9a0:	e015      	b.n	800f9ce <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 800f9a2:	69fb      	ldr	r3, [r7, #28]
 800f9a4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9a8:	695b      	ldr	r3, [r3, #20]
 800f9aa:	69fa      	ldr	r2, [r7, #28]
 800f9ac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f9b0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800f9b4:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800f9b8:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800f9ba:	69fb      	ldr	r3, [r7, #28]
 800f9bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9c0:	691b      	ldr	r3, [r3, #16]
 800f9c2:	69fa      	ldr	r2, [r7, #28]
 800f9c4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f9c8:	f043 030b 	orr.w	r3, r3, #11
 800f9cc:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800f9ce:	69fb      	ldr	r3, [r7, #28]
 800f9d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800f9d4:	681b      	ldr	r3, [r3, #0]
 800f9d6:	69fa      	ldr	r2, [r7, #28]
 800f9d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800f9dc:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800f9e0:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800f9e2:	687b      	ldr	r3, [r7, #4]
 800f9e4:	6818      	ldr	r0, [r3, #0]
 800f9e6:	687b      	ldr	r3, [r7, #4]
 800f9e8:	691b      	ldr	r3, [r3, #16]
 800f9ea:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800f9ec:	687b      	ldr	r3, [r7, #4]
 800f9ee:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800f9f2:	461a      	mov	r2, r3
 800f9f4:	f005 f8f2 	bl	8014bdc <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800f9f8:	687b      	ldr	r3, [r7, #4]
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	695a      	ldr	r2, [r3, #20]
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	681b      	ldr	r3, [r3, #0]
 800fa02:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800fa06:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	4618      	mov	r0, r3
 800fa0e:	f005 f821 	bl	8014a54 <USB_ReadInterrupts>
 800fa12:	4603      	mov	r3, r0
 800fa14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800fa18:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800fa1c:	d124      	bne.n	800fa68 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	681b      	ldr	r3, [r3, #0]
 800fa22:	4618      	mov	r0, r3
 800fa24:	f005 f8b7 	bl	8014b96 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	681b      	ldr	r3, [r3, #0]
 800fa2c:	4618      	mov	r0, r3
 800fa2e:	f004 f86c 	bl	8013b0a <USB_GetDevSpeed>
 800fa32:	4603      	mov	r3, r0
 800fa34:	461a      	mov	r2, r3
 800fa36:	687b      	ldr	r3, [r7, #4]
 800fa38:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681c      	ldr	r4, [r3, #0]
 800fa3e:	f001 fa43 	bl	8010ec8 <HAL_RCC_GetHCLKFreq>
 800fa42:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800fa44:	687b      	ldr	r3, [r7, #4]
 800fa46:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800fa48:	b2db      	uxtb	r3, r3
 800fa4a:	461a      	mov	r2, r3
 800fa4c:	4620      	mov	r0, r4
 800fa4e:	f003 fd6b 	bl	8013528 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800fa52:	6878      	ldr	r0, [r7, #4]
 800fa54:	f007 fb79 	bl	801714a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 800fa58:	687b      	ldr	r3, [r7, #4]
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	695a      	ldr	r2, [r3, #20]
 800fa5e:	687b      	ldr	r3, [r7, #4]
 800fa60:	681b      	ldr	r3, [r3, #0]
 800fa62:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800fa66:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 800fa68:	687b      	ldr	r3, [r7, #4]
 800fa6a:	681b      	ldr	r3, [r3, #0]
 800fa6c:	4618      	mov	r0, r3
 800fa6e:	f004 fff1 	bl	8014a54 <USB_ReadInterrupts>
 800fa72:	4603      	mov	r3, r0
 800fa74:	f003 0308 	and.w	r3, r3, #8
 800fa78:	2b08      	cmp	r3, #8
 800fa7a:	d10a      	bne.n	800fa92 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800fa7c:	6878      	ldr	r0, [r7, #4]
 800fa7e:	f007 fb56 	bl	801712e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 800fa82:	687b      	ldr	r3, [r7, #4]
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	695a      	ldr	r2, [r3, #20]
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	f002 0208 	and.w	r2, r2, #8
 800fa90:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 800fa92:	687b      	ldr	r3, [r7, #4]
 800fa94:	681b      	ldr	r3, [r3, #0]
 800fa96:	4618      	mov	r0, r3
 800fa98:	f004 ffdc 	bl	8014a54 <USB_ReadInterrupts>
 800fa9c:	4603      	mov	r3, r0
 800fa9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800faa2:	2b80      	cmp	r3, #128	; 0x80
 800faa4:	d122      	bne.n	800faec <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800faa6:	6a3b      	ldr	r3, [r7, #32]
 800faa8:	699b      	ldr	r3, [r3, #24]
 800faaa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800faae:	6a3b      	ldr	r3, [r7, #32]
 800fab0:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800fab2:	2301      	movs	r3, #1
 800fab4:	627b      	str	r3, [r7, #36]	; 0x24
 800fab6:	e014      	b.n	800fae2 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800fab8:	6879      	ldr	r1, [r7, #4]
 800faba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fabc:	4613      	mov	r3, r2
 800fabe:	00db      	lsls	r3, r3, #3
 800fac0:	4413      	add	r3, r2
 800fac2:	009b      	lsls	r3, r3, #2
 800fac4:	440b      	add	r3, r1
 800fac6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800faca:	781b      	ldrb	r3, [r3, #0]
 800facc:	2b01      	cmp	r3, #1
 800face:	d105      	bne.n	800fadc <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800fad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fad2:	b2db      	uxtb	r3, r3
 800fad4:	4619      	mov	r1, r3
 800fad6:	6878      	ldr	r0, [r7, #4]
 800fad8:	f000 fb27 	bl	801012a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800fadc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fade:	3301      	adds	r3, #1
 800fae0:	627b      	str	r3, [r7, #36]	; 0x24
 800fae2:	687b      	ldr	r3, [r7, #4]
 800fae4:	685b      	ldr	r3, [r3, #4]
 800fae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fae8:	429a      	cmp	r2, r3
 800faea:	d3e5      	bcc.n	800fab8 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800faec:	687b      	ldr	r3, [r7, #4]
 800faee:	681b      	ldr	r3, [r3, #0]
 800faf0:	4618      	mov	r0, r3
 800faf2:	f004 ffaf 	bl	8014a54 <USB_ReadInterrupts>
 800faf6:	4603      	mov	r3, r0
 800faf8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800fafc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800fb00:	d13b      	bne.n	800fb7a <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800fb02:	2301      	movs	r3, #1
 800fb04:	627b      	str	r3, [r7, #36]	; 0x24
 800fb06:	e02b      	b.n	800fb60 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800fb08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb0a:	015a      	lsls	r2, r3, #5
 800fb0c:	69fb      	ldr	r3, [r7, #28]
 800fb0e:	4413      	add	r3, r2
 800fb10:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800fb14:	681b      	ldr	r3, [r3, #0]
 800fb16:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800fb18:	6879      	ldr	r1, [r7, #4]
 800fb1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb1c:	4613      	mov	r3, r2
 800fb1e:	00db      	lsls	r3, r3, #3
 800fb20:	4413      	add	r3, r2
 800fb22:	009b      	lsls	r3, r3, #2
 800fb24:	440b      	add	r3, r1
 800fb26:	3340      	adds	r3, #64	; 0x40
 800fb28:	781b      	ldrb	r3, [r3, #0]
 800fb2a:	2b01      	cmp	r3, #1
 800fb2c:	d115      	bne.n	800fb5a <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800fb2e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800fb30:	2b00      	cmp	r3, #0
 800fb32:	da12      	bge.n	800fb5a <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800fb34:	6879      	ldr	r1, [r7, #4]
 800fb36:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb38:	4613      	mov	r3, r2
 800fb3a:	00db      	lsls	r3, r3, #3
 800fb3c:	4413      	add	r3, r2
 800fb3e:	009b      	lsls	r3, r3, #2
 800fb40:	440b      	add	r3, r1
 800fb42:	333f      	adds	r3, #63	; 0x3f
 800fb44:	2201      	movs	r2, #1
 800fb46:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 800fb48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb4a:	b2db      	uxtb	r3, r3
 800fb4c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800fb50:	b2db      	uxtb	r3, r3
 800fb52:	4619      	mov	r1, r3
 800fb54:	6878      	ldr	r0, [r7, #4]
 800fb56:	f000 fae8 	bl	801012a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800fb5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb5c:	3301      	adds	r3, #1
 800fb5e:	627b      	str	r3, [r7, #36]	; 0x24
 800fb60:	687b      	ldr	r3, [r7, #4]
 800fb62:	685b      	ldr	r3, [r3, #4]
 800fb64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fb66:	429a      	cmp	r2, r3
 800fb68:	d3ce      	bcc.n	800fb08 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	681b      	ldr	r3, [r3, #0]
 800fb6e:	695a      	ldr	r2, [r3, #20]
 800fb70:	687b      	ldr	r3, [r7, #4]
 800fb72:	681b      	ldr	r3, [r3, #0]
 800fb74:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 800fb78:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	681b      	ldr	r3, [r3, #0]
 800fb7e:	4618      	mov	r0, r3
 800fb80:	f004 ff68 	bl	8014a54 <USB_ReadInterrupts>
 800fb84:	4603      	mov	r3, r0
 800fb86:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800fb8a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800fb8e:	d155      	bne.n	800fc3c <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800fb90:	2301      	movs	r3, #1
 800fb92:	627b      	str	r3, [r7, #36]	; 0x24
 800fb94:	e045      	b.n	800fc22 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800fb96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fb98:	015a      	lsls	r2, r3, #5
 800fb9a:	69fb      	ldr	r3, [r7, #28]
 800fb9c:	4413      	add	r3, r2
 800fb9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800fba2:	681b      	ldr	r3, [r3, #0]
 800fba4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800fba6:	6879      	ldr	r1, [r7, #4]
 800fba8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbaa:	4613      	mov	r3, r2
 800fbac:	00db      	lsls	r3, r3, #3
 800fbae:	4413      	add	r3, r2
 800fbb0:	009b      	lsls	r3, r3, #2
 800fbb2:	440b      	add	r3, r1
 800fbb4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800fbb8:	781b      	ldrb	r3, [r3, #0]
 800fbba:	2b01      	cmp	r3, #1
 800fbbc:	d12e      	bne.n	800fc1c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800fbbe:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800fbc0:	2b00      	cmp	r3, #0
 800fbc2:	da2b      	bge.n	800fc1c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 800fbc4:	69bb      	ldr	r3, [r7, #24]
 800fbc6:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800fbca:	687b      	ldr	r3, [r7, #4]
 800fbcc:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800fbd0:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800fbd4:	429a      	cmp	r2, r3
 800fbd6:	d121      	bne.n	800fc1c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800fbd8:	6879      	ldr	r1, [r7, #4]
 800fbda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fbdc:	4613      	mov	r3, r2
 800fbde:	00db      	lsls	r3, r3, #3
 800fbe0:	4413      	add	r3, r2
 800fbe2:	009b      	lsls	r3, r3, #2
 800fbe4:	440b      	add	r3, r1
 800fbe6:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800fbea:	2201      	movs	r2, #1
 800fbec:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800fbee:	6a3b      	ldr	r3, [r7, #32]
 800fbf0:	699b      	ldr	r3, [r3, #24]
 800fbf2:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800fbf6:	6a3b      	ldr	r3, [r7, #32]
 800fbf8:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800fbfa:	6a3b      	ldr	r3, [r7, #32]
 800fbfc:	695b      	ldr	r3, [r3, #20]
 800fbfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800fc02:	2b00      	cmp	r3, #0
 800fc04:	d10a      	bne.n	800fc1c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800fc06:	69fb      	ldr	r3, [r7, #28]
 800fc08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800fc0c:	685b      	ldr	r3, [r3, #4]
 800fc0e:	69fa      	ldr	r2, [r7, #28]
 800fc10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800fc14:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800fc18:	6053      	str	r3, [r2, #4]
            break;
 800fc1a:	e007      	b.n	800fc2c <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800fc1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fc1e:	3301      	adds	r3, #1
 800fc20:	627b      	str	r3, [r7, #36]	; 0x24
 800fc22:	687b      	ldr	r3, [r7, #4]
 800fc24:	685b      	ldr	r3, [r3, #4]
 800fc26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fc28:	429a      	cmp	r2, r3
 800fc2a:	d3b4      	bcc.n	800fb96 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800fc2c:	687b      	ldr	r3, [r7, #4]
 800fc2e:	681b      	ldr	r3, [r3, #0]
 800fc30:	695a      	ldr	r2, [r3, #20]
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	681b      	ldr	r3, [r3, #0]
 800fc36:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800fc3a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800fc3c:	687b      	ldr	r3, [r7, #4]
 800fc3e:	681b      	ldr	r3, [r3, #0]
 800fc40:	4618      	mov	r0, r3
 800fc42:	f004 ff07 	bl	8014a54 <USB_ReadInterrupts>
 800fc46:	4603      	mov	r3, r0
 800fc48:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800fc4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800fc50:	d10a      	bne.n	800fc68 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800fc52:	6878      	ldr	r0, [r7, #4]
 800fc54:	f007 fafa 	bl	801724c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	681b      	ldr	r3, [r3, #0]
 800fc5c:	695a      	ldr	r2, [r3, #20]
 800fc5e:	687b      	ldr	r3, [r7, #4]
 800fc60:	681b      	ldr	r3, [r3, #0]
 800fc62:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800fc66:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	681b      	ldr	r3, [r3, #0]
 800fc6c:	4618      	mov	r0, r3
 800fc6e:	f004 fef1 	bl	8014a54 <USB_ReadInterrupts>
 800fc72:	4603      	mov	r3, r0
 800fc74:	f003 0304 	and.w	r3, r3, #4
 800fc78:	2b04      	cmp	r3, #4
 800fc7a:	d115      	bne.n	800fca8 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	685b      	ldr	r3, [r3, #4]
 800fc82:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 800fc84:	69bb      	ldr	r3, [r7, #24]
 800fc86:	f003 0304 	and.w	r3, r3, #4
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d002      	beq.n	800fc94 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800fc8e:	6878      	ldr	r0, [r7, #4]
 800fc90:	f007 faea 	bl	8017268 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 800fc94:	687b      	ldr	r3, [r7, #4]
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	6859      	ldr	r1, [r3, #4]
 800fc9a:	687b      	ldr	r3, [r7, #4]
 800fc9c:	681b      	ldr	r3, [r3, #0]
 800fc9e:	69ba      	ldr	r2, [r7, #24]
 800fca0:	430a      	orrs	r2, r1
 800fca2:	605a      	str	r2, [r3, #4]
 800fca4:	e000      	b.n	800fca8 <HAL_PCD_IRQHandler+0x938>
      return;
 800fca6:	bf00      	nop
    }
  }
}
 800fca8:	3734      	adds	r7, #52	; 0x34
 800fcaa:	46bd      	mov	sp, r7
 800fcac:	bd90      	pop	{r4, r7, pc}

0800fcae <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800fcae:	b580      	push	{r7, lr}
 800fcb0:	b082      	sub	sp, #8
 800fcb2:	af00      	add	r7, sp, #0
 800fcb4:	6078      	str	r0, [r7, #4]
 800fcb6:	460b      	mov	r3, r1
 800fcb8:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800fcba:	687b      	ldr	r3, [r7, #4]
 800fcbc:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800fcc0:	2b01      	cmp	r3, #1
 800fcc2:	d101      	bne.n	800fcc8 <HAL_PCD_SetAddress+0x1a>
 800fcc4:	2302      	movs	r3, #2
 800fcc6:	e013      	b.n	800fcf0 <HAL_PCD_SetAddress+0x42>
 800fcc8:	687b      	ldr	r3, [r7, #4]
 800fcca:	2201      	movs	r2, #1
 800fccc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800fcd0:	687b      	ldr	r3, [r7, #4]
 800fcd2:	78fa      	ldrb	r2, [r7, #3]
 800fcd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	78fa      	ldrb	r2, [r7, #3]
 800fcde:	4611      	mov	r1, r2
 800fce0:	4618      	mov	r0, r3
 800fce2:	f004 fe4f 	bl	8014984 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	2200      	movs	r2, #0
 800fcea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800fcee:	2300      	movs	r3, #0
}
 800fcf0:	4618      	mov	r0, r3
 800fcf2:	3708      	adds	r7, #8
 800fcf4:	46bd      	mov	sp, r7
 800fcf6:	bd80      	pop	{r7, pc}

0800fcf8 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800fcf8:	b580      	push	{r7, lr}
 800fcfa:	b084      	sub	sp, #16
 800fcfc:	af00      	add	r7, sp, #0
 800fcfe:	6078      	str	r0, [r7, #4]
 800fd00:	4608      	mov	r0, r1
 800fd02:	4611      	mov	r1, r2
 800fd04:	461a      	mov	r2, r3
 800fd06:	4603      	mov	r3, r0
 800fd08:	70fb      	strb	r3, [r7, #3]
 800fd0a:	460b      	mov	r3, r1
 800fd0c:	803b      	strh	r3, [r7, #0]
 800fd0e:	4613      	mov	r3, r2
 800fd10:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800fd12:	2300      	movs	r3, #0
 800fd14:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800fd16:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fd1a:	2b00      	cmp	r3, #0
 800fd1c:	da0f      	bge.n	800fd3e <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fd1e:	78fb      	ldrb	r3, [r7, #3]
 800fd20:	f003 020f 	and.w	r2, r3, #15
 800fd24:	4613      	mov	r3, r2
 800fd26:	00db      	lsls	r3, r3, #3
 800fd28:	4413      	add	r3, r2
 800fd2a:	009b      	lsls	r3, r3, #2
 800fd2c:	3338      	adds	r3, #56	; 0x38
 800fd2e:	687a      	ldr	r2, [r7, #4]
 800fd30:	4413      	add	r3, r2
 800fd32:	3304      	adds	r3, #4
 800fd34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	2201      	movs	r2, #1
 800fd3a:	705a      	strb	r2, [r3, #1]
 800fd3c:	e00f      	b.n	800fd5e <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fd3e:	78fb      	ldrb	r3, [r7, #3]
 800fd40:	f003 020f 	and.w	r2, r3, #15
 800fd44:	4613      	mov	r3, r2
 800fd46:	00db      	lsls	r3, r3, #3
 800fd48:	4413      	add	r3, r2
 800fd4a:	009b      	lsls	r3, r3, #2
 800fd4c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800fd50:	687a      	ldr	r2, [r7, #4]
 800fd52:	4413      	add	r3, r2
 800fd54:	3304      	adds	r3, #4
 800fd56:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	2200      	movs	r2, #0
 800fd5c:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800fd5e:	78fb      	ldrb	r3, [r7, #3]
 800fd60:	f003 030f 	and.w	r3, r3, #15
 800fd64:	b2da      	uxtb	r2, r3
 800fd66:	68fb      	ldr	r3, [r7, #12]
 800fd68:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800fd6a:	883a      	ldrh	r2, [r7, #0]
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800fd70:	68fb      	ldr	r3, [r7, #12]
 800fd72:	78ba      	ldrb	r2, [r7, #2]
 800fd74:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	785b      	ldrb	r3, [r3, #1]
 800fd7a:	2b00      	cmp	r3, #0
 800fd7c:	d004      	beq.n	800fd88 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800fd7e:	68fb      	ldr	r3, [r7, #12]
 800fd80:	781b      	ldrb	r3, [r3, #0]
 800fd82:	b29a      	uxth	r2, r3
 800fd84:	68fb      	ldr	r3, [r7, #12]
 800fd86:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800fd88:	78bb      	ldrb	r3, [r7, #2]
 800fd8a:	2b02      	cmp	r3, #2
 800fd8c:	d102      	bne.n	800fd94 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800fd8e:	68fb      	ldr	r3, [r7, #12]
 800fd90:	2200      	movs	r2, #0
 800fd92:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 800fd94:	687b      	ldr	r3, [r7, #4]
 800fd96:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800fd9a:	2b01      	cmp	r3, #1
 800fd9c:	d101      	bne.n	800fda2 <HAL_PCD_EP_Open+0xaa>
 800fd9e:	2302      	movs	r3, #2
 800fda0:	e00e      	b.n	800fdc0 <HAL_PCD_EP_Open+0xc8>
 800fda2:	687b      	ldr	r3, [r7, #4]
 800fda4:	2201      	movs	r2, #1
 800fda6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	68f9      	ldr	r1, [r7, #12]
 800fdb0:	4618      	mov	r0, r3
 800fdb2:	f003 fecf 	bl	8013b54 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	2200      	movs	r2, #0
 800fdba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800fdbe:	7afb      	ldrb	r3, [r7, #11]
}
 800fdc0:	4618      	mov	r0, r3
 800fdc2:	3710      	adds	r7, #16
 800fdc4:	46bd      	mov	sp, r7
 800fdc6:	bd80      	pop	{r7, pc}

0800fdc8 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800fdc8:	b580      	push	{r7, lr}
 800fdca:	b084      	sub	sp, #16
 800fdcc:	af00      	add	r7, sp, #0
 800fdce:	6078      	str	r0, [r7, #4]
 800fdd0:	460b      	mov	r3, r1
 800fdd2:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800fdd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800fdd8:	2b00      	cmp	r3, #0
 800fdda:	da0f      	bge.n	800fdfc <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800fddc:	78fb      	ldrb	r3, [r7, #3]
 800fdde:	f003 020f 	and.w	r2, r3, #15
 800fde2:	4613      	mov	r3, r2
 800fde4:	00db      	lsls	r3, r3, #3
 800fde6:	4413      	add	r3, r2
 800fde8:	009b      	lsls	r3, r3, #2
 800fdea:	3338      	adds	r3, #56	; 0x38
 800fdec:	687a      	ldr	r2, [r7, #4]
 800fdee:	4413      	add	r3, r2
 800fdf0:	3304      	adds	r3, #4
 800fdf2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800fdf4:	68fb      	ldr	r3, [r7, #12]
 800fdf6:	2201      	movs	r2, #1
 800fdf8:	705a      	strb	r2, [r3, #1]
 800fdfa:	e00f      	b.n	800fe1c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fdfc:	78fb      	ldrb	r3, [r7, #3]
 800fdfe:	f003 020f 	and.w	r2, r3, #15
 800fe02:	4613      	mov	r3, r2
 800fe04:	00db      	lsls	r3, r3, #3
 800fe06:	4413      	add	r3, r2
 800fe08:	009b      	lsls	r3, r3, #2
 800fe0a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800fe0e:	687a      	ldr	r2, [r7, #4]
 800fe10:	4413      	add	r3, r2
 800fe12:	3304      	adds	r3, #4
 800fe14:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800fe16:	68fb      	ldr	r3, [r7, #12]
 800fe18:	2200      	movs	r2, #0
 800fe1a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800fe1c:	78fb      	ldrb	r3, [r7, #3]
 800fe1e:	f003 030f 	and.w	r3, r3, #15
 800fe22:	b2da      	uxtb	r2, r3
 800fe24:	68fb      	ldr	r3, [r7, #12]
 800fe26:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800fe2e:	2b01      	cmp	r3, #1
 800fe30:	d101      	bne.n	800fe36 <HAL_PCD_EP_Close+0x6e>
 800fe32:	2302      	movs	r3, #2
 800fe34:	e00e      	b.n	800fe54 <HAL_PCD_EP_Close+0x8c>
 800fe36:	687b      	ldr	r3, [r7, #4]
 800fe38:	2201      	movs	r2, #1
 800fe3a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800fe3e:	687b      	ldr	r3, [r7, #4]
 800fe40:	681b      	ldr	r3, [r3, #0]
 800fe42:	68f9      	ldr	r1, [r7, #12]
 800fe44:	4618      	mov	r0, r3
 800fe46:	f003 ff0d 	bl	8013c64 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	2200      	movs	r2, #0
 800fe4e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800fe52:	2300      	movs	r3, #0
}
 800fe54:	4618      	mov	r0, r3
 800fe56:	3710      	adds	r7, #16
 800fe58:	46bd      	mov	sp, r7
 800fe5a:	bd80      	pop	{r7, pc}

0800fe5c <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800fe5c:	b580      	push	{r7, lr}
 800fe5e:	b086      	sub	sp, #24
 800fe60:	af00      	add	r7, sp, #0
 800fe62:	60f8      	str	r0, [r7, #12]
 800fe64:	607a      	str	r2, [r7, #4]
 800fe66:	603b      	str	r3, [r7, #0]
 800fe68:	460b      	mov	r3, r1
 800fe6a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800fe6c:	7afb      	ldrb	r3, [r7, #11]
 800fe6e:	f003 020f 	and.w	r2, r3, #15
 800fe72:	4613      	mov	r3, r2
 800fe74:	00db      	lsls	r3, r3, #3
 800fe76:	4413      	add	r3, r2
 800fe78:	009b      	lsls	r3, r3, #2
 800fe7a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800fe7e:	68fa      	ldr	r2, [r7, #12]
 800fe80:	4413      	add	r3, r2
 800fe82:	3304      	adds	r3, #4
 800fe84:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800fe86:	697b      	ldr	r3, [r7, #20]
 800fe88:	687a      	ldr	r2, [r7, #4]
 800fe8a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800fe8c:	697b      	ldr	r3, [r7, #20]
 800fe8e:	683a      	ldr	r2, [r7, #0]
 800fe90:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800fe92:	697b      	ldr	r3, [r7, #20]
 800fe94:	2200      	movs	r2, #0
 800fe96:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800fe98:	697b      	ldr	r3, [r7, #20]
 800fe9a:	2200      	movs	r2, #0
 800fe9c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800fe9e:	7afb      	ldrb	r3, [r7, #11]
 800fea0:	f003 030f 	and.w	r3, r3, #15
 800fea4:	b2da      	uxtb	r2, r3
 800fea6:	697b      	ldr	r3, [r7, #20]
 800fea8:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800feaa:	68fb      	ldr	r3, [r7, #12]
 800feac:	691b      	ldr	r3, [r3, #16]
 800feae:	2b01      	cmp	r3, #1
 800feb0:	d102      	bne.n	800feb8 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800feb2:	687a      	ldr	r2, [r7, #4]
 800feb4:	697b      	ldr	r3, [r7, #20]
 800feb6:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800feb8:	7afb      	ldrb	r3, [r7, #11]
 800feba:	f003 030f 	and.w	r3, r3, #15
 800febe:	2b00      	cmp	r3, #0
 800fec0:	d109      	bne.n	800fed6 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800fec2:	68fb      	ldr	r3, [r7, #12]
 800fec4:	6818      	ldr	r0, [r3, #0]
 800fec6:	68fb      	ldr	r3, [r7, #12]
 800fec8:	691b      	ldr	r3, [r3, #16]
 800feca:	b2db      	uxtb	r3, r3
 800fecc:	461a      	mov	r2, r3
 800fece:	6979      	ldr	r1, [r7, #20]
 800fed0:	f004 f9ec 	bl	80142ac <USB_EP0StartXfer>
 800fed4:	e008      	b.n	800fee8 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800fed6:	68fb      	ldr	r3, [r7, #12]
 800fed8:	6818      	ldr	r0, [r3, #0]
 800feda:	68fb      	ldr	r3, [r7, #12]
 800fedc:	691b      	ldr	r3, [r3, #16]
 800fede:	b2db      	uxtb	r3, r3
 800fee0:	461a      	mov	r2, r3
 800fee2:	6979      	ldr	r1, [r7, #20]
 800fee4:	f003 ff9a 	bl	8013e1c <USB_EPStartXfer>
  }

  return HAL_OK;
 800fee8:	2300      	movs	r3, #0
}
 800feea:	4618      	mov	r0, r3
 800feec:	3718      	adds	r7, #24
 800feee:	46bd      	mov	sp, r7
 800fef0:	bd80      	pop	{r7, pc}

0800fef2 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800fef2:	b480      	push	{r7}
 800fef4:	b083      	sub	sp, #12
 800fef6:	af00      	add	r7, sp, #0
 800fef8:	6078      	str	r0, [r7, #4]
 800fefa:	460b      	mov	r3, r1
 800fefc:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 800fefe:	78fb      	ldrb	r3, [r7, #3]
 800ff00:	f003 020f 	and.w	r2, r3, #15
 800ff04:	6879      	ldr	r1, [r7, #4]
 800ff06:	4613      	mov	r3, r2
 800ff08:	00db      	lsls	r3, r3, #3
 800ff0a:	4413      	add	r3, r2
 800ff0c:	009b      	lsls	r3, r3, #2
 800ff0e:	440b      	add	r3, r1
 800ff10:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 800ff14:	681b      	ldr	r3, [r3, #0]
}
 800ff16:	4618      	mov	r0, r3
 800ff18:	370c      	adds	r7, #12
 800ff1a:	46bd      	mov	sp, r7
 800ff1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff20:	4770      	bx	lr

0800ff22 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800ff22:	b580      	push	{r7, lr}
 800ff24:	b086      	sub	sp, #24
 800ff26:	af00      	add	r7, sp, #0
 800ff28:	60f8      	str	r0, [r7, #12]
 800ff2a:	607a      	str	r2, [r7, #4]
 800ff2c:	603b      	str	r3, [r7, #0]
 800ff2e:	460b      	mov	r3, r1
 800ff30:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ff32:	7afb      	ldrb	r3, [r7, #11]
 800ff34:	f003 020f 	and.w	r2, r3, #15
 800ff38:	4613      	mov	r3, r2
 800ff3a:	00db      	lsls	r3, r3, #3
 800ff3c:	4413      	add	r3, r2
 800ff3e:	009b      	lsls	r3, r3, #2
 800ff40:	3338      	adds	r3, #56	; 0x38
 800ff42:	68fa      	ldr	r2, [r7, #12]
 800ff44:	4413      	add	r3, r2
 800ff46:	3304      	adds	r3, #4
 800ff48:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800ff4a:	697b      	ldr	r3, [r7, #20]
 800ff4c:	687a      	ldr	r2, [r7, #4]
 800ff4e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800ff50:	697b      	ldr	r3, [r7, #20]
 800ff52:	683a      	ldr	r2, [r7, #0]
 800ff54:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800ff56:	697b      	ldr	r3, [r7, #20]
 800ff58:	2200      	movs	r2, #0
 800ff5a:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800ff5c:	697b      	ldr	r3, [r7, #20]
 800ff5e:	2201      	movs	r2, #1
 800ff60:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800ff62:	7afb      	ldrb	r3, [r7, #11]
 800ff64:	f003 030f 	and.w	r3, r3, #15
 800ff68:	b2da      	uxtb	r2, r3
 800ff6a:	697b      	ldr	r3, [r7, #20]
 800ff6c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	691b      	ldr	r3, [r3, #16]
 800ff72:	2b01      	cmp	r3, #1
 800ff74:	d102      	bne.n	800ff7c <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800ff76:	687a      	ldr	r2, [r7, #4]
 800ff78:	697b      	ldr	r3, [r7, #20]
 800ff7a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800ff7c:	7afb      	ldrb	r3, [r7, #11]
 800ff7e:	f003 030f 	and.w	r3, r3, #15
 800ff82:	2b00      	cmp	r3, #0
 800ff84:	d109      	bne.n	800ff9a <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ff86:	68fb      	ldr	r3, [r7, #12]
 800ff88:	6818      	ldr	r0, [r3, #0]
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	691b      	ldr	r3, [r3, #16]
 800ff8e:	b2db      	uxtb	r3, r3
 800ff90:	461a      	mov	r2, r3
 800ff92:	6979      	ldr	r1, [r7, #20]
 800ff94:	f004 f98a 	bl	80142ac <USB_EP0StartXfer>
 800ff98:	e008      	b.n	800ffac <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	6818      	ldr	r0, [r3, #0]
 800ff9e:	68fb      	ldr	r3, [r7, #12]
 800ffa0:	691b      	ldr	r3, [r3, #16]
 800ffa2:	b2db      	uxtb	r3, r3
 800ffa4:	461a      	mov	r2, r3
 800ffa6:	6979      	ldr	r1, [r7, #20]
 800ffa8:	f003 ff38 	bl	8013e1c <USB_EPStartXfer>
  }

  return HAL_OK;
 800ffac:	2300      	movs	r3, #0
}
 800ffae:	4618      	mov	r0, r3
 800ffb0:	3718      	adds	r7, #24
 800ffb2:	46bd      	mov	sp, r7
 800ffb4:	bd80      	pop	{r7, pc}

0800ffb6 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ffb6:	b580      	push	{r7, lr}
 800ffb8:	b084      	sub	sp, #16
 800ffba:	af00      	add	r7, sp, #0
 800ffbc:	6078      	str	r0, [r7, #4]
 800ffbe:	460b      	mov	r3, r1
 800ffc0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 800ffc2:	78fb      	ldrb	r3, [r7, #3]
 800ffc4:	f003 020f 	and.w	r2, r3, #15
 800ffc8:	687b      	ldr	r3, [r7, #4]
 800ffca:	685b      	ldr	r3, [r3, #4]
 800ffcc:	429a      	cmp	r2, r3
 800ffce:	d901      	bls.n	800ffd4 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800ffd0:	2301      	movs	r3, #1
 800ffd2:	e050      	b.n	8010076 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800ffd4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ffd8:	2b00      	cmp	r3, #0
 800ffda:	da0f      	bge.n	800fffc <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ffdc:	78fb      	ldrb	r3, [r7, #3]
 800ffde:	f003 020f 	and.w	r2, r3, #15
 800ffe2:	4613      	mov	r3, r2
 800ffe4:	00db      	lsls	r3, r3, #3
 800ffe6:	4413      	add	r3, r2
 800ffe8:	009b      	lsls	r3, r3, #2
 800ffea:	3338      	adds	r3, #56	; 0x38
 800ffec:	687a      	ldr	r2, [r7, #4]
 800ffee:	4413      	add	r3, r2
 800fff0:	3304      	adds	r3, #4
 800fff2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800fff4:	68fb      	ldr	r3, [r7, #12]
 800fff6:	2201      	movs	r2, #1
 800fff8:	705a      	strb	r2, [r3, #1]
 800fffa:	e00d      	b.n	8010018 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800fffc:	78fa      	ldrb	r2, [r7, #3]
 800fffe:	4613      	mov	r3, r2
 8010000:	00db      	lsls	r3, r3, #3
 8010002:	4413      	add	r3, r2
 8010004:	009b      	lsls	r3, r3, #2
 8010006:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801000a:	687a      	ldr	r2, [r7, #4]
 801000c:	4413      	add	r3, r2
 801000e:	3304      	adds	r3, #4
 8010010:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	2200      	movs	r2, #0
 8010016:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8010018:	68fb      	ldr	r3, [r7, #12]
 801001a:	2201      	movs	r2, #1
 801001c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801001e:	78fb      	ldrb	r3, [r7, #3]
 8010020:	f003 030f 	and.w	r3, r3, #15
 8010024:	b2da      	uxtb	r2, r3
 8010026:	68fb      	ldr	r3, [r7, #12]
 8010028:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801002a:	687b      	ldr	r3, [r7, #4]
 801002c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8010030:	2b01      	cmp	r3, #1
 8010032:	d101      	bne.n	8010038 <HAL_PCD_EP_SetStall+0x82>
 8010034:	2302      	movs	r3, #2
 8010036:	e01e      	b.n	8010076 <HAL_PCD_EP_SetStall+0xc0>
 8010038:	687b      	ldr	r3, [r7, #4]
 801003a:	2201      	movs	r2, #1
 801003c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8010040:	687b      	ldr	r3, [r7, #4]
 8010042:	681b      	ldr	r3, [r3, #0]
 8010044:	68f9      	ldr	r1, [r7, #12]
 8010046:	4618      	mov	r0, r3
 8010048:	f004 fbc8 	bl	80147dc <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 801004c:	78fb      	ldrb	r3, [r7, #3]
 801004e:	f003 030f 	and.w	r3, r3, #15
 8010052:	2b00      	cmp	r3, #0
 8010054:	d10a      	bne.n	801006c <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8010056:	687b      	ldr	r3, [r7, #4]
 8010058:	6818      	ldr	r0, [r3, #0]
 801005a:	687b      	ldr	r3, [r7, #4]
 801005c:	691b      	ldr	r3, [r3, #16]
 801005e:	b2d9      	uxtb	r1, r3
 8010060:	687b      	ldr	r3, [r7, #4]
 8010062:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010066:	461a      	mov	r2, r3
 8010068:	f004 fdb8 	bl	8014bdc <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 801006c:	687b      	ldr	r3, [r7, #4]
 801006e:	2200      	movs	r2, #0
 8010070:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8010074:	2300      	movs	r3, #0
}
 8010076:	4618      	mov	r0, r3
 8010078:	3710      	adds	r7, #16
 801007a:	46bd      	mov	sp, r7
 801007c:	bd80      	pop	{r7, pc}

0801007e <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801007e:	b580      	push	{r7, lr}
 8010080:	b084      	sub	sp, #16
 8010082:	af00      	add	r7, sp, #0
 8010084:	6078      	str	r0, [r7, #4]
 8010086:	460b      	mov	r3, r1
 8010088:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 801008a:	78fb      	ldrb	r3, [r7, #3]
 801008c:	f003 020f 	and.w	r2, r3, #15
 8010090:	687b      	ldr	r3, [r7, #4]
 8010092:	685b      	ldr	r3, [r3, #4]
 8010094:	429a      	cmp	r2, r3
 8010096:	d901      	bls.n	801009c <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8010098:	2301      	movs	r3, #1
 801009a:	e042      	b.n	8010122 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801009c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80100a0:	2b00      	cmp	r3, #0
 80100a2:	da0f      	bge.n	80100c4 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80100a4:	78fb      	ldrb	r3, [r7, #3]
 80100a6:	f003 020f 	and.w	r2, r3, #15
 80100aa:	4613      	mov	r3, r2
 80100ac:	00db      	lsls	r3, r3, #3
 80100ae:	4413      	add	r3, r2
 80100b0:	009b      	lsls	r3, r3, #2
 80100b2:	3338      	adds	r3, #56	; 0x38
 80100b4:	687a      	ldr	r2, [r7, #4]
 80100b6:	4413      	add	r3, r2
 80100b8:	3304      	adds	r3, #4
 80100ba:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80100bc:	68fb      	ldr	r3, [r7, #12]
 80100be:	2201      	movs	r2, #1
 80100c0:	705a      	strb	r2, [r3, #1]
 80100c2:	e00f      	b.n	80100e4 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80100c4:	78fb      	ldrb	r3, [r7, #3]
 80100c6:	f003 020f 	and.w	r2, r3, #15
 80100ca:	4613      	mov	r3, r2
 80100cc:	00db      	lsls	r3, r3, #3
 80100ce:	4413      	add	r3, r2
 80100d0:	009b      	lsls	r3, r3, #2
 80100d2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80100d6:	687a      	ldr	r2, [r7, #4]
 80100d8:	4413      	add	r3, r2
 80100da:	3304      	adds	r3, #4
 80100dc:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80100de:	68fb      	ldr	r3, [r7, #12]
 80100e0:	2200      	movs	r2, #0
 80100e2:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80100e4:	68fb      	ldr	r3, [r7, #12]
 80100e6:	2200      	movs	r2, #0
 80100e8:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80100ea:	78fb      	ldrb	r3, [r7, #3]
 80100ec:	f003 030f 	and.w	r3, r3, #15
 80100f0:	b2da      	uxtb	r2, r3
 80100f2:	68fb      	ldr	r3, [r7, #12]
 80100f4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80100f6:	687b      	ldr	r3, [r7, #4]
 80100f8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80100fc:	2b01      	cmp	r3, #1
 80100fe:	d101      	bne.n	8010104 <HAL_PCD_EP_ClrStall+0x86>
 8010100:	2302      	movs	r3, #2
 8010102:	e00e      	b.n	8010122 <HAL_PCD_EP_ClrStall+0xa4>
 8010104:	687b      	ldr	r3, [r7, #4]
 8010106:	2201      	movs	r2, #1
 8010108:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 801010c:	687b      	ldr	r3, [r7, #4]
 801010e:	681b      	ldr	r3, [r3, #0]
 8010110:	68f9      	ldr	r1, [r7, #12]
 8010112:	4618      	mov	r0, r3
 8010114:	f004 fbd0 	bl	80148b8 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8010118:	687b      	ldr	r3, [r7, #4]
 801011a:	2200      	movs	r2, #0
 801011c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8010120:	2300      	movs	r3, #0
}
 8010122:	4618      	mov	r0, r3
 8010124:	3710      	adds	r7, #16
 8010126:	46bd      	mov	sp, r7
 8010128:	bd80      	pop	{r7, pc}

0801012a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801012a:	b580      	push	{r7, lr}
 801012c:	b084      	sub	sp, #16
 801012e:	af00      	add	r7, sp, #0
 8010130:	6078      	str	r0, [r7, #4]
 8010132:	460b      	mov	r3, r1
 8010134:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8010136:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801013a:	2b00      	cmp	r3, #0
 801013c:	da0c      	bge.n	8010158 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801013e:	78fb      	ldrb	r3, [r7, #3]
 8010140:	f003 020f 	and.w	r2, r3, #15
 8010144:	4613      	mov	r3, r2
 8010146:	00db      	lsls	r3, r3, #3
 8010148:	4413      	add	r3, r2
 801014a:	009b      	lsls	r3, r3, #2
 801014c:	3338      	adds	r3, #56	; 0x38
 801014e:	687a      	ldr	r2, [r7, #4]
 8010150:	4413      	add	r3, r2
 8010152:	3304      	adds	r3, #4
 8010154:	60fb      	str	r3, [r7, #12]
 8010156:	e00c      	b.n	8010172 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010158:	78fb      	ldrb	r3, [r7, #3]
 801015a:	f003 020f 	and.w	r2, r3, #15
 801015e:	4613      	mov	r3, r2
 8010160:	00db      	lsls	r3, r3, #3
 8010162:	4413      	add	r3, r2
 8010164:	009b      	lsls	r3, r3, #2
 8010166:	f503 731e 	add.w	r3, r3, #632	; 0x278
 801016a:	687a      	ldr	r2, [r7, #4]
 801016c:	4413      	add	r3, r2
 801016e:	3304      	adds	r3, #4
 8010170:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8010172:	687b      	ldr	r3, [r7, #4]
 8010174:	681b      	ldr	r3, [r3, #0]
 8010176:	68f9      	ldr	r1, [r7, #12]
 8010178:	4618      	mov	r0, r3
 801017a:	f004 f9ef 	bl	801455c <USB_EPStopXfer>
 801017e:	4603      	mov	r3, r0
 8010180:	72fb      	strb	r3, [r7, #11]

  return ret;
 8010182:	7afb      	ldrb	r3, [r7, #11]
}
 8010184:	4618      	mov	r0, r3
 8010186:	3710      	adds	r7, #16
 8010188:	46bd      	mov	sp, r7
 801018a:	bd80      	pop	{r7, pc}

0801018c <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 801018c:	b580      	push	{r7, lr}
 801018e:	b08a      	sub	sp, #40	; 0x28
 8010190:	af02      	add	r7, sp, #8
 8010192:	6078      	str	r0, [r7, #4]
 8010194:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	681b      	ldr	r3, [r3, #0]
 801019a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801019c:	697b      	ldr	r3, [r7, #20]
 801019e:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80101a0:	683a      	ldr	r2, [r7, #0]
 80101a2:	4613      	mov	r3, r2
 80101a4:	00db      	lsls	r3, r3, #3
 80101a6:	4413      	add	r3, r2
 80101a8:	009b      	lsls	r3, r3, #2
 80101aa:	3338      	adds	r3, #56	; 0x38
 80101ac:	687a      	ldr	r2, [r7, #4]
 80101ae:	4413      	add	r3, r2
 80101b0:	3304      	adds	r3, #4
 80101b2:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	6a1a      	ldr	r2, [r3, #32]
 80101b8:	68fb      	ldr	r3, [r7, #12]
 80101ba:	699b      	ldr	r3, [r3, #24]
 80101bc:	429a      	cmp	r2, r3
 80101be:	d901      	bls.n	80101c4 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80101c0:	2301      	movs	r3, #1
 80101c2:	e06c      	b.n	801029e <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80101c4:	68fb      	ldr	r3, [r7, #12]
 80101c6:	699a      	ldr	r2, [r3, #24]
 80101c8:	68fb      	ldr	r3, [r7, #12]
 80101ca:	6a1b      	ldr	r3, [r3, #32]
 80101cc:	1ad3      	subs	r3, r2, r3
 80101ce:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80101d0:	68fb      	ldr	r3, [r7, #12]
 80101d2:	68db      	ldr	r3, [r3, #12]
 80101d4:	69fa      	ldr	r2, [r7, #28]
 80101d6:	429a      	cmp	r2, r3
 80101d8:	d902      	bls.n	80101e0 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80101da:	68fb      	ldr	r3, [r7, #12]
 80101dc:	68db      	ldr	r3, [r3, #12]
 80101de:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80101e0:	69fb      	ldr	r3, [r7, #28]
 80101e2:	3303      	adds	r3, #3
 80101e4:	089b      	lsrs	r3, r3, #2
 80101e6:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80101e8:	e02b      	b.n	8010242 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80101ea:	68fb      	ldr	r3, [r7, #12]
 80101ec:	699a      	ldr	r2, [r3, #24]
 80101ee:	68fb      	ldr	r3, [r7, #12]
 80101f0:	6a1b      	ldr	r3, [r3, #32]
 80101f2:	1ad3      	subs	r3, r2, r3
 80101f4:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80101f6:	68fb      	ldr	r3, [r7, #12]
 80101f8:	68db      	ldr	r3, [r3, #12]
 80101fa:	69fa      	ldr	r2, [r7, #28]
 80101fc:	429a      	cmp	r2, r3
 80101fe:	d902      	bls.n	8010206 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8010200:	68fb      	ldr	r3, [r7, #12]
 8010202:	68db      	ldr	r3, [r3, #12]
 8010204:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8010206:	69fb      	ldr	r3, [r7, #28]
 8010208:	3303      	adds	r3, #3
 801020a:	089b      	lsrs	r3, r3, #2
 801020c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801020e:	68fb      	ldr	r3, [r7, #12]
 8010210:	6919      	ldr	r1, [r3, #16]
 8010212:	683b      	ldr	r3, [r7, #0]
 8010214:	b2da      	uxtb	r2, r3
 8010216:	69fb      	ldr	r3, [r7, #28]
 8010218:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 801021a:	687b      	ldr	r3, [r7, #4]
 801021c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 801021e:	b2db      	uxtb	r3, r3
 8010220:	9300      	str	r3, [sp, #0]
 8010222:	4603      	mov	r3, r0
 8010224:	6978      	ldr	r0, [r7, #20]
 8010226:	f004 fa43 	bl	80146b0 <USB_WritePacket>

    ep->xfer_buff  += len;
 801022a:	68fb      	ldr	r3, [r7, #12]
 801022c:	691a      	ldr	r2, [r3, #16]
 801022e:	69fb      	ldr	r3, [r7, #28]
 8010230:	441a      	add	r2, r3
 8010232:	68fb      	ldr	r3, [r7, #12]
 8010234:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8010236:	68fb      	ldr	r3, [r7, #12]
 8010238:	6a1a      	ldr	r2, [r3, #32]
 801023a:	69fb      	ldr	r3, [r7, #28]
 801023c:	441a      	add	r2, r3
 801023e:	68fb      	ldr	r3, [r7, #12]
 8010240:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8010242:	683b      	ldr	r3, [r7, #0]
 8010244:	015a      	lsls	r2, r3, #5
 8010246:	693b      	ldr	r3, [r7, #16]
 8010248:	4413      	add	r3, r2
 801024a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801024e:	699b      	ldr	r3, [r3, #24]
 8010250:	b29b      	uxth	r3, r3
 8010252:	69ba      	ldr	r2, [r7, #24]
 8010254:	429a      	cmp	r2, r3
 8010256:	d809      	bhi.n	801026c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8010258:	68fb      	ldr	r3, [r7, #12]
 801025a:	6a1a      	ldr	r2, [r3, #32]
 801025c:	68fb      	ldr	r3, [r7, #12]
 801025e:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8010260:	429a      	cmp	r2, r3
 8010262:	d203      	bcs.n	801026c <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8010264:	68fb      	ldr	r3, [r7, #12]
 8010266:	699b      	ldr	r3, [r3, #24]
 8010268:	2b00      	cmp	r3, #0
 801026a:	d1be      	bne.n	80101ea <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	699a      	ldr	r2, [r3, #24]
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	6a1b      	ldr	r3, [r3, #32]
 8010274:	429a      	cmp	r2, r3
 8010276:	d811      	bhi.n	801029c <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8010278:	683b      	ldr	r3, [r7, #0]
 801027a:	f003 030f 	and.w	r3, r3, #15
 801027e:	2201      	movs	r2, #1
 8010280:	fa02 f303 	lsl.w	r3, r2, r3
 8010284:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8010286:	693b      	ldr	r3, [r7, #16]
 8010288:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801028c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801028e:	68bb      	ldr	r3, [r7, #8]
 8010290:	43db      	mvns	r3, r3
 8010292:	6939      	ldr	r1, [r7, #16]
 8010294:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8010298:	4013      	ands	r3, r2
 801029a:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 801029c:	2300      	movs	r3, #0
}
 801029e:	4618      	mov	r0, r3
 80102a0:	3720      	adds	r7, #32
 80102a2:	46bd      	mov	sp, r7
 80102a4:	bd80      	pop	{r7, pc}
	...

080102a8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80102a8:	b580      	push	{r7, lr}
 80102aa:	b088      	sub	sp, #32
 80102ac:	af00      	add	r7, sp, #0
 80102ae:	6078      	str	r0, [r7, #4]
 80102b0:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80102b2:	687b      	ldr	r3, [r7, #4]
 80102b4:	681b      	ldr	r3, [r3, #0]
 80102b6:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80102b8:	69fb      	ldr	r3, [r7, #28]
 80102ba:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80102bc:	69fb      	ldr	r3, [r7, #28]
 80102be:	333c      	adds	r3, #60	; 0x3c
 80102c0:	3304      	adds	r3, #4
 80102c2:	681b      	ldr	r3, [r3, #0]
 80102c4:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80102c6:	683b      	ldr	r3, [r7, #0]
 80102c8:	015a      	lsls	r2, r3, #5
 80102ca:	69bb      	ldr	r3, [r7, #24]
 80102cc:	4413      	add	r3, r2
 80102ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80102d2:	689b      	ldr	r3, [r3, #8]
 80102d4:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80102d6:	687b      	ldr	r3, [r7, #4]
 80102d8:	691b      	ldr	r3, [r3, #16]
 80102da:	2b01      	cmp	r3, #1
 80102dc:	d17b      	bne.n	80103d6 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80102de:	693b      	ldr	r3, [r7, #16]
 80102e0:	f003 0308 	and.w	r3, r3, #8
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d015      	beq.n	8010314 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80102e8:	697b      	ldr	r3, [r7, #20]
 80102ea:	4a61      	ldr	r2, [pc, #388]	; (8010470 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80102ec:	4293      	cmp	r3, r2
 80102ee:	f240 80b9 	bls.w	8010464 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80102f2:	693b      	ldr	r3, [r7, #16]
 80102f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	f000 80b3 	beq.w	8010464 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80102fe:	683b      	ldr	r3, [r7, #0]
 8010300:	015a      	lsls	r2, r3, #5
 8010302:	69bb      	ldr	r3, [r7, #24]
 8010304:	4413      	add	r3, r2
 8010306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801030a:	461a      	mov	r2, r3
 801030c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010310:	6093      	str	r3, [r2, #8]
 8010312:	e0a7      	b.n	8010464 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8010314:	693b      	ldr	r3, [r7, #16]
 8010316:	f003 0320 	and.w	r3, r3, #32
 801031a:	2b00      	cmp	r3, #0
 801031c:	d009      	beq.n	8010332 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 801031e:	683b      	ldr	r3, [r7, #0]
 8010320:	015a      	lsls	r2, r3, #5
 8010322:	69bb      	ldr	r3, [r7, #24]
 8010324:	4413      	add	r3, r2
 8010326:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801032a:	461a      	mov	r2, r3
 801032c:	2320      	movs	r3, #32
 801032e:	6093      	str	r3, [r2, #8]
 8010330:	e098      	b.n	8010464 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8010332:	693b      	ldr	r3, [r7, #16]
 8010334:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8010338:	2b00      	cmp	r3, #0
 801033a:	f040 8093 	bne.w	8010464 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801033e:	697b      	ldr	r3, [r7, #20]
 8010340:	4a4b      	ldr	r2, [pc, #300]	; (8010470 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8010342:	4293      	cmp	r3, r2
 8010344:	d90f      	bls.n	8010366 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8010346:	693b      	ldr	r3, [r7, #16]
 8010348:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 801034c:	2b00      	cmp	r3, #0
 801034e:	d00a      	beq.n	8010366 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8010350:	683b      	ldr	r3, [r7, #0]
 8010352:	015a      	lsls	r2, r3, #5
 8010354:	69bb      	ldr	r3, [r7, #24]
 8010356:	4413      	add	r3, r2
 8010358:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801035c:	461a      	mov	r2, r3
 801035e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8010362:	6093      	str	r3, [r2, #8]
 8010364:	e07e      	b.n	8010464 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8010366:	683a      	ldr	r2, [r7, #0]
 8010368:	4613      	mov	r3, r2
 801036a:	00db      	lsls	r3, r3, #3
 801036c:	4413      	add	r3, r2
 801036e:	009b      	lsls	r3, r3, #2
 8010370:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8010374:	687a      	ldr	r2, [r7, #4]
 8010376:	4413      	add	r3, r2
 8010378:	3304      	adds	r3, #4
 801037a:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 801037c:	68fb      	ldr	r3, [r7, #12]
 801037e:	69da      	ldr	r2, [r3, #28]
 8010380:	683b      	ldr	r3, [r7, #0]
 8010382:	0159      	lsls	r1, r3, #5
 8010384:	69bb      	ldr	r3, [r7, #24]
 8010386:	440b      	add	r3, r1
 8010388:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801038c:	691b      	ldr	r3, [r3, #16]
 801038e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8010392:	1ad2      	subs	r2, r2, r3
 8010394:	68fb      	ldr	r3, [r7, #12]
 8010396:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8010398:	683b      	ldr	r3, [r7, #0]
 801039a:	2b00      	cmp	r3, #0
 801039c:	d114      	bne.n	80103c8 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 801039e:	68fb      	ldr	r3, [r7, #12]
 80103a0:	699b      	ldr	r3, [r3, #24]
 80103a2:	2b00      	cmp	r3, #0
 80103a4:	d109      	bne.n	80103ba <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	6818      	ldr	r0, [r3, #0]
 80103aa:	687b      	ldr	r3, [r7, #4]
 80103ac:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80103b0:	461a      	mov	r2, r3
 80103b2:	2101      	movs	r1, #1
 80103b4:	f004 fc12 	bl	8014bdc <USB_EP0_OutStart>
 80103b8:	e006      	b.n	80103c8 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80103ba:	68fb      	ldr	r3, [r7, #12]
 80103bc:	691a      	ldr	r2, [r3, #16]
 80103be:	68fb      	ldr	r3, [r7, #12]
 80103c0:	6a1b      	ldr	r3, [r3, #32]
 80103c2:	441a      	add	r2, r3
 80103c4:	68fb      	ldr	r3, [r7, #12]
 80103c6:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80103c8:	683b      	ldr	r3, [r7, #0]
 80103ca:	b2db      	uxtb	r3, r3
 80103cc:	4619      	mov	r1, r3
 80103ce:	6878      	ldr	r0, [r7, #4]
 80103d0:	f006 fe78 	bl	80170c4 <HAL_PCD_DataOutStageCallback>
 80103d4:	e046      	b.n	8010464 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80103d6:	697b      	ldr	r3, [r7, #20]
 80103d8:	4a26      	ldr	r2, [pc, #152]	; (8010474 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80103da:	4293      	cmp	r3, r2
 80103dc:	d124      	bne.n	8010428 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80103de:	693b      	ldr	r3, [r7, #16]
 80103e0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d00a      	beq.n	80103fe <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80103e8:	683b      	ldr	r3, [r7, #0]
 80103ea:	015a      	lsls	r2, r3, #5
 80103ec:	69bb      	ldr	r3, [r7, #24]
 80103ee:	4413      	add	r3, r2
 80103f0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80103f4:	461a      	mov	r2, r3
 80103f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80103fa:	6093      	str	r3, [r2, #8]
 80103fc:	e032      	b.n	8010464 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80103fe:	693b      	ldr	r3, [r7, #16]
 8010400:	f003 0320 	and.w	r3, r3, #32
 8010404:	2b00      	cmp	r3, #0
 8010406:	d008      	beq.n	801041a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8010408:	683b      	ldr	r3, [r7, #0]
 801040a:	015a      	lsls	r2, r3, #5
 801040c:	69bb      	ldr	r3, [r7, #24]
 801040e:	4413      	add	r3, r2
 8010410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8010414:	461a      	mov	r2, r3
 8010416:	2320      	movs	r3, #32
 8010418:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 801041a:	683b      	ldr	r3, [r7, #0]
 801041c:	b2db      	uxtb	r3, r3
 801041e:	4619      	mov	r1, r3
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f006 fe4f 	bl	80170c4 <HAL_PCD_DataOutStageCallback>
 8010426:	e01d      	b.n	8010464 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8010428:	683b      	ldr	r3, [r7, #0]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d114      	bne.n	8010458 <PCD_EP_OutXfrComplete_int+0x1b0>
 801042e:	6879      	ldr	r1, [r7, #4]
 8010430:	683a      	ldr	r2, [r7, #0]
 8010432:	4613      	mov	r3, r2
 8010434:	00db      	lsls	r3, r3, #3
 8010436:	4413      	add	r3, r2
 8010438:	009b      	lsls	r3, r3, #2
 801043a:	440b      	add	r3, r1
 801043c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8010440:	681b      	ldr	r3, [r3, #0]
 8010442:	2b00      	cmp	r3, #0
 8010444:	d108      	bne.n	8010458 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8010446:	687b      	ldr	r3, [r7, #4]
 8010448:	6818      	ldr	r0, [r3, #0]
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8010450:	461a      	mov	r2, r3
 8010452:	2100      	movs	r1, #0
 8010454:	f004 fbc2 	bl	8014bdc <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8010458:	683b      	ldr	r3, [r7, #0]
 801045a:	b2db      	uxtb	r3, r3
 801045c:	4619      	mov	r1, r3
 801045e:	6878      	ldr	r0, [r7, #4]
 8010460:	f006 fe30 	bl	80170c4 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8010464:	2300      	movs	r3, #0
}
 8010466:	4618      	mov	r0, r3
 8010468:	3720      	adds	r7, #32
 801046a:	46bd      	mov	sp, r7
 801046c:	bd80      	pop	{r7, pc}
 801046e:	bf00      	nop
 8010470:	4f54300a 	.word	0x4f54300a
 8010474:	4f54310a 	.word	0x4f54310a

08010478 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8010478:	b580      	push	{r7, lr}
 801047a:	b086      	sub	sp, #24
 801047c:	af00      	add	r7, sp, #0
 801047e:	6078      	str	r0, [r7, #4]
 8010480:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8010482:	687b      	ldr	r3, [r7, #4]
 8010484:	681b      	ldr	r3, [r3, #0]
 8010486:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8010488:	697b      	ldr	r3, [r7, #20]
 801048a:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 801048c:	697b      	ldr	r3, [r7, #20]
 801048e:	333c      	adds	r3, #60	; 0x3c
 8010490:	3304      	adds	r3, #4
 8010492:	681b      	ldr	r3, [r3, #0]
 8010494:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8010496:	683b      	ldr	r3, [r7, #0]
 8010498:	015a      	lsls	r2, r3, #5
 801049a:	693b      	ldr	r3, [r7, #16]
 801049c:	4413      	add	r3, r2
 801049e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104a2:	689b      	ldr	r3, [r3, #8]
 80104a4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80104a6:	68fb      	ldr	r3, [r7, #12]
 80104a8:	4a15      	ldr	r2, [pc, #84]	; (8010500 <PCD_EP_OutSetupPacket_int+0x88>)
 80104aa:	4293      	cmp	r3, r2
 80104ac:	d90e      	bls.n	80104cc <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80104ae:	68bb      	ldr	r3, [r7, #8]
 80104b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80104b4:	2b00      	cmp	r3, #0
 80104b6:	d009      	beq.n	80104cc <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80104b8:	683b      	ldr	r3, [r7, #0]
 80104ba:	015a      	lsls	r2, r3, #5
 80104bc:	693b      	ldr	r3, [r7, #16]
 80104be:	4413      	add	r3, r2
 80104c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80104c4:	461a      	mov	r2, r3
 80104c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80104ca:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80104cc:	6878      	ldr	r0, [r7, #4]
 80104ce:	f006 fde7 	bl	80170a0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80104d2:	68fb      	ldr	r3, [r7, #12]
 80104d4:	4a0a      	ldr	r2, [pc, #40]	; (8010500 <PCD_EP_OutSetupPacket_int+0x88>)
 80104d6:	4293      	cmp	r3, r2
 80104d8:	d90c      	bls.n	80104f4 <PCD_EP_OutSetupPacket_int+0x7c>
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	691b      	ldr	r3, [r3, #16]
 80104de:	2b01      	cmp	r3, #1
 80104e0:	d108      	bne.n	80104f4 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	6818      	ldr	r0, [r3, #0]
 80104e6:	687b      	ldr	r3, [r7, #4]
 80104e8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80104ec:	461a      	mov	r2, r3
 80104ee:	2101      	movs	r1, #1
 80104f0:	f004 fb74 	bl	8014bdc <USB_EP0_OutStart>
  }

  return HAL_OK;
 80104f4:	2300      	movs	r3, #0
}
 80104f6:	4618      	mov	r0, r3
 80104f8:	3718      	adds	r7, #24
 80104fa:	46bd      	mov	sp, r7
 80104fc:	bd80      	pop	{r7, pc}
 80104fe:	bf00      	nop
 8010500:	4f54300a 	.word	0x4f54300a

08010504 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8010504:	b480      	push	{r7}
 8010506:	b085      	sub	sp, #20
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
 801050c:	460b      	mov	r3, r1
 801050e:	70fb      	strb	r3, [r7, #3]
 8010510:	4613      	mov	r3, r2
 8010512:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	681b      	ldr	r3, [r3, #0]
 8010518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801051a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 801051c:	78fb      	ldrb	r3, [r7, #3]
 801051e:	2b00      	cmp	r3, #0
 8010520:	d107      	bne.n	8010532 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8010522:	883b      	ldrh	r3, [r7, #0]
 8010524:	0419      	lsls	r1, r3, #16
 8010526:	687b      	ldr	r3, [r7, #4]
 8010528:	681b      	ldr	r3, [r3, #0]
 801052a:	68ba      	ldr	r2, [r7, #8]
 801052c:	430a      	orrs	r2, r1
 801052e:	629a      	str	r2, [r3, #40]	; 0x28
 8010530:	e028      	b.n	8010584 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8010532:	687b      	ldr	r3, [r7, #4]
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010538:	0c1b      	lsrs	r3, r3, #16
 801053a:	68ba      	ldr	r2, [r7, #8]
 801053c:	4413      	add	r3, r2
 801053e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8010540:	2300      	movs	r3, #0
 8010542:	73fb      	strb	r3, [r7, #15]
 8010544:	e00d      	b.n	8010562 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8010546:	687b      	ldr	r3, [r7, #4]
 8010548:	681a      	ldr	r2, [r3, #0]
 801054a:	7bfb      	ldrb	r3, [r7, #15]
 801054c:	3340      	adds	r3, #64	; 0x40
 801054e:	009b      	lsls	r3, r3, #2
 8010550:	4413      	add	r3, r2
 8010552:	685b      	ldr	r3, [r3, #4]
 8010554:	0c1b      	lsrs	r3, r3, #16
 8010556:	68ba      	ldr	r2, [r7, #8]
 8010558:	4413      	add	r3, r2
 801055a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 801055c:	7bfb      	ldrb	r3, [r7, #15]
 801055e:	3301      	adds	r3, #1
 8010560:	73fb      	strb	r3, [r7, #15]
 8010562:	7bfa      	ldrb	r2, [r7, #15]
 8010564:	78fb      	ldrb	r3, [r7, #3]
 8010566:	3b01      	subs	r3, #1
 8010568:	429a      	cmp	r2, r3
 801056a:	d3ec      	bcc.n	8010546 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 801056c:	883b      	ldrh	r3, [r7, #0]
 801056e:	0418      	lsls	r0, r3, #16
 8010570:	687b      	ldr	r3, [r7, #4]
 8010572:	6819      	ldr	r1, [r3, #0]
 8010574:	78fb      	ldrb	r3, [r7, #3]
 8010576:	3b01      	subs	r3, #1
 8010578:	68ba      	ldr	r2, [r7, #8]
 801057a:	4302      	orrs	r2, r0
 801057c:	3340      	adds	r3, #64	; 0x40
 801057e:	009b      	lsls	r3, r3, #2
 8010580:	440b      	add	r3, r1
 8010582:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8010584:	2300      	movs	r3, #0
}
 8010586:	4618      	mov	r0, r3
 8010588:	3714      	adds	r7, #20
 801058a:	46bd      	mov	sp, r7
 801058c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010590:	4770      	bx	lr

08010592 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8010592:	b480      	push	{r7}
 8010594:	b083      	sub	sp, #12
 8010596:	af00      	add	r7, sp, #0
 8010598:	6078      	str	r0, [r7, #4]
 801059a:	460b      	mov	r3, r1
 801059c:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 801059e:	687b      	ldr	r3, [r7, #4]
 80105a0:	681b      	ldr	r3, [r3, #0]
 80105a2:	887a      	ldrh	r2, [r7, #2]
 80105a4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80105a6:	2300      	movs	r3, #0
}
 80105a8:	4618      	mov	r0, r3
 80105aa:	370c      	adds	r7, #12
 80105ac:	46bd      	mov	sp, r7
 80105ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105b2:	4770      	bx	lr

080105b4 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80105b4:	b480      	push	{r7}
 80105b6:	b083      	sub	sp, #12
 80105b8:	af00      	add	r7, sp, #0
 80105ba:	6078      	str	r0, [r7, #4]
 80105bc:	460b      	mov	r3, r1
 80105be:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80105c0:	bf00      	nop
 80105c2:	370c      	adds	r7, #12
 80105c4:	46bd      	mov	sp, r7
 80105c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105ca:	4770      	bx	lr

080105cc <HAL_PWR_PVD_IRQHandler>:
  * @brief This function handles the PWR PVD interrupt request.
  * @note This API should be called under the PVD_IRQHandler().
  * @retval None
  */
void HAL_PWR_PVD_IRQHandler(void)
{
 80105cc:	b580      	push	{r7, lr}
 80105ce:	af00      	add	r7, sp, #0
  /* Check PWR Exti flag */
  if(__HAL_PWR_PVD_EXTI_GET_FLAG() != RESET)
 80105d0:	4b06      	ldr	r3, [pc, #24]	; (80105ec <HAL_PWR_PVD_IRQHandler+0x20>)
 80105d2:	695b      	ldr	r3, [r3, #20]
 80105d4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d005      	beq.n	80105e8 <HAL_PWR_PVD_IRQHandler+0x1c>
  {
    /* PWR PVD interrupt user callback */
    HAL_PWR_PVDCallback();
 80105dc:	f000 f808 	bl	80105f0 <HAL_PWR_PVDCallback>
    
    /* Clear PWR Exti pending bit */
    __HAL_PWR_PVD_EXTI_CLEAR_FLAG();
 80105e0:	4b02      	ldr	r3, [pc, #8]	; (80105ec <HAL_PWR_PVD_IRQHandler+0x20>)
 80105e2:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80105e6:	615a      	str	r2, [r3, #20]
  }
}
 80105e8:	bf00      	nop
 80105ea:	bd80      	pop	{r7, pc}
 80105ec:	40013c00 	.word	0x40013c00

080105f0 <HAL_PWR_PVDCallback>:
/**
  * @brief  PWR PVD interrupt callback
  * @retval None
  */
__weak void HAL_PWR_PVDCallback(void)
{
 80105f0:	b480      	push	{r7}
 80105f2:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_PWR_PVDCallback could be implemented in the user file
   */ 
}
 80105f4:	bf00      	nop
 80105f6:	46bd      	mov	sp, r7
 80105f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80105fc:	4770      	bx	lr
	...

08010600 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8010600:	b580      	push	{r7, lr}
 8010602:	b086      	sub	sp, #24
 8010604:	af00      	add	r7, sp, #0
 8010606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8010608:	687b      	ldr	r3, [r7, #4]
 801060a:	2b00      	cmp	r3, #0
 801060c:	d101      	bne.n	8010612 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 801060e:	2301      	movs	r3, #1
 8010610:	e267      	b.n	8010ae2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	f003 0301 	and.w	r3, r3, #1
 801061a:	2b00      	cmp	r3, #0
 801061c:	d075      	beq.n	801070a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 801061e:	4b88      	ldr	r3, [pc, #544]	; (8010840 <HAL_RCC_OscConfig+0x240>)
 8010620:	689b      	ldr	r3, [r3, #8]
 8010622:	f003 030c 	and.w	r3, r3, #12
 8010626:	2b04      	cmp	r3, #4
 8010628:	d00c      	beq.n	8010644 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 801062a:	4b85      	ldr	r3, [pc, #532]	; (8010840 <HAL_RCC_OscConfig+0x240>)
 801062c:	689b      	ldr	r3, [r3, #8]
 801062e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8010632:	2b08      	cmp	r3, #8
 8010634:	d112      	bne.n	801065c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8010636:	4b82      	ldr	r3, [pc, #520]	; (8010840 <HAL_RCC_OscConfig+0x240>)
 8010638:	685b      	ldr	r3, [r3, #4]
 801063a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 801063e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8010642:	d10b      	bne.n	801065c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010644:	4b7e      	ldr	r3, [pc, #504]	; (8010840 <HAL_RCC_OscConfig+0x240>)
 8010646:	681b      	ldr	r3, [r3, #0]
 8010648:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 801064c:	2b00      	cmp	r3, #0
 801064e:	d05b      	beq.n	8010708 <HAL_RCC_OscConfig+0x108>
 8010650:	687b      	ldr	r3, [r7, #4]
 8010652:	685b      	ldr	r3, [r3, #4]
 8010654:	2b00      	cmp	r3, #0
 8010656:	d157      	bne.n	8010708 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8010658:	2301      	movs	r3, #1
 801065a:	e242      	b.n	8010ae2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	685b      	ldr	r3, [r3, #4]
 8010660:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8010664:	d106      	bne.n	8010674 <HAL_RCC_OscConfig+0x74>
 8010666:	4b76      	ldr	r3, [pc, #472]	; (8010840 <HAL_RCC_OscConfig+0x240>)
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	4a75      	ldr	r2, [pc, #468]	; (8010840 <HAL_RCC_OscConfig+0x240>)
 801066c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010670:	6013      	str	r3, [r2, #0]
 8010672:	e01d      	b.n	80106b0 <HAL_RCC_OscConfig+0xb0>
 8010674:	687b      	ldr	r3, [r7, #4]
 8010676:	685b      	ldr	r3, [r3, #4]
 8010678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 801067c:	d10c      	bne.n	8010698 <HAL_RCC_OscConfig+0x98>
 801067e:	4b70      	ldr	r3, [pc, #448]	; (8010840 <HAL_RCC_OscConfig+0x240>)
 8010680:	681b      	ldr	r3, [r3, #0]
 8010682:	4a6f      	ldr	r2, [pc, #444]	; (8010840 <HAL_RCC_OscConfig+0x240>)
 8010684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8010688:	6013      	str	r3, [r2, #0]
 801068a:	4b6d      	ldr	r3, [pc, #436]	; (8010840 <HAL_RCC_OscConfig+0x240>)
 801068c:	681b      	ldr	r3, [r3, #0]
 801068e:	4a6c      	ldr	r2, [pc, #432]	; (8010840 <HAL_RCC_OscConfig+0x240>)
 8010690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8010694:	6013      	str	r3, [r2, #0]
 8010696:	e00b      	b.n	80106b0 <HAL_RCC_OscConfig+0xb0>
 8010698:	4b69      	ldr	r3, [pc, #420]	; (8010840 <HAL_RCC_OscConfig+0x240>)
 801069a:	681b      	ldr	r3, [r3, #0]
 801069c:	4a68      	ldr	r2, [pc, #416]	; (8010840 <HAL_RCC_OscConfig+0x240>)
 801069e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80106a2:	6013      	str	r3, [r2, #0]
 80106a4:	4b66      	ldr	r3, [pc, #408]	; (8010840 <HAL_RCC_OscConfig+0x240>)
 80106a6:	681b      	ldr	r3, [r3, #0]
 80106a8:	4a65      	ldr	r2, [pc, #404]	; (8010840 <HAL_RCC_OscConfig+0x240>)
 80106aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80106ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80106b0:	687b      	ldr	r3, [r7, #4]
 80106b2:	685b      	ldr	r3, [r3, #4]
 80106b4:	2b00      	cmp	r3, #0
 80106b6:	d013      	beq.n	80106e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80106b8:	f7fc fcba 	bl	800d030 <HAL_GetTick>
 80106bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80106be:	e008      	b.n	80106d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80106c0:	f7fc fcb6 	bl	800d030 <HAL_GetTick>
 80106c4:	4602      	mov	r2, r0
 80106c6:	693b      	ldr	r3, [r7, #16]
 80106c8:	1ad3      	subs	r3, r2, r3
 80106ca:	2b64      	cmp	r3, #100	; 0x64
 80106cc:	d901      	bls.n	80106d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80106ce:	2303      	movs	r3, #3
 80106d0:	e207      	b.n	8010ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80106d2:	4b5b      	ldr	r3, [pc, #364]	; (8010840 <HAL_RCC_OscConfig+0x240>)
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80106da:	2b00      	cmp	r3, #0
 80106dc:	d0f0      	beq.n	80106c0 <HAL_RCC_OscConfig+0xc0>
 80106de:	e014      	b.n	801070a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80106e0:	f7fc fca6 	bl	800d030 <HAL_GetTick>
 80106e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80106e6:	e008      	b.n	80106fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80106e8:	f7fc fca2 	bl	800d030 <HAL_GetTick>
 80106ec:	4602      	mov	r2, r0
 80106ee:	693b      	ldr	r3, [r7, #16]
 80106f0:	1ad3      	subs	r3, r2, r3
 80106f2:	2b64      	cmp	r3, #100	; 0x64
 80106f4:	d901      	bls.n	80106fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80106f6:	2303      	movs	r3, #3
 80106f8:	e1f3      	b.n	8010ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80106fa:	4b51      	ldr	r3, [pc, #324]	; (8010840 <HAL_RCC_OscConfig+0x240>)
 80106fc:	681b      	ldr	r3, [r3, #0]
 80106fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010702:	2b00      	cmp	r3, #0
 8010704:	d1f0      	bne.n	80106e8 <HAL_RCC_OscConfig+0xe8>
 8010706:	e000      	b.n	801070a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8010708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801070a:	687b      	ldr	r3, [r7, #4]
 801070c:	681b      	ldr	r3, [r3, #0]
 801070e:	f003 0302 	and.w	r3, r3, #2
 8010712:	2b00      	cmp	r3, #0
 8010714:	d063      	beq.n	80107de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8010716:	4b4a      	ldr	r3, [pc, #296]	; (8010840 <HAL_RCC_OscConfig+0x240>)
 8010718:	689b      	ldr	r3, [r3, #8]
 801071a:	f003 030c 	and.w	r3, r3, #12
 801071e:	2b00      	cmp	r3, #0
 8010720:	d00b      	beq.n	801073a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8010722:	4b47      	ldr	r3, [pc, #284]	; (8010840 <HAL_RCC_OscConfig+0x240>)
 8010724:	689b      	ldr	r3, [r3, #8]
 8010726:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 801072a:	2b08      	cmp	r3, #8
 801072c:	d11c      	bne.n	8010768 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 801072e:	4b44      	ldr	r3, [pc, #272]	; (8010840 <HAL_RCC_OscConfig+0x240>)
 8010730:	685b      	ldr	r3, [r3, #4]
 8010732:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010736:	2b00      	cmp	r3, #0
 8010738:	d116      	bne.n	8010768 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 801073a:	4b41      	ldr	r3, [pc, #260]	; (8010840 <HAL_RCC_OscConfig+0x240>)
 801073c:	681b      	ldr	r3, [r3, #0]
 801073e:	f003 0302 	and.w	r3, r3, #2
 8010742:	2b00      	cmp	r3, #0
 8010744:	d005      	beq.n	8010752 <HAL_RCC_OscConfig+0x152>
 8010746:	687b      	ldr	r3, [r7, #4]
 8010748:	68db      	ldr	r3, [r3, #12]
 801074a:	2b01      	cmp	r3, #1
 801074c:	d001      	beq.n	8010752 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 801074e:	2301      	movs	r3, #1
 8010750:	e1c7      	b.n	8010ae2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8010752:	4b3b      	ldr	r3, [pc, #236]	; (8010840 <HAL_RCC_OscConfig+0x240>)
 8010754:	681b      	ldr	r3, [r3, #0]
 8010756:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 801075a:	687b      	ldr	r3, [r7, #4]
 801075c:	691b      	ldr	r3, [r3, #16]
 801075e:	00db      	lsls	r3, r3, #3
 8010760:	4937      	ldr	r1, [pc, #220]	; (8010840 <HAL_RCC_OscConfig+0x240>)
 8010762:	4313      	orrs	r3, r2
 8010764:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8010766:	e03a      	b.n	80107de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	68db      	ldr	r3, [r3, #12]
 801076c:	2b00      	cmp	r3, #0
 801076e:	d020      	beq.n	80107b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8010770:	4b34      	ldr	r3, [pc, #208]	; (8010844 <HAL_RCC_OscConfig+0x244>)
 8010772:	2201      	movs	r2, #1
 8010774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010776:	f7fc fc5b 	bl	800d030 <HAL_GetTick>
 801077a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 801077c:	e008      	b.n	8010790 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801077e:	f7fc fc57 	bl	800d030 <HAL_GetTick>
 8010782:	4602      	mov	r2, r0
 8010784:	693b      	ldr	r3, [r7, #16]
 8010786:	1ad3      	subs	r3, r2, r3
 8010788:	2b02      	cmp	r3, #2
 801078a:	d901      	bls.n	8010790 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 801078c:	2303      	movs	r3, #3
 801078e:	e1a8      	b.n	8010ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010790:	4b2b      	ldr	r3, [pc, #172]	; (8010840 <HAL_RCC_OscConfig+0x240>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	f003 0302 	and.w	r3, r3, #2
 8010798:	2b00      	cmp	r3, #0
 801079a:	d0f0      	beq.n	801077e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801079c:	4b28      	ldr	r3, [pc, #160]	; (8010840 <HAL_RCC_OscConfig+0x240>)
 801079e:	681b      	ldr	r3, [r3, #0]
 80107a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80107a4:	687b      	ldr	r3, [r7, #4]
 80107a6:	691b      	ldr	r3, [r3, #16]
 80107a8:	00db      	lsls	r3, r3, #3
 80107aa:	4925      	ldr	r1, [pc, #148]	; (8010840 <HAL_RCC_OscConfig+0x240>)
 80107ac:	4313      	orrs	r3, r2
 80107ae:	600b      	str	r3, [r1, #0]
 80107b0:	e015      	b.n	80107de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80107b2:	4b24      	ldr	r3, [pc, #144]	; (8010844 <HAL_RCC_OscConfig+0x244>)
 80107b4:	2200      	movs	r2, #0
 80107b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80107b8:	f7fc fc3a 	bl	800d030 <HAL_GetTick>
 80107bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80107be:	e008      	b.n	80107d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80107c0:	f7fc fc36 	bl	800d030 <HAL_GetTick>
 80107c4:	4602      	mov	r2, r0
 80107c6:	693b      	ldr	r3, [r7, #16]
 80107c8:	1ad3      	subs	r3, r2, r3
 80107ca:	2b02      	cmp	r3, #2
 80107cc:	d901      	bls.n	80107d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80107ce:	2303      	movs	r3, #3
 80107d0:	e187      	b.n	8010ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80107d2:	4b1b      	ldr	r3, [pc, #108]	; (8010840 <HAL_RCC_OscConfig+0x240>)
 80107d4:	681b      	ldr	r3, [r3, #0]
 80107d6:	f003 0302 	and.w	r3, r3, #2
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d1f0      	bne.n	80107c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80107de:	687b      	ldr	r3, [r7, #4]
 80107e0:	681b      	ldr	r3, [r3, #0]
 80107e2:	f003 0308 	and.w	r3, r3, #8
 80107e6:	2b00      	cmp	r3, #0
 80107e8:	d036      	beq.n	8010858 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80107ea:	687b      	ldr	r3, [r7, #4]
 80107ec:	695b      	ldr	r3, [r3, #20]
 80107ee:	2b00      	cmp	r3, #0
 80107f0:	d016      	beq.n	8010820 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80107f2:	4b15      	ldr	r3, [pc, #84]	; (8010848 <HAL_RCC_OscConfig+0x248>)
 80107f4:	2201      	movs	r2, #1
 80107f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80107f8:	f7fc fc1a 	bl	800d030 <HAL_GetTick>
 80107fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80107fe:	e008      	b.n	8010812 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8010800:	f7fc fc16 	bl	800d030 <HAL_GetTick>
 8010804:	4602      	mov	r2, r0
 8010806:	693b      	ldr	r3, [r7, #16]
 8010808:	1ad3      	subs	r3, r2, r3
 801080a:	2b02      	cmp	r3, #2
 801080c:	d901      	bls.n	8010812 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 801080e:	2303      	movs	r3, #3
 8010810:	e167      	b.n	8010ae2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8010812:	4b0b      	ldr	r3, [pc, #44]	; (8010840 <HAL_RCC_OscConfig+0x240>)
 8010814:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010816:	f003 0302 	and.w	r3, r3, #2
 801081a:	2b00      	cmp	r3, #0
 801081c:	d0f0      	beq.n	8010800 <HAL_RCC_OscConfig+0x200>
 801081e:	e01b      	b.n	8010858 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8010820:	4b09      	ldr	r3, [pc, #36]	; (8010848 <HAL_RCC_OscConfig+0x248>)
 8010822:	2200      	movs	r2, #0
 8010824:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010826:	f7fc fc03 	bl	800d030 <HAL_GetTick>
 801082a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801082c:	e00e      	b.n	801084c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 801082e:	f7fc fbff 	bl	800d030 <HAL_GetTick>
 8010832:	4602      	mov	r2, r0
 8010834:	693b      	ldr	r3, [r7, #16]
 8010836:	1ad3      	subs	r3, r2, r3
 8010838:	2b02      	cmp	r3, #2
 801083a:	d907      	bls.n	801084c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 801083c:	2303      	movs	r3, #3
 801083e:	e150      	b.n	8010ae2 <HAL_RCC_OscConfig+0x4e2>
 8010840:	40023800 	.word	0x40023800
 8010844:	42470000 	.word	0x42470000
 8010848:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 801084c:	4b88      	ldr	r3, [pc, #544]	; (8010a70 <HAL_RCC_OscConfig+0x470>)
 801084e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8010850:	f003 0302 	and.w	r3, r3, #2
 8010854:	2b00      	cmp	r3, #0
 8010856:	d1ea      	bne.n	801082e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8010858:	687b      	ldr	r3, [r7, #4]
 801085a:	681b      	ldr	r3, [r3, #0]
 801085c:	f003 0304 	and.w	r3, r3, #4
 8010860:	2b00      	cmp	r3, #0
 8010862:	f000 8097 	beq.w	8010994 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8010866:	2300      	movs	r3, #0
 8010868:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801086a:	4b81      	ldr	r3, [pc, #516]	; (8010a70 <HAL_RCC_OscConfig+0x470>)
 801086c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801086e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8010872:	2b00      	cmp	r3, #0
 8010874:	d10f      	bne.n	8010896 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8010876:	2300      	movs	r3, #0
 8010878:	60bb      	str	r3, [r7, #8]
 801087a:	4b7d      	ldr	r3, [pc, #500]	; (8010a70 <HAL_RCC_OscConfig+0x470>)
 801087c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801087e:	4a7c      	ldr	r2, [pc, #496]	; (8010a70 <HAL_RCC_OscConfig+0x470>)
 8010880:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8010884:	6413      	str	r3, [r2, #64]	; 0x40
 8010886:	4b7a      	ldr	r3, [pc, #488]	; (8010a70 <HAL_RCC_OscConfig+0x470>)
 8010888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801088a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 801088e:	60bb      	str	r3, [r7, #8]
 8010890:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8010892:	2301      	movs	r3, #1
 8010894:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8010896:	4b77      	ldr	r3, [pc, #476]	; (8010a74 <HAL_RCC_OscConfig+0x474>)
 8010898:	681b      	ldr	r3, [r3, #0]
 801089a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 801089e:	2b00      	cmp	r3, #0
 80108a0:	d118      	bne.n	80108d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80108a2:	4b74      	ldr	r3, [pc, #464]	; (8010a74 <HAL_RCC_OscConfig+0x474>)
 80108a4:	681b      	ldr	r3, [r3, #0]
 80108a6:	4a73      	ldr	r2, [pc, #460]	; (8010a74 <HAL_RCC_OscConfig+0x474>)
 80108a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80108ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80108ae:	f7fc fbbf 	bl	800d030 <HAL_GetTick>
 80108b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80108b4:	e008      	b.n	80108c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80108b6:	f7fc fbbb 	bl	800d030 <HAL_GetTick>
 80108ba:	4602      	mov	r2, r0
 80108bc:	693b      	ldr	r3, [r7, #16]
 80108be:	1ad3      	subs	r3, r2, r3
 80108c0:	2b02      	cmp	r3, #2
 80108c2:	d901      	bls.n	80108c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80108c4:	2303      	movs	r3, #3
 80108c6:	e10c      	b.n	8010ae2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80108c8:	4b6a      	ldr	r3, [pc, #424]	; (8010a74 <HAL_RCC_OscConfig+0x474>)
 80108ca:	681b      	ldr	r3, [r3, #0]
 80108cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80108d0:	2b00      	cmp	r3, #0
 80108d2:	d0f0      	beq.n	80108b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80108d4:	687b      	ldr	r3, [r7, #4]
 80108d6:	689b      	ldr	r3, [r3, #8]
 80108d8:	2b01      	cmp	r3, #1
 80108da:	d106      	bne.n	80108ea <HAL_RCC_OscConfig+0x2ea>
 80108dc:	4b64      	ldr	r3, [pc, #400]	; (8010a70 <HAL_RCC_OscConfig+0x470>)
 80108de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108e0:	4a63      	ldr	r2, [pc, #396]	; (8010a70 <HAL_RCC_OscConfig+0x470>)
 80108e2:	f043 0301 	orr.w	r3, r3, #1
 80108e6:	6713      	str	r3, [r2, #112]	; 0x70
 80108e8:	e01c      	b.n	8010924 <HAL_RCC_OscConfig+0x324>
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	689b      	ldr	r3, [r3, #8]
 80108ee:	2b05      	cmp	r3, #5
 80108f0:	d10c      	bne.n	801090c <HAL_RCC_OscConfig+0x30c>
 80108f2:	4b5f      	ldr	r3, [pc, #380]	; (8010a70 <HAL_RCC_OscConfig+0x470>)
 80108f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80108f6:	4a5e      	ldr	r2, [pc, #376]	; (8010a70 <HAL_RCC_OscConfig+0x470>)
 80108f8:	f043 0304 	orr.w	r3, r3, #4
 80108fc:	6713      	str	r3, [r2, #112]	; 0x70
 80108fe:	4b5c      	ldr	r3, [pc, #368]	; (8010a70 <HAL_RCC_OscConfig+0x470>)
 8010900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010902:	4a5b      	ldr	r2, [pc, #364]	; (8010a70 <HAL_RCC_OscConfig+0x470>)
 8010904:	f043 0301 	orr.w	r3, r3, #1
 8010908:	6713      	str	r3, [r2, #112]	; 0x70
 801090a:	e00b      	b.n	8010924 <HAL_RCC_OscConfig+0x324>
 801090c:	4b58      	ldr	r3, [pc, #352]	; (8010a70 <HAL_RCC_OscConfig+0x470>)
 801090e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010910:	4a57      	ldr	r2, [pc, #348]	; (8010a70 <HAL_RCC_OscConfig+0x470>)
 8010912:	f023 0301 	bic.w	r3, r3, #1
 8010916:	6713      	str	r3, [r2, #112]	; 0x70
 8010918:	4b55      	ldr	r3, [pc, #340]	; (8010a70 <HAL_RCC_OscConfig+0x470>)
 801091a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801091c:	4a54      	ldr	r2, [pc, #336]	; (8010a70 <HAL_RCC_OscConfig+0x470>)
 801091e:	f023 0304 	bic.w	r3, r3, #4
 8010922:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8010924:	687b      	ldr	r3, [r7, #4]
 8010926:	689b      	ldr	r3, [r3, #8]
 8010928:	2b00      	cmp	r3, #0
 801092a:	d015      	beq.n	8010958 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801092c:	f7fc fb80 	bl	800d030 <HAL_GetTick>
 8010930:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8010932:	e00a      	b.n	801094a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010934:	f7fc fb7c 	bl	800d030 <HAL_GetTick>
 8010938:	4602      	mov	r2, r0
 801093a:	693b      	ldr	r3, [r7, #16]
 801093c:	1ad3      	subs	r3, r2, r3
 801093e:	f241 3288 	movw	r2, #5000	; 0x1388
 8010942:	4293      	cmp	r3, r2
 8010944:	d901      	bls.n	801094a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8010946:	2303      	movs	r3, #3
 8010948:	e0cb      	b.n	8010ae2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 801094a:	4b49      	ldr	r3, [pc, #292]	; (8010a70 <HAL_RCC_OscConfig+0x470>)
 801094c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801094e:	f003 0302 	and.w	r3, r3, #2
 8010952:	2b00      	cmp	r3, #0
 8010954:	d0ee      	beq.n	8010934 <HAL_RCC_OscConfig+0x334>
 8010956:	e014      	b.n	8010982 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8010958:	f7fc fb6a 	bl	800d030 <HAL_GetTick>
 801095c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 801095e:	e00a      	b.n	8010976 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8010960:	f7fc fb66 	bl	800d030 <HAL_GetTick>
 8010964:	4602      	mov	r2, r0
 8010966:	693b      	ldr	r3, [r7, #16]
 8010968:	1ad3      	subs	r3, r2, r3
 801096a:	f241 3288 	movw	r2, #5000	; 0x1388
 801096e:	4293      	cmp	r3, r2
 8010970:	d901      	bls.n	8010976 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8010972:	2303      	movs	r3, #3
 8010974:	e0b5      	b.n	8010ae2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8010976:	4b3e      	ldr	r3, [pc, #248]	; (8010a70 <HAL_RCC_OscConfig+0x470>)
 8010978:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801097a:	f003 0302 	and.w	r3, r3, #2
 801097e:	2b00      	cmp	r3, #0
 8010980:	d1ee      	bne.n	8010960 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8010982:	7dfb      	ldrb	r3, [r7, #23]
 8010984:	2b01      	cmp	r3, #1
 8010986:	d105      	bne.n	8010994 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8010988:	4b39      	ldr	r3, [pc, #228]	; (8010a70 <HAL_RCC_OscConfig+0x470>)
 801098a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801098c:	4a38      	ldr	r2, [pc, #224]	; (8010a70 <HAL_RCC_OscConfig+0x470>)
 801098e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8010992:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8010994:	687b      	ldr	r3, [r7, #4]
 8010996:	699b      	ldr	r3, [r3, #24]
 8010998:	2b00      	cmp	r3, #0
 801099a:	f000 80a1 	beq.w	8010ae0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801099e:	4b34      	ldr	r3, [pc, #208]	; (8010a70 <HAL_RCC_OscConfig+0x470>)
 80109a0:	689b      	ldr	r3, [r3, #8]
 80109a2:	f003 030c 	and.w	r3, r3, #12
 80109a6:	2b08      	cmp	r3, #8
 80109a8:	d05c      	beq.n	8010a64 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80109aa:	687b      	ldr	r3, [r7, #4]
 80109ac:	699b      	ldr	r3, [r3, #24]
 80109ae:	2b02      	cmp	r3, #2
 80109b0:	d141      	bne.n	8010a36 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80109b2:	4b31      	ldr	r3, [pc, #196]	; (8010a78 <HAL_RCC_OscConfig+0x478>)
 80109b4:	2200      	movs	r2, #0
 80109b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80109b8:	f7fc fb3a 	bl	800d030 <HAL_GetTick>
 80109bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80109be:	e008      	b.n	80109d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80109c0:	f7fc fb36 	bl	800d030 <HAL_GetTick>
 80109c4:	4602      	mov	r2, r0
 80109c6:	693b      	ldr	r3, [r7, #16]
 80109c8:	1ad3      	subs	r3, r2, r3
 80109ca:	2b02      	cmp	r3, #2
 80109cc:	d901      	bls.n	80109d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80109ce:	2303      	movs	r3, #3
 80109d0:	e087      	b.n	8010ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80109d2:	4b27      	ldr	r3, [pc, #156]	; (8010a70 <HAL_RCC_OscConfig+0x470>)
 80109d4:	681b      	ldr	r3, [r3, #0]
 80109d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80109da:	2b00      	cmp	r3, #0
 80109dc:	d1f0      	bne.n	80109c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80109de:	687b      	ldr	r3, [r7, #4]
 80109e0:	69da      	ldr	r2, [r3, #28]
 80109e2:	687b      	ldr	r3, [r7, #4]
 80109e4:	6a1b      	ldr	r3, [r3, #32]
 80109e6:	431a      	orrs	r2, r3
 80109e8:	687b      	ldr	r3, [r7, #4]
 80109ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80109ec:	019b      	lsls	r3, r3, #6
 80109ee:	431a      	orrs	r2, r3
 80109f0:	687b      	ldr	r3, [r7, #4]
 80109f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80109f4:	085b      	lsrs	r3, r3, #1
 80109f6:	3b01      	subs	r3, #1
 80109f8:	041b      	lsls	r3, r3, #16
 80109fa:	431a      	orrs	r2, r3
 80109fc:	687b      	ldr	r3, [r7, #4]
 80109fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a00:	061b      	lsls	r3, r3, #24
 8010a02:	491b      	ldr	r1, [pc, #108]	; (8010a70 <HAL_RCC_OscConfig+0x470>)
 8010a04:	4313      	orrs	r3, r2
 8010a06:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8010a08:	4b1b      	ldr	r3, [pc, #108]	; (8010a78 <HAL_RCC_OscConfig+0x478>)
 8010a0a:	2201      	movs	r2, #1
 8010a0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010a0e:	f7fc fb0f 	bl	800d030 <HAL_GetTick>
 8010a12:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010a14:	e008      	b.n	8010a28 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010a16:	f7fc fb0b 	bl	800d030 <HAL_GetTick>
 8010a1a:	4602      	mov	r2, r0
 8010a1c:	693b      	ldr	r3, [r7, #16]
 8010a1e:	1ad3      	subs	r3, r2, r3
 8010a20:	2b02      	cmp	r3, #2
 8010a22:	d901      	bls.n	8010a28 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8010a24:	2303      	movs	r3, #3
 8010a26:	e05c      	b.n	8010ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010a28:	4b11      	ldr	r3, [pc, #68]	; (8010a70 <HAL_RCC_OscConfig+0x470>)
 8010a2a:	681b      	ldr	r3, [r3, #0]
 8010a2c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010a30:	2b00      	cmp	r3, #0
 8010a32:	d0f0      	beq.n	8010a16 <HAL_RCC_OscConfig+0x416>
 8010a34:	e054      	b.n	8010ae0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8010a36:	4b10      	ldr	r3, [pc, #64]	; (8010a78 <HAL_RCC_OscConfig+0x478>)
 8010a38:	2200      	movs	r2, #0
 8010a3a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8010a3c:	f7fc faf8 	bl	800d030 <HAL_GetTick>
 8010a40:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010a42:	e008      	b.n	8010a56 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8010a44:	f7fc faf4 	bl	800d030 <HAL_GetTick>
 8010a48:	4602      	mov	r2, r0
 8010a4a:	693b      	ldr	r3, [r7, #16]
 8010a4c:	1ad3      	subs	r3, r2, r3
 8010a4e:	2b02      	cmp	r3, #2
 8010a50:	d901      	bls.n	8010a56 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8010a52:	2303      	movs	r3, #3
 8010a54:	e045      	b.n	8010ae2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8010a56:	4b06      	ldr	r3, [pc, #24]	; (8010a70 <HAL_RCC_OscConfig+0x470>)
 8010a58:	681b      	ldr	r3, [r3, #0]
 8010a5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010a5e:	2b00      	cmp	r3, #0
 8010a60:	d1f0      	bne.n	8010a44 <HAL_RCC_OscConfig+0x444>
 8010a62:	e03d      	b.n	8010ae0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8010a64:	687b      	ldr	r3, [r7, #4]
 8010a66:	699b      	ldr	r3, [r3, #24]
 8010a68:	2b01      	cmp	r3, #1
 8010a6a:	d107      	bne.n	8010a7c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8010a6c:	2301      	movs	r3, #1
 8010a6e:	e038      	b.n	8010ae2 <HAL_RCC_OscConfig+0x4e2>
 8010a70:	40023800 	.word	0x40023800
 8010a74:	40007000 	.word	0x40007000
 8010a78:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8010a7c:	4b1b      	ldr	r3, [pc, #108]	; (8010aec <HAL_RCC_OscConfig+0x4ec>)
 8010a7e:	685b      	ldr	r3, [r3, #4]
 8010a80:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010a82:	687b      	ldr	r3, [r7, #4]
 8010a84:	699b      	ldr	r3, [r3, #24]
 8010a86:	2b01      	cmp	r3, #1
 8010a88:	d028      	beq.n	8010adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010a8a:	68fb      	ldr	r3, [r7, #12]
 8010a8c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8010a90:	687b      	ldr	r3, [r7, #4]
 8010a92:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8010a94:	429a      	cmp	r2, r3
 8010a96:	d121      	bne.n	8010adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8010a98:	68fb      	ldr	r3, [r7, #12]
 8010a9a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8010a9e:	687b      	ldr	r3, [r7, #4]
 8010aa0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8010aa2:	429a      	cmp	r2, r3
 8010aa4:	d11a      	bne.n	8010adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8010aa6:	68fa      	ldr	r2, [r7, #12]
 8010aa8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8010aac:	4013      	ands	r3, r2
 8010aae:	687a      	ldr	r2, [r7, #4]
 8010ab0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8010ab2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8010ab4:	4293      	cmp	r3, r2
 8010ab6:	d111      	bne.n	8010adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8010ab8:	68fb      	ldr	r3, [r7, #12]
 8010aba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8010abe:	687b      	ldr	r3, [r7, #4]
 8010ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010ac2:	085b      	lsrs	r3, r3, #1
 8010ac4:	3b01      	subs	r3, #1
 8010ac6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8010ac8:	429a      	cmp	r2, r3
 8010aca:	d107      	bne.n	8010adc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8010acc:	68fb      	ldr	r3, [r7, #12]
 8010ace:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8010ad2:	687b      	ldr	r3, [r7, #4]
 8010ad4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ad6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8010ad8:	429a      	cmp	r2, r3
 8010ada:	d001      	beq.n	8010ae0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8010adc:	2301      	movs	r3, #1
 8010ade:	e000      	b.n	8010ae2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8010ae0:	2300      	movs	r3, #0
}
 8010ae2:	4618      	mov	r0, r3
 8010ae4:	3718      	adds	r7, #24
 8010ae6:	46bd      	mov	sp, r7
 8010ae8:	bd80      	pop	{r7, pc}
 8010aea:	bf00      	nop
 8010aec:	40023800 	.word	0x40023800

08010af0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8010af0:	b580      	push	{r7, lr}
 8010af2:	b084      	sub	sp, #16
 8010af4:	af00      	add	r7, sp, #0
 8010af6:	6078      	str	r0, [r7, #4]
 8010af8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8010afa:	687b      	ldr	r3, [r7, #4]
 8010afc:	2b00      	cmp	r3, #0
 8010afe:	d101      	bne.n	8010b04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8010b00:	2301      	movs	r3, #1
 8010b02:	e0cc      	b.n	8010c9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8010b04:	4b68      	ldr	r3, [pc, #416]	; (8010ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	f003 030f 	and.w	r3, r3, #15
 8010b0c:	683a      	ldr	r2, [r7, #0]
 8010b0e:	429a      	cmp	r2, r3
 8010b10:	d90c      	bls.n	8010b2c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010b12:	4b65      	ldr	r3, [pc, #404]	; (8010ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8010b14:	683a      	ldr	r2, [r7, #0]
 8010b16:	b2d2      	uxtb	r2, r2
 8010b18:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010b1a:	4b63      	ldr	r3, [pc, #396]	; (8010ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8010b1c:	681b      	ldr	r3, [r3, #0]
 8010b1e:	f003 030f 	and.w	r3, r3, #15
 8010b22:	683a      	ldr	r2, [r7, #0]
 8010b24:	429a      	cmp	r2, r3
 8010b26:	d001      	beq.n	8010b2c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8010b28:	2301      	movs	r3, #1
 8010b2a:	e0b8      	b.n	8010c9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010b2c:	687b      	ldr	r3, [r7, #4]
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	f003 0302 	and.w	r3, r3, #2
 8010b34:	2b00      	cmp	r3, #0
 8010b36:	d020      	beq.n	8010b7a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010b38:	687b      	ldr	r3, [r7, #4]
 8010b3a:	681b      	ldr	r3, [r3, #0]
 8010b3c:	f003 0304 	and.w	r3, r3, #4
 8010b40:	2b00      	cmp	r3, #0
 8010b42:	d005      	beq.n	8010b50 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8010b44:	4b59      	ldr	r3, [pc, #356]	; (8010cac <HAL_RCC_ClockConfig+0x1bc>)
 8010b46:	689b      	ldr	r3, [r3, #8]
 8010b48:	4a58      	ldr	r2, [pc, #352]	; (8010cac <HAL_RCC_ClockConfig+0x1bc>)
 8010b4a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8010b4e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	681b      	ldr	r3, [r3, #0]
 8010b54:	f003 0308 	and.w	r3, r3, #8
 8010b58:	2b00      	cmp	r3, #0
 8010b5a:	d005      	beq.n	8010b68 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8010b5c:	4b53      	ldr	r3, [pc, #332]	; (8010cac <HAL_RCC_ClockConfig+0x1bc>)
 8010b5e:	689b      	ldr	r3, [r3, #8]
 8010b60:	4a52      	ldr	r2, [pc, #328]	; (8010cac <HAL_RCC_ClockConfig+0x1bc>)
 8010b62:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8010b66:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8010b68:	4b50      	ldr	r3, [pc, #320]	; (8010cac <HAL_RCC_ClockConfig+0x1bc>)
 8010b6a:	689b      	ldr	r3, [r3, #8]
 8010b6c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8010b70:	687b      	ldr	r3, [r7, #4]
 8010b72:	689b      	ldr	r3, [r3, #8]
 8010b74:	494d      	ldr	r1, [pc, #308]	; (8010cac <HAL_RCC_ClockConfig+0x1bc>)
 8010b76:	4313      	orrs	r3, r2
 8010b78:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8010b7a:	687b      	ldr	r3, [r7, #4]
 8010b7c:	681b      	ldr	r3, [r3, #0]
 8010b7e:	f003 0301 	and.w	r3, r3, #1
 8010b82:	2b00      	cmp	r3, #0
 8010b84:	d044      	beq.n	8010c10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	685b      	ldr	r3, [r3, #4]
 8010b8a:	2b01      	cmp	r3, #1
 8010b8c:	d107      	bne.n	8010b9e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8010b8e:	4b47      	ldr	r3, [pc, #284]	; (8010cac <HAL_RCC_ClockConfig+0x1bc>)
 8010b90:	681b      	ldr	r3, [r3, #0]
 8010b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8010b96:	2b00      	cmp	r3, #0
 8010b98:	d119      	bne.n	8010bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010b9a:	2301      	movs	r3, #1
 8010b9c:	e07f      	b.n	8010c9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	685b      	ldr	r3, [r3, #4]
 8010ba2:	2b02      	cmp	r3, #2
 8010ba4:	d003      	beq.n	8010bae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8010ba6:	687b      	ldr	r3, [r7, #4]
 8010ba8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8010baa:	2b03      	cmp	r3, #3
 8010bac:	d107      	bne.n	8010bbe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8010bae:	4b3f      	ldr	r3, [pc, #252]	; (8010cac <HAL_RCC_ClockConfig+0x1bc>)
 8010bb0:	681b      	ldr	r3, [r3, #0]
 8010bb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8010bb6:	2b00      	cmp	r3, #0
 8010bb8:	d109      	bne.n	8010bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010bba:	2301      	movs	r3, #1
 8010bbc:	e06f      	b.n	8010c9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8010bbe:	4b3b      	ldr	r3, [pc, #236]	; (8010cac <HAL_RCC_ClockConfig+0x1bc>)
 8010bc0:	681b      	ldr	r3, [r3, #0]
 8010bc2:	f003 0302 	and.w	r3, r3, #2
 8010bc6:	2b00      	cmp	r3, #0
 8010bc8:	d101      	bne.n	8010bce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8010bca:	2301      	movs	r3, #1
 8010bcc:	e067      	b.n	8010c9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8010bce:	4b37      	ldr	r3, [pc, #220]	; (8010cac <HAL_RCC_ClockConfig+0x1bc>)
 8010bd0:	689b      	ldr	r3, [r3, #8]
 8010bd2:	f023 0203 	bic.w	r2, r3, #3
 8010bd6:	687b      	ldr	r3, [r7, #4]
 8010bd8:	685b      	ldr	r3, [r3, #4]
 8010bda:	4934      	ldr	r1, [pc, #208]	; (8010cac <HAL_RCC_ClockConfig+0x1bc>)
 8010bdc:	4313      	orrs	r3, r2
 8010bde:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8010be0:	f7fc fa26 	bl	800d030 <HAL_GetTick>
 8010be4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010be6:	e00a      	b.n	8010bfe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8010be8:	f7fc fa22 	bl	800d030 <HAL_GetTick>
 8010bec:	4602      	mov	r2, r0
 8010bee:	68fb      	ldr	r3, [r7, #12]
 8010bf0:	1ad3      	subs	r3, r2, r3
 8010bf2:	f241 3288 	movw	r2, #5000	; 0x1388
 8010bf6:	4293      	cmp	r3, r2
 8010bf8:	d901      	bls.n	8010bfe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8010bfa:	2303      	movs	r3, #3
 8010bfc:	e04f      	b.n	8010c9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010bfe:	4b2b      	ldr	r3, [pc, #172]	; (8010cac <HAL_RCC_ClockConfig+0x1bc>)
 8010c00:	689b      	ldr	r3, [r3, #8]
 8010c02:	f003 020c 	and.w	r2, r3, #12
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	685b      	ldr	r3, [r3, #4]
 8010c0a:	009b      	lsls	r3, r3, #2
 8010c0c:	429a      	cmp	r2, r3
 8010c0e:	d1eb      	bne.n	8010be8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8010c10:	4b25      	ldr	r3, [pc, #148]	; (8010ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8010c12:	681b      	ldr	r3, [r3, #0]
 8010c14:	f003 030f 	and.w	r3, r3, #15
 8010c18:	683a      	ldr	r2, [r7, #0]
 8010c1a:	429a      	cmp	r2, r3
 8010c1c:	d20c      	bcs.n	8010c38 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8010c1e:	4b22      	ldr	r3, [pc, #136]	; (8010ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8010c20:	683a      	ldr	r2, [r7, #0]
 8010c22:	b2d2      	uxtb	r2, r2
 8010c24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8010c26:	4b20      	ldr	r3, [pc, #128]	; (8010ca8 <HAL_RCC_ClockConfig+0x1b8>)
 8010c28:	681b      	ldr	r3, [r3, #0]
 8010c2a:	f003 030f 	and.w	r3, r3, #15
 8010c2e:	683a      	ldr	r2, [r7, #0]
 8010c30:	429a      	cmp	r2, r3
 8010c32:	d001      	beq.n	8010c38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8010c34:	2301      	movs	r3, #1
 8010c36:	e032      	b.n	8010c9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8010c38:	687b      	ldr	r3, [r7, #4]
 8010c3a:	681b      	ldr	r3, [r3, #0]
 8010c3c:	f003 0304 	and.w	r3, r3, #4
 8010c40:	2b00      	cmp	r3, #0
 8010c42:	d008      	beq.n	8010c56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8010c44:	4b19      	ldr	r3, [pc, #100]	; (8010cac <HAL_RCC_ClockConfig+0x1bc>)
 8010c46:	689b      	ldr	r3, [r3, #8]
 8010c48:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8010c4c:	687b      	ldr	r3, [r7, #4]
 8010c4e:	68db      	ldr	r3, [r3, #12]
 8010c50:	4916      	ldr	r1, [pc, #88]	; (8010cac <HAL_RCC_ClockConfig+0x1bc>)
 8010c52:	4313      	orrs	r3, r2
 8010c54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010c56:	687b      	ldr	r3, [r7, #4]
 8010c58:	681b      	ldr	r3, [r3, #0]
 8010c5a:	f003 0308 	and.w	r3, r3, #8
 8010c5e:	2b00      	cmp	r3, #0
 8010c60:	d009      	beq.n	8010c76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8010c62:	4b12      	ldr	r3, [pc, #72]	; (8010cac <HAL_RCC_ClockConfig+0x1bc>)
 8010c64:	689b      	ldr	r3, [r3, #8]
 8010c66:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8010c6a:	687b      	ldr	r3, [r7, #4]
 8010c6c:	691b      	ldr	r3, [r3, #16]
 8010c6e:	00db      	lsls	r3, r3, #3
 8010c70:	490e      	ldr	r1, [pc, #56]	; (8010cac <HAL_RCC_ClockConfig+0x1bc>)
 8010c72:	4313      	orrs	r3, r2
 8010c74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8010c76:	f000 f821 	bl	8010cbc <HAL_RCC_GetSysClockFreq>
 8010c7a:	4602      	mov	r2, r0
 8010c7c:	4b0b      	ldr	r3, [pc, #44]	; (8010cac <HAL_RCC_ClockConfig+0x1bc>)
 8010c7e:	689b      	ldr	r3, [r3, #8]
 8010c80:	091b      	lsrs	r3, r3, #4
 8010c82:	f003 030f 	and.w	r3, r3, #15
 8010c86:	490a      	ldr	r1, [pc, #40]	; (8010cb0 <HAL_RCC_ClockConfig+0x1c0>)
 8010c88:	5ccb      	ldrb	r3, [r1, r3]
 8010c8a:	fa22 f303 	lsr.w	r3, r2, r3
 8010c8e:	4a09      	ldr	r2, [pc, #36]	; (8010cb4 <HAL_RCC_ClockConfig+0x1c4>)
 8010c90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8010c92:	4b09      	ldr	r3, [pc, #36]	; (8010cb8 <HAL_RCC_ClockConfig+0x1c8>)
 8010c94:	681b      	ldr	r3, [r3, #0]
 8010c96:	4618      	mov	r0, r3
 8010c98:	f7fc f986 	bl	800cfa8 <HAL_InitTick>

  return HAL_OK;
 8010c9c:	2300      	movs	r3, #0
}
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	3710      	adds	r7, #16
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	bd80      	pop	{r7, pc}
 8010ca6:	bf00      	nop
 8010ca8:	40023c00 	.word	0x40023c00
 8010cac:	40023800 	.word	0x40023800
 8010cb0:	08019400 	.word	0x08019400
 8010cb4:	200001d4 	.word	0x200001d4
 8010cb8:	200001fc 	.word	0x200001fc

08010cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8010cbc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010cc0:	b094      	sub	sp, #80	; 0x50
 8010cc2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8010cc4:	2300      	movs	r3, #0
 8010cc6:	647b      	str	r3, [r7, #68]	; 0x44
 8010cc8:	2300      	movs	r3, #0
 8010cca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010ccc:	2300      	movs	r3, #0
 8010cce:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8010cd0:	2300      	movs	r3, #0
 8010cd2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8010cd4:	4b79      	ldr	r3, [pc, #484]	; (8010ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8010cd6:	689b      	ldr	r3, [r3, #8]
 8010cd8:	f003 030c 	and.w	r3, r3, #12
 8010cdc:	2b08      	cmp	r3, #8
 8010cde:	d00d      	beq.n	8010cfc <HAL_RCC_GetSysClockFreq+0x40>
 8010ce0:	2b08      	cmp	r3, #8
 8010ce2:	f200 80e1 	bhi.w	8010ea8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8010ce6:	2b00      	cmp	r3, #0
 8010ce8:	d002      	beq.n	8010cf0 <HAL_RCC_GetSysClockFreq+0x34>
 8010cea:	2b04      	cmp	r3, #4
 8010cec:	d003      	beq.n	8010cf6 <HAL_RCC_GetSysClockFreq+0x3a>
 8010cee:	e0db      	b.n	8010ea8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8010cf0:	4b73      	ldr	r3, [pc, #460]	; (8010ec0 <HAL_RCC_GetSysClockFreq+0x204>)
 8010cf2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8010cf4:	e0db      	b.n	8010eae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8010cf6:	4b73      	ldr	r3, [pc, #460]	; (8010ec4 <HAL_RCC_GetSysClockFreq+0x208>)
 8010cf8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8010cfa:	e0d8      	b.n	8010eae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8010cfc:	4b6f      	ldr	r3, [pc, #444]	; (8010ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8010cfe:	685b      	ldr	r3, [r3, #4]
 8010d00:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8010d04:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8010d06:	4b6d      	ldr	r3, [pc, #436]	; (8010ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8010d08:	685b      	ldr	r3, [r3, #4]
 8010d0a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8010d0e:	2b00      	cmp	r3, #0
 8010d10:	d063      	beq.n	8010dda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010d12:	4b6a      	ldr	r3, [pc, #424]	; (8010ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8010d14:	685b      	ldr	r3, [r3, #4]
 8010d16:	099b      	lsrs	r3, r3, #6
 8010d18:	2200      	movs	r2, #0
 8010d1a:	63bb      	str	r3, [r7, #56]	; 0x38
 8010d1c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8010d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010d20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010d24:	633b      	str	r3, [r7, #48]	; 0x30
 8010d26:	2300      	movs	r3, #0
 8010d28:	637b      	str	r3, [r7, #52]	; 0x34
 8010d2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8010d2e:	4622      	mov	r2, r4
 8010d30:	462b      	mov	r3, r5
 8010d32:	f04f 0000 	mov.w	r0, #0
 8010d36:	f04f 0100 	mov.w	r1, #0
 8010d3a:	0159      	lsls	r1, r3, #5
 8010d3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010d40:	0150      	lsls	r0, r2, #5
 8010d42:	4602      	mov	r2, r0
 8010d44:	460b      	mov	r3, r1
 8010d46:	4621      	mov	r1, r4
 8010d48:	1a51      	subs	r1, r2, r1
 8010d4a:	6139      	str	r1, [r7, #16]
 8010d4c:	4629      	mov	r1, r5
 8010d4e:	eb63 0301 	sbc.w	r3, r3, r1
 8010d52:	617b      	str	r3, [r7, #20]
 8010d54:	f04f 0200 	mov.w	r2, #0
 8010d58:	f04f 0300 	mov.w	r3, #0
 8010d5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8010d60:	4659      	mov	r1, fp
 8010d62:	018b      	lsls	r3, r1, #6
 8010d64:	4651      	mov	r1, sl
 8010d66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8010d6a:	4651      	mov	r1, sl
 8010d6c:	018a      	lsls	r2, r1, #6
 8010d6e:	4651      	mov	r1, sl
 8010d70:	ebb2 0801 	subs.w	r8, r2, r1
 8010d74:	4659      	mov	r1, fp
 8010d76:	eb63 0901 	sbc.w	r9, r3, r1
 8010d7a:	f04f 0200 	mov.w	r2, #0
 8010d7e:	f04f 0300 	mov.w	r3, #0
 8010d82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8010d86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8010d8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8010d8e:	4690      	mov	r8, r2
 8010d90:	4699      	mov	r9, r3
 8010d92:	4623      	mov	r3, r4
 8010d94:	eb18 0303 	adds.w	r3, r8, r3
 8010d98:	60bb      	str	r3, [r7, #8]
 8010d9a:	462b      	mov	r3, r5
 8010d9c:	eb49 0303 	adc.w	r3, r9, r3
 8010da0:	60fb      	str	r3, [r7, #12]
 8010da2:	f04f 0200 	mov.w	r2, #0
 8010da6:	f04f 0300 	mov.w	r3, #0
 8010daa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8010dae:	4629      	mov	r1, r5
 8010db0:	024b      	lsls	r3, r1, #9
 8010db2:	4621      	mov	r1, r4
 8010db4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8010db8:	4621      	mov	r1, r4
 8010dba:	024a      	lsls	r2, r1, #9
 8010dbc:	4610      	mov	r0, r2
 8010dbe:	4619      	mov	r1, r3
 8010dc0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010dc2:	2200      	movs	r2, #0
 8010dc4:	62bb      	str	r3, [r7, #40]	; 0x28
 8010dc6:	62fa      	str	r2, [r7, #44]	; 0x2c
 8010dc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8010dcc:	f7ef fea6 	bl	8000b1c <__aeabi_uldivmod>
 8010dd0:	4602      	mov	r2, r0
 8010dd2:	460b      	mov	r3, r1
 8010dd4:	4613      	mov	r3, r2
 8010dd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8010dd8:	e058      	b.n	8010e8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8010dda:	4b38      	ldr	r3, [pc, #224]	; (8010ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8010ddc:	685b      	ldr	r3, [r3, #4]
 8010dde:	099b      	lsrs	r3, r3, #6
 8010de0:	2200      	movs	r2, #0
 8010de2:	4618      	mov	r0, r3
 8010de4:	4611      	mov	r1, r2
 8010de6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8010dea:	623b      	str	r3, [r7, #32]
 8010dec:	2300      	movs	r3, #0
 8010dee:	627b      	str	r3, [r7, #36]	; 0x24
 8010df0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8010df4:	4642      	mov	r2, r8
 8010df6:	464b      	mov	r3, r9
 8010df8:	f04f 0000 	mov.w	r0, #0
 8010dfc:	f04f 0100 	mov.w	r1, #0
 8010e00:	0159      	lsls	r1, r3, #5
 8010e02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8010e06:	0150      	lsls	r0, r2, #5
 8010e08:	4602      	mov	r2, r0
 8010e0a:	460b      	mov	r3, r1
 8010e0c:	4641      	mov	r1, r8
 8010e0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8010e12:	4649      	mov	r1, r9
 8010e14:	eb63 0b01 	sbc.w	fp, r3, r1
 8010e18:	f04f 0200 	mov.w	r2, #0
 8010e1c:	f04f 0300 	mov.w	r3, #0
 8010e20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8010e24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8010e28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8010e2c:	ebb2 040a 	subs.w	r4, r2, sl
 8010e30:	eb63 050b 	sbc.w	r5, r3, fp
 8010e34:	f04f 0200 	mov.w	r2, #0
 8010e38:	f04f 0300 	mov.w	r3, #0
 8010e3c:	00eb      	lsls	r3, r5, #3
 8010e3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8010e42:	00e2      	lsls	r2, r4, #3
 8010e44:	4614      	mov	r4, r2
 8010e46:	461d      	mov	r5, r3
 8010e48:	4643      	mov	r3, r8
 8010e4a:	18e3      	adds	r3, r4, r3
 8010e4c:	603b      	str	r3, [r7, #0]
 8010e4e:	464b      	mov	r3, r9
 8010e50:	eb45 0303 	adc.w	r3, r5, r3
 8010e54:	607b      	str	r3, [r7, #4]
 8010e56:	f04f 0200 	mov.w	r2, #0
 8010e5a:	f04f 0300 	mov.w	r3, #0
 8010e5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8010e62:	4629      	mov	r1, r5
 8010e64:	028b      	lsls	r3, r1, #10
 8010e66:	4621      	mov	r1, r4
 8010e68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8010e6c:	4621      	mov	r1, r4
 8010e6e:	028a      	lsls	r2, r1, #10
 8010e70:	4610      	mov	r0, r2
 8010e72:	4619      	mov	r1, r3
 8010e74:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8010e76:	2200      	movs	r2, #0
 8010e78:	61bb      	str	r3, [r7, #24]
 8010e7a:	61fa      	str	r2, [r7, #28]
 8010e7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8010e80:	f7ef fe4c 	bl	8000b1c <__aeabi_uldivmod>
 8010e84:	4602      	mov	r2, r0
 8010e86:	460b      	mov	r3, r1
 8010e88:	4613      	mov	r3, r2
 8010e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8010e8c:	4b0b      	ldr	r3, [pc, #44]	; (8010ebc <HAL_RCC_GetSysClockFreq+0x200>)
 8010e8e:	685b      	ldr	r3, [r3, #4]
 8010e90:	0c1b      	lsrs	r3, r3, #16
 8010e92:	f003 0303 	and.w	r3, r3, #3
 8010e96:	3301      	adds	r3, #1
 8010e98:	005b      	lsls	r3, r3, #1
 8010e9a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8010e9c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8010e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8010ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8010ea4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8010ea6:	e002      	b.n	8010eae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8010ea8:	4b05      	ldr	r3, [pc, #20]	; (8010ec0 <HAL_RCC_GetSysClockFreq+0x204>)
 8010eaa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8010eac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8010eae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8010eb0:	4618      	mov	r0, r3
 8010eb2:	3750      	adds	r7, #80	; 0x50
 8010eb4:	46bd      	mov	sp, r7
 8010eb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8010eba:	bf00      	nop
 8010ebc:	40023800 	.word	0x40023800
 8010ec0:	00f42400 	.word	0x00f42400
 8010ec4:	007a1200 	.word	0x007a1200

08010ec8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8010ec8:	b480      	push	{r7}
 8010eca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8010ecc:	4b03      	ldr	r3, [pc, #12]	; (8010edc <HAL_RCC_GetHCLKFreq+0x14>)
 8010ece:	681b      	ldr	r3, [r3, #0]
}
 8010ed0:	4618      	mov	r0, r3
 8010ed2:	46bd      	mov	sp, r7
 8010ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010ed8:	4770      	bx	lr
 8010eda:	bf00      	nop
 8010edc:	200001d4 	.word	0x200001d4

08010ee0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010ee0:	b580      	push	{r7, lr}
 8010ee2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8010ee4:	f7ff fff0 	bl	8010ec8 <HAL_RCC_GetHCLKFreq>
 8010ee8:	4602      	mov	r2, r0
 8010eea:	4b05      	ldr	r3, [pc, #20]	; (8010f00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8010eec:	689b      	ldr	r3, [r3, #8]
 8010eee:	0a9b      	lsrs	r3, r3, #10
 8010ef0:	f003 0307 	and.w	r3, r3, #7
 8010ef4:	4903      	ldr	r1, [pc, #12]	; (8010f04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8010ef6:	5ccb      	ldrb	r3, [r1, r3]
 8010ef8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010efc:	4618      	mov	r0, r3
 8010efe:	bd80      	pop	{r7, pc}
 8010f00:	40023800 	.word	0x40023800
 8010f04:	08019410 	.word	0x08019410

08010f08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8010f08:	b580      	push	{r7, lr}
 8010f0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8010f0c:	f7ff ffdc 	bl	8010ec8 <HAL_RCC_GetHCLKFreq>
 8010f10:	4602      	mov	r2, r0
 8010f12:	4b05      	ldr	r3, [pc, #20]	; (8010f28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8010f14:	689b      	ldr	r3, [r3, #8]
 8010f16:	0b5b      	lsrs	r3, r3, #13
 8010f18:	f003 0307 	and.w	r3, r3, #7
 8010f1c:	4903      	ldr	r1, [pc, #12]	; (8010f2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8010f1e:	5ccb      	ldrb	r3, [r1, r3]
 8010f20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8010f24:	4618      	mov	r0, r3
 8010f26:	bd80      	pop	{r7, pc}
 8010f28:	40023800 	.word	0x40023800
 8010f2c:	08019410 	.word	0x08019410

08010f30 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 8010f30:	b580      	push	{r7, lr}
 8010f32:	b082      	sub	sp, #8
 8010f34:	af00      	add	r7, sp, #0
 8010f36:	6078      	str	r0, [r7, #4]
 8010f38:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8010f3a:	687b      	ldr	r3, [r7, #4]
 8010f3c:	2b00      	cmp	r3, #0
 8010f3e:	d101      	bne.n	8010f44 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 8010f40:	2301      	movs	r3, #1
 8010f42:	e025      	b.n	8010f90 <HAL_SDRAM_Init+0x60>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010f4a:	b2db      	uxtb	r3, r3
 8010f4c:	2b00      	cmp	r3, #0
 8010f4e:	d106      	bne.n	8010f5e <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 8010f50:	687b      	ldr	r3, [r7, #4]
 8010f52:	2200      	movs	r2, #0
 8010f54:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8010f58:	6878      	ldr	r0, [r7, #4]
 8010f5a:	f7f5 fe85 	bl	8006c68 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	2202      	movs	r2, #2
 8010f62:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	681a      	ldr	r2, [r3, #0]
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	3304      	adds	r3, #4
 8010f6e:	4619      	mov	r1, r3
 8010f70:	4610      	mov	r0, r2
 8010f72:	f002 f947 	bl	8013204 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8010f76:	687b      	ldr	r3, [r7, #4]
 8010f78:	6818      	ldr	r0, [r3, #0]
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	685b      	ldr	r3, [r3, #4]
 8010f7e:	461a      	mov	r2, r3
 8010f80:	6839      	ldr	r1, [r7, #0]
 8010f82:	f002 f99c 	bl	80132be <FMC_SDRAM_Timing_Init>
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 8010f86:	687b      	ldr	r3, [r7, #4]
 8010f88:	2201      	movs	r2, #1
 8010f8a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  return HAL_OK;
 8010f8e:	2300      	movs	r3, #0
}
 8010f90:	4618      	mov	r0, r3
 8010f92:	3708      	adds	r7, #8
 8010f94:	46bd      	mov	sp, r7
 8010f96:	bd80      	pop	{r7, pc}

08010f98 <HAL_SDRAM_Read_16b>:
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Read_16b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint16_t *pDstBuffer,
                                     uint32_t BufferSize)
{
 8010f98:	b480      	push	{r7}
 8010f9a:	b089      	sub	sp, #36	; 0x24
 8010f9c:	af00      	add	r7, sp, #0
 8010f9e:	60f8      	str	r0, [r7, #12]
 8010fa0:	60b9      	str	r1, [r7, #8]
 8010fa2:	607a      	str	r2, [r7, #4]
 8010fa4:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint32_t *pSdramAddress = pAddress;
 8010fa6:	68bb      	ldr	r3, [r7, #8]
 8010fa8:	61bb      	str	r3, [r7, #24]
  uint16_t *pdestbuff = pDstBuffer;
 8010faa:	687b      	ldr	r3, [r7, #4]
 8010fac:	617b      	str	r3, [r7, #20]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8010fae:	68fb      	ldr	r3, [r7, #12]
 8010fb0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8010fb4:	74fb      	strb	r3, [r7, #19]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8010fb6:	7cfb      	ldrb	r3, [r7, #19]
 8010fb8:	2b02      	cmp	r3, #2
 8010fba:	d101      	bne.n	8010fc0 <HAL_SDRAM_Read_16b+0x28>
  {
    return HAL_BUSY;
 8010fbc:	2302      	movs	r3, #2
 8010fbe:	e046      	b.n	801104e <HAL_SDRAM_Read_16b+0xb6>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_WRITE_PROTECTED))
 8010fc0:	7cfb      	ldrb	r3, [r7, #19]
 8010fc2:	2b01      	cmp	r3, #1
 8010fc4:	d002      	beq.n	8010fcc <HAL_SDRAM_Read_16b+0x34>
 8010fc6:	7cfb      	ldrb	r3, [r7, #19]
 8010fc8:	2b04      	cmp	r3, #4
 8010fca:	d13f      	bne.n	801104c <HAL_SDRAM_Read_16b+0xb4>
  {
    /* Process Locked */
    __HAL_LOCK(hsdram);
 8010fcc:	68fb      	ldr	r3, [r7, #12]
 8010fce:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8010fd2:	2b01      	cmp	r3, #1
 8010fd4:	d101      	bne.n	8010fda <HAL_SDRAM_Read_16b+0x42>
 8010fd6:	2302      	movs	r3, #2
 8010fd8:	e039      	b.n	801104e <HAL_SDRAM_Read_16b+0xb6>
 8010fda:	68fb      	ldr	r3, [r7, #12]
 8010fdc:	2201      	movs	r2, #1
 8010fde:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Update the SDRAM controller state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8010fe2:	68fb      	ldr	r3, [r7, #12]
 8010fe4:	2202      	movs	r2, #2
 8010fe6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Read data from memory */
    for (size = BufferSize; size >= 2U ; size -= 2U)
 8010fea:	683b      	ldr	r3, [r7, #0]
 8010fec:	61fb      	str	r3, [r7, #28]
 8010fee:	e016      	b.n	801101e <HAL_SDRAM_Read_16b+0x86>
    {
      *pdestbuff = (uint16_t)((*pSdramAddress) & 0x0000FFFFU);
 8010ff0:	69bb      	ldr	r3, [r7, #24]
 8010ff2:	681b      	ldr	r3, [r3, #0]
 8010ff4:	b29a      	uxth	r2, r3
 8010ff6:	697b      	ldr	r3, [r7, #20]
 8010ff8:	801a      	strh	r2, [r3, #0]
      pdestbuff++;
 8010ffa:	697b      	ldr	r3, [r7, #20]
 8010ffc:	3302      	adds	r3, #2
 8010ffe:	617b      	str	r3, [r7, #20]
      *pdestbuff = (uint16_t)(((*pSdramAddress) & 0xFFFF0000U) >> 16U);
 8011000:	69bb      	ldr	r3, [r7, #24]
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	0c1b      	lsrs	r3, r3, #16
 8011006:	b29a      	uxth	r2, r3
 8011008:	697b      	ldr	r3, [r7, #20]
 801100a:	801a      	strh	r2, [r3, #0]
      pdestbuff++;
 801100c:	697b      	ldr	r3, [r7, #20]
 801100e:	3302      	adds	r3, #2
 8011010:	617b      	str	r3, [r7, #20]
      pSdramAddress++;
 8011012:	69bb      	ldr	r3, [r7, #24]
 8011014:	3304      	adds	r3, #4
 8011016:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size >= 2U ; size -= 2U)
 8011018:	69fb      	ldr	r3, [r7, #28]
 801101a:	3b02      	subs	r3, #2
 801101c:	61fb      	str	r3, [r7, #28]
 801101e:	69fb      	ldr	r3, [r7, #28]
 8011020:	2b01      	cmp	r3, #1
 8011022:	d8e5      	bhi.n	8010ff0 <HAL_SDRAM_Read_16b+0x58>
    }

    /* Read last 16-bits if size is not 32-bits multiple */
    if ((BufferSize % 2U) != 0U)
 8011024:	683b      	ldr	r3, [r7, #0]
 8011026:	f003 0301 	and.w	r3, r3, #1
 801102a:	2b00      	cmp	r3, #0
 801102c:	d004      	beq.n	8011038 <HAL_SDRAM_Read_16b+0xa0>
    {
      *pdestbuff = (uint16_t)((*pSdramAddress) & 0x0000FFFFU);
 801102e:	69bb      	ldr	r3, [r7, #24]
 8011030:	681b      	ldr	r3, [r3, #0]
 8011032:	b29a      	uxth	r2, r3
 8011034:	697b      	ldr	r3, [r7, #20]
 8011036:	801a      	strh	r2, [r3, #0]
    }

    /* Update the SDRAM controller state */
    hsdram->State = state;
 8011038:	68fb      	ldr	r3, [r7, #12]
 801103a:	7cfa      	ldrb	r2, [r7, #19]
 801103c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Process Unlocked */
    __HAL_UNLOCK(hsdram);
 8011040:	68fb      	ldr	r3, [r7, #12]
 8011042:	2200      	movs	r2, #0
 8011044:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  else
  {
    return  HAL_ERROR;
  }

  return HAL_OK;
 8011048:	2300      	movs	r3, #0
 801104a:	e000      	b.n	801104e <HAL_SDRAM_Read_16b+0xb6>
    return  HAL_ERROR;
 801104c:	2301      	movs	r3, #1
}
 801104e:	4618      	mov	r0, r3
 8011050:	3724      	adds	r7, #36	; 0x24
 8011052:	46bd      	mov	sp, r7
 8011054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011058:	4770      	bx	lr

0801105a <HAL_SDRAM_Write_16b>:
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Write_16b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint16_t *pSrcBuffer,
                                      uint32_t BufferSize)
{
 801105a:	b480      	push	{r7}
 801105c:	b089      	sub	sp, #36	; 0x24
 801105e:	af00      	add	r7, sp, #0
 8011060:	60f8      	str	r0, [r7, #12]
 8011062:	60b9      	str	r1, [r7, #8]
 8011064:	607a      	str	r2, [r7, #4]
 8011066:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint32_t *psdramaddress = pAddress;
 8011068:	68bb      	ldr	r3, [r7, #8]
 801106a:	61bb      	str	r3, [r7, #24]
  uint16_t *psrcbuff = pSrcBuffer;
 801106c:	687b      	ldr	r3, [r7, #4]
 801106e:	617b      	str	r3, [r7, #20]

  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8011070:	68fb      	ldr	r3, [r7, #12]
 8011072:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011076:	b2db      	uxtb	r3, r3
 8011078:	2b02      	cmp	r3, #2
 801107a:	d101      	bne.n	8011080 <HAL_SDRAM_Write_16b+0x26>
  {
    return HAL_BUSY;
 801107c:	2302      	movs	r3, #2
 801107e:	e04d      	b.n	801111c <HAL_SDRAM_Write_16b+0xc2>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8011080:	68fb      	ldr	r3, [r7, #12]
 8011082:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011086:	b2db      	uxtb	r3, r3
 8011088:	2b01      	cmp	r3, #1
 801108a:	d146      	bne.n	801111a <HAL_SDRAM_Write_16b+0xc0>
  {
    /* Process Locked */
    __HAL_LOCK(hsdram);
 801108c:	68fb      	ldr	r3, [r7, #12]
 801108e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011092:	2b01      	cmp	r3, #1
 8011094:	d101      	bne.n	801109a <HAL_SDRAM_Write_16b+0x40>
 8011096:	2302      	movs	r3, #2
 8011098:	e040      	b.n	801111c <HAL_SDRAM_Write_16b+0xc2>
 801109a:	68fb      	ldr	r3, [r7, #12]
 801109c:	2201      	movs	r2, #1
 801109e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Update the SDRAM controller state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80110a2:	68fb      	ldr	r3, [r7, #12]
 80110a4:	2202      	movs	r2, #2
 80110a6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Write data to memory */
    for (size = BufferSize; size >= 2U ; size -= 2U)
 80110aa:	683b      	ldr	r3, [r7, #0]
 80110ac:	61fb      	str	r3, [r7, #28]
 80110ae:	e018      	b.n	80110e2 <HAL_SDRAM_Write_16b+0x88>
    {
      *psdramaddress = (uint32_t)(*psrcbuff);
 80110b0:	697b      	ldr	r3, [r7, #20]
 80110b2:	881b      	ldrh	r3, [r3, #0]
 80110b4:	461a      	mov	r2, r3
 80110b6:	69bb      	ldr	r3, [r7, #24]
 80110b8:	601a      	str	r2, [r3, #0]
      psrcbuff++;
 80110ba:	697b      	ldr	r3, [r7, #20]
 80110bc:	3302      	adds	r3, #2
 80110be:	617b      	str	r3, [r7, #20]
      *psdramaddress |= ((uint32_t)(*psrcbuff) << 16U);
 80110c0:	69bb      	ldr	r3, [r7, #24]
 80110c2:	681a      	ldr	r2, [r3, #0]
 80110c4:	697b      	ldr	r3, [r7, #20]
 80110c6:	881b      	ldrh	r3, [r3, #0]
 80110c8:	041b      	lsls	r3, r3, #16
 80110ca:	431a      	orrs	r2, r3
 80110cc:	69bb      	ldr	r3, [r7, #24]
 80110ce:	601a      	str	r2, [r3, #0]
      psrcbuff++;
 80110d0:	697b      	ldr	r3, [r7, #20]
 80110d2:	3302      	adds	r3, #2
 80110d4:	617b      	str	r3, [r7, #20]
      psdramaddress++;
 80110d6:	69bb      	ldr	r3, [r7, #24]
 80110d8:	3304      	adds	r3, #4
 80110da:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size >= 2U ; size -= 2U)
 80110dc:	69fb      	ldr	r3, [r7, #28]
 80110de:	3b02      	subs	r3, #2
 80110e0:	61fb      	str	r3, [r7, #28]
 80110e2:	69fb      	ldr	r3, [r7, #28]
 80110e4:	2b01      	cmp	r3, #1
 80110e6:	d8e3      	bhi.n	80110b0 <HAL_SDRAM_Write_16b+0x56>
    }

    /* Write last 16-bits if size is not 32-bits multiple */
    if ((BufferSize % 2U) != 0U)
 80110e8:	683b      	ldr	r3, [r7, #0]
 80110ea:	f003 0301 	and.w	r3, r3, #1
 80110ee:	2b00      	cmp	r3, #0
 80110f0:	d009      	beq.n	8011106 <HAL_SDRAM_Write_16b+0xac>
    {
      *psdramaddress = ((uint32_t)(*psrcbuff) & 0x0000FFFFU) | ((*psdramaddress) & 0xFFFF0000U);
 80110f2:	697b      	ldr	r3, [r7, #20]
 80110f4:	881b      	ldrh	r3, [r3, #0]
 80110f6:	461a      	mov	r2, r3
 80110f8:	69bb      	ldr	r3, [r7, #24]
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	0c1b      	lsrs	r3, r3, #16
 80110fe:	041b      	lsls	r3, r3, #16
 8011100:	431a      	orrs	r2, r3
 8011102:	69bb      	ldr	r3, [r7, #24]
 8011104:	601a      	str	r2, [r3, #0]
    }

    /* Update the SDRAM controller state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 8011106:	68fb      	ldr	r3, [r7, #12]
 8011108:	2201      	movs	r2, #1
 801110a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Process Unlocked */
    __HAL_UNLOCK(hsdram);
 801110e:	68fb      	ldr	r3, [r7, #12]
 8011110:	2200      	movs	r2, #0
 8011112:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  else
  {
    return  HAL_ERROR;
  }

  return HAL_OK;
 8011116:	2300      	movs	r3, #0
 8011118:	e000      	b.n	801111c <HAL_SDRAM_Write_16b+0xc2>
    return  HAL_ERROR;
 801111a:	2301      	movs	r3, #1
}
 801111c:	4618      	mov	r0, r3
 801111e:	3724      	adds	r7, #36	; 0x24
 8011120:	46bd      	mov	sp, r7
 8011122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011126:	4770      	bx	lr

08011128 <HAL_SDRAM_Read_32b>:
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Read_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pDstBuffer,
                                     uint32_t BufferSize)
{
 8011128:	b480      	push	{r7}
 801112a:	b089      	sub	sp, #36	; 0x24
 801112c:	af00      	add	r7, sp, #0
 801112e:	60f8      	str	r0, [r7, #12]
 8011130:	60b9      	str	r1, [r7, #8]
 8011132:	607a      	str	r2, [r7, #4]
 8011134:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
 8011136:	68bb      	ldr	r3, [r7, #8]
 8011138:	61bb      	str	r3, [r7, #24]
  uint32_t *pdestbuff = pDstBuffer;
 801113a:	687b      	ldr	r3, [r7, #4]
 801113c:	617b      	str	r3, [r7, #20]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 801113e:	68fb      	ldr	r3, [r7, #12]
 8011140:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011144:	74fb      	strb	r3, [r7, #19]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8011146:	7cfb      	ldrb	r3, [r7, #19]
 8011148:	2b02      	cmp	r3, #2
 801114a:	d101      	bne.n	8011150 <HAL_SDRAM_Read_32b+0x28>
  {
    return HAL_BUSY;
 801114c:	2302      	movs	r3, #2
 801114e:	e032      	b.n	80111b6 <HAL_SDRAM_Read_32b+0x8e>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_WRITE_PROTECTED))
 8011150:	7cfb      	ldrb	r3, [r7, #19]
 8011152:	2b01      	cmp	r3, #1
 8011154:	d002      	beq.n	801115c <HAL_SDRAM_Read_32b+0x34>
 8011156:	7cfb      	ldrb	r3, [r7, #19]
 8011158:	2b04      	cmp	r3, #4
 801115a:	d12b      	bne.n	80111b4 <HAL_SDRAM_Read_32b+0x8c>
  {
    /* Process Locked */
    __HAL_LOCK(hsdram);
 801115c:	68fb      	ldr	r3, [r7, #12]
 801115e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011162:	2b01      	cmp	r3, #1
 8011164:	d101      	bne.n	801116a <HAL_SDRAM_Read_32b+0x42>
 8011166:	2302      	movs	r3, #2
 8011168:	e025      	b.n	80111b6 <HAL_SDRAM_Read_32b+0x8e>
 801116a:	68fb      	ldr	r3, [r7, #12]
 801116c:	2201      	movs	r2, #1
 801116e:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

    /* Update the SDRAM controller state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	2202      	movs	r2, #2
 8011176:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Read data from source */
    for (size = BufferSize; size != 0U; size--)
 801117a:	683b      	ldr	r3, [r7, #0]
 801117c:	61fb      	str	r3, [r7, #28]
 801117e:	e00c      	b.n	801119a <HAL_SDRAM_Read_32b+0x72>
    {
      *pdestbuff = *(__IO uint32_t *)pSdramAddress;
 8011180:	69bb      	ldr	r3, [r7, #24]
 8011182:	681a      	ldr	r2, [r3, #0]
 8011184:	697b      	ldr	r3, [r7, #20]
 8011186:	601a      	str	r2, [r3, #0]
      pdestbuff++;
 8011188:	697b      	ldr	r3, [r7, #20]
 801118a:	3304      	adds	r3, #4
 801118c:	617b      	str	r3, [r7, #20]
      pSdramAddress++;
 801118e:	69bb      	ldr	r3, [r7, #24]
 8011190:	3304      	adds	r3, #4
 8011192:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size != 0U; size--)
 8011194:	69fb      	ldr	r3, [r7, #28]
 8011196:	3b01      	subs	r3, #1
 8011198:	61fb      	str	r3, [r7, #28]
 801119a:	69fb      	ldr	r3, [r7, #28]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d1ef      	bne.n	8011180 <HAL_SDRAM_Read_32b+0x58>
    }

    /* Update the SDRAM controller state */
    hsdram->State = state;
 80111a0:	68fb      	ldr	r3, [r7, #12]
 80111a2:	7cfa      	ldrb	r2, [r7, #19]
 80111a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Process Unlocked */
    __HAL_UNLOCK(hsdram);
 80111a8:	68fb      	ldr	r3, [r7, #12]
 80111aa:	2200      	movs	r2, #0
 80111ac:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  else
  {
    return  HAL_ERROR;
  }

  return HAL_OK;
 80111b0:	2300      	movs	r3, #0
 80111b2:	e000      	b.n	80111b6 <HAL_SDRAM_Read_32b+0x8e>
    return  HAL_ERROR;
 80111b4:	2301      	movs	r3, #1
}
 80111b6:	4618      	mov	r0, r3
 80111b8:	3724      	adds	r7, #36	; 0x24
 80111ba:	46bd      	mov	sp, r7
 80111bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111c0:	4770      	bx	lr

080111c2 <HAL_SDRAM_WriteProtection_Disable>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_WriteProtection_Disable(SDRAM_HandleTypeDef *hsdram)
{
 80111c2:	b580      	push	{r7, lr}
 80111c4:	b084      	sub	sp, #16
 80111c6:	af00      	add	r7, sp, #0
 80111c8:	6078      	str	r0, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80111ca:	687b      	ldr	r3, [r7, #4]
 80111cc:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80111d0:	73fb      	strb	r3, [r7, #15]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80111d2:	7bfb      	ldrb	r3, [r7, #15]
 80111d4:	2b02      	cmp	r3, #2
 80111d6:	d101      	bne.n	80111dc <HAL_SDRAM_WriteProtection_Disable+0x1a>
  {
    return HAL_BUSY;
 80111d8:	2302      	movs	r3, #2
 80111da:	e015      	b.n	8011208 <HAL_SDRAM_WriteProtection_Disable+0x46>
  }
  else if (state == HAL_SDRAM_STATE_WRITE_PROTECTED)
 80111dc:	7bfb      	ldrb	r3, [r7, #15]
 80111de:	2b04      	cmp	r3, #4
 80111e0:	d111      	bne.n	8011206 <HAL_SDRAM_WriteProtection_Disable+0x44>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80111e2:	687b      	ldr	r3, [r7, #4]
 80111e4:	2202      	movs	r2, #2
 80111e6:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Disable write protection */
    (void)FMC_SDRAM_WriteProtection_Disable(hsdram->Instance, hsdram->Init.SDBank);
 80111ea:	687b      	ldr	r3, [r7, #4]
 80111ec:	681a      	ldr	r2, [r3, #0]
 80111ee:	687b      	ldr	r3, [r7, #4]
 80111f0:	685b      	ldr	r3, [r3, #4]
 80111f2:	4619      	mov	r1, r3
 80111f4:	4610      	mov	r0, r2
 80111f6:	f002 f8cb 	bl	8013390 <FMC_SDRAM_WriteProtection_Disable>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80111fa:	687b      	ldr	r3, [r7, #4]
 80111fc:	2201      	movs	r2, #1
 80111fe:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8011202:	2300      	movs	r3, #0
 8011204:	e000      	b.n	8011208 <HAL_SDRAM_WriteProtection_Disable+0x46>
    return HAL_ERROR;
 8011206:	2301      	movs	r3, #1
}
 8011208:	4618      	mov	r0, r3
 801120a:	3710      	adds	r7, #16
 801120c:	46bd      	mov	sp, r7
 801120e:	bd80      	pop	{r7, pc}

08011210 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8011210:	b580      	push	{r7, lr}
 8011212:	b086      	sub	sp, #24
 8011214:	af00      	add	r7, sp, #0
 8011216:	60f8      	str	r0, [r7, #12]
 8011218:	60b9      	str	r1, [r7, #8]
 801121a:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 801121c:	68fb      	ldr	r3, [r7, #12]
 801121e:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8011222:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8011224:	7dfb      	ldrb	r3, [r7, #23]
 8011226:	2b02      	cmp	r3, #2
 8011228:	d101      	bne.n	801122e <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 801122a:	2302      	movs	r3, #2
 801122c:	e021      	b.n	8011272 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 801122e:	7dfb      	ldrb	r3, [r7, #23]
 8011230:	2b01      	cmp	r3, #1
 8011232:	d002      	beq.n	801123a <HAL_SDRAM_SendCommand+0x2a>
 8011234:	7dfb      	ldrb	r3, [r7, #23]
 8011236:	2b05      	cmp	r3, #5
 8011238:	d118      	bne.n	801126c <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 801123a:	68fb      	ldr	r3, [r7, #12]
 801123c:	2202      	movs	r2, #2
 801123e:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	687a      	ldr	r2, [r7, #4]
 8011248:	68b9      	ldr	r1, [r7, #8]
 801124a:	4618      	mov	r0, r3
 801124c:	f002 f8b6 	bl	80133bc <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8011250:	68bb      	ldr	r3, [r7, #8]
 8011252:	681b      	ldr	r3, [r3, #0]
 8011254:	2b02      	cmp	r3, #2
 8011256:	d104      	bne.n	8011262 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 8011258:	68fb      	ldr	r3, [r7, #12]
 801125a:	2205      	movs	r2, #5
 801125c:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8011260:	e006      	b.n	8011270 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8011262:	68fb      	ldr	r3, [r7, #12]
 8011264:	2201      	movs	r2, #1
 8011266:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 801126a:	e001      	b.n	8011270 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 801126c:	2301      	movs	r3, #1
 801126e:	e000      	b.n	8011272 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 8011270:	2300      	movs	r3, #0
}
 8011272:	4618      	mov	r0, r3
 8011274:	3718      	adds	r7, #24
 8011276:	46bd      	mov	sp, r7
 8011278:	bd80      	pop	{r7, pc}

0801127a <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 801127a:	b580      	push	{r7, lr}
 801127c:	b082      	sub	sp, #8
 801127e:	af00      	add	r7, sp, #0
 8011280:	6078      	str	r0, [r7, #4]
 8011282:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8011284:	687b      	ldr	r3, [r7, #4]
 8011286:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801128a:	b2db      	uxtb	r3, r3
 801128c:	2b02      	cmp	r3, #2
 801128e:	d101      	bne.n	8011294 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 8011290:	2302      	movs	r3, #2
 8011292:	e016      	b.n	80112c2 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801129a:	b2db      	uxtb	r3, r3
 801129c:	2b01      	cmp	r3, #1
 801129e:	d10f      	bne.n	80112c0 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	2202      	movs	r2, #2
 80112a4:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80112a8:	687b      	ldr	r3, [r7, #4]
 80112aa:	681b      	ldr	r3, [r3, #0]
 80112ac:	6839      	ldr	r1, [r7, #0]
 80112ae:	4618      	mov	r0, r3
 80112b0:	f002 f8c1 	bl	8013436 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80112b4:	687b      	ldr	r3, [r7, #4]
 80112b6:	2201      	movs	r2, #1
 80112b8:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80112bc:	2300      	movs	r3, #0
 80112be:	e000      	b.n	80112c2 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80112c0:	2301      	movs	r3, #1
}
 80112c2:	4618      	mov	r0, r3
 80112c4:	3708      	adds	r7, #8
 80112c6:	46bd      	mov	sp, r7
 80112c8:	bd80      	pop	{r7, pc}

080112ca <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80112ca:	b580      	push	{r7, lr}
 80112cc:	b082      	sub	sp, #8
 80112ce:	af00      	add	r7, sp, #0
 80112d0:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80112d2:	687b      	ldr	r3, [r7, #4]
 80112d4:	2b00      	cmp	r3, #0
 80112d6:	d101      	bne.n	80112dc <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80112d8:	2301      	movs	r3, #1
 80112da:	e07b      	b.n	80113d4 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80112dc:	687b      	ldr	r3, [r7, #4]
 80112de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80112e0:	2b00      	cmp	r3, #0
 80112e2:	d108      	bne.n	80112f6 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80112e4:	687b      	ldr	r3, [r7, #4]
 80112e6:	685b      	ldr	r3, [r3, #4]
 80112e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80112ec:	d009      	beq.n	8011302 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80112ee:	687b      	ldr	r3, [r7, #4]
 80112f0:	2200      	movs	r2, #0
 80112f2:	61da      	str	r2, [r3, #28]
 80112f4:	e005      	b.n	8011302 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80112f6:	687b      	ldr	r3, [r7, #4]
 80112f8:	2200      	movs	r2, #0
 80112fa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80112fc:	687b      	ldr	r3, [r7, #4]
 80112fe:	2200      	movs	r2, #0
 8011300:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8011302:	687b      	ldr	r3, [r7, #4]
 8011304:	2200      	movs	r2, #0
 8011306:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8011308:	687b      	ldr	r3, [r7, #4]
 801130a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 801130e:	b2db      	uxtb	r3, r3
 8011310:	2b00      	cmp	r3, #0
 8011312:	d106      	bne.n	8011322 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8011314:	687b      	ldr	r3, [r7, #4]
 8011316:	2200      	movs	r2, #0
 8011318:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801131c:	6878      	ldr	r0, [r7, #4]
 801131e:	f7f9 f801 	bl	800a324 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8011322:	687b      	ldr	r3, [r7, #4]
 8011324:	2202      	movs	r2, #2
 8011326:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 801132a:	687b      	ldr	r3, [r7, #4]
 801132c:	681b      	ldr	r3, [r3, #0]
 801132e:	681a      	ldr	r2, [r3, #0]
 8011330:	687b      	ldr	r3, [r7, #4]
 8011332:	681b      	ldr	r3, [r3, #0]
 8011334:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011338:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 801133a:	687b      	ldr	r3, [r7, #4]
 801133c:	685b      	ldr	r3, [r3, #4]
 801133e:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8011342:	687b      	ldr	r3, [r7, #4]
 8011344:	689b      	ldr	r3, [r3, #8]
 8011346:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 801134a:	431a      	orrs	r2, r3
 801134c:	687b      	ldr	r3, [r7, #4]
 801134e:	68db      	ldr	r3, [r3, #12]
 8011350:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8011354:	431a      	orrs	r2, r3
 8011356:	687b      	ldr	r3, [r7, #4]
 8011358:	691b      	ldr	r3, [r3, #16]
 801135a:	f003 0302 	and.w	r3, r3, #2
 801135e:	431a      	orrs	r2, r3
 8011360:	687b      	ldr	r3, [r7, #4]
 8011362:	695b      	ldr	r3, [r3, #20]
 8011364:	f003 0301 	and.w	r3, r3, #1
 8011368:	431a      	orrs	r2, r3
 801136a:	687b      	ldr	r3, [r7, #4]
 801136c:	699b      	ldr	r3, [r3, #24]
 801136e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8011372:	431a      	orrs	r2, r3
 8011374:	687b      	ldr	r3, [r7, #4]
 8011376:	69db      	ldr	r3, [r3, #28]
 8011378:	f003 0338 	and.w	r3, r3, #56	; 0x38
 801137c:	431a      	orrs	r2, r3
 801137e:	687b      	ldr	r3, [r7, #4]
 8011380:	6a1b      	ldr	r3, [r3, #32]
 8011382:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011386:	ea42 0103 	orr.w	r1, r2, r3
 801138a:	687b      	ldr	r3, [r7, #4]
 801138c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801138e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8011392:	687b      	ldr	r3, [r7, #4]
 8011394:	681b      	ldr	r3, [r3, #0]
 8011396:	430a      	orrs	r2, r1
 8011398:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 801139a:	687b      	ldr	r3, [r7, #4]
 801139c:	699b      	ldr	r3, [r3, #24]
 801139e:	0c1b      	lsrs	r3, r3, #16
 80113a0:	f003 0104 	and.w	r1, r3, #4
 80113a4:	687b      	ldr	r3, [r7, #4]
 80113a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80113a8:	f003 0210 	and.w	r2, r3, #16
 80113ac:	687b      	ldr	r3, [r7, #4]
 80113ae:	681b      	ldr	r3, [r3, #0]
 80113b0:	430a      	orrs	r2, r1
 80113b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80113b4:	687b      	ldr	r3, [r7, #4]
 80113b6:	681b      	ldr	r3, [r3, #0]
 80113b8:	69da      	ldr	r2, [r3, #28]
 80113ba:	687b      	ldr	r3, [r7, #4]
 80113bc:	681b      	ldr	r3, [r3, #0]
 80113be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80113c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80113c4:	687b      	ldr	r3, [r7, #4]
 80113c6:	2200      	movs	r2, #0
 80113c8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80113ca:	687b      	ldr	r3, [r7, #4]
 80113cc:	2201      	movs	r2, #1
 80113ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80113d2:	2300      	movs	r3, #0
}
 80113d4:	4618      	mov	r0, r3
 80113d6:	3708      	adds	r7, #8
 80113d8:	46bd      	mov	sp, r7
 80113da:	bd80      	pop	{r7, pc}

080113dc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80113dc:	b580      	push	{r7, lr}
 80113de:	b088      	sub	sp, #32
 80113e0:	af00      	add	r7, sp, #0
 80113e2:	60f8      	str	r0, [r7, #12]
 80113e4:	60b9      	str	r1, [r7, #8]
 80113e6:	603b      	str	r3, [r7, #0]
 80113e8:	4613      	mov	r3, r2
 80113ea:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80113ec:	2300      	movs	r3, #0
 80113ee:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80113f0:	68fb      	ldr	r3, [r7, #12]
 80113f2:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80113f6:	2b01      	cmp	r3, #1
 80113f8:	d101      	bne.n	80113fe <HAL_SPI_Transmit+0x22>
 80113fa:	2302      	movs	r3, #2
 80113fc:	e126      	b.n	801164c <HAL_SPI_Transmit+0x270>
 80113fe:	68fb      	ldr	r3, [r7, #12]
 8011400:	2201      	movs	r2, #1
 8011402:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011406:	f7fb fe13 	bl	800d030 <HAL_GetTick>
 801140a:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 801140c:	88fb      	ldrh	r3, [r7, #6]
 801140e:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8011410:	68fb      	ldr	r3, [r7, #12]
 8011412:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011416:	b2db      	uxtb	r3, r3
 8011418:	2b01      	cmp	r3, #1
 801141a:	d002      	beq.n	8011422 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 801141c:	2302      	movs	r3, #2
 801141e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8011420:	e10b      	b.n	801163a <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8011422:	68bb      	ldr	r3, [r7, #8]
 8011424:	2b00      	cmp	r3, #0
 8011426:	d002      	beq.n	801142e <HAL_SPI_Transmit+0x52>
 8011428:	88fb      	ldrh	r3, [r7, #6]
 801142a:	2b00      	cmp	r3, #0
 801142c:	d102      	bne.n	8011434 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 801142e:	2301      	movs	r3, #1
 8011430:	77fb      	strb	r3, [r7, #31]
    goto error;
 8011432:	e102      	b.n	801163a <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8011434:	68fb      	ldr	r3, [r7, #12]
 8011436:	2203      	movs	r2, #3
 8011438:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 801143c:	68fb      	ldr	r3, [r7, #12]
 801143e:	2200      	movs	r2, #0
 8011440:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8011442:	68fb      	ldr	r3, [r7, #12]
 8011444:	68ba      	ldr	r2, [r7, #8]
 8011446:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8011448:	68fb      	ldr	r3, [r7, #12]
 801144a:	88fa      	ldrh	r2, [r7, #6]
 801144c:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 801144e:	68fb      	ldr	r3, [r7, #12]
 8011450:	88fa      	ldrh	r2, [r7, #6]
 8011452:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8011454:	68fb      	ldr	r3, [r7, #12]
 8011456:	2200      	movs	r2, #0
 8011458:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 801145a:	68fb      	ldr	r3, [r7, #12]
 801145c:	2200      	movs	r2, #0
 801145e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8011460:	68fb      	ldr	r3, [r7, #12]
 8011462:	2200      	movs	r2, #0
 8011464:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8011466:	68fb      	ldr	r3, [r7, #12]
 8011468:	2200      	movs	r2, #0
 801146a:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 801146c:	68fb      	ldr	r3, [r7, #12]
 801146e:	2200      	movs	r2, #0
 8011470:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011472:	68fb      	ldr	r3, [r7, #12]
 8011474:	689b      	ldr	r3, [r3, #8]
 8011476:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801147a:	d10f      	bne.n	801149c <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 801147c:	68fb      	ldr	r3, [r7, #12]
 801147e:	681b      	ldr	r3, [r3, #0]
 8011480:	681a      	ldr	r2, [r3, #0]
 8011482:	68fb      	ldr	r3, [r7, #12]
 8011484:	681b      	ldr	r3, [r3, #0]
 8011486:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801148a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 801148c:	68fb      	ldr	r3, [r7, #12]
 801148e:	681b      	ldr	r3, [r3, #0]
 8011490:	681a      	ldr	r2, [r3, #0]
 8011492:	68fb      	ldr	r3, [r7, #12]
 8011494:	681b      	ldr	r3, [r3, #0]
 8011496:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 801149a:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801149c:	68fb      	ldr	r3, [r7, #12]
 801149e:	681b      	ldr	r3, [r3, #0]
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80114a6:	2b40      	cmp	r3, #64	; 0x40
 80114a8:	d007      	beq.n	80114ba <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80114aa:	68fb      	ldr	r3, [r7, #12]
 80114ac:	681b      	ldr	r3, [r3, #0]
 80114ae:	681a      	ldr	r2, [r3, #0]
 80114b0:	68fb      	ldr	r3, [r7, #12]
 80114b2:	681b      	ldr	r3, [r3, #0]
 80114b4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80114b8:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80114ba:	68fb      	ldr	r3, [r7, #12]
 80114bc:	68db      	ldr	r3, [r3, #12]
 80114be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80114c2:	d14b      	bne.n	801155c <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80114c4:	68fb      	ldr	r3, [r7, #12]
 80114c6:	685b      	ldr	r3, [r3, #4]
 80114c8:	2b00      	cmp	r3, #0
 80114ca:	d002      	beq.n	80114d2 <HAL_SPI_Transmit+0xf6>
 80114cc:	8afb      	ldrh	r3, [r7, #22]
 80114ce:	2b01      	cmp	r3, #1
 80114d0:	d13e      	bne.n	8011550 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80114d2:	68fb      	ldr	r3, [r7, #12]
 80114d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114d6:	881a      	ldrh	r2, [r3, #0]
 80114d8:	68fb      	ldr	r3, [r7, #12]
 80114da:	681b      	ldr	r3, [r3, #0]
 80114dc:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80114de:	68fb      	ldr	r3, [r7, #12]
 80114e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80114e2:	1c9a      	adds	r2, r3, #2
 80114e4:	68fb      	ldr	r3, [r7, #12]
 80114e6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80114e8:	68fb      	ldr	r3, [r7, #12]
 80114ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80114ec:	b29b      	uxth	r3, r3
 80114ee:	3b01      	subs	r3, #1
 80114f0:	b29a      	uxth	r2, r3
 80114f2:	68fb      	ldr	r3, [r7, #12]
 80114f4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80114f6:	e02b      	b.n	8011550 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80114f8:	68fb      	ldr	r3, [r7, #12]
 80114fa:	681b      	ldr	r3, [r3, #0]
 80114fc:	689b      	ldr	r3, [r3, #8]
 80114fe:	f003 0302 	and.w	r3, r3, #2
 8011502:	2b02      	cmp	r3, #2
 8011504:	d112      	bne.n	801152c <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011506:	68fb      	ldr	r3, [r7, #12]
 8011508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801150a:	881a      	ldrh	r2, [r3, #0]
 801150c:	68fb      	ldr	r3, [r7, #12]
 801150e:	681b      	ldr	r3, [r3, #0]
 8011510:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8011512:	68fb      	ldr	r3, [r7, #12]
 8011514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011516:	1c9a      	adds	r2, r3, #2
 8011518:	68fb      	ldr	r3, [r7, #12]
 801151a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 801151c:	68fb      	ldr	r3, [r7, #12]
 801151e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011520:	b29b      	uxth	r3, r3
 8011522:	3b01      	subs	r3, #1
 8011524:	b29a      	uxth	r2, r3
 8011526:	68fb      	ldr	r3, [r7, #12]
 8011528:	86da      	strh	r2, [r3, #54]	; 0x36
 801152a:	e011      	b.n	8011550 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 801152c:	f7fb fd80 	bl	800d030 <HAL_GetTick>
 8011530:	4602      	mov	r2, r0
 8011532:	69bb      	ldr	r3, [r7, #24]
 8011534:	1ad3      	subs	r3, r2, r3
 8011536:	683a      	ldr	r2, [r7, #0]
 8011538:	429a      	cmp	r2, r3
 801153a:	d803      	bhi.n	8011544 <HAL_SPI_Transmit+0x168>
 801153c:	683b      	ldr	r3, [r7, #0]
 801153e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011542:	d102      	bne.n	801154a <HAL_SPI_Transmit+0x16e>
 8011544:	683b      	ldr	r3, [r7, #0]
 8011546:	2b00      	cmp	r3, #0
 8011548:	d102      	bne.n	8011550 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 801154a:	2303      	movs	r3, #3
 801154c:	77fb      	strb	r3, [r7, #31]
          goto error;
 801154e:	e074      	b.n	801163a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8011550:	68fb      	ldr	r3, [r7, #12]
 8011552:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011554:	b29b      	uxth	r3, r3
 8011556:	2b00      	cmp	r3, #0
 8011558:	d1ce      	bne.n	80114f8 <HAL_SPI_Transmit+0x11c>
 801155a:	e04c      	b.n	80115f6 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 801155c:	68fb      	ldr	r3, [r7, #12]
 801155e:	685b      	ldr	r3, [r3, #4]
 8011560:	2b00      	cmp	r3, #0
 8011562:	d002      	beq.n	801156a <HAL_SPI_Transmit+0x18e>
 8011564:	8afb      	ldrh	r3, [r7, #22]
 8011566:	2b01      	cmp	r3, #1
 8011568:	d140      	bne.n	80115ec <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 801156a:	68fb      	ldr	r3, [r7, #12]
 801156c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801156e:	68fb      	ldr	r3, [r7, #12]
 8011570:	681b      	ldr	r3, [r3, #0]
 8011572:	330c      	adds	r3, #12
 8011574:	7812      	ldrb	r2, [r2, #0]
 8011576:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8011578:	68fb      	ldr	r3, [r7, #12]
 801157a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801157c:	1c5a      	adds	r2, r3, #1
 801157e:	68fb      	ldr	r3, [r7, #12]
 8011580:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8011582:	68fb      	ldr	r3, [r7, #12]
 8011584:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011586:	b29b      	uxth	r3, r3
 8011588:	3b01      	subs	r3, #1
 801158a:	b29a      	uxth	r2, r3
 801158c:	68fb      	ldr	r3, [r7, #12]
 801158e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8011590:	e02c      	b.n	80115ec <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8011592:	68fb      	ldr	r3, [r7, #12]
 8011594:	681b      	ldr	r3, [r3, #0]
 8011596:	689b      	ldr	r3, [r3, #8]
 8011598:	f003 0302 	and.w	r3, r3, #2
 801159c:	2b02      	cmp	r3, #2
 801159e:	d113      	bne.n	80115c8 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80115a0:	68fb      	ldr	r3, [r7, #12]
 80115a2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80115a4:	68fb      	ldr	r3, [r7, #12]
 80115a6:	681b      	ldr	r3, [r3, #0]
 80115a8:	330c      	adds	r3, #12
 80115aa:	7812      	ldrb	r2, [r2, #0]
 80115ac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80115ae:	68fb      	ldr	r3, [r7, #12]
 80115b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80115b2:	1c5a      	adds	r2, r3, #1
 80115b4:	68fb      	ldr	r3, [r7, #12]
 80115b6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80115b8:	68fb      	ldr	r3, [r7, #12]
 80115ba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80115bc:	b29b      	uxth	r3, r3
 80115be:	3b01      	subs	r3, #1
 80115c0:	b29a      	uxth	r2, r3
 80115c2:	68fb      	ldr	r3, [r7, #12]
 80115c4:	86da      	strh	r2, [r3, #54]	; 0x36
 80115c6:	e011      	b.n	80115ec <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80115c8:	f7fb fd32 	bl	800d030 <HAL_GetTick>
 80115cc:	4602      	mov	r2, r0
 80115ce:	69bb      	ldr	r3, [r7, #24]
 80115d0:	1ad3      	subs	r3, r2, r3
 80115d2:	683a      	ldr	r2, [r7, #0]
 80115d4:	429a      	cmp	r2, r3
 80115d6:	d803      	bhi.n	80115e0 <HAL_SPI_Transmit+0x204>
 80115d8:	683b      	ldr	r3, [r7, #0]
 80115da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80115de:	d102      	bne.n	80115e6 <HAL_SPI_Transmit+0x20a>
 80115e0:	683b      	ldr	r3, [r7, #0]
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d102      	bne.n	80115ec <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 80115e6:	2303      	movs	r3, #3
 80115e8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80115ea:	e026      	b.n	801163a <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80115ec:	68fb      	ldr	r3, [r7, #12]
 80115ee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80115f0:	b29b      	uxth	r3, r3
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d1cd      	bne.n	8011592 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80115f6:	69ba      	ldr	r2, [r7, #24]
 80115f8:	6839      	ldr	r1, [r7, #0]
 80115fa:	68f8      	ldr	r0, [r7, #12]
 80115fc:	f000 fd22 	bl	8012044 <SPI_EndRxTxTransaction>
 8011600:	4603      	mov	r3, r0
 8011602:	2b00      	cmp	r3, #0
 8011604:	d002      	beq.n	801160c <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011606:	68fb      	ldr	r3, [r7, #12]
 8011608:	2220      	movs	r2, #32
 801160a:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	689b      	ldr	r3, [r3, #8]
 8011610:	2b00      	cmp	r3, #0
 8011612:	d10a      	bne.n	801162a <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011614:	2300      	movs	r3, #0
 8011616:	613b      	str	r3, [r7, #16]
 8011618:	68fb      	ldr	r3, [r7, #12]
 801161a:	681b      	ldr	r3, [r3, #0]
 801161c:	68db      	ldr	r3, [r3, #12]
 801161e:	613b      	str	r3, [r7, #16]
 8011620:	68fb      	ldr	r3, [r7, #12]
 8011622:	681b      	ldr	r3, [r3, #0]
 8011624:	689b      	ldr	r3, [r3, #8]
 8011626:	613b      	str	r3, [r7, #16]
 8011628:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801162a:	68fb      	ldr	r3, [r7, #12]
 801162c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801162e:	2b00      	cmp	r3, #0
 8011630:	d002      	beq.n	8011638 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8011632:	2301      	movs	r3, #1
 8011634:	77fb      	strb	r3, [r7, #31]
 8011636:	e000      	b.n	801163a <HAL_SPI_Transmit+0x25e>
  }

error:
 8011638:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801163a:	68fb      	ldr	r3, [r7, #12]
 801163c:	2201      	movs	r2, #1
 801163e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8011642:	68fb      	ldr	r3, [r7, #12]
 8011644:	2200      	movs	r2, #0
 8011646:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801164a:	7ffb      	ldrb	r3, [r7, #31]
}
 801164c:	4618      	mov	r0, r3
 801164e:	3720      	adds	r7, #32
 8011650:	46bd      	mov	sp, r7
 8011652:	bd80      	pop	{r7, pc}

08011654 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8011654:	b580      	push	{r7, lr}
 8011656:	b088      	sub	sp, #32
 8011658:	af02      	add	r7, sp, #8
 801165a:	60f8      	str	r0, [r7, #12]
 801165c:	60b9      	str	r1, [r7, #8]
 801165e:	603b      	str	r3, [r7, #0]
 8011660:	4613      	mov	r3, r2
 8011662:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011664:	2300      	movs	r3, #0
 8011666:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8011668:	68fb      	ldr	r3, [r7, #12]
 801166a:	685b      	ldr	r3, [r3, #4]
 801166c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011670:	d112      	bne.n	8011698 <HAL_SPI_Receive+0x44>
 8011672:	68fb      	ldr	r3, [r7, #12]
 8011674:	689b      	ldr	r3, [r3, #8]
 8011676:	2b00      	cmp	r3, #0
 8011678:	d10e      	bne.n	8011698 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 801167a:	68fb      	ldr	r3, [r7, #12]
 801167c:	2204      	movs	r2, #4
 801167e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8011682:	88fa      	ldrh	r2, [r7, #6]
 8011684:	683b      	ldr	r3, [r7, #0]
 8011686:	9300      	str	r3, [sp, #0]
 8011688:	4613      	mov	r3, r2
 801168a:	68ba      	ldr	r2, [r7, #8]
 801168c:	68b9      	ldr	r1, [r7, #8]
 801168e:	68f8      	ldr	r0, [r7, #12]
 8011690:	f000 f8f1 	bl	8011876 <HAL_SPI_TransmitReceive>
 8011694:	4603      	mov	r3, r0
 8011696:	e0ea      	b.n	801186e <HAL_SPI_Receive+0x21a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011698:	68fb      	ldr	r3, [r7, #12]
 801169a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 801169e:	2b01      	cmp	r3, #1
 80116a0:	d101      	bne.n	80116a6 <HAL_SPI_Receive+0x52>
 80116a2:	2302      	movs	r3, #2
 80116a4:	e0e3      	b.n	801186e <HAL_SPI_Receive+0x21a>
 80116a6:	68fb      	ldr	r3, [r7, #12]
 80116a8:	2201      	movs	r2, #1
 80116aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80116ae:	f7fb fcbf 	bl	800d030 <HAL_GetTick>
 80116b2:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 80116b4:	68fb      	ldr	r3, [r7, #12]
 80116b6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80116ba:	b2db      	uxtb	r3, r3
 80116bc:	2b01      	cmp	r3, #1
 80116be:	d002      	beq.n	80116c6 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 80116c0:	2302      	movs	r3, #2
 80116c2:	75fb      	strb	r3, [r7, #23]
    goto error;
 80116c4:	e0ca      	b.n	801185c <HAL_SPI_Receive+0x208>
  }

  if ((pData == NULL) || (Size == 0U))
 80116c6:	68bb      	ldr	r3, [r7, #8]
 80116c8:	2b00      	cmp	r3, #0
 80116ca:	d002      	beq.n	80116d2 <HAL_SPI_Receive+0x7e>
 80116cc:	88fb      	ldrh	r3, [r7, #6]
 80116ce:	2b00      	cmp	r3, #0
 80116d0:	d102      	bne.n	80116d8 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 80116d2:	2301      	movs	r3, #1
 80116d4:	75fb      	strb	r3, [r7, #23]
    goto error;
 80116d6:	e0c1      	b.n	801185c <HAL_SPI_Receive+0x208>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80116d8:	68fb      	ldr	r3, [r7, #12]
 80116da:	2204      	movs	r2, #4
 80116dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80116e0:	68fb      	ldr	r3, [r7, #12]
 80116e2:	2200      	movs	r2, #0
 80116e4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80116e6:	68fb      	ldr	r3, [r7, #12]
 80116e8:	68ba      	ldr	r2, [r7, #8]
 80116ea:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80116ec:	68fb      	ldr	r3, [r7, #12]
 80116ee:	88fa      	ldrh	r2, [r7, #6]
 80116f0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 80116f2:	68fb      	ldr	r3, [r7, #12]
 80116f4:	88fa      	ldrh	r2, [r7, #6]
 80116f6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80116f8:	68fb      	ldr	r3, [r7, #12]
 80116fa:	2200      	movs	r2, #0
 80116fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80116fe:	68fb      	ldr	r3, [r7, #12]
 8011700:	2200      	movs	r2, #0
 8011702:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8011704:	68fb      	ldr	r3, [r7, #12]
 8011706:	2200      	movs	r2, #0
 8011708:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 801170a:	68fb      	ldr	r3, [r7, #12]
 801170c:	2200      	movs	r2, #0
 801170e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8011710:	68fb      	ldr	r3, [r7, #12]
 8011712:	2200      	movs	r2, #0
 8011714:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	689b      	ldr	r3, [r3, #8]
 801171a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 801171e:	d10f      	bne.n	8011740 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8011720:	68fb      	ldr	r3, [r7, #12]
 8011722:	681b      	ldr	r3, [r3, #0]
 8011724:	681a      	ldr	r2, [r3, #0]
 8011726:	68fb      	ldr	r3, [r7, #12]
 8011728:	681b      	ldr	r3, [r3, #0]
 801172a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 801172e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8011730:	68fb      	ldr	r3, [r7, #12]
 8011732:	681b      	ldr	r3, [r3, #0]
 8011734:	681a      	ldr	r2, [r3, #0]
 8011736:	68fb      	ldr	r3, [r7, #12]
 8011738:	681b      	ldr	r3, [r3, #0]
 801173a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 801173e:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011740:	68fb      	ldr	r3, [r7, #12]
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	681b      	ldr	r3, [r3, #0]
 8011746:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801174a:	2b40      	cmp	r3, #64	; 0x40
 801174c:	d007      	beq.n	801175e <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 801174e:	68fb      	ldr	r3, [r7, #12]
 8011750:	681b      	ldr	r3, [r3, #0]
 8011752:	681a      	ldr	r2, [r3, #0]
 8011754:	68fb      	ldr	r3, [r7, #12]
 8011756:	681b      	ldr	r3, [r3, #0]
 8011758:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 801175c:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 801175e:	68fb      	ldr	r3, [r7, #12]
 8011760:	68db      	ldr	r3, [r3, #12]
 8011762:	2b00      	cmp	r3, #0
 8011764:	d162      	bne.n	801182c <HAL_SPI_Receive+0x1d8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8011766:	e02e      	b.n	80117c6 <HAL_SPI_Receive+0x172>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8011768:	68fb      	ldr	r3, [r7, #12]
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	689b      	ldr	r3, [r3, #8]
 801176e:	f003 0301 	and.w	r3, r3, #1
 8011772:	2b01      	cmp	r3, #1
 8011774:	d115      	bne.n	80117a2 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8011776:	68fb      	ldr	r3, [r7, #12]
 8011778:	681b      	ldr	r3, [r3, #0]
 801177a:	f103 020c 	add.w	r2, r3, #12
 801177e:	68fb      	ldr	r3, [r7, #12]
 8011780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011782:	7812      	ldrb	r2, [r2, #0]
 8011784:	b2d2      	uxtb	r2, r2
 8011786:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8011788:	68fb      	ldr	r3, [r7, #12]
 801178a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 801178c:	1c5a      	adds	r2, r3, #1
 801178e:	68fb      	ldr	r3, [r7, #12]
 8011790:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8011792:	68fb      	ldr	r3, [r7, #12]
 8011794:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011796:	b29b      	uxth	r3, r3
 8011798:	3b01      	subs	r3, #1
 801179a:	b29a      	uxth	r2, r3
 801179c:	68fb      	ldr	r3, [r7, #12]
 801179e:	87da      	strh	r2, [r3, #62]	; 0x3e
 80117a0:	e011      	b.n	80117c6 <HAL_SPI_Receive+0x172>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80117a2:	f7fb fc45 	bl	800d030 <HAL_GetTick>
 80117a6:	4602      	mov	r2, r0
 80117a8:	693b      	ldr	r3, [r7, #16]
 80117aa:	1ad3      	subs	r3, r2, r3
 80117ac:	683a      	ldr	r2, [r7, #0]
 80117ae:	429a      	cmp	r2, r3
 80117b0:	d803      	bhi.n	80117ba <HAL_SPI_Receive+0x166>
 80117b2:	683b      	ldr	r3, [r7, #0]
 80117b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80117b8:	d102      	bne.n	80117c0 <HAL_SPI_Receive+0x16c>
 80117ba:	683b      	ldr	r3, [r7, #0]
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d102      	bne.n	80117c6 <HAL_SPI_Receive+0x172>
        {
          errorcode = HAL_TIMEOUT;
 80117c0:	2303      	movs	r3, #3
 80117c2:	75fb      	strb	r3, [r7, #23]
          goto error;
 80117c4:	e04a      	b.n	801185c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 80117c6:	68fb      	ldr	r3, [r7, #12]
 80117c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80117ca:	b29b      	uxth	r3, r3
 80117cc:	2b00      	cmp	r3, #0
 80117ce:	d1cb      	bne.n	8011768 <HAL_SPI_Receive+0x114>
 80117d0:	e031      	b.n	8011836 <HAL_SPI_Receive+0x1e2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80117d2:	68fb      	ldr	r3, [r7, #12]
 80117d4:	681b      	ldr	r3, [r3, #0]
 80117d6:	689b      	ldr	r3, [r3, #8]
 80117d8:	f003 0301 	and.w	r3, r3, #1
 80117dc:	2b01      	cmp	r3, #1
 80117de:	d113      	bne.n	8011808 <HAL_SPI_Receive+0x1b4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80117e0:	68fb      	ldr	r3, [r7, #12]
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	68da      	ldr	r2, [r3, #12]
 80117e6:	68fb      	ldr	r3, [r7, #12]
 80117e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117ea:	b292      	uxth	r2, r2
 80117ec:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80117ee:	68fb      	ldr	r3, [r7, #12]
 80117f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80117f2:	1c9a      	adds	r2, r3, #2
 80117f4:	68fb      	ldr	r3, [r7, #12]
 80117f6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80117f8:	68fb      	ldr	r3, [r7, #12]
 80117fa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80117fc:	b29b      	uxth	r3, r3
 80117fe:	3b01      	subs	r3, #1
 8011800:	b29a      	uxth	r2, r3
 8011802:	68fb      	ldr	r3, [r7, #12]
 8011804:	87da      	strh	r2, [r3, #62]	; 0x3e
 8011806:	e011      	b.n	801182c <HAL_SPI_Receive+0x1d8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8011808:	f7fb fc12 	bl	800d030 <HAL_GetTick>
 801180c:	4602      	mov	r2, r0
 801180e:	693b      	ldr	r3, [r7, #16]
 8011810:	1ad3      	subs	r3, r2, r3
 8011812:	683a      	ldr	r2, [r7, #0]
 8011814:	429a      	cmp	r2, r3
 8011816:	d803      	bhi.n	8011820 <HAL_SPI_Receive+0x1cc>
 8011818:	683b      	ldr	r3, [r7, #0]
 801181a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801181e:	d102      	bne.n	8011826 <HAL_SPI_Receive+0x1d2>
 8011820:	683b      	ldr	r3, [r7, #0]
 8011822:	2b00      	cmp	r3, #0
 8011824:	d102      	bne.n	801182c <HAL_SPI_Receive+0x1d8>
        {
          errorcode = HAL_TIMEOUT;
 8011826:	2303      	movs	r3, #3
 8011828:	75fb      	strb	r3, [r7, #23]
          goto error;
 801182a:	e017      	b.n	801185c <HAL_SPI_Receive+0x208>
    while (hspi->RxXferCount > 0U)
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011830:	b29b      	uxth	r3, r3
 8011832:	2b00      	cmp	r3, #0
 8011834:	d1cd      	bne.n	80117d2 <HAL_SPI_Receive+0x17e>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011836:	693a      	ldr	r2, [r7, #16]
 8011838:	6839      	ldr	r1, [r7, #0]
 801183a:	68f8      	ldr	r0, [r7, #12]
 801183c:	f000 fb9c 	bl	8011f78 <SPI_EndRxTransaction>
 8011840:	4603      	mov	r3, r0
 8011842:	2b00      	cmp	r3, #0
 8011844:	d002      	beq.n	801184c <HAL_SPI_Receive+0x1f8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011846:	68fb      	ldr	r3, [r7, #12]
 8011848:	2220      	movs	r2, #32
 801184a:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 801184c:	68fb      	ldr	r3, [r7, #12]
 801184e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011850:	2b00      	cmp	r3, #0
 8011852:	d002      	beq.n	801185a <HAL_SPI_Receive+0x206>
  {
    errorcode = HAL_ERROR;
 8011854:	2301      	movs	r3, #1
 8011856:	75fb      	strb	r3, [r7, #23]
 8011858:	e000      	b.n	801185c <HAL_SPI_Receive+0x208>
  }

error :
 801185a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 801185c:	68fb      	ldr	r3, [r7, #12]
 801185e:	2201      	movs	r2, #1
 8011860:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8011864:	68fb      	ldr	r3, [r7, #12]
 8011866:	2200      	movs	r2, #0
 8011868:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 801186c:	7dfb      	ldrb	r3, [r7, #23]
}
 801186e:	4618      	mov	r0, r3
 8011870:	3718      	adds	r7, #24
 8011872:	46bd      	mov	sp, r7
 8011874:	bd80      	pop	{r7, pc}

08011876 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8011876:	b580      	push	{r7, lr}
 8011878:	b08c      	sub	sp, #48	; 0x30
 801187a:	af00      	add	r7, sp, #0
 801187c:	60f8      	str	r0, [r7, #12]
 801187e:	60b9      	str	r1, [r7, #8]
 8011880:	607a      	str	r2, [r7, #4]
 8011882:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8011884:	2301      	movs	r3, #1
 8011886:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8011888:	2300      	movs	r3, #0
 801188a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 801188e:	68fb      	ldr	r3, [r7, #12]
 8011890:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011894:	2b01      	cmp	r3, #1
 8011896:	d101      	bne.n	801189c <HAL_SPI_TransmitReceive+0x26>
 8011898:	2302      	movs	r3, #2
 801189a:	e18a      	b.n	8011bb2 <HAL_SPI_TransmitReceive+0x33c>
 801189c:	68fb      	ldr	r3, [r7, #12]
 801189e:	2201      	movs	r2, #1
 80118a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80118a4:	f7fb fbc4 	bl	800d030 <HAL_GetTick>
 80118a8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80118aa:	68fb      	ldr	r3, [r7, #12]
 80118ac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80118b0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 80118b4:	68fb      	ldr	r3, [r7, #12]
 80118b6:	685b      	ldr	r3, [r3, #4]
 80118b8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 80118ba:	887b      	ldrh	r3, [r7, #2]
 80118bc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80118be:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80118c2:	2b01      	cmp	r3, #1
 80118c4:	d00f      	beq.n	80118e6 <HAL_SPI_TransmitReceive+0x70>
 80118c6:	69fb      	ldr	r3, [r7, #28]
 80118c8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80118cc:	d107      	bne.n	80118de <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80118ce:	68fb      	ldr	r3, [r7, #12]
 80118d0:	689b      	ldr	r3, [r3, #8]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d103      	bne.n	80118de <HAL_SPI_TransmitReceive+0x68>
 80118d6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80118da:	2b04      	cmp	r3, #4
 80118dc:	d003      	beq.n	80118e6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 80118de:	2302      	movs	r3, #2
 80118e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80118e4:	e15b      	b.n	8011b9e <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80118e6:	68bb      	ldr	r3, [r7, #8]
 80118e8:	2b00      	cmp	r3, #0
 80118ea:	d005      	beq.n	80118f8 <HAL_SPI_TransmitReceive+0x82>
 80118ec:	687b      	ldr	r3, [r7, #4]
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d002      	beq.n	80118f8 <HAL_SPI_TransmitReceive+0x82>
 80118f2:	887b      	ldrh	r3, [r7, #2]
 80118f4:	2b00      	cmp	r3, #0
 80118f6:	d103      	bne.n	8011900 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 80118f8:	2301      	movs	r3, #1
 80118fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 80118fe:	e14e      	b.n	8011b9e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8011900:	68fb      	ldr	r3, [r7, #12]
 8011902:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011906:	b2db      	uxtb	r3, r3
 8011908:	2b04      	cmp	r3, #4
 801190a:	d003      	beq.n	8011914 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 801190c:	68fb      	ldr	r3, [r7, #12]
 801190e:	2205      	movs	r2, #5
 8011910:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011914:	68fb      	ldr	r3, [r7, #12]
 8011916:	2200      	movs	r2, #0
 8011918:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	687a      	ldr	r2, [r7, #4]
 801191e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8011920:	68fb      	ldr	r3, [r7, #12]
 8011922:	887a      	ldrh	r2, [r7, #2]
 8011924:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8011926:	68fb      	ldr	r3, [r7, #12]
 8011928:	887a      	ldrh	r2, [r7, #2]
 801192a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 801192c:	68fb      	ldr	r3, [r7, #12]
 801192e:	68ba      	ldr	r2, [r7, #8]
 8011930:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	887a      	ldrh	r2, [r7, #2]
 8011936:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8011938:	68fb      	ldr	r3, [r7, #12]
 801193a:	887a      	ldrh	r2, [r7, #2]
 801193c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	2200      	movs	r2, #0
 8011942:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8011944:	68fb      	ldr	r3, [r7, #12]
 8011946:	2200      	movs	r2, #0
 8011948:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 801194a:	68fb      	ldr	r3, [r7, #12]
 801194c:	681b      	ldr	r3, [r3, #0]
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011954:	2b40      	cmp	r3, #64	; 0x40
 8011956:	d007      	beq.n	8011968 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011958:	68fb      	ldr	r3, [r7, #12]
 801195a:	681b      	ldr	r3, [r3, #0]
 801195c:	681a      	ldr	r2, [r3, #0]
 801195e:	68fb      	ldr	r3, [r7, #12]
 8011960:	681b      	ldr	r3, [r3, #0]
 8011962:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011966:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8011968:	68fb      	ldr	r3, [r7, #12]
 801196a:	68db      	ldr	r3, [r3, #12]
 801196c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8011970:	d178      	bne.n	8011a64 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	685b      	ldr	r3, [r3, #4]
 8011976:	2b00      	cmp	r3, #0
 8011978:	d002      	beq.n	8011980 <HAL_SPI_TransmitReceive+0x10a>
 801197a:	8b7b      	ldrh	r3, [r7, #26]
 801197c:	2b01      	cmp	r3, #1
 801197e:	d166      	bne.n	8011a4e <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8011980:	68fb      	ldr	r3, [r7, #12]
 8011982:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011984:	881a      	ldrh	r2, [r3, #0]
 8011986:	68fb      	ldr	r3, [r7, #12]
 8011988:	681b      	ldr	r3, [r3, #0]
 801198a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 801198c:	68fb      	ldr	r3, [r7, #12]
 801198e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011990:	1c9a      	adds	r2, r3, #2
 8011992:	68fb      	ldr	r3, [r7, #12]
 8011994:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 801199a:	b29b      	uxth	r3, r3
 801199c:	3b01      	subs	r3, #1
 801199e:	b29a      	uxth	r2, r3
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80119a4:	e053      	b.n	8011a4e <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80119a6:	68fb      	ldr	r3, [r7, #12]
 80119a8:	681b      	ldr	r3, [r3, #0]
 80119aa:	689b      	ldr	r3, [r3, #8]
 80119ac:	f003 0302 	and.w	r3, r3, #2
 80119b0:	2b02      	cmp	r3, #2
 80119b2:	d11b      	bne.n	80119ec <HAL_SPI_TransmitReceive+0x176>
 80119b4:	68fb      	ldr	r3, [r7, #12]
 80119b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80119b8:	b29b      	uxth	r3, r3
 80119ba:	2b00      	cmp	r3, #0
 80119bc:	d016      	beq.n	80119ec <HAL_SPI_TransmitReceive+0x176>
 80119be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80119c0:	2b01      	cmp	r3, #1
 80119c2:	d113      	bne.n	80119ec <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80119c4:	68fb      	ldr	r3, [r7, #12]
 80119c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119c8:	881a      	ldrh	r2, [r3, #0]
 80119ca:	68fb      	ldr	r3, [r7, #12]
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80119d0:	68fb      	ldr	r3, [r7, #12]
 80119d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80119d4:	1c9a      	adds	r2, r3, #2
 80119d6:	68fb      	ldr	r3, [r7, #12]
 80119d8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80119da:	68fb      	ldr	r3, [r7, #12]
 80119dc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80119de:	b29b      	uxth	r3, r3
 80119e0:	3b01      	subs	r3, #1
 80119e2:	b29a      	uxth	r2, r3
 80119e4:	68fb      	ldr	r3, [r7, #12]
 80119e6:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80119e8:	2300      	movs	r3, #0
 80119ea:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80119ec:	68fb      	ldr	r3, [r7, #12]
 80119ee:	681b      	ldr	r3, [r3, #0]
 80119f0:	689b      	ldr	r3, [r3, #8]
 80119f2:	f003 0301 	and.w	r3, r3, #1
 80119f6:	2b01      	cmp	r3, #1
 80119f8:	d119      	bne.n	8011a2e <HAL_SPI_TransmitReceive+0x1b8>
 80119fa:	68fb      	ldr	r3, [r7, #12]
 80119fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80119fe:	b29b      	uxth	r3, r3
 8011a00:	2b00      	cmp	r3, #0
 8011a02:	d014      	beq.n	8011a2e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8011a04:	68fb      	ldr	r3, [r7, #12]
 8011a06:	681b      	ldr	r3, [r3, #0]
 8011a08:	68da      	ldr	r2, [r3, #12]
 8011a0a:	68fb      	ldr	r3, [r7, #12]
 8011a0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a0e:	b292      	uxth	r2, r2
 8011a10:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8011a12:	68fb      	ldr	r3, [r7, #12]
 8011a14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011a16:	1c9a      	adds	r2, r3, #2
 8011a18:	68fb      	ldr	r3, [r7, #12]
 8011a1a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8011a1c:	68fb      	ldr	r3, [r7, #12]
 8011a1e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011a20:	b29b      	uxth	r3, r3
 8011a22:	3b01      	subs	r3, #1
 8011a24:	b29a      	uxth	r2, r3
 8011a26:	68fb      	ldr	r3, [r7, #12]
 8011a28:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011a2a:	2301      	movs	r3, #1
 8011a2c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8011a2e:	f7fb faff 	bl	800d030 <HAL_GetTick>
 8011a32:	4602      	mov	r2, r0
 8011a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011a36:	1ad3      	subs	r3, r2, r3
 8011a38:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011a3a:	429a      	cmp	r2, r3
 8011a3c:	d807      	bhi.n	8011a4e <HAL_SPI_TransmitReceive+0x1d8>
 8011a3e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011a40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011a44:	d003      	beq.n	8011a4e <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8011a46:	2303      	movs	r3, #3
 8011a48:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8011a4c:	e0a7      	b.n	8011b9e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011a4e:	68fb      	ldr	r3, [r7, #12]
 8011a50:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011a52:	b29b      	uxth	r3, r3
 8011a54:	2b00      	cmp	r3, #0
 8011a56:	d1a6      	bne.n	80119a6 <HAL_SPI_TransmitReceive+0x130>
 8011a58:	68fb      	ldr	r3, [r7, #12]
 8011a5a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011a5c:	b29b      	uxth	r3, r3
 8011a5e:	2b00      	cmp	r3, #0
 8011a60:	d1a1      	bne.n	80119a6 <HAL_SPI_TransmitReceive+0x130>
 8011a62:	e07c      	b.n	8011b5e <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8011a64:	68fb      	ldr	r3, [r7, #12]
 8011a66:	685b      	ldr	r3, [r3, #4]
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d002      	beq.n	8011a72 <HAL_SPI_TransmitReceive+0x1fc>
 8011a6c:	8b7b      	ldrh	r3, [r7, #26]
 8011a6e:	2b01      	cmp	r3, #1
 8011a70:	d16b      	bne.n	8011b4a <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8011a72:	68fb      	ldr	r3, [r7, #12]
 8011a74:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011a76:	68fb      	ldr	r3, [r7, #12]
 8011a78:	681b      	ldr	r3, [r3, #0]
 8011a7a:	330c      	adds	r3, #12
 8011a7c:	7812      	ldrb	r2, [r2, #0]
 8011a7e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8011a80:	68fb      	ldr	r3, [r7, #12]
 8011a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011a84:	1c5a      	adds	r2, r3, #1
 8011a86:	68fb      	ldr	r3, [r7, #12]
 8011a88:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8011a8a:	68fb      	ldr	r3, [r7, #12]
 8011a8c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011a8e:	b29b      	uxth	r3, r3
 8011a90:	3b01      	subs	r3, #1
 8011a92:	b29a      	uxth	r2, r3
 8011a94:	68fb      	ldr	r3, [r7, #12]
 8011a96:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011a98:	e057      	b.n	8011b4a <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8011a9a:	68fb      	ldr	r3, [r7, #12]
 8011a9c:	681b      	ldr	r3, [r3, #0]
 8011a9e:	689b      	ldr	r3, [r3, #8]
 8011aa0:	f003 0302 	and.w	r3, r3, #2
 8011aa4:	2b02      	cmp	r3, #2
 8011aa6:	d11c      	bne.n	8011ae2 <HAL_SPI_TransmitReceive+0x26c>
 8011aa8:	68fb      	ldr	r3, [r7, #12]
 8011aaa:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011aac:	b29b      	uxth	r3, r3
 8011aae:	2b00      	cmp	r3, #0
 8011ab0:	d017      	beq.n	8011ae2 <HAL_SPI_TransmitReceive+0x26c>
 8011ab2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8011ab4:	2b01      	cmp	r3, #1
 8011ab6:	d114      	bne.n	8011ae2 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8011ab8:	68fb      	ldr	r3, [r7, #12]
 8011aba:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8011abc:	68fb      	ldr	r3, [r7, #12]
 8011abe:	681b      	ldr	r3, [r3, #0]
 8011ac0:	330c      	adds	r3, #12
 8011ac2:	7812      	ldrb	r2, [r2, #0]
 8011ac4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8011ac6:	68fb      	ldr	r3, [r7, #12]
 8011ac8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011aca:	1c5a      	adds	r2, r3, #1
 8011acc:	68fb      	ldr	r3, [r7, #12]
 8011ace:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8011ad0:	68fb      	ldr	r3, [r7, #12]
 8011ad2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011ad4:	b29b      	uxth	r3, r3
 8011ad6:	3b01      	subs	r3, #1
 8011ad8:	b29a      	uxth	r2, r3
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8011ade:	2300      	movs	r3, #0
 8011ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8011ae2:	68fb      	ldr	r3, [r7, #12]
 8011ae4:	681b      	ldr	r3, [r3, #0]
 8011ae6:	689b      	ldr	r3, [r3, #8]
 8011ae8:	f003 0301 	and.w	r3, r3, #1
 8011aec:	2b01      	cmp	r3, #1
 8011aee:	d119      	bne.n	8011b24 <HAL_SPI_TransmitReceive+0x2ae>
 8011af0:	68fb      	ldr	r3, [r7, #12]
 8011af2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011af4:	b29b      	uxth	r3, r3
 8011af6:	2b00      	cmp	r3, #0
 8011af8:	d014      	beq.n	8011b24 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8011afa:	68fb      	ldr	r3, [r7, #12]
 8011afc:	681b      	ldr	r3, [r3, #0]
 8011afe:	68da      	ldr	r2, [r3, #12]
 8011b00:	68fb      	ldr	r3, [r7, #12]
 8011b02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b04:	b2d2      	uxtb	r2, r2
 8011b06:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8011b08:	68fb      	ldr	r3, [r7, #12]
 8011b0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011b0c:	1c5a      	adds	r2, r3, #1
 8011b0e:	68fb      	ldr	r3, [r7, #12]
 8011b10:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8011b12:	68fb      	ldr	r3, [r7, #12]
 8011b14:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011b16:	b29b      	uxth	r3, r3
 8011b18:	3b01      	subs	r3, #1
 8011b1a:	b29a      	uxth	r2, r3
 8011b1c:	68fb      	ldr	r3, [r7, #12]
 8011b1e:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8011b20:	2301      	movs	r3, #1
 8011b22:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8011b24:	f7fb fa84 	bl	800d030 <HAL_GetTick>
 8011b28:	4602      	mov	r2, r0
 8011b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011b2c:	1ad3      	subs	r3, r2, r3
 8011b2e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8011b30:	429a      	cmp	r2, r3
 8011b32:	d803      	bhi.n	8011b3c <HAL_SPI_TransmitReceive+0x2c6>
 8011b34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011b3a:	d102      	bne.n	8011b42 <HAL_SPI_TransmitReceive+0x2cc>
 8011b3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d103      	bne.n	8011b4a <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8011b42:	2303      	movs	r3, #3
 8011b44:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8011b48:	e029      	b.n	8011b9e <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011b4e:	b29b      	uxth	r3, r3
 8011b50:	2b00      	cmp	r3, #0
 8011b52:	d1a2      	bne.n	8011a9a <HAL_SPI_TransmitReceive+0x224>
 8011b54:	68fb      	ldr	r3, [r7, #12]
 8011b56:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8011b58:	b29b      	uxth	r3, r3
 8011b5a:	2b00      	cmp	r3, #0
 8011b5c:	d19d      	bne.n	8011a9a <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8011b5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011b60:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011b62:	68f8      	ldr	r0, [r7, #12]
 8011b64:	f000 fa6e 	bl	8012044 <SPI_EndRxTxTransaction>
 8011b68:	4603      	mov	r3, r0
 8011b6a:	2b00      	cmp	r3, #0
 8011b6c:	d006      	beq.n	8011b7c <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8011b6e:	2301      	movs	r3, #1
 8011b70:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8011b74:	68fb      	ldr	r3, [r7, #12]
 8011b76:	2220      	movs	r2, #32
 8011b78:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8011b7a:	e010      	b.n	8011b9e <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8011b7c:	68fb      	ldr	r3, [r7, #12]
 8011b7e:	689b      	ldr	r3, [r3, #8]
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d10b      	bne.n	8011b9c <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011b84:	2300      	movs	r3, #0
 8011b86:	617b      	str	r3, [r7, #20]
 8011b88:	68fb      	ldr	r3, [r7, #12]
 8011b8a:	681b      	ldr	r3, [r3, #0]
 8011b8c:	68db      	ldr	r3, [r3, #12]
 8011b8e:	617b      	str	r3, [r7, #20]
 8011b90:	68fb      	ldr	r3, [r7, #12]
 8011b92:	681b      	ldr	r3, [r3, #0]
 8011b94:	689b      	ldr	r3, [r3, #8]
 8011b96:	617b      	str	r3, [r7, #20]
 8011b98:	697b      	ldr	r3, [r7, #20]
 8011b9a:	e000      	b.n	8011b9e <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8011b9c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8011b9e:	68fb      	ldr	r3, [r7, #12]
 8011ba0:	2201      	movs	r2, #1
 8011ba2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8011ba6:	68fb      	ldr	r3, [r7, #12]
 8011ba8:	2200      	movs	r2, #0
 8011baa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8011bae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8011bb2:	4618      	mov	r0, r3
 8011bb4:	3730      	adds	r7, #48	; 0x30
 8011bb6:	46bd      	mov	sp, r7
 8011bb8:	bd80      	pop	{r7, pc}
	...

08011bbc <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8011bbc:	b580      	push	{r7, lr}
 8011bbe:	b086      	sub	sp, #24
 8011bc0:	af00      	add	r7, sp, #0
 8011bc2:	60f8      	str	r0, [r7, #12]
 8011bc4:	60b9      	str	r1, [r7, #8]
 8011bc6:	4613      	mov	r3, r2
 8011bc8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8011bca:	2300      	movs	r3, #0
 8011bcc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8011bce:	68fb      	ldr	r3, [r7, #12]
 8011bd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8011bd4:	2b01      	cmp	r3, #1
 8011bd6:	d101      	bne.n	8011bdc <HAL_SPI_Transmit_DMA+0x20>
 8011bd8:	2302      	movs	r3, #2
 8011bda:	e09b      	b.n	8011d14 <HAL_SPI_Transmit_DMA+0x158>
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	2201      	movs	r2, #1
 8011be0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8011be4:	68fb      	ldr	r3, [r7, #12]
 8011be6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8011bea:	b2db      	uxtb	r3, r3
 8011bec:	2b01      	cmp	r3, #1
 8011bee:	d002      	beq.n	8011bf6 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8011bf0:	2302      	movs	r3, #2
 8011bf2:	75fb      	strb	r3, [r7, #23]
    goto error;
 8011bf4:	e089      	b.n	8011d0a <HAL_SPI_Transmit_DMA+0x14e>
  }

  if ((pData == NULL) || (Size == 0U))
 8011bf6:	68bb      	ldr	r3, [r7, #8]
 8011bf8:	2b00      	cmp	r3, #0
 8011bfa:	d002      	beq.n	8011c02 <HAL_SPI_Transmit_DMA+0x46>
 8011bfc:	88fb      	ldrh	r3, [r7, #6]
 8011bfe:	2b00      	cmp	r3, #0
 8011c00:	d102      	bne.n	8011c08 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8011c02:	2301      	movs	r3, #1
 8011c04:	75fb      	strb	r3, [r7, #23]
    goto error;
 8011c06:	e080      	b.n	8011d0a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8011c08:	68fb      	ldr	r3, [r7, #12]
 8011c0a:	2203      	movs	r2, #3
 8011c0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8011c10:	68fb      	ldr	r3, [r7, #12]
 8011c12:	2200      	movs	r2, #0
 8011c14:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8011c16:	68fb      	ldr	r3, [r7, #12]
 8011c18:	68ba      	ldr	r2, [r7, #8]
 8011c1a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8011c1c:	68fb      	ldr	r3, [r7, #12]
 8011c1e:	88fa      	ldrh	r2, [r7, #6]
 8011c20:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8011c22:	68fb      	ldr	r3, [r7, #12]
 8011c24:	88fa      	ldrh	r2, [r7, #6]
 8011c26:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8011c28:	68fb      	ldr	r3, [r7, #12]
 8011c2a:	2200      	movs	r2, #0
 8011c2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxISR       = NULL;
 8011c2e:	68fb      	ldr	r3, [r7, #12]
 8011c30:	2200      	movs	r2, #0
 8011c32:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8011c34:	68fb      	ldr	r3, [r7, #12]
 8011c36:	2200      	movs	r2, #0
 8011c38:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8011c3a:	68fb      	ldr	r3, [r7, #12]
 8011c3c:	2200      	movs	r2, #0
 8011c3e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8011c40:	68fb      	ldr	r3, [r7, #12]
 8011c42:	2200      	movs	r2, #0
 8011c44:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011c46:	68fb      	ldr	r3, [r7, #12]
 8011c48:	689b      	ldr	r3, [r3, #8]
 8011c4a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011c4e:	d10f      	bne.n	8011c70 <HAL_SPI_Transmit_DMA+0xb4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8011c50:	68fb      	ldr	r3, [r7, #12]
 8011c52:	681b      	ldr	r3, [r3, #0]
 8011c54:	681a      	ldr	r2, [r3, #0]
 8011c56:	68fb      	ldr	r3, [r7, #12]
 8011c58:	681b      	ldr	r3, [r3, #0]
 8011c5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011c5e:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8011c60:	68fb      	ldr	r3, [r7, #12]
 8011c62:	681b      	ldr	r3, [r3, #0]
 8011c64:	681a      	ldr	r2, [r3, #0]
 8011c66:	68fb      	ldr	r3, [r7, #12]
 8011c68:	681b      	ldr	r3, [r3, #0]
 8011c6a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8011c6e:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8011c70:	68fb      	ldr	r3, [r7, #12]
 8011c72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011c74:	4a29      	ldr	r2, [pc, #164]	; (8011d1c <HAL_SPI_Transmit_DMA+0x160>)
 8011c76:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8011c78:	68fb      	ldr	r3, [r7, #12]
 8011c7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011c7c:	4a28      	ldr	r2, [pc, #160]	; (8011d20 <HAL_SPI_Transmit_DMA+0x164>)
 8011c7e:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8011c80:	68fb      	ldr	r3, [r7, #12]
 8011c82:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011c84:	4a27      	ldr	r2, [pc, #156]	; (8011d24 <HAL_SPI_Transmit_DMA+0x168>)
 8011c86:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8011c88:	68fb      	ldr	r3, [r7, #12]
 8011c8a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011c8c:	2200      	movs	r2, #0
 8011c8e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8011c90:	68fb      	ldr	r3, [r7, #12]
 8011c92:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8011c94:	68fb      	ldr	r3, [r7, #12]
 8011c96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8011c98:	4619      	mov	r1, r3
 8011c9a:	68fb      	ldr	r3, [r7, #12]
 8011c9c:	681b      	ldr	r3, [r3, #0]
 8011c9e:	330c      	adds	r3, #12
 8011ca0:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8011ca2:	68fb      	ldr	r3, [r7, #12]
 8011ca4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8011ca6:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8011ca8:	f7fc fcea 	bl	800e680 <HAL_DMA_Start_IT>
 8011cac:	4603      	mov	r3, r0
 8011cae:	2b00      	cmp	r3, #0
 8011cb0:	d00c      	beq.n	8011ccc <HAL_SPI_Transmit_DMA+0x110>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8011cb2:	68fb      	ldr	r3, [r7, #12]
 8011cb4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011cb6:	f043 0210 	orr.w	r2, r3, #16
 8011cba:	68fb      	ldr	r3, [r7, #12]
 8011cbc:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8011cbe:	2301      	movs	r3, #1
 8011cc0:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8011cc2:	68fb      	ldr	r3, [r7, #12]
 8011cc4:	2201      	movs	r2, #1
 8011cc6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8011cca:	e01e      	b.n	8011d0a <HAL_SPI_Transmit_DMA+0x14e>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8011ccc:	68fb      	ldr	r3, [r7, #12]
 8011cce:	681b      	ldr	r3, [r3, #0]
 8011cd0:	681b      	ldr	r3, [r3, #0]
 8011cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8011cd6:	2b40      	cmp	r3, #64	; 0x40
 8011cd8:	d007      	beq.n	8011cea <HAL_SPI_Transmit_DMA+0x12e>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8011cda:	68fb      	ldr	r3, [r7, #12]
 8011cdc:	681b      	ldr	r3, [r3, #0]
 8011cde:	681a      	ldr	r2, [r3, #0]
 8011ce0:	68fb      	ldr	r3, [r7, #12]
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8011ce8:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8011cea:	68fb      	ldr	r3, [r7, #12]
 8011cec:	681b      	ldr	r3, [r3, #0]
 8011cee:	685a      	ldr	r2, [r3, #4]
 8011cf0:	68fb      	ldr	r3, [r7, #12]
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	f042 0220 	orr.w	r2, r2, #32
 8011cf8:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8011cfa:	68fb      	ldr	r3, [r7, #12]
 8011cfc:	681b      	ldr	r3, [r3, #0]
 8011cfe:	685a      	ldr	r2, [r3, #4]
 8011d00:	68fb      	ldr	r3, [r7, #12]
 8011d02:	681b      	ldr	r3, [r3, #0]
 8011d04:	f042 0202 	orr.w	r2, r2, #2
 8011d08:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8011d0a:	68fb      	ldr	r3, [r7, #12]
 8011d0c:	2200      	movs	r2, #0
 8011d0e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8011d12:	7dfb      	ldrb	r3, [r7, #23]
}
 8011d14:	4618      	mov	r0, r3
 8011d16:	3718      	adds	r7, #24
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	bd80      	pop	{r7, pc}
 8011d1c:	08011e0d 	.word	0x08011e0d
 8011d20:	08011d65 	.word	0x08011d65
 8011d24:	08011e29 	.word	0x08011e29

08011d28 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 8011d28:	b480      	push	{r7}
 8011d2a:	b083      	sub	sp, #12
 8011d2c:	af00      	add	r7, sp, #0
 8011d2e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 8011d30:	bf00      	nop
 8011d32:	370c      	adds	r7, #12
 8011d34:	46bd      	mov	sp, r7
 8011d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d3a:	4770      	bx	lr

08011d3c <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 8011d3c:	b480      	push	{r7}
 8011d3e:	b083      	sub	sp, #12
 8011d40:	af00      	add	r7, sp, #0
 8011d42:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 8011d44:	bf00      	nop
 8011d46:	370c      	adds	r7, #12
 8011d48:	46bd      	mov	sp, r7
 8011d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d4e:	4770      	bx	lr

08011d50 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8011d50:	b480      	push	{r7}
 8011d52:	b083      	sub	sp, #12
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8011d58:	bf00      	nop
 8011d5a:	370c      	adds	r7, #12
 8011d5c:	46bd      	mov	sp, r7
 8011d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d62:	4770      	bx	lr

08011d64 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011d64:	b580      	push	{r7, lr}
 8011d66:	b086      	sub	sp, #24
 8011d68:	af00      	add	r7, sp, #0
 8011d6a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8011d6c:	687b      	ldr	r3, [r7, #4]
 8011d6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011d70:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8011d72:	f7fb f95d 	bl	800d030 <HAL_GetTick>
 8011d76:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8011d78:	687b      	ldr	r3, [r7, #4]
 8011d7a:	681b      	ldr	r3, [r3, #0]
 8011d7c:	681b      	ldr	r3, [r3, #0]
 8011d7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8011d82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8011d86:	d03b      	beq.n	8011e00 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8011d88:	697b      	ldr	r3, [r7, #20]
 8011d8a:	681b      	ldr	r3, [r3, #0]
 8011d8c:	685a      	ldr	r2, [r3, #4]
 8011d8e:	697b      	ldr	r3, [r7, #20]
 8011d90:	681b      	ldr	r3, [r3, #0]
 8011d92:	f022 0220 	bic.w	r2, r2, #32
 8011d96:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8011d98:	697b      	ldr	r3, [r7, #20]
 8011d9a:	681b      	ldr	r3, [r3, #0]
 8011d9c:	685a      	ldr	r2, [r3, #4]
 8011d9e:	697b      	ldr	r3, [r7, #20]
 8011da0:	681b      	ldr	r3, [r3, #0]
 8011da2:	f022 0202 	bic.w	r2, r2, #2
 8011da6:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8011da8:	693a      	ldr	r2, [r7, #16]
 8011daa:	2164      	movs	r1, #100	; 0x64
 8011dac:	6978      	ldr	r0, [r7, #20]
 8011dae:	f000 f949 	bl	8012044 <SPI_EndRxTxTransaction>
 8011db2:	4603      	mov	r3, r0
 8011db4:	2b00      	cmp	r3, #0
 8011db6:	d005      	beq.n	8011dc4 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011db8:	697b      	ldr	r3, [r7, #20]
 8011dba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011dbc:	f043 0220 	orr.w	r2, r3, #32
 8011dc0:	697b      	ldr	r3, [r7, #20]
 8011dc2:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8011dc4:	697b      	ldr	r3, [r7, #20]
 8011dc6:	689b      	ldr	r3, [r3, #8]
 8011dc8:	2b00      	cmp	r3, #0
 8011dca:	d10a      	bne.n	8011de2 <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8011dcc:	2300      	movs	r3, #0
 8011dce:	60fb      	str	r3, [r7, #12]
 8011dd0:	697b      	ldr	r3, [r7, #20]
 8011dd2:	681b      	ldr	r3, [r3, #0]
 8011dd4:	68db      	ldr	r3, [r3, #12]
 8011dd6:	60fb      	str	r3, [r7, #12]
 8011dd8:	697b      	ldr	r3, [r7, #20]
 8011dda:	681b      	ldr	r3, [r3, #0]
 8011ddc:	689b      	ldr	r3, [r3, #8]
 8011dde:	60fb      	str	r3, [r7, #12]
 8011de0:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 8011de2:	697b      	ldr	r3, [r7, #20]
 8011de4:	2200      	movs	r2, #0
 8011de6:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->State = HAL_SPI_STATE_READY;
 8011de8:	697b      	ldr	r3, [r7, #20]
 8011dea:	2201      	movs	r2, #1
 8011dec:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8011df0:	697b      	ldr	r3, [r7, #20]
 8011df2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011df4:	2b00      	cmp	r3, #0
 8011df6:	d003      	beq.n	8011e00 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8011df8:	6978      	ldr	r0, [r7, #20]
 8011dfa:	f7ff ffa9 	bl	8011d50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 8011dfe:	e002      	b.n	8011e06 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 8011e00:	6978      	ldr	r0, [r7, #20]
 8011e02:	f7ff ff91 	bl	8011d28 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8011e06:	3718      	adds	r7, #24
 8011e08:	46bd      	mov	sp, r7
 8011e0a:	bd80      	pop	{r7, pc}

08011e0c <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 8011e0c:	b580      	push	{r7, lr}
 8011e0e:	b084      	sub	sp, #16
 8011e10:	af00      	add	r7, sp, #0
 8011e12:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8011e14:	687b      	ldr	r3, [r7, #4]
 8011e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e18:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 8011e1a:	68f8      	ldr	r0, [r7, #12]
 8011e1c:	f7ff ff8e 	bl	8011d3c <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8011e20:	bf00      	nop
 8011e22:	3710      	adds	r7, #16
 8011e24:	46bd      	mov	sp, r7
 8011e26:	bd80      	pop	{r7, pc}

08011e28 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8011e28:	b580      	push	{r7, lr}
 8011e2a:	b084      	sub	sp, #16
 8011e2c:	af00      	add	r7, sp, #0
 8011e2e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8011e34:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	681b      	ldr	r3, [r3, #0]
 8011e3a:	685a      	ldr	r2, [r3, #4]
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	681b      	ldr	r3, [r3, #0]
 8011e40:	f022 0203 	bic.w	r2, r2, #3
 8011e44:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8011e46:	68fb      	ldr	r3, [r7, #12]
 8011e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011e4a:	f043 0210 	orr.w	r2, r3, #16
 8011e4e:	68fb      	ldr	r3, [r7, #12]
 8011e50:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8011e52:	68fb      	ldr	r3, [r7, #12]
 8011e54:	2201      	movs	r2, #1
 8011e56:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8011e5a:	68f8      	ldr	r0, [r7, #12]
 8011e5c:	f7ff ff78 	bl	8011d50 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8011e60:	bf00      	nop
 8011e62:	3710      	adds	r7, #16
 8011e64:	46bd      	mov	sp, r7
 8011e66:	bd80      	pop	{r7, pc}

08011e68 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8011e68:	b580      	push	{r7, lr}
 8011e6a:	b088      	sub	sp, #32
 8011e6c:	af00      	add	r7, sp, #0
 8011e6e:	60f8      	str	r0, [r7, #12]
 8011e70:	60b9      	str	r1, [r7, #8]
 8011e72:	603b      	str	r3, [r7, #0]
 8011e74:	4613      	mov	r3, r2
 8011e76:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8011e78:	f7fb f8da 	bl	800d030 <HAL_GetTick>
 8011e7c:	4602      	mov	r2, r0
 8011e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8011e80:	1a9b      	subs	r3, r3, r2
 8011e82:	683a      	ldr	r2, [r7, #0]
 8011e84:	4413      	add	r3, r2
 8011e86:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8011e88:	f7fb f8d2 	bl	800d030 <HAL_GetTick>
 8011e8c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8011e8e:	4b39      	ldr	r3, [pc, #228]	; (8011f74 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8011e90:	681b      	ldr	r3, [r3, #0]
 8011e92:	015b      	lsls	r3, r3, #5
 8011e94:	0d1b      	lsrs	r3, r3, #20
 8011e96:	69fa      	ldr	r2, [r7, #28]
 8011e98:	fb02 f303 	mul.w	r3, r2, r3
 8011e9c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011e9e:	e054      	b.n	8011f4a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8011ea0:	683b      	ldr	r3, [r7, #0]
 8011ea2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011ea6:	d050      	beq.n	8011f4a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8011ea8:	f7fb f8c2 	bl	800d030 <HAL_GetTick>
 8011eac:	4602      	mov	r2, r0
 8011eae:	69bb      	ldr	r3, [r7, #24]
 8011eb0:	1ad3      	subs	r3, r2, r3
 8011eb2:	69fa      	ldr	r2, [r7, #28]
 8011eb4:	429a      	cmp	r2, r3
 8011eb6:	d902      	bls.n	8011ebe <SPI_WaitFlagStateUntilTimeout+0x56>
 8011eb8:	69fb      	ldr	r3, [r7, #28]
 8011eba:	2b00      	cmp	r3, #0
 8011ebc:	d13d      	bne.n	8011f3a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8011ebe:	68fb      	ldr	r3, [r7, #12]
 8011ec0:	681b      	ldr	r3, [r3, #0]
 8011ec2:	685a      	ldr	r2, [r3, #4]
 8011ec4:	68fb      	ldr	r3, [r7, #12]
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8011ecc:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	685b      	ldr	r3, [r3, #4]
 8011ed2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011ed6:	d111      	bne.n	8011efc <SPI_WaitFlagStateUntilTimeout+0x94>
 8011ed8:	68fb      	ldr	r3, [r7, #12]
 8011eda:	689b      	ldr	r3, [r3, #8]
 8011edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011ee0:	d004      	beq.n	8011eec <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011ee2:	68fb      	ldr	r3, [r7, #12]
 8011ee4:	689b      	ldr	r3, [r3, #8]
 8011ee6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011eea:	d107      	bne.n	8011efc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8011eec:	68fb      	ldr	r3, [r7, #12]
 8011eee:	681b      	ldr	r3, [r3, #0]
 8011ef0:	681a      	ldr	r2, [r3, #0]
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	681b      	ldr	r3, [r3, #0]
 8011ef6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011efa:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8011efc:	68fb      	ldr	r3, [r7, #12]
 8011efe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8011f00:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8011f04:	d10f      	bne.n	8011f26 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8011f06:	68fb      	ldr	r3, [r7, #12]
 8011f08:	681b      	ldr	r3, [r3, #0]
 8011f0a:	681a      	ldr	r2, [r3, #0]
 8011f0c:	68fb      	ldr	r3, [r7, #12]
 8011f0e:	681b      	ldr	r3, [r3, #0]
 8011f10:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8011f14:	601a      	str	r2, [r3, #0]
 8011f16:	68fb      	ldr	r3, [r7, #12]
 8011f18:	681b      	ldr	r3, [r3, #0]
 8011f1a:	681a      	ldr	r2, [r3, #0]
 8011f1c:	68fb      	ldr	r3, [r7, #12]
 8011f1e:	681b      	ldr	r3, [r3, #0]
 8011f20:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8011f24:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8011f26:	68fb      	ldr	r3, [r7, #12]
 8011f28:	2201      	movs	r2, #1
 8011f2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8011f2e:	68fb      	ldr	r3, [r7, #12]
 8011f30:	2200      	movs	r2, #0
 8011f32:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8011f36:	2303      	movs	r3, #3
 8011f38:	e017      	b.n	8011f6a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8011f3a:	697b      	ldr	r3, [r7, #20]
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d101      	bne.n	8011f44 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8011f40:	2300      	movs	r3, #0
 8011f42:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8011f44:	697b      	ldr	r3, [r7, #20]
 8011f46:	3b01      	subs	r3, #1
 8011f48:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8011f4a:	68fb      	ldr	r3, [r7, #12]
 8011f4c:	681b      	ldr	r3, [r3, #0]
 8011f4e:	689a      	ldr	r2, [r3, #8]
 8011f50:	68bb      	ldr	r3, [r7, #8]
 8011f52:	4013      	ands	r3, r2
 8011f54:	68ba      	ldr	r2, [r7, #8]
 8011f56:	429a      	cmp	r2, r3
 8011f58:	bf0c      	ite	eq
 8011f5a:	2301      	moveq	r3, #1
 8011f5c:	2300      	movne	r3, #0
 8011f5e:	b2db      	uxtb	r3, r3
 8011f60:	461a      	mov	r2, r3
 8011f62:	79fb      	ldrb	r3, [r7, #7]
 8011f64:	429a      	cmp	r2, r3
 8011f66:	d19b      	bne.n	8011ea0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8011f68:	2300      	movs	r3, #0
}
 8011f6a:	4618      	mov	r0, r3
 8011f6c:	3720      	adds	r7, #32
 8011f6e:	46bd      	mov	sp, r7
 8011f70:	bd80      	pop	{r7, pc}
 8011f72:	bf00      	nop
 8011f74:	200001d4 	.word	0x200001d4

08011f78 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8011f78:	b580      	push	{r7, lr}
 8011f7a:	b086      	sub	sp, #24
 8011f7c:	af02      	add	r7, sp, #8
 8011f7e:	60f8      	str	r0, [r7, #12]
 8011f80:	60b9      	str	r1, [r7, #8]
 8011f82:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8011f84:	68fb      	ldr	r3, [r7, #12]
 8011f86:	685b      	ldr	r3, [r3, #4]
 8011f88:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011f8c:	d111      	bne.n	8011fb2 <SPI_EndRxTransaction+0x3a>
 8011f8e:	68fb      	ldr	r3, [r7, #12]
 8011f90:	689b      	ldr	r3, [r3, #8]
 8011f92:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8011f96:	d004      	beq.n	8011fa2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8011f98:	68fb      	ldr	r3, [r7, #12]
 8011f9a:	689b      	ldr	r3, [r3, #8]
 8011f9c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011fa0:	d107      	bne.n	8011fb2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8011fa2:	68fb      	ldr	r3, [r7, #12]
 8011fa4:	681b      	ldr	r3, [r3, #0]
 8011fa6:	681a      	ldr	r2, [r3, #0]
 8011fa8:	68fb      	ldr	r3, [r7, #12]
 8011faa:	681b      	ldr	r3, [r3, #0]
 8011fac:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8011fb0:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	685b      	ldr	r3, [r3, #4]
 8011fb6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8011fba:	d12a      	bne.n	8012012 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8011fbc:	68fb      	ldr	r3, [r7, #12]
 8011fbe:	689b      	ldr	r3, [r3, #8]
 8011fc0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8011fc4:	d012      	beq.n	8011fec <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8011fc6:	687b      	ldr	r3, [r7, #4]
 8011fc8:	9300      	str	r3, [sp, #0]
 8011fca:	68bb      	ldr	r3, [r7, #8]
 8011fcc:	2200      	movs	r2, #0
 8011fce:	2180      	movs	r1, #128	; 0x80
 8011fd0:	68f8      	ldr	r0, [r7, #12]
 8011fd2:	f7ff ff49 	bl	8011e68 <SPI_WaitFlagStateUntilTimeout>
 8011fd6:	4603      	mov	r3, r0
 8011fd8:	2b00      	cmp	r3, #0
 8011fda:	d02d      	beq.n	8012038 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8011fdc:	68fb      	ldr	r3, [r7, #12]
 8011fde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8011fe0:	f043 0220 	orr.w	r2, r3, #32
 8011fe4:	68fb      	ldr	r3, [r7, #12]
 8011fe6:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8011fe8:	2303      	movs	r3, #3
 8011fea:	e026      	b.n	801203a <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	9300      	str	r3, [sp, #0]
 8011ff0:	68bb      	ldr	r3, [r7, #8]
 8011ff2:	2200      	movs	r2, #0
 8011ff4:	2101      	movs	r1, #1
 8011ff6:	68f8      	ldr	r0, [r7, #12]
 8011ff8:	f7ff ff36 	bl	8011e68 <SPI_WaitFlagStateUntilTimeout>
 8011ffc:	4603      	mov	r3, r0
 8011ffe:	2b00      	cmp	r3, #0
 8012000:	d01a      	beq.n	8012038 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012002:	68fb      	ldr	r3, [r7, #12]
 8012004:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8012006:	f043 0220 	orr.w	r2, r3, #32
 801200a:	68fb      	ldr	r3, [r7, #12]
 801200c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 801200e:	2303      	movs	r3, #3
 8012010:	e013      	b.n	801203a <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	9300      	str	r3, [sp, #0]
 8012016:	68bb      	ldr	r3, [r7, #8]
 8012018:	2200      	movs	r2, #0
 801201a:	2101      	movs	r1, #1
 801201c:	68f8      	ldr	r0, [r7, #12]
 801201e:	f7ff ff23 	bl	8011e68 <SPI_WaitFlagStateUntilTimeout>
 8012022:	4603      	mov	r3, r0
 8012024:	2b00      	cmp	r3, #0
 8012026:	d007      	beq.n	8012038 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012028:	68fb      	ldr	r3, [r7, #12]
 801202a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801202c:	f043 0220 	orr.w	r2, r3, #32
 8012030:	68fb      	ldr	r3, [r7, #12]
 8012032:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8012034:	2303      	movs	r3, #3
 8012036:	e000      	b.n	801203a <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8012038:	2300      	movs	r3, #0
}
 801203a:	4618      	mov	r0, r3
 801203c:	3710      	adds	r7, #16
 801203e:	46bd      	mov	sp, r7
 8012040:	bd80      	pop	{r7, pc}
	...

08012044 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8012044:	b580      	push	{r7, lr}
 8012046:	b088      	sub	sp, #32
 8012048:	af02      	add	r7, sp, #8
 801204a:	60f8      	str	r0, [r7, #12]
 801204c:	60b9      	str	r1, [r7, #8]
 801204e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8012050:	4b1b      	ldr	r3, [pc, #108]	; (80120c0 <SPI_EndRxTxTransaction+0x7c>)
 8012052:	681b      	ldr	r3, [r3, #0]
 8012054:	4a1b      	ldr	r2, [pc, #108]	; (80120c4 <SPI_EndRxTxTransaction+0x80>)
 8012056:	fba2 2303 	umull	r2, r3, r2, r3
 801205a:	0d5b      	lsrs	r3, r3, #21
 801205c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8012060:	fb02 f303 	mul.w	r3, r2, r3
 8012064:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	685b      	ldr	r3, [r3, #4]
 801206a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 801206e:	d112      	bne.n	8012096 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8012070:	687b      	ldr	r3, [r7, #4]
 8012072:	9300      	str	r3, [sp, #0]
 8012074:	68bb      	ldr	r3, [r7, #8]
 8012076:	2200      	movs	r2, #0
 8012078:	2180      	movs	r1, #128	; 0x80
 801207a:	68f8      	ldr	r0, [r7, #12]
 801207c:	f7ff fef4 	bl	8011e68 <SPI_WaitFlagStateUntilTimeout>
 8012080:	4603      	mov	r3, r0
 8012082:	2b00      	cmp	r3, #0
 8012084:	d016      	beq.n	80120b4 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8012086:	68fb      	ldr	r3, [r7, #12]
 8012088:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 801208a:	f043 0220 	orr.w	r2, r3, #32
 801208e:	68fb      	ldr	r3, [r7, #12]
 8012090:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8012092:	2303      	movs	r3, #3
 8012094:	e00f      	b.n	80120b6 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8012096:	697b      	ldr	r3, [r7, #20]
 8012098:	2b00      	cmp	r3, #0
 801209a:	d00a      	beq.n	80120b2 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 801209c:	697b      	ldr	r3, [r7, #20]
 801209e:	3b01      	subs	r3, #1
 80120a0:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80120a2:	68fb      	ldr	r3, [r7, #12]
 80120a4:	681b      	ldr	r3, [r3, #0]
 80120a6:	689b      	ldr	r3, [r3, #8]
 80120a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80120ac:	2b80      	cmp	r3, #128	; 0x80
 80120ae:	d0f2      	beq.n	8012096 <SPI_EndRxTxTransaction+0x52>
 80120b0:	e000      	b.n	80120b4 <SPI_EndRxTxTransaction+0x70>
        break;
 80120b2:	bf00      	nop
  }

  return HAL_OK;
 80120b4:	2300      	movs	r3, #0
}
 80120b6:	4618      	mov	r0, r3
 80120b8:	3718      	adds	r7, #24
 80120ba:	46bd      	mov	sp, r7
 80120bc:	bd80      	pop	{r7, pc}
 80120be:	bf00      	nop
 80120c0:	200001d4 	.word	0x200001d4
 80120c4:	165e9f81 	.word	0x165e9f81

080120c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b082      	sub	sp, #8
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	2b00      	cmp	r3, #0
 80120d4:	d101      	bne.n	80120da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80120d6:	2301      	movs	r3, #1
 80120d8:	e041      	b.n	801215e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80120da:	687b      	ldr	r3, [r7, #4]
 80120dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80120e0:	b2db      	uxtb	r3, r3
 80120e2:	2b00      	cmp	r3, #0
 80120e4:	d106      	bne.n	80120f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80120e6:	687b      	ldr	r3, [r7, #4]
 80120e8:	2200      	movs	r2, #0
 80120ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80120ee:	6878      	ldr	r0, [r7, #4]
 80120f0:	f7f9 ff8a 	bl	800c008 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80120f4:	687b      	ldr	r3, [r7, #4]
 80120f6:	2202      	movs	r2, #2
 80120f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80120fc:	687b      	ldr	r3, [r7, #4]
 80120fe:	681a      	ldr	r2, [r3, #0]
 8012100:	687b      	ldr	r3, [r7, #4]
 8012102:	3304      	adds	r3, #4
 8012104:	4619      	mov	r1, r3
 8012106:	4610      	mov	r0, r2
 8012108:	f000 face 	bl	80126a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 801210c:	687b      	ldr	r3, [r7, #4]
 801210e:	2201      	movs	r2, #1
 8012110:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012114:	687b      	ldr	r3, [r7, #4]
 8012116:	2201      	movs	r2, #1
 8012118:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 801211c:	687b      	ldr	r3, [r7, #4]
 801211e:	2201      	movs	r2, #1
 8012120:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8012124:	687b      	ldr	r3, [r7, #4]
 8012126:	2201      	movs	r2, #1
 8012128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 801212c:	687b      	ldr	r3, [r7, #4]
 801212e:	2201      	movs	r2, #1
 8012130:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012134:	687b      	ldr	r3, [r7, #4]
 8012136:	2201      	movs	r2, #1
 8012138:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 801213c:	687b      	ldr	r3, [r7, #4]
 801213e:	2201      	movs	r2, #1
 8012140:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8012144:	687b      	ldr	r3, [r7, #4]
 8012146:	2201      	movs	r2, #1
 8012148:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801214c:	687b      	ldr	r3, [r7, #4]
 801214e:	2201      	movs	r2, #1
 8012150:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	2201      	movs	r2, #1
 8012158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 801215c:	2300      	movs	r3, #0
}
 801215e:	4618      	mov	r0, r3
 8012160:	3708      	adds	r7, #8
 8012162:	46bd      	mov	sp, r7
 8012164:	bd80      	pop	{r7, pc}
	...

08012168 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8012168:	b480      	push	{r7}
 801216a:	b085      	sub	sp, #20
 801216c:	af00      	add	r7, sp, #0
 801216e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012170:	687b      	ldr	r3, [r7, #4]
 8012172:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012176:	b2db      	uxtb	r3, r3
 8012178:	2b01      	cmp	r3, #1
 801217a:	d001      	beq.n	8012180 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 801217c:	2301      	movs	r3, #1
 801217e:	e04e      	b.n	801221e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012180:	687b      	ldr	r3, [r7, #4]
 8012182:	2202      	movs	r2, #2
 8012184:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8012188:	687b      	ldr	r3, [r7, #4]
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	68da      	ldr	r2, [r3, #12]
 801218e:	687b      	ldr	r3, [r7, #4]
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	f042 0201 	orr.w	r2, r2, #1
 8012196:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012198:	687b      	ldr	r3, [r7, #4]
 801219a:	681b      	ldr	r3, [r3, #0]
 801219c:	4a23      	ldr	r2, [pc, #140]	; (801222c <HAL_TIM_Base_Start_IT+0xc4>)
 801219e:	4293      	cmp	r3, r2
 80121a0:	d022      	beq.n	80121e8 <HAL_TIM_Base_Start_IT+0x80>
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	681b      	ldr	r3, [r3, #0]
 80121a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80121aa:	d01d      	beq.n	80121e8 <HAL_TIM_Base_Start_IT+0x80>
 80121ac:	687b      	ldr	r3, [r7, #4]
 80121ae:	681b      	ldr	r3, [r3, #0]
 80121b0:	4a1f      	ldr	r2, [pc, #124]	; (8012230 <HAL_TIM_Base_Start_IT+0xc8>)
 80121b2:	4293      	cmp	r3, r2
 80121b4:	d018      	beq.n	80121e8 <HAL_TIM_Base_Start_IT+0x80>
 80121b6:	687b      	ldr	r3, [r7, #4]
 80121b8:	681b      	ldr	r3, [r3, #0]
 80121ba:	4a1e      	ldr	r2, [pc, #120]	; (8012234 <HAL_TIM_Base_Start_IT+0xcc>)
 80121bc:	4293      	cmp	r3, r2
 80121be:	d013      	beq.n	80121e8 <HAL_TIM_Base_Start_IT+0x80>
 80121c0:	687b      	ldr	r3, [r7, #4]
 80121c2:	681b      	ldr	r3, [r3, #0]
 80121c4:	4a1c      	ldr	r2, [pc, #112]	; (8012238 <HAL_TIM_Base_Start_IT+0xd0>)
 80121c6:	4293      	cmp	r3, r2
 80121c8:	d00e      	beq.n	80121e8 <HAL_TIM_Base_Start_IT+0x80>
 80121ca:	687b      	ldr	r3, [r7, #4]
 80121cc:	681b      	ldr	r3, [r3, #0]
 80121ce:	4a1b      	ldr	r2, [pc, #108]	; (801223c <HAL_TIM_Base_Start_IT+0xd4>)
 80121d0:	4293      	cmp	r3, r2
 80121d2:	d009      	beq.n	80121e8 <HAL_TIM_Base_Start_IT+0x80>
 80121d4:	687b      	ldr	r3, [r7, #4]
 80121d6:	681b      	ldr	r3, [r3, #0]
 80121d8:	4a19      	ldr	r2, [pc, #100]	; (8012240 <HAL_TIM_Base_Start_IT+0xd8>)
 80121da:	4293      	cmp	r3, r2
 80121dc:	d004      	beq.n	80121e8 <HAL_TIM_Base_Start_IT+0x80>
 80121de:	687b      	ldr	r3, [r7, #4]
 80121e0:	681b      	ldr	r3, [r3, #0]
 80121e2:	4a18      	ldr	r2, [pc, #96]	; (8012244 <HAL_TIM_Base_Start_IT+0xdc>)
 80121e4:	4293      	cmp	r3, r2
 80121e6:	d111      	bne.n	801220c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80121e8:	687b      	ldr	r3, [r7, #4]
 80121ea:	681b      	ldr	r3, [r3, #0]
 80121ec:	689b      	ldr	r3, [r3, #8]
 80121ee:	f003 0307 	and.w	r3, r3, #7
 80121f2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80121f4:	68fb      	ldr	r3, [r7, #12]
 80121f6:	2b06      	cmp	r3, #6
 80121f8:	d010      	beq.n	801221c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80121fa:	687b      	ldr	r3, [r7, #4]
 80121fc:	681b      	ldr	r3, [r3, #0]
 80121fe:	681a      	ldr	r2, [r3, #0]
 8012200:	687b      	ldr	r3, [r7, #4]
 8012202:	681b      	ldr	r3, [r3, #0]
 8012204:	f042 0201 	orr.w	r2, r2, #1
 8012208:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801220a:	e007      	b.n	801221c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801220c:	687b      	ldr	r3, [r7, #4]
 801220e:	681b      	ldr	r3, [r3, #0]
 8012210:	681a      	ldr	r2, [r3, #0]
 8012212:	687b      	ldr	r3, [r7, #4]
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	f042 0201 	orr.w	r2, r2, #1
 801221a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 801221c:	2300      	movs	r3, #0
}
 801221e:	4618      	mov	r0, r3
 8012220:	3714      	adds	r7, #20
 8012222:	46bd      	mov	sp, r7
 8012224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012228:	4770      	bx	lr
 801222a:	bf00      	nop
 801222c:	40010000 	.word	0x40010000
 8012230:	40000400 	.word	0x40000400
 8012234:	40000800 	.word	0x40000800
 8012238:	40000c00 	.word	0x40000c00
 801223c:	40010400 	.word	0x40010400
 8012240:	40014000 	.word	0x40014000
 8012244:	40001800 	.word	0x40001800

08012248 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8012248:	b480      	push	{r7}
 801224a:	b083      	sub	sp, #12
 801224c:	af00      	add	r7, sp, #0
 801224e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	68da      	ldr	r2, [r3, #12]
 8012256:	687b      	ldr	r3, [r7, #4]
 8012258:	681b      	ldr	r3, [r3, #0]
 801225a:	f022 0201 	bic.w	r2, r2, #1
 801225e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012260:	687b      	ldr	r3, [r7, #4]
 8012262:	681b      	ldr	r3, [r3, #0]
 8012264:	6a1a      	ldr	r2, [r3, #32]
 8012266:	f241 1311 	movw	r3, #4369	; 0x1111
 801226a:	4013      	ands	r3, r2
 801226c:	2b00      	cmp	r3, #0
 801226e:	d10f      	bne.n	8012290 <HAL_TIM_Base_Stop_IT+0x48>
 8012270:	687b      	ldr	r3, [r7, #4]
 8012272:	681b      	ldr	r3, [r3, #0]
 8012274:	6a1a      	ldr	r2, [r3, #32]
 8012276:	f240 4344 	movw	r3, #1092	; 0x444
 801227a:	4013      	ands	r3, r2
 801227c:	2b00      	cmp	r3, #0
 801227e:	d107      	bne.n	8012290 <HAL_TIM_Base_Stop_IT+0x48>
 8012280:	687b      	ldr	r3, [r7, #4]
 8012282:	681b      	ldr	r3, [r3, #0]
 8012284:	681a      	ldr	r2, [r3, #0]
 8012286:	687b      	ldr	r3, [r7, #4]
 8012288:	681b      	ldr	r3, [r3, #0]
 801228a:	f022 0201 	bic.w	r2, r2, #1
 801228e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8012290:	687b      	ldr	r3, [r7, #4]
 8012292:	2201      	movs	r2, #1
 8012294:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8012298:	2300      	movs	r3, #0
}
 801229a:	4618      	mov	r0, r3
 801229c:	370c      	adds	r7, #12
 801229e:	46bd      	mov	sp, r7
 80122a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122a4:	4770      	bx	lr

080122a6 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80122a6:	b580      	push	{r7, lr}
 80122a8:	b082      	sub	sp, #8
 80122aa:	af00      	add	r7, sp, #0
 80122ac:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80122ae:	687b      	ldr	r3, [r7, #4]
 80122b0:	681b      	ldr	r3, [r3, #0]
 80122b2:	691b      	ldr	r3, [r3, #16]
 80122b4:	f003 0302 	and.w	r3, r3, #2
 80122b8:	2b02      	cmp	r3, #2
 80122ba:	d122      	bne.n	8012302 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80122bc:	687b      	ldr	r3, [r7, #4]
 80122be:	681b      	ldr	r3, [r3, #0]
 80122c0:	68db      	ldr	r3, [r3, #12]
 80122c2:	f003 0302 	and.w	r3, r3, #2
 80122c6:	2b02      	cmp	r3, #2
 80122c8:	d11b      	bne.n	8012302 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	681b      	ldr	r3, [r3, #0]
 80122ce:	f06f 0202 	mvn.w	r2, #2
 80122d2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80122d4:	687b      	ldr	r3, [r7, #4]
 80122d6:	2201      	movs	r2, #1
 80122d8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	681b      	ldr	r3, [r3, #0]
 80122de:	699b      	ldr	r3, [r3, #24]
 80122e0:	f003 0303 	and.w	r3, r3, #3
 80122e4:	2b00      	cmp	r3, #0
 80122e6:	d003      	beq.n	80122f0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80122e8:	6878      	ldr	r0, [r7, #4]
 80122ea:	f000 f9bf 	bl	801266c <HAL_TIM_IC_CaptureCallback>
 80122ee:	e005      	b.n	80122fc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80122f0:	6878      	ldr	r0, [r7, #4]
 80122f2:	f000 f9b1 	bl	8012658 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80122f6:	6878      	ldr	r0, [r7, #4]
 80122f8:	f000 f9c2 	bl	8012680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80122fc:	687b      	ldr	r3, [r7, #4]
 80122fe:	2200      	movs	r2, #0
 8012300:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8012302:	687b      	ldr	r3, [r7, #4]
 8012304:	681b      	ldr	r3, [r3, #0]
 8012306:	691b      	ldr	r3, [r3, #16]
 8012308:	f003 0304 	and.w	r3, r3, #4
 801230c:	2b04      	cmp	r3, #4
 801230e:	d122      	bne.n	8012356 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8012310:	687b      	ldr	r3, [r7, #4]
 8012312:	681b      	ldr	r3, [r3, #0]
 8012314:	68db      	ldr	r3, [r3, #12]
 8012316:	f003 0304 	and.w	r3, r3, #4
 801231a:	2b04      	cmp	r3, #4
 801231c:	d11b      	bne.n	8012356 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 801231e:	687b      	ldr	r3, [r7, #4]
 8012320:	681b      	ldr	r3, [r3, #0]
 8012322:	f06f 0204 	mvn.w	r2, #4
 8012326:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8012328:	687b      	ldr	r3, [r7, #4]
 801232a:	2202      	movs	r2, #2
 801232c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801232e:	687b      	ldr	r3, [r7, #4]
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	699b      	ldr	r3, [r3, #24]
 8012334:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8012338:	2b00      	cmp	r3, #0
 801233a:	d003      	beq.n	8012344 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801233c:	6878      	ldr	r0, [r7, #4]
 801233e:	f000 f995 	bl	801266c <HAL_TIM_IC_CaptureCallback>
 8012342:	e005      	b.n	8012350 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012344:	6878      	ldr	r0, [r7, #4]
 8012346:	f000 f987 	bl	8012658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801234a:	6878      	ldr	r0, [r7, #4]
 801234c:	f000 f998 	bl	8012680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8012350:	687b      	ldr	r3, [r7, #4]
 8012352:	2200      	movs	r2, #0
 8012354:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8012356:	687b      	ldr	r3, [r7, #4]
 8012358:	681b      	ldr	r3, [r3, #0]
 801235a:	691b      	ldr	r3, [r3, #16]
 801235c:	f003 0308 	and.w	r3, r3, #8
 8012360:	2b08      	cmp	r3, #8
 8012362:	d122      	bne.n	80123aa <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8012364:	687b      	ldr	r3, [r7, #4]
 8012366:	681b      	ldr	r3, [r3, #0]
 8012368:	68db      	ldr	r3, [r3, #12]
 801236a:	f003 0308 	and.w	r3, r3, #8
 801236e:	2b08      	cmp	r3, #8
 8012370:	d11b      	bne.n	80123aa <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8012372:	687b      	ldr	r3, [r7, #4]
 8012374:	681b      	ldr	r3, [r3, #0]
 8012376:	f06f 0208 	mvn.w	r2, #8
 801237a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 801237c:	687b      	ldr	r3, [r7, #4]
 801237e:	2204      	movs	r2, #4
 8012380:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8012382:	687b      	ldr	r3, [r7, #4]
 8012384:	681b      	ldr	r3, [r3, #0]
 8012386:	69db      	ldr	r3, [r3, #28]
 8012388:	f003 0303 	and.w	r3, r3, #3
 801238c:	2b00      	cmp	r3, #0
 801238e:	d003      	beq.n	8012398 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8012390:	6878      	ldr	r0, [r7, #4]
 8012392:	f000 f96b 	bl	801266c <HAL_TIM_IC_CaptureCallback>
 8012396:	e005      	b.n	80123a4 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8012398:	6878      	ldr	r0, [r7, #4]
 801239a:	f000 f95d 	bl	8012658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 801239e:	6878      	ldr	r0, [r7, #4]
 80123a0:	f000 f96e 	bl	8012680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	2200      	movs	r2, #0
 80123a8:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80123aa:	687b      	ldr	r3, [r7, #4]
 80123ac:	681b      	ldr	r3, [r3, #0]
 80123ae:	691b      	ldr	r3, [r3, #16]
 80123b0:	f003 0310 	and.w	r3, r3, #16
 80123b4:	2b10      	cmp	r3, #16
 80123b6:	d122      	bne.n	80123fe <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80123b8:	687b      	ldr	r3, [r7, #4]
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	68db      	ldr	r3, [r3, #12]
 80123be:	f003 0310 	and.w	r3, r3, #16
 80123c2:	2b10      	cmp	r3, #16
 80123c4:	d11b      	bne.n	80123fe <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	681b      	ldr	r3, [r3, #0]
 80123ca:	f06f 0210 	mvn.w	r2, #16
 80123ce:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	2208      	movs	r2, #8
 80123d4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80123d6:	687b      	ldr	r3, [r7, #4]
 80123d8:	681b      	ldr	r3, [r3, #0]
 80123da:	69db      	ldr	r3, [r3, #28]
 80123dc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80123e0:	2b00      	cmp	r3, #0
 80123e2:	d003      	beq.n	80123ec <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80123e4:	6878      	ldr	r0, [r7, #4]
 80123e6:	f000 f941 	bl	801266c <HAL_TIM_IC_CaptureCallback>
 80123ea:	e005      	b.n	80123f8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80123ec:	6878      	ldr	r0, [r7, #4]
 80123ee:	f000 f933 	bl	8012658 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80123f2:	6878      	ldr	r0, [r7, #4]
 80123f4:	f000 f944 	bl	8012680 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80123f8:	687b      	ldr	r3, [r7, #4]
 80123fa:	2200      	movs	r2, #0
 80123fc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80123fe:	687b      	ldr	r3, [r7, #4]
 8012400:	681b      	ldr	r3, [r3, #0]
 8012402:	691b      	ldr	r3, [r3, #16]
 8012404:	f003 0301 	and.w	r3, r3, #1
 8012408:	2b01      	cmp	r3, #1
 801240a:	d10e      	bne.n	801242a <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 801240c:	687b      	ldr	r3, [r7, #4]
 801240e:	681b      	ldr	r3, [r3, #0]
 8012410:	68db      	ldr	r3, [r3, #12]
 8012412:	f003 0301 	and.w	r3, r3, #1
 8012416:	2b01      	cmp	r3, #1
 8012418:	d107      	bne.n	801242a <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 801241a:	687b      	ldr	r3, [r7, #4]
 801241c:	681b      	ldr	r3, [r3, #0]
 801241e:	f06f 0201 	mvn.w	r2, #1
 8012422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8012424:	6878      	ldr	r0, [r7, #4]
 8012426:	f000 f90d 	bl	8012644 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 801242a:	687b      	ldr	r3, [r7, #4]
 801242c:	681b      	ldr	r3, [r3, #0]
 801242e:	691b      	ldr	r3, [r3, #16]
 8012430:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012434:	2b80      	cmp	r3, #128	; 0x80
 8012436:	d10e      	bne.n	8012456 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8012438:	687b      	ldr	r3, [r7, #4]
 801243a:	681b      	ldr	r3, [r3, #0]
 801243c:	68db      	ldr	r3, [r3, #12]
 801243e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8012442:	2b80      	cmp	r3, #128	; 0x80
 8012444:	d107      	bne.n	8012456 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 801244e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8012450:	6878      	ldr	r0, [r7, #4]
 8012452:	f000 fae9 	bl	8012a28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8012456:	687b      	ldr	r3, [r7, #4]
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	691b      	ldr	r3, [r3, #16]
 801245c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8012460:	2b40      	cmp	r3, #64	; 0x40
 8012462:	d10e      	bne.n	8012482 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	681b      	ldr	r3, [r3, #0]
 8012468:	68db      	ldr	r3, [r3, #12]
 801246a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801246e:	2b40      	cmp	r3, #64	; 0x40
 8012470:	d107      	bne.n	8012482 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8012472:	687b      	ldr	r3, [r7, #4]
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	f06f 0240 	mvn.w	r2, #64	; 0x40
 801247a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 801247c:	6878      	ldr	r0, [r7, #4]
 801247e:	f000 f909 	bl	8012694 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8012482:	687b      	ldr	r3, [r7, #4]
 8012484:	681b      	ldr	r3, [r3, #0]
 8012486:	691b      	ldr	r3, [r3, #16]
 8012488:	f003 0320 	and.w	r3, r3, #32
 801248c:	2b20      	cmp	r3, #32
 801248e:	d10e      	bne.n	80124ae <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8012490:	687b      	ldr	r3, [r7, #4]
 8012492:	681b      	ldr	r3, [r3, #0]
 8012494:	68db      	ldr	r3, [r3, #12]
 8012496:	f003 0320 	and.w	r3, r3, #32
 801249a:	2b20      	cmp	r3, #32
 801249c:	d107      	bne.n	80124ae <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 801249e:	687b      	ldr	r3, [r7, #4]
 80124a0:	681b      	ldr	r3, [r3, #0]
 80124a2:	f06f 0220 	mvn.w	r2, #32
 80124a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80124a8:	6878      	ldr	r0, [r7, #4]
 80124aa:	f000 fab3 	bl	8012a14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80124ae:	bf00      	nop
 80124b0:	3708      	adds	r7, #8
 80124b2:	46bd      	mov	sp, r7
 80124b4:	bd80      	pop	{r7, pc}

080124b6 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80124b6:	b580      	push	{r7, lr}
 80124b8:	b084      	sub	sp, #16
 80124ba:	af00      	add	r7, sp, #0
 80124bc:	6078      	str	r0, [r7, #4]
 80124be:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80124c0:	2300      	movs	r3, #0
 80124c2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80124c4:	687b      	ldr	r3, [r7, #4]
 80124c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80124ca:	2b01      	cmp	r3, #1
 80124cc:	d101      	bne.n	80124d2 <HAL_TIM_ConfigClockSource+0x1c>
 80124ce:	2302      	movs	r3, #2
 80124d0:	e0b4      	b.n	801263c <HAL_TIM_ConfigClockSource+0x186>
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	2201      	movs	r2, #1
 80124d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80124da:	687b      	ldr	r3, [r7, #4]
 80124dc:	2202      	movs	r2, #2
 80124de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80124e2:	687b      	ldr	r3, [r7, #4]
 80124e4:	681b      	ldr	r3, [r3, #0]
 80124e6:	689b      	ldr	r3, [r3, #8]
 80124e8:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80124ea:	68bb      	ldr	r3, [r7, #8]
 80124ec:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80124f0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80124f2:	68bb      	ldr	r3, [r7, #8]
 80124f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80124f8:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80124fa:	687b      	ldr	r3, [r7, #4]
 80124fc:	681b      	ldr	r3, [r3, #0]
 80124fe:	68ba      	ldr	r2, [r7, #8]
 8012500:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8012502:	683b      	ldr	r3, [r7, #0]
 8012504:	681b      	ldr	r3, [r3, #0]
 8012506:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 801250a:	d03e      	beq.n	801258a <HAL_TIM_ConfigClockSource+0xd4>
 801250c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8012510:	f200 8087 	bhi.w	8012622 <HAL_TIM_ConfigClockSource+0x16c>
 8012514:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012518:	f000 8086 	beq.w	8012628 <HAL_TIM_ConfigClockSource+0x172>
 801251c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012520:	d87f      	bhi.n	8012622 <HAL_TIM_ConfigClockSource+0x16c>
 8012522:	2b70      	cmp	r3, #112	; 0x70
 8012524:	d01a      	beq.n	801255c <HAL_TIM_ConfigClockSource+0xa6>
 8012526:	2b70      	cmp	r3, #112	; 0x70
 8012528:	d87b      	bhi.n	8012622 <HAL_TIM_ConfigClockSource+0x16c>
 801252a:	2b60      	cmp	r3, #96	; 0x60
 801252c:	d050      	beq.n	80125d0 <HAL_TIM_ConfigClockSource+0x11a>
 801252e:	2b60      	cmp	r3, #96	; 0x60
 8012530:	d877      	bhi.n	8012622 <HAL_TIM_ConfigClockSource+0x16c>
 8012532:	2b50      	cmp	r3, #80	; 0x50
 8012534:	d03c      	beq.n	80125b0 <HAL_TIM_ConfigClockSource+0xfa>
 8012536:	2b50      	cmp	r3, #80	; 0x50
 8012538:	d873      	bhi.n	8012622 <HAL_TIM_ConfigClockSource+0x16c>
 801253a:	2b40      	cmp	r3, #64	; 0x40
 801253c:	d058      	beq.n	80125f0 <HAL_TIM_ConfigClockSource+0x13a>
 801253e:	2b40      	cmp	r3, #64	; 0x40
 8012540:	d86f      	bhi.n	8012622 <HAL_TIM_ConfigClockSource+0x16c>
 8012542:	2b30      	cmp	r3, #48	; 0x30
 8012544:	d064      	beq.n	8012610 <HAL_TIM_ConfigClockSource+0x15a>
 8012546:	2b30      	cmp	r3, #48	; 0x30
 8012548:	d86b      	bhi.n	8012622 <HAL_TIM_ConfigClockSource+0x16c>
 801254a:	2b20      	cmp	r3, #32
 801254c:	d060      	beq.n	8012610 <HAL_TIM_ConfigClockSource+0x15a>
 801254e:	2b20      	cmp	r3, #32
 8012550:	d867      	bhi.n	8012622 <HAL_TIM_ConfigClockSource+0x16c>
 8012552:	2b00      	cmp	r3, #0
 8012554:	d05c      	beq.n	8012610 <HAL_TIM_ConfigClockSource+0x15a>
 8012556:	2b10      	cmp	r3, #16
 8012558:	d05a      	beq.n	8012610 <HAL_TIM_ConfigClockSource+0x15a>
 801255a:	e062      	b.n	8012622 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801255c:	687b      	ldr	r3, [r7, #4]
 801255e:	6818      	ldr	r0, [r3, #0]
 8012560:	683b      	ldr	r3, [r7, #0]
 8012562:	6899      	ldr	r1, [r3, #8]
 8012564:	683b      	ldr	r3, [r7, #0]
 8012566:	685a      	ldr	r2, [r3, #4]
 8012568:	683b      	ldr	r3, [r7, #0]
 801256a:	68db      	ldr	r3, [r3, #12]
 801256c:	f000 f9b6 	bl	80128dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8012570:	687b      	ldr	r3, [r7, #4]
 8012572:	681b      	ldr	r3, [r3, #0]
 8012574:	689b      	ldr	r3, [r3, #8]
 8012576:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8012578:	68bb      	ldr	r3, [r7, #8]
 801257a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 801257e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	681b      	ldr	r3, [r3, #0]
 8012584:	68ba      	ldr	r2, [r7, #8]
 8012586:	609a      	str	r2, [r3, #8]
      break;
 8012588:	e04f      	b.n	801262a <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 801258a:	687b      	ldr	r3, [r7, #4]
 801258c:	6818      	ldr	r0, [r3, #0]
 801258e:	683b      	ldr	r3, [r7, #0]
 8012590:	6899      	ldr	r1, [r3, #8]
 8012592:	683b      	ldr	r3, [r7, #0]
 8012594:	685a      	ldr	r2, [r3, #4]
 8012596:	683b      	ldr	r3, [r7, #0]
 8012598:	68db      	ldr	r3, [r3, #12]
 801259a:	f000 f99f 	bl	80128dc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	681b      	ldr	r3, [r3, #0]
 80125a2:	689a      	ldr	r2, [r3, #8]
 80125a4:	687b      	ldr	r3, [r7, #4]
 80125a6:	681b      	ldr	r3, [r3, #0]
 80125a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80125ac:	609a      	str	r2, [r3, #8]
      break;
 80125ae:	e03c      	b.n	801262a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80125b0:	687b      	ldr	r3, [r7, #4]
 80125b2:	6818      	ldr	r0, [r3, #0]
 80125b4:	683b      	ldr	r3, [r7, #0]
 80125b6:	6859      	ldr	r1, [r3, #4]
 80125b8:	683b      	ldr	r3, [r7, #0]
 80125ba:	68db      	ldr	r3, [r3, #12]
 80125bc:	461a      	mov	r2, r3
 80125be:	f000 f913 	bl	80127e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80125c2:	687b      	ldr	r3, [r7, #4]
 80125c4:	681b      	ldr	r3, [r3, #0]
 80125c6:	2150      	movs	r1, #80	; 0x50
 80125c8:	4618      	mov	r0, r3
 80125ca:	f000 f96c 	bl	80128a6 <TIM_ITRx_SetConfig>
      break;
 80125ce:	e02c      	b.n	801262a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	6818      	ldr	r0, [r3, #0]
 80125d4:	683b      	ldr	r3, [r7, #0]
 80125d6:	6859      	ldr	r1, [r3, #4]
 80125d8:	683b      	ldr	r3, [r7, #0]
 80125da:	68db      	ldr	r3, [r3, #12]
 80125dc:	461a      	mov	r2, r3
 80125de:	f000 f932 	bl	8012846 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	2160      	movs	r1, #96	; 0x60
 80125e8:	4618      	mov	r0, r3
 80125ea:	f000 f95c 	bl	80128a6 <TIM_ITRx_SetConfig>
      break;
 80125ee:	e01c      	b.n	801262a <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80125f0:	687b      	ldr	r3, [r7, #4]
 80125f2:	6818      	ldr	r0, [r3, #0]
 80125f4:	683b      	ldr	r3, [r7, #0]
 80125f6:	6859      	ldr	r1, [r3, #4]
 80125f8:	683b      	ldr	r3, [r7, #0]
 80125fa:	68db      	ldr	r3, [r3, #12]
 80125fc:	461a      	mov	r2, r3
 80125fe:	f000 f8f3 	bl	80127e8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8012602:	687b      	ldr	r3, [r7, #4]
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	2140      	movs	r1, #64	; 0x40
 8012608:	4618      	mov	r0, r3
 801260a:	f000 f94c 	bl	80128a6 <TIM_ITRx_SetConfig>
      break;
 801260e:	e00c      	b.n	801262a <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	681a      	ldr	r2, [r3, #0]
 8012614:	683b      	ldr	r3, [r7, #0]
 8012616:	681b      	ldr	r3, [r3, #0]
 8012618:	4619      	mov	r1, r3
 801261a:	4610      	mov	r0, r2
 801261c:	f000 f943 	bl	80128a6 <TIM_ITRx_SetConfig>
      break;
 8012620:	e003      	b.n	801262a <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8012622:	2301      	movs	r3, #1
 8012624:	73fb      	strb	r3, [r7, #15]
      break;
 8012626:	e000      	b.n	801262a <HAL_TIM_ConfigClockSource+0x174>
      break;
 8012628:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	2201      	movs	r2, #1
 801262e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8012632:	687b      	ldr	r3, [r7, #4]
 8012634:	2200      	movs	r2, #0
 8012636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 801263a:	7bfb      	ldrb	r3, [r7, #15]
}
 801263c:	4618      	mov	r0, r3
 801263e:	3710      	adds	r7, #16
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}

08012644 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012644:	b480      	push	{r7}
 8012646:	b083      	sub	sp, #12
 8012648:	af00      	add	r7, sp, #0
 801264a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 801264c:	bf00      	nop
 801264e:	370c      	adds	r7, #12
 8012650:	46bd      	mov	sp, r7
 8012652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012656:	4770      	bx	lr

08012658 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012658:	b480      	push	{r7}
 801265a:	b083      	sub	sp, #12
 801265c:	af00      	add	r7, sp, #0
 801265e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8012660:	bf00      	nop
 8012662:	370c      	adds	r7, #12
 8012664:	46bd      	mov	sp, r7
 8012666:	f85d 7b04 	ldr.w	r7, [sp], #4
 801266a:	4770      	bx	lr

0801266c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801266c:	b480      	push	{r7}
 801266e:	b083      	sub	sp, #12
 8012670:	af00      	add	r7, sp, #0
 8012672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8012674:	bf00      	nop
 8012676:	370c      	adds	r7, #12
 8012678:	46bd      	mov	sp, r7
 801267a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267e:	4770      	bx	lr

08012680 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8012680:	b480      	push	{r7}
 8012682:	b083      	sub	sp, #12
 8012684:	af00      	add	r7, sp, #0
 8012686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8012688:	bf00      	nop
 801268a:	370c      	adds	r7, #12
 801268c:	46bd      	mov	sp, r7
 801268e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012692:	4770      	bx	lr

08012694 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8012694:	b480      	push	{r7}
 8012696:	b083      	sub	sp, #12
 8012698:	af00      	add	r7, sp, #0
 801269a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 801269c:	bf00      	nop
 801269e:	370c      	adds	r7, #12
 80126a0:	46bd      	mov	sp, r7
 80126a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a6:	4770      	bx	lr

080126a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80126a8:	b480      	push	{r7}
 80126aa:	b085      	sub	sp, #20
 80126ac:	af00      	add	r7, sp, #0
 80126ae:	6078      	str	r0, [r7, #4]
 80126b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80126b2:	687b      	ldr	r3, [r7, #4]
 80126b4:	681b      	ldr	r3, [r3, #0]
 80126b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80126b8:	687b      	ldr	r3, [r7, #4]
 80126ba:	4a40      	ldr	r2, [pc, #256]	; (80127bc <TIM_Base_SetConfig+0x114>)
 80126bc:	4293      	cmp	r3, r2
 80126be:	d013      	beq.n	80126e8 <TIM_Base_SetConfig+0x40>
 80126c0:	687b      	ldr	r3, [r7, #4]
 80126c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80126c6:	d00f      	beq.n	80126e8 <TIM_Base_SetConfig+0x40>
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	4a3d      	ldr	r2, [pc, #244]	; (80127c0 <TIM_Base_SetConfig+0x118>)
 80126cc:	4293      	cmp	r3, r2
 80126ce:	d00b      	beq.n	80126e8 <TIM_Base_SetConfig+0x40>
 80126d0:	687b      	ldr	r3, [r7, #4]
 80126d2:	4a3c      	ldr	r2, [pc, #240]	; (80127c4 <TIM_Base_SetConfig+0x11c>)
 80126d4:	4293      	cmp	r3, r2
 80126d6:	d007      	beq.n	80126e8 <TIM_Base_SetConfig+0x40>
 80126d8:	687b      	ldr	r3, [r7, #4]
 80126da:	4a3b      	ldr	r2, [pc, #236]	; (80127c8 <TIM_Base_SetConfig+0x120>)
 80126dc:	4293      	cmp	r3, r2
 80126de:	d003      	beq.n	80126e8 <TIM_Base_SetConfig+0x40>
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	4a3a      	ldr	r2, [pc, #232]	; (80127cc <TIM_Base_SetConfig+0x124>)
 80126e4:	4293      	cmp	r3, r2
 80126e6:	d108      	bne.n	80126fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80126ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80126f0:	683b      	ldr	r3, [r7, #0]
 80126f2:	685b      	ldr	r3, [r3, #4]
 80126f4:	68fa      	ldr	r2, [r7, #12]
 80126f6:	4313      	orrs	r3, r2
 80126f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80126fa:	687b      	ldr	r3, [r7, #4]
 80126fc:	4a2f      	ldr	r2, [pc, #188]	; (80127bc <TIM_Base_SetConfig+0x114>)
 80126fe:	4293      	cmp	r3, r2
 8012700:	d02b      	beq.n	801275a <TIM_Base_SetConfig+0xb2>
 8012702:	687b      	ldr	r3, [r7, #4]
 8012704:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012708:	d027      	beq.n	801275a <TIM_Base_SetConfig+0xb2>
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	4a2c      	ldr	r2, [pc, #176]	; (80127c0 <TIM_Base_SetConfig+0x118>)
 801270e:	4293      	cmp	r3, r2
 8012710:	d023      	beq.n	801275a <TIM_Base_SetConfig+0xb2>
 8012712:	687b      	ldr	r3, [r7, #4]
 8012714:	4a2b      	ldr	r2, [pc, #172]	; (80127c4 <TIM_Base_SetConfig+0x11c>)
 8012716:	4293      	cmp	r3, r2
 8012718:	d01f      	beq.n	801275a <TIM_Base_SetConfig+0xb2>
 801271a:	687b      	ldr	r3, [r7, #4]
 801271c:	4a2a      	ldr	r2, [pc, #168]	; (80127c8 <TIM_Base_SetConfig+0x120>)
 801271e:	4293      	cmp	r3, r2
 8012720:	d01b      	beq.n	801275a <TIM_Base_SetConfig+0xb2>
 8012722:	687b      	ldr	r3, [r7, #4]
 8012724:	4a29      	ldr	r2, [pc, #164]	; (80127cc <TIM_Base_SetConfig+0x124>)
 8012726:	4293      	cmp	r3, r2
 8012728:	d017      	beq.n	801275a <TIM_Base_SetConfig+0xb2>
 801272a:	687b      	ldr	r3, [r7, #4]
 801272c:	4a28      	ldr	r2, [pc, #160]	; (80127d0 <TIM_Base_SetConfig+0x128>)
 801272e:	4293      	cmp	r3, r2
 8012730:	d013      	beq.n	801275a <TIM_Base_SetConfig+0xb2>
 8012732:	687b      	ldr	r3, [r7, #4]
 8012734:	4a27      	ldr	r2, [pc, #156]	; (80127d4 <TIM_Base_SetConfig+0x12c>)
 8012736:	4293      	cmp	r3, r2
 8012738:	d00f      	beq.n	801275a <TIM_Base_SetConfig+0xb2>
 801273a:	687b      	ldr	r3, [r7, #4]
 801273c:	4a26      	ldr	r2, [pc, #152]	; (80127d8 <TIM_Base_SetConfig+0x130>)
 801273e:	4293      	cmp	r3, r2
 8012740:	d00b      	beq.n	801275a <TIM_Base_SetConfig+0xb2>
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	4a25      	ldr	r2, [pc, #148]	; (80127dc <TIM_Base_SetConfig+0x134>)
 8012746:	4293      	cmp	r3, r2
 8012748:	d007      	beq.n	801275a <TIM_Base_SetConfig+0xb2>
 801274a:	687b      	ldr	r3, [r7, #4]
 801274c:	4a24      	ldr	r2, [pc, #144]	; (80127e0 <TIM_Base_SetConfig+0x138>)
 801274e:	4293      	cmp	r3, r2
 8012750:	d003      	beq.n	801275a <TIM_Base_SetConfig+0xb2>
 8012752:	687b      	ldr	r3, [r7, #4]
 8012754:	4a23      	ldr	r2, [pc, #140]	; (80127e4 <TIM_Base_SetConfig+0x13c>)
 8012756:	4293      	cmp	r3, r2
 8012758:	d108      	bne.n	801276c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 801275a:	68fb      	ldr	r3, [r7, #12]
 801275c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8012760:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8012762:	683b      	ldr	r3, [r7, #0]
 8012764:	68db      	ldr	r3, [r3, #12]
 8012766:	68fa      	ldr	r2, [r7, #12]
 8012768:	4313      	orrs	r3, r2
 801276a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8012772:	683b      	ldr	r3, [r7, #0]
 8012774:	695b      	ldr	r3, [r3, #20]
 8012776:	4313      	orrs	r3, r2
 8012778:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 801277a:	687b      	ldr	r3, [r7, #4]
 801277c:	68fa      	ldr	r2, [r7, #12]
 801277e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8012780:	683b      	ldr	r3, [r7, #0]
 8012782:	689a      	ldr	r2, [r3, #8]
 8012784:	687b      	ldr	r3, [r7, #4]
 8012786:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8012788:	683b      	ldr	r3, [r7, #0]
 801278a:	681a      	ldr	r2, [r3, #0]
 801278c:	687b      	ldr	r3, [r7, #4]
 801278e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8012790:	687b      	ldr	r3, [r7, #4]
 8012792:	4a0a      	ldr	r2, [pc, #40]	; (80127bc <TIM_Base_SetConfig+0x114>)
 8012794:	4293      	cmp	r3, r2
 8012796:	d003      	beq.n	80127a0 <TIM_Base_SetConfig+0xf8>
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	4a0c      	ldr	r2, [pc, #48]	; (80127cc <TIM_Base_SetConfig+0x124>)
 801279c:	4293      	cmp	r3, r2
 801279e:	d103      	bne.n	80127a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80127a0:	683b      	ldr	r3, [r7, #0]
 80127a2:	691a      	ldr	r2, [r3, #16]
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80127a8:	687b      	ldr	r3, [r7, #4]
 80127aa:	2201      	movs	r2, #1
 80127ac:	615a      	str	r2, [r3, #20]
}
 80127ae:	bf00      	nop
 80127b0:	3714      	adds	r7, #20
 80127b2:	46bd      	mov	sp, r7
 80127b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127b8:	4770      	bx	lr
 80127ba:	bf00      	nop
 80127bc:	40010000 	.word	0x40010000
 80127c0:	40000400 	.word	0x40000400
 80127c4:	40000800 	.word	0x40000800
 80127c8:	40000c00 	.word	0x40000c00
 80127cc:	40010400 	.word	0x40010400
 80127d0:	40014000 	.word	0x40014000
 80127d4:	40014400 	.word	0x40014400
 80127d8:	40014800 	.word	0x40014800
 80127dc:	40001800 	.word	0x40001800
 80127e0:	40001c00 	.word	0x40001c00
 80127e4:	40002000 	.word	0x40002000

080127e8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80127e8:	b480      	push	{r7}
 80127ea:	b087      	sub	sp, #28
 80127ec:	af00      	add	r7, sp, #0
 80127ee:	60f8      	str	r0, [r7, #12]
 80127f0:	60b9      	str	r1, [r7, #8]
 80127f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80127f4:	68fb      	ldr	r3, [r7, #12]
 80127f6:	6a1b      	ldr	r3, [r3, #32]
 80127f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	6a1b      	ldr	r3, [r3, #32]
 80127fe:	f023 0201 	bic.w	r2, r3, #1
 8012802:	68fb      	ldr	r3, [r7, #12]
 8012804:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8012806:	68fb      	ldr	r3, [r7, #12]
 8012808:	699b      	ldr	r3, [r3, #24]
 801280a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 801280c:	693b      	ldr	r3, [r7, #16]
 801280e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8012812:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8012814:	687b      	ldr	r3, [r7, #4]
 8012816:	011b      	lsls	r3, r3, #4
 8012818:	693a      	ldr	r2, [r7, #16]
 801281a:	4313      	orrs	r3, r2
 801281c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 801281e:	697b      	ldr	r3, [r7, #20]
 8012820:	f023 030a 	bic.w	r3, r3, #10
 8012824:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8012826:	697a      	ldr	r2, [r7, #20]
 8012828:	68bb      	ldr	r3, [r7, #8]
 801282a:	4313      	orrs	r3, r2
 801282c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 801282e:	68fb      	ldr	r3, [r7, #12]
 8012830:	693a      	ldr	r2, [r7, #16]
 8012832:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012834:	68fb      	ldr	r3, [r7, #12]
 8012836:	697a      	ldr	r2, [r7, #20]
 8012838:	621a      	str	r2, [r3, #32]
}
 801283a:	bf00      	nop
 801283c:	371c      	adds	r7, #28
 801283e:	46bd      	mov	sp, r7
 8012840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012844:	4770      	bx	lr

08012846 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8012846:	b480      	push	{r7}
 8012848:	b087      	sub	sp, #28
 801284a:	af00      	add	r7, sp, #0
 801284c:	60f8      	str	r0, [r7, #12]
 801284e:	60b9      	str	r1, [r7, #8]
 8012850:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	6a1b      	ldr	r3, [r3, #32]
 8012856:	f023 0210 	bic.w	r2, r3, #16
 801285a:	68fb      	ldr	r3, [r7, #12]
 801285c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	699b      	ldr	r3, [r3, #24]
 8012862:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8012864:	68fb      	ldr	r3, [r7, #12]
 8012866:	6a1b      	ldr	r3, [r3, #32]
 8012868:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 801286a:	697b      	ldr	r3, [r7, #20]
 801286c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8012870:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8012872:	687b      	ldr	r3, [r7, #4]
 8012874:	031b      	lsls	r3, r3, #12
 8012876:	697a      	ldr	r2, [r7, #20]
 8012878:	4313      	orrs	r3, r2
 801287a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 801287c:	693b      	ldr	r3, [r7, #16]
 801287e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8012882:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8012884:	68bb      	ldr	r3, [r7, #8]
 8012886:	011b      	lsls	r3, r3, #4
 8012888:	693a      	ldr	r2, [r7, #16]
 801288a:	4313      	orrs	r3, r2
 801288c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 801288e:	68fb      	ldr	r3, [r7, #12]
 8012890:	697a      	ldr	r2, [r7, #20]
 8012892:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8012894:	68fb      	ldr	r3, [r7, #12]
 8012896:	693a      	ldr	r2, [r7, #16]
 8012898:	621a      	str	r2, [r3, #32]
}
 801289a:	bf00      	nop
 801289c:	371c      	adds	r7, #28
 801289e:	46bd      	mov	sp, r7
 80128a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128a4:	4770      	bx	lr

080128a6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80128a6:	b480      	push	{r7}
 80128a8:	b085      	sub	sp, #20
 80128aa:	af00      	add	r7, sp, #0
 80128ac:	6078      	str	r0, [r7, #4]
 80128ae:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	689b      	ldr	r3, [r3, #8]
 80128b4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80128b6:	68fb      	ldr	r3, [r7, #12]
 80128b8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80128bc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80128be:	683a      	ldr	r2, [r7, #0]
 80128c0:	68fb      	ldr	r3, [r7, #12]
 80128c2:	4313      	orrs	r3, r2
 80128c4:	f043 0307 	orr.w	r3, r3, #7
 80128c8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	68fa      	ldr	r2, [r7, #12]
 80128ce:	609a      	str	r2, [r3, #8]
}
 80128d0:	bf00      	nop
 80128d2:	3714      	adds	r7, #20
 80128d4:	46bd      	mov	sp, r7
 80128d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128da:	4770      	bx	lr

080128dc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80128dc:	b480      	push	{r7}
 80128de:	b087      	sub	sp, #28
 80128e0:	af00      	add	r7, sp, #0
 80128e2:	60f8      	str	r0, [r7, #12]
 80128e4:	60b9      	str	r1, [r7, #8]
 80128e6:	607a      	str	r2, [r7, #4]
 80128e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80128ea:	68fb      	ldr	r3, [r7, #12]
 80128ec:	689b      	ldr	r3, [r3, #8]
 80128ee:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80128f0:	697b      	ldr	r3, [r7, #20]
 80128f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80128f6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80128f8:	683b      	ldr	r3, [r7, #0]
 80128fa:	021a      	lsls	r2, r3, #8
 80128fc:	687b      	ldr	r3, [r7, #4]
 80128fe:	431a      	orrs	r2, r3
 8012900:	68bb      	ldr	r3, [r7, #8]
 8012902:	4313      	orrs	r3, r2
 8012904:	697a      	ldr	r2, [r7, #20]
 8012906:	4313      	orrs	r3, r2
 8012908:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 801290a:	68fb      	ldr	r3, [r7, #12]
 801290c:	697a      	ldr	r2, [r7, #20]
 801290e:	609a      	str	r2, [r3, #8]
}
 8012910:	bf00      	nop
 8012912:	371c      	adds	r7, #28
 8012914:	46bd      	mov	sp, r7
 8012916:	f85d 7b04 	ldr.w	r7, [sp], #4
 801291a:	4770      	bx	lr

0801291c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 801291c:	b480      	push	{r7}
 801291e:	b085      	sub	sp, #20
 8012920:	af00      	add	r7, sp, #0
 8012922:	6078      	str	r0, [r7, #4]
 8012924:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8012926:	687b      	ldr	r3, [r7, #4]
 8012928:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 801292c:	2b01      	cmp	r3, #1
 801292e:	d101      	bne.n	8012934 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8012930:	2302      	movs	r3, #2
 8012932:	e05a      	b.n	80129ea <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8012934:	687b      	ldr	r3, [r7, #4]
 8012936:	2201      	movs	r2, #1
 8012938:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 801293c:	687b      	ldr	r3, [r7, #4]
 801293e:	2202      	movs	r2, #2
 8012940:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	685b      	ldr	r3, [r3, #4]
 801294a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 801294c:	687b      	ldr	r3, [r7, #4]
 801294e:	681b      	ldr	r3, [r3, #0]
 8012950:	689b      	ldr	r3, [r3, #8]
 8012952:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 801295a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 801295c:	683b      	ldr	r3, [r7, #0]
 801295e:	681b      	ldr	r3, [r3, #0]
 8012960:	68fa      	ldr	r2, [r7, #12]
 8012962:	4313      	orrs	r3, r2
 8012964:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8012966:	687b      	ldr	r3, [r7, #4]
 8012968:	681b      	ldr	r3, [r3, #0]
 801296a:	68fa      	ldr	r2, [r7, #12]
 801296c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801296e:	687b      	ldr	r3, [r7, #4]
 8012970:	681b      	ldr	r3, [r3, #0]
 8012972:	4a21      	ldr	r2, [pc, #132]	; (80129f8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8012974:	4293      	cmp	r3, r2
 8012976:	d022      	beq.n	80129be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012978:	687b      	ldr	r3, [r7, #4]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8012980:	d01d      	beq.n	80129be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012982:	687b      	ldr	r3, [r7, #4]
 8012984:	681b      	ldr	r3, [r3, #0]
 8012986:	4a1d      	ldr	r2, [pc, #116]	; (80129fc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8012988:	4293      	cmp	r3, r2
 801298a:	d018      	beq.n	80129be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	681b      	ldr	r3, [r3, #0]
 8012990:	4a1b      	ldr	r2, [pc, #108]	; (8012a00 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8012992:	4293      	cmp	r3, r2
 8012994:	d013      	beq.n	80129be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8012996:	687b      	ldr	r3, [r7, #4]
 8012998:	681b      	ldr	r3, [r3, #0]
 801299a:	4a1a      	ldr	r2, [pc, #104]	; (8012a04 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 801299c:	4293      	cmp	r3, r2
 801299e:	d00e      	beq.n	80129be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80129a0:	687b      	ldr	r3, [r7, #4]
 80129a2:	681b      	ldr	r3, [r3, #0]
 80129a4:	4a18      	ldr	r2, [pc, #96]	; (8012a08 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80129a6:	4293      	cmp	r3, r2
 80129a8:	d009      	beq.n	80129be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80129aa:	687b      	ldr	r3, [r7, #4]
 80129ac:	681b      	ldr	r3, [r3, #0]
 80129ae:	4a17      	ldr	r2, [pc, #92]	; (8012a0c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80129b0:	4293      	cmp	r3, r2
 80129b2:	d004      	beq.n	80129be <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80129b4:	687b      	ldr	r3, [r7, #4]
 80129b6:	681b      	ldr	r3, [r3, #0]
 80129b8:	4a15      	ldr	r2, [pc, #84]	; (8012a10 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80129ba:	4293      	cmp	r3, r2
 80129bc:	d10c      	bne.n	80129d8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80129be:	68bb      	ldr	r3, [r7, #8]
 80129c0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80129c4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80129c6:	683b      	ldr	r3, [r7, #0]
 80129c8:	685b      	ldr	r3, [r3, #4]
 80129ca:	68ba      	ldr	r2, [r7, #8]
 80129cc:	4313      	orrs	r3, r2
 80129ce:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80129d0:	687b      	ldr	r3, [r7, #4]
 80129d2:	681b      	ldr	r3, [r3, #0]
 80129d4:	68ba      	ldr	r2, [r7, #8]
 80129d6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80129d8:	687b      	ldr	r3, [r7, #4]
 80129da:	2201      	movs	r2, #1
 80129dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	2200      	movs	r2, #0
 80129e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80129e8:	2300      	movs	r3, #0
}
 80129ea:	4618      	mov	r0, r3
 80129ec:	3714      	adds	r7, #20
 80129ee:	46bd      	mov	sp, r7
 80129f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129f4:	4770      	bx	lr
 80129f6:	bf00      	nop
 80129f8:	40010000 	.word	0x40010000
 80129fc:	40000400 	.word	0x40000400
 8012a00:	40000800 	.word	0x40000800
 8012a04:	40000c00 	.word	0x40000c00
 8012a08:	40010400 	.word	0x40010400
 8012a0c:	40014000 	.word	0x40014000
 8012a10:	40001800 	.word	0x40001800

08012a14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8012a14:	b480      	push	{r7}
 8012a16:	b083      	sub	sp, #12
 8012a18:	af00      	add	r7, sp, #0
 8012a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8012a1c:	bf00      	nop
 8012a1e:	370c      	adds	r7, #12
 8012a20:	46bd      	mov	sp, r7
 8012a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a26:	4770      	bx	lr

08012a28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8012a28:	b480      	push	{r7}
 8012a2a:	b083      	sub	sp, #12
 8012a2c:	af00      	add	r7, sp, #0
 8012a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8012a30:	bf00      	nop
 8012a32:	370c      	adds	r7, #12
 8012a34:	46bd      	mov	sp, r7
 8012a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a3a:	4770      	bx	lr

08012a3c <HAL_MultiProcessor_Init>:
  *            @arg UART_WAKEUPMETHOD_IDLELINE: Wake-up by an idle line detection
  *            @arg UART_WAKEUPMETHOD_ADDRESSMARK: Wake-up by an address mark
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MultiProcessor_Init(UART_HandleTypeDef *huart, uint8_t Address, uint32_t WakeUpMethod)
{
 8012a3c:	b580      	push	{r7, lr}
 8012a3e:	b084      	sub	sp, #16
 8012a40:	af00      	add	r7, sp, #0
 8012a42:	60f8      	str	r0, [r7, #12]
 8012a44:	460b      	mov	r3, r1
 8012a46:	607a      	str	r2, [r7, #4]
 8012a48:	72fb      	strb	r3, [r7, #11]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8012a4a:	68fb      	ldr	r3, [r7, #12]
 8012a4c:	2b00      	cmp	r3, #0
 8012a4e:	d101      	bne.n	8012a54 <HAL_MultiProcessor_Init+0x18>
  {
    return HAL_ERROR;
 8012a50:	2301      	movs	r3, #1
 8012a52:	e05f      	b.n	8012b14 <HAL_MultiProcessor_Init+0xd8>
  assert_param(IS_UART_WAKEUPMETHOD(WakeUpMethod));
  assert_param(IS_UART_ADDRESS(Address));
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012a5a:	b2db      	uxtb	r3, r3
 8012a5c:	2b00      	cmp	r3, #0
 8012a5e:	d106      	bne.n	8012a6e <HAL_MultiProcessor_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8012a60:	68fb      	ldr	r3, [r7, #12]
 8012a62:	2200      	movs	r2, #0
 8012a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8012a68:	68f8      	ldr	r0, [r7, #12]
 8012a6a:	f7fa fa09 	bl	800ce80 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8012a6e:	68fb      	ldr	r3, [r7, #12]
 8012a70:	2224      	movs	r2, #36	; 0x24
 8012a72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8012a76:	68fb      	ldr	r3, [r7, #12]
 8012a78:	681b      	ldr	r3, [r3, #0]
 8012a7a:	68da      	ldr	r2, [r3, #12]
 8012a7c:	68fb      	ldr	r3, [r7, #12]
 8012a7e:	681b      	ldr	r3, [r3, #0]
 8012a80:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8012a84:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8012a86:	68f8      	ldr	r0, [r7, #12]
 8012a88:	f000 f948 	bl	8012d1c <UART_SetConfig>

  /* In Multi-Processor mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register */
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	681b      	ldr	r3, [r3, #0]
 8012a90:	691a      	ldr	r2, [r3, #16]
 8012a92:	68fb      	ldr	r3, [r7, #12]
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8012a9a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8012a9c:	68fb      	ldr	r3, [r7, #12]
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	695a      	ldr	r2, [r3, #20]
 8012aa2:	68fb      	ldr	r3, [r7, #12]
 8012aa4:	681b      	ldr	r3, [r3, #0]
 8012aa6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8012aaa:	615a      	str	r2, [r3, #20]

  /* Set the USART address node */
  CLEAR_BIT(huart->Instance->CR2, USART_CR2_ADD);
 8012aac:	68fb      	ldr	r3, [r7, #12]
 8012aae:	681b      	ldr	r3, [r3, #0]
 8012ab0:	691a      	ldr	r2, [r3, #16]
 8012ab2:	68fb      	ldr	r3, [r7, #12]
 8012ab4:	681b      	ldr	r3, [r3, #0]
 8012ab6:	f022 020f 	bic.w	r2, r2, #15
 8012aba:	611a      	str	r2, [r3, #16]
  SET_BIT(huart->Instance->CR2, Address);
 8012abc:	68fb      	ldr	r3, [r7, #12]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	6919      	ldr	r1, [r3, #16]
 8012ac2:	7afa      	ldrb	r2, [r7, #11]
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	681b      	ldr	r3, [r3, #0]
 8012ac8:	430a      	orrs	r2, r1
 8012aca:	611a      	str	r2, [r3, #16]

  /* Set the wake up method by setting the WAKE bit in the CR1 register */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_WAKE);
 8012acc:	68fb      	ldr	r3, [r7, #12]
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	68da      	ldr	r2, [r3, #12]
 8012ad2:	68fb      	ldr	r3, [r7, #12]
 8012ad4:	681b      	ldr	r3, [r3, #0]
 8012ad6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8012ada:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR1, WakeUpMethod);
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	681b      	ldr	r3, [r3, #0]
 8012ae0:	68d9      	ldr	r1, [r3, #12]
 8012ae2:	68fb      	ldr	r3, [r7, #12]
 8012ae4:	681b      	ldr	r3, [r3, #0]
 8012ae6:	687a      	ldr	r2, [r7, #4]
 8012ae8:	430a      	orrs	r2, r1
 8012aea:	60da      	str	r2, [r3, #12]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8012aec:	68fb      	ldr	r3, [r7, #12]
 8012aee:	681b      	ldr	r3, [r3, #0]
 8012af0:	68da      	ldr	r2, [r3, #12]
 8012af2:	68fb      	ldr	r3, [r7, #12]
 8012af4:	681b      	ldr	r3, [r3, #0]
 8012af6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8012afa:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012afc:	68fb      	ldr	r3, [r7, #12]
 8012afe:	2200      	movs	r2, #0
 8012b00:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8012b02:	68fb      	ldr	r3, [r7, #12]
 8012b04:	2220      	movs	r2, #32
 8012b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8012b0a:	68fb      	ldr	r3, [r7, #12]
 8012b0c:	2220      	movs	r2, #32
 8012b0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8012b12:	2300      	movs	r3, #0
}
 8012b14:	4618      	mov	r0, r3
 8012b16:	3710      	adds	r7, #16
 8012b18:	46bd      	mov	sp, r7
 8012b1a:	bd80      	pop	{r7, pc}

08012b1c <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8012b1c:	b580      	push	{r7, lr}
 8012b1e:	b08a      	sub	sp, #40	; 0x28
 8012b20:	af02      	add	r7, sp, #8
 8012b22:	60f8      	str	r0, [r7, #12]
 8012b24:	60b9      	str	r1, [r7, #8]
 8012b26:	603b      	str	r3, [r7, #0]
 8012b28:	4613      	mov	r3, r2
 8012b2a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8012b2c:	2300      	movs	r3, #0
 8012b2e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8012b30:	68fb      	ldr	r3, [r7, #12]
 8012b32:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8012b36:	b2db      	uxtb	r3, r3
 8012b38:	2b20      	cmp	r3, #32
 8012b3a:	d17c      	bne.n	8012c36 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8012b3c:	68bb      	ldr	r3, [r7, #8]
 8012b3e:	2b00      	cmp	r3, #0
 8012b40:	d002      	beq.n	8012b48 <HAL_UART_Transmit+0x2c>
 8012b42:	88fb      	ldrh	r3, [r7, #6]
 8012b44:	2b00      	cmp	r3, #0
 8012b46:	d101      	bne.n	8012b4c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8012b48:	2301      	movs	r3, #1
 8012b4a:	e075      	b.n	8012c38 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8012b4c:	68fb      	ldr	r3, [r7, #12]
 8012b4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8012b52:	2b01      	cmp	r3, #1
 8012b54:	d101      	bne.n	8012b5a <HAL_UART_Transmit+0x3e>
 8012b56:	2302      	movs	r3, #2
 8012b58:	e06e      	b.n	8012c38 <HAL_UART_Transmit+0x11c>
 8012b5a:	68fb      	ldr	r3, [r7, #12]
 8012b5c:	2201      	movs	r2, #1
 8012b5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8012b62:	68fb      	ldr	r3, [r7, #12]
 8012b64:	2200      	movs	r2, #0
 8012b66:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8012b68:	68fb      	ldr	r3, [r7, #12]
 8012b6a:	2221      	movs	r2, #33	; 0x21
 8012b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8012b70:	f7fa fa5e 	bl	800d030 <HAL_GetTick>
 8012b74:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8012b76:	68fb      	ldr	r3, [r7, #12]
 8012b78:	88fa      	ldrh	r2, [r7, #6]
 8012b7a:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8012b7c:	68fb      	ldr	r3, [r7, #12]
 8012b7e:	88fa      	ldrh	r2, [r7, #6]
 8012b80:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8012b82:	68fb      	ldr	r3, [r7, #12]
 8012b84:	689b      	ldr	r3, [r3, #8]
 8012b86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8012b8a:	d108      	bne.n	8012b9e <HAL_UART_Transmit+0x82>
 8012b8c:	68fb      	ldr	r3, [r7, #12]
 8012b8e:	691b      	ldr	r3, [r3, #16]
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d104      	bne.n	8012b9e <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8012b94:	2300      	movs	r3, #0
 8012b96:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8012b98:	68bb      	ldr	r3, [r7, #8]
 8012b9a:	61bb      	str	r3, [r7, #24]
 8012b9c:	e003      	b.n	8012ba6 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8012b9e:	68bb      	ldr	r3, [r7, #8]
 8012ba0:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8012ba2:	2300      	movs	r3, #0
 8012ba4:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	2200      	movs	r2, #0
 8012baa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8012bae:	e02a      	b.n	8012c06 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8012bb0:	683b      	ldr	r3, [r7, #0]
 8012bb2:	9300      	str	r3, [sp, #0]
 8012bb4:	697b      	ldr	r3, [r7, #20]
 8012bb6:	2200      	movs	r2, #0
 8012bb8:	2180      	movs	r1, #128	; 0x80
 8012bba:	68f8      	ldr	r0, [r7, #12]
 8012bbc:	f000 f840 	bl	8012c40 <UART_WaitOnFlagUntilTimeout>
 8012bc0:	4603      	mov	r3, r0
 8012bc2:	2b00      	cmp	r3, #0
 8012bc4:	d001      	beq.n	8012bca <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8012bc6:	2303      	movs	r3, #3
 8012bc8:	e036      	b.n	8012c38 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8012bca:	69fb      	ldr	r3, [r7, #28]
 8012bcc:	2b00      	cmp	r3, #0
 8012bce:	d10b      	bne.n	8012be8 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8012bd0:	69bb      	ldr	r3, [r7, #24]
 8012bd2:	881b      	ldrh	r3, [r3, #0]
 8012bd4:	461a      	mov	r2, r3
 8012bd6:	68fb      	ldr	r3, [r7, #12]
 8012bd8:	681b      	ldr	r3, [r3, #0]
 8012bda:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8012bde:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8012be0:	69bb      	ldr	r3, [r7, #24]
 8012be2:	3302      	adds	r3, #2
 8012be4:	61bb      	str	r3, [r7, #24]
 8012be6:	e007      	b.n	8012bf8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8012be8:	69fb      	ldr	r3, [r7, #28]
 8012bea:	781a      	ldrb	r2, [r3, #0]
 8012bec:	68fb      	ldr	r3, [r7, #12]
 8012bee:	681b      	ldr	r3, [r3, #0]
 8012bf0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8012bf2:	69fb      	ldr	r3, [r7, #28]
 8012bf4:	3301      	adds	r3, #1
 8012bf6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012bfc:	b29b      	uxth	r3, r3
 8012bfe:	3b01      	subs	r3, #1
 8012c00:	b29a      	uxth	r2, r3
 8012c02:	68fb      	ldr	r3, [r7, #12]
 8012c04:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8012c06:	68fb      	ldr	r3, [r7, #12]
 8012c08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8012c0a:	b29b      	uxth	r3, r3
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d1cf      	bne.n	8012bb0 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8012c10:	683b      	ldr	r3, [r7, #0]
 8012c12:	9300      	str	r3, [sp, #0]
 8012c14:	697b      	ldr	r3, [r7, #20]
 8012c16:	2200      	movs	r2, #0
 8012c18:	2140      	movs	r1, #64	; 0x40
 8012c1a:	68f8      	ldr	r0, [r7, #12]
 8012c1c:	f000 f810 	bl	8012c40 <UART_WaitOnFlagUntilTimeout>
 8012c20:	4603      	mov	r3, r0
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d001      	beq.n	8012c2a <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8012c26:	2303      	movs	r3, #3
 8012c28:	e006      	b.n	8012c38 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8012c2a:	68fb      	ldr	r3, [r7, #12]
 8012c2c:	2220      	movs	r2, #32
 8012c2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8012c32:	2300      	movs	r3, #0
 8012c34:	e000      	b.n	8012c38 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8012c36:	2302      	movs	r3, #2
  }
}
 8012c38:	4618      	mov	r0, r3
 8012c3a:	3720      	adds	r7, #32
 8012c3c:	46bd      	mov	sp, r7
 8012c3e:	bd80      	pop	{r7, pc}

08012c40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8012c40:	b580      	push	{r7, lr}
 8012c42:	b090      	sub	sp, #64	; 0x40
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	60f8      	str	r0, [r7, #12]
 8012c48:	60b9      	str	r1, [r7, #8]
 8012c4a:	603b      	str	r3, [r7, #0]
 8012c4c:	4613      	mov	r3, r2
 8012c4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012c50:	e050      	b.n	8012cf4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8012c52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8012c58:	d04c      	beq.n	8012cf4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8012c5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8012c5c:	2b00      	cmp	r3, #0
 8012c5e:	d007      	beq.n	8012c70 <UART_WaitOnFlagUntilTimeout+0x30>
 8012c60:	f7fa f9e6 	bl	800d030 <HAL_GetTick>
 8012c64:	4602      	mov	r2, r0
 8012c66:	683b      	ldr	r3, [r7, #0]
 8012c68:	1ad3      	subs	r3, r2, r3
 8012c6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8012c6c:	429a      	cmp	r2, r3
 8012c6e:	d241      	bcs.n	8012cf4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8012c70:	68fb      	ldr	r3, [r7, #12]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	330c      	adds	r3, #12
 8012c76:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012c7a:	e853 3f00 	ldrex	r3, [r3]
 8012c7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8012c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8012c86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012c88:	68fb      	ldr	r3, [r7, #12]
 8012c8a:	681b      	ldr	r3, [r3, #0]
 8012c8c:	330c      	adds	r3, #12
 8012c8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8012c90:	637a      	str	r2, [r7, #52]	; 0x34
 8012c92:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012c94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8012c96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8012c98:	e841 2300 	strex	r3, r2, [r1]
 8012c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8012c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012ca0:	2b00      	cmp	r3, #0
 8012ca2:	d1e5      	bne.n	8012c70 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8012ca4:	68fb      	ldr	r3, [r7, #12]
 8012ca6:	681b      	ldr	r3, [r3, #0]
 8012ca8:	3314      	adds	r3, #20
 8012caa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8012cac:	697b      	ldr	r3, [r7, #20]
 8012cae:	e853 3f00 	ldrex	r3, [r3]
 8012cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8012cb4:	693b      	ldr	r3, [r7, #16]
 8012cb6:	f023 0301 	bic.w	r3, r3, #1
 8012cba:	63bb      	str	r3, [r7, #56]	; 0x38
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	3314      	adds	r3, #20
 8012cc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8012cc4:	623a      	str	r2, [r7, #32]
 8012cc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8012cc8:	69f9      	ldr	r1, [r7, #28]
 8012cca:	6a3a      	ldr	r2, [r7, #32]
 8012ccc:	e841 2300 	strex	r3, r2, [r1]
 8012cd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8012cd2:	69bb      	ldr	r3, [r7, #24]
 8012cd4:	2b00      	cmp	r3, #0
 8012cd6:	d1e5      	bne.n	8012ca4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8012cd8:	68fb      	ldr	r3, [r7, #12]
 8012cda:	2220      	movs	r2, #32
 8012cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8012ce0:	68fb      	ldr	r3, [r7, #12]
 8012ce2:	2220      	movs	r2, #32
 8012ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	2200      	movs	r2, #0
 8012cec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8012cf0:	2303      	movs	r3, #3
 8012cf2:	e00f      	b.n	8012d14 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	681b      	ldr	r3, [r3, #0]
 8012cf8:	681a      	ldr	r2, [r3, #0]
 8012cfa:	68bb      	ldr	r3, [r7, #8]
 8012cfc:	4013      	ands	r3, r2
 8012cfe:	68ba      	ldr	r2, [r7, #8]
 8012d00:	429a      	cmp	r2, r3
 8012d02:	bf0c      	ite	eq
 8012d04:	2301      	moveq	r3, #1
 8012d06:	2300      	movne	r3, #0
 8012d08:	b2db      	uxtb	r3, r3
 8012d0a:	461a      	mov	r2, r3
 8012d0c:	79fb      	ldrb	r3, [r7, #7]
 8012d0e:	429a      	cmp	r2, r3
 8012d10:	d09f      	beq.n	8012c52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8012d12:	2300      	movs	r3, #0
}
 8012d14:	4618      	mov	r0, r3
 8012d16:	3740      	adds	r7, #64	; 0x40
 8012d18:	46bd      	mov	sp, r7
 8012d1a:	bd80      	pop	{r7, pc}

08012d1c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8012d1c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8012d20:	b0c0      	sub	sp, #256	; 0x100
 8012d22:	af00      	add	r7, sp, #0
 8012d24:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8012d28:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012d2c:	681b      	ldr	r3, [r3, #0]
 8012d2e:	691b      	ldr	r3, [r3, #16]
 8012d30:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8012d34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012d38:	68d9      	ldr	r1, [r3, #12]
 8012d3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012d3e:	681a      	ldr	r2, [r3, #0]
 8012d40:	ea40 0301 	orr.w	r3, r0, r1
 8012d44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8012d46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012d4a:	689a      	ldr	r2, [r3, #8]
 8012d4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012d50:	691b      	ldr	r3, [r3, #16]
 8012d52:	431a      	orrs	r2, r3
 8012d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012d58:	695b      	ldr	r3, [r3, #20]
 8012d5a:	431a      	orrs	r2, r3
 8012d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012d60:	69db      	ldr	r3, [r3, #28]
 8012d62:	4313      	orrs	r3, r2
 8012d64:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8012d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012d6c:	681b      	ldr	r3, [r3, #0]
 8012d6e:	68db      	ldr	r3, [r3, #12]
 8012d70:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8012d74:	f021 010c 	bic.w	r1, r1, #12
 8012d78:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012d7c:	681a      	ldr	r2, [r3, #0]
 8012d7e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8012d82:	430b      	orrs	r3, r1
 8012d84:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8012d86:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012d8a:	681b      	ldr	r3, [r3, #0]
 8012d8c:	695b      	ldr	r3, [r3, #20]
 8012d8e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8012d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012d96:	6999      	ldr	r1, [r3, #24]
 8012d98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012d9c:	681a      	ldr	r2, [r3, #0]
 8012d9e:	ea40 0301 	orr.w	r3, r0, r1
 8012da2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8012da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012da8:	681a      	ldr	r2, [r3, #0]
 8012daa:	4b8f      	ldr	r3, [pc, #572]	; (8012fe8 <UART_SetConfig+0x2cc>)
 8012dac:	429a      	cmp	r2, r3
 8012dae:	d005      	beq.n	8012dbc <UART_SetConfig+0xa0>
 8012db0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012db4:	681a      	ldr	r2, [r3, #0]
 8012db6:	4b8d      	ldr	r3, [pc, #564]	; (8012fec <UART_SetConfig+0x2d0>)
 8012db8:	429a      	cmp	r2, r3
 8012dba:	d104      	bne.n	8012dc6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8012dbc:	f7fe f8a4 	bl	8010f08 <HAL_RCC_GetPCLK2Freq>
 8012dc0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8012dc4:	e003      	b.n	8012dce <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8012dc6:	f7fe f88b 	bl	8010ee0 <HAL_RCC_GetPCLK1Freq>
 8012dca:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8012dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012dd2:	69db      	ldr	r3, [r3, #28]
 8012dd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8012dd8:	f040 810c 	bne.w	8012ff4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8012ddc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012de0:	2200      	movs	r2, #0
 8012de2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8012de6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8012dea:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8012dee:	4622      	mov	r2, r4
 8012df0:	462b      	mov	r3, r5
 8012df2:	1891      	adds	r1, r2, r2
 8012df4:	65b9      	str	r1, [r7, #88]	; 0x58
 8012df6:	415b      	adcs	r3, r3
 8012df8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8012dfa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8012dfe:	4621      	mov	r1, r4
 8012e00:	eb12 0801 	adds.w	r8, r2, r1
 8012e04:	4629      	mov	r1, r5
 8012e06:	eb43 0901 	adc.w	r9, r3, r1
 8012e0a:	f04f 0200 	mov.w	r2, #0
 8012e0e:	f04f 0300 	mov.w	r3, #0
 8012e12:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8012e16:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8012e1a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8012e1e:	4690      	mov	r8, r2
 8012e20:	4699      	mov	r9, r3
 8012e22:	4623      	mov	r3, r4
 8012e24:	eb18 0303 	adds.w	r3, r8, r3
 8012e28:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8012e2c:	462b      	mov	r3, r5
 8012e2e:	eb49 0303 	adc.w	r3, r9, r3
 8012e32:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8012e36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012e3a:	685b      	ldr	r3, [r3, #4]
 8012e3c:	2200      	movs	r2, #0
 8012e3e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8012e42:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8012e46:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8012e4a:	460b      	mov	r3, r1
 8012e4c:	18db      	adds	r3, r3, r3
 8012e4e:	653b      	str	r3, [r7, #80]	; 0x50
 8012e50:	4613      	mov	r3, r2
 8012e52:	eb42 0303 	adc.w	r3, r2, r3
 8012e56:	657b      	str	r3, [r7, #84]	; 0x54
 8012e58:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8012e5c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8012e60:	f7ed fe5c 	bl	8000b1c <__aeabi_uldivmod>
 8012e64:	4602      	mov	r2, r0
 8012e66:	460b      	mov	r3, r1
 8012e68:	4b61      	ldr	r3, [pc, #388]	; (8012ff0 <UART_SetConfig+0x2d4>)
 8012e6a:	fba3 2302 	umull	r2, r3, r3, r2
 8012e6e:	095b      	lsrs	r3, r3, #5
 8012e70:	011c      	lsls	r4, r3, #4
 8012e72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012e76:	2200      	movs	r2, #0
 8012e78:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8012e7c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8012e80:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8012e84:	4642      	mov	r2, r8
 8012e86:	464b      	mov	r3, r9
 8012e88:	1891      	adds	r1, r2, r2
 8012e8a:	64b9      	str	r1, [r7, #72]	; 0x48
 8012e8c:	415b      	adcs	r3, r3
 8012e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8012e90:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8012e94:	4641      	mov	r1, r8
 8012e96:	eb12 0a01 	adds.w	sl, r2, r1
 8012e9a:	4649      	mov	r1, r9
 8012e9c:	eb43 0b01 	adc.w	fp, r3, r1
 8012ea0:	f04f 0200 	mov.w	r2, #0
 8012ea4:	f04f 0300 	mov.w	r3, #0
 8012ea8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8012eac:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8012eb0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8012eb4:	4692      	mov	sl, r2
 8012eb6:	469b      	mov	fp, r3
 8012eb8:	4643      	mov	r3, r8
 8012eba:	eb1a 0303 	adds.w	r3, sl, r3
 8012ebe:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8012ec2:	464b      	mov	r3, r9
 8012ec4:	eb4b 0303 	adc.w	r3, fp, r3
 8012ec8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8012ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012ed0:	685b      	ldr	r3, [r3, #4]
 8012ed2:	2200      	movs	r2, #0
 8012ed4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8012ed8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8012edc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8012ee0:	460b      	mov	r3, r1
 8012ee2:	18db      	adds	r3, r3, r3
 8012ee4:	643b      	str	r3, [r7, #64]	; 0x40
 8012ee6:	4613      	mov	r3, r2
 8012ee8:	eb42 0303 	adc.w	r3, r2, r3
 8012eec:	647b      	str	r3, [r7, #68]	; 0x44
 8012eee:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8012ef2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8012ef6:	f7ed fe11 	bl	8000b1c <__aeabi_uldivmod>
 8012efa:	4602      	mov	r2, r0
 8012efc:	460b      	mov	r3, r1
 8012efe:	4611      	mov	r1, r2
 8012f00:	4b3b      	ldr	r3, [pc, #236]	; (8012ff0 <UART_SetConfig+0x2d4>)
 8012f02:	fba3 2301 	umull	r2, r3, r3, r1
 8012f06:	095b      	lsrs	r3, r3, #5
 8012f08:	2264      	movs	r2, #100	; 0x64
 8012f0a:	fb02 f303 	mul.w	r3, r2, r3
 8012f0e:	1acb      	subs	r3, r1, r3
 8012f10:	00db      	lsls	r3, r3, #3
 8012f12:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8012f16:	4b36      	ldr	r3, [pc, #216]	; (8012ff0 <UART_SetConfig+0x2d4>)
 8012f18:	fba3 2302 	umull	r2, r3, r3, r2
 8012f1c:	095b      	lsrs	r3, r3, #5
 8012f1e:	005b      	lsls	r3, r3, #1
 8012f20:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8012f24:	441c      	add	r4, r3
 8012f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8012f30:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8012f34:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8012f38:	4642      	mov	r2, r8
 8012f3a:	464b      	mov	r3, r9
 8012f3c:	1891      	adds	r1, r2, r2
 8012f3e:	63b9      	str	r1, [r7, #56]	; 0x38
 8012f40:	415b      	adcs	r3, r3
 8012f42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8012f44:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8012f48:	4641      	mov	r1, r8
 8012f4a:	1851      	adds	r1, r2, r1
 8012f4c:	6339      	str	r1, [r7, #48]	; 0x30
 8012f4e:	4649      	mov	r1, r9
 8012f50:	414b      	adcs	r3, r1
 8012f52:	637b      	str	r3, [r7, #52]	; 0x34
 8012f54:	f04f 0200 	mov.w	r2, #0
 8012f58:	f04f 0300 	mov.w	r3, #0
 8012f5c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8012f60:	4659      	mov	r1, fp
 8012f62:	00cb      	lsls	r3, r1, #3
 8012f64:	4651      	mov	r1, sl
 8012f66:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8012f6a:	4651      	mov	r1, sl
 8012f6c:	00ca      	lsls	r2, r1, #3
 8012f6e:	4610      	mov	r0, r2
 8012f70:	4619      	mov	r1, r3
 8012f72:	4603      	mov	r3, r0
 8012f74:	4642      	mov	r2, r8
 8012f76:	189b      	adds	r3, r3, r2
 8012f78:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8012f7c:	464b      	mov	r3, r9
 8012f7e:	460a      	mov	r2, r1
 8012f80:	eb42 0303 	adc.w	r3, r2, r3
 8012f84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8012f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012f8c:	685b      	ldr	r3, [r3, #4]
 8012f8e:	2200      	movs	r2, #0
 8012f90:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8012f94:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8012f98:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8012f9c:	460b      	mov	r3, r1
 8012f9e:	18db      	adds	r3, r3, r3
 8012fa0:	62bb      	str	r3, [r7, #40]	; 0x28
 8012fa2:	4613      	mov	r3, r2
 8012fa4:	eb42 0303 	adc.w	r3, r2, r3
 8012fa8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8012faa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8012fae:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8012fb2:	f7ed fdb3 	bl	8000b1c <__aeabi_uldivmod>
 8012fb6:	4602      	mov	r2, r0
 8012fb8:	460b      	mov	r3, r1
 8012fba:	4b0d      	ldr	r3, [pc, #52]	; (8012ff0 <UART_SetConfig+0x2d4>)
 8012fbc:	fba3 1302 	umull	r1, r3, r3, r2
 8012fc0:	095b      	lsrs	r3, r3, #5
 8012fc2:	2164      	movs	r1, #100	; 0x64
 8012fc4:	fb01 f303 	mul.w	r3, r1, r3
 8012fc8:	1ad3      	subs	r3, r2, r3
 8012fca:	00db      	lsls	r3, r3, #3
 8012fcc:	3332      	adds	r3, #50	; 0x32
 8012fce:	4a08      	ldr	r2, [pc, #32]	; (8012ff0 <UART_SetConfig+0x2d4>)
 8012fd0:	fba2 2303 	umull	r2, r3, r2, r3
 8012fd4:	095b      	lsrs	r3, r3, #5
 8012fd6:	f003 0207 	and.w	r2, r3, #7
 8012fda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8012fde:	681b      	ldr	r3, [r3, #0]
 8012fe0:	4422      	add	r2, r4
 8012fe2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8012fe4:	e105      	b.n	80131f2 <UART_SetConfig+0x4d6>
 8012fe6:	bf00      	nop
 8012fe8:	40011000 	.word	0x40011000
 8012fec:	40011400 	.word	0x40011400
 8012ff0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8012ff4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8012ff8:	2200      	movs	r2, #0
 8012ffa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8012ffe:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8013002:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8013006:	4642      	mov	r2, r8
 8013008:	464b      	mov	r3, r9
 801300a:	1891      	adds	r1, r2, r2
 801300c:	6239      	str	r1, [r7, #32]
 801300e:	415b      	adcs	r3, r3
 8013010:	627b      	str	r3, [r7, #36]	; 0x24
 8013012:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8013016:	4641      	mov	r1, r8
 8013018:	1854      	adds	r4, r2, r1
 801301a:	4649      	mov	r1, r9
 801301c:	eb43 0501 	adc.w	r5, r3, r1
 8013020:	f04f 0200 	mov.w	r2, #0
 8013024:	f04f 0300 	mov.w	r3, #0
 8013028:	00eb      	lsls	r3, r5, #3
 801302a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 801302e:	00e2      	lsls	r2, r4, #3
 8013030:	4614      	mov	r4, r2
 8013032:	461d      	mov	r5, r3
 8013034:	4643      	mov	r3, r8
 8013036:	18e3      	adds	r3, r4, r3
 8013038:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 801303c:	464b      	mov	r3, r9
 801303e:	eb45 0303 	adc.w	r3, r5, r3
 8013042:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8013046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801304a:	685b      	ldr	r3, [r3, #4]
 801304c:	2200      	movs	r2, #0
 801304e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8013052:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8013056:	f04f 0200 	mov.w	r2, #0
 801305a:	f04f 0300 	mov.w	r3, #0
 801305e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8013062:	4629      	mov	r1, r5
 8013064:	008b      	lsls	r3, r1, #2
 8013066:	4621      	mov	r1, r4
 8013068:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801306c:	4621      	mov	r1, r4
 801306e:	008a      	lsls	r2, r1, #2
 8013070:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8013074:	f7ed fd52 	bl	8000b1c <__aeabi_uldivmod>
 8013078:	4602      	mov	r2, r0
 801307a:	460b      	mov	r3, r1
 801307c:	4b60      	ldr	r3, [pc, #384]	; (8013200 <UART_SetConfig+0x4e4>)
 801307e:	fba3 2302 	umull	r2, r3, r3, r2
 8013082:	095b      	lsrs	r3, r3, #5
 8013084:	011c      	lsls	r4, r3, #4
 8013086:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 801308a:	2200      	movs	r2, #0
 801308c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8013090:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8013094:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8013098:	4642      	mov	r2, r8
 801309a:	464b      	mov	r3, r9
 801309c:	1891      	adds	r1, r2, r2
 801309e:	61b9      	str	r1, [r7, #24]
 80130a0:	415b      	adcs	r3, r3
 80130a2:	61fb      	str	r3, [r7, #28]
 80130a4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80130a8:	4641      	mov	r1, r8
 80130aa:	1851      	adds	r1, r2, r1
 80130ac:	6139      	str	r1, [r7, #16]
 80130ae:	4649      	mov	r1, r9
 80130b0:	414b      	adcs	r3, r1
 80130b2:	617b      	str	r3, [r7, #20]
 80130b4:	f04f 0200 	mov.w	r2, #0
 80130b8:	f04f 0300 	mov.w	r3, #0
 80130bc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80130c0:	4659      	mov	r1, fp
 80130c2:	00cb      	lsls	r3, r1, #3
 80130c4:	4651      	mov	r1, sl
 80130c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80130ca:	4651      	mov	r1, sl
 80130cc:	00ca      	lsls	r2, r1, #3
 80130ce:	4610      	mov	r0, r2
 80130d0:	4619      	mov	r1, r3
 80130d2:	4603      	mov	r3, r0
 80130d4:	4642      	mov	r2, r8
 80130d6:	189b      	adds	r3, r3, r2
 80130d8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80130dc:	464b      	mov	r3, r9
 80130de:	460a      	mov	r2, r1
 80130e0:	eb42 0303 	adc.w	r3, r2, r3
 80130e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80130e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80130ec:	685b      	ldr	r3, [r3, #4]
 80130ee:	2200      	movs	r2, #0
 80130f0:	67bb      	str	r3, [r7, #120]	; 0x78
 80130f2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80130f4:	f04f 0200 	mov.w	r2, #0
 80130f8:	f04f 0300 	mov.w	r3, #0
 80130fc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8013100:	4649      	mov	r1, r9
 8013102:	008b      	lsls	r3, r1, #2
 8013104:	4641      	mov	r1, r8
 8013106:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 801310a:	4641      	mov	r1, r8
 801310c:	008a      	lsls	r2, r1, #2
 801310e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8013112:	f7ed fd03 	bl	8000b1c <__aeabi_uldivmod>
 8013116:	4602      	mov	r2, r0
 8013118:	460b      	mov	r3, r1
 801311a:	4b39      	ldr	r3, [pc, #228]	; (8013200 <UART_SetConfig+0x4e4>)
 801311c:	fba3 1302 	umull	r1, r3, r3, r2
 8013120:	095b      	lsrs	r3, r3, #5
 8013122:	2164      	movs	r1, #100	; 0x64
 8013124:	fb01 f303 	mul.w	r3, r1, r3
 8013128:	1ad3      	subs	r3, r2, r3
 801312a:	011b      	lsls	r3, r3, #4
 801312c:	3332      	adds	r3, #50	; 0x32
 801312e:	4a34      	ldr	r2, [pc, #208]	; (8013200 <UART_SetConfig+0x4e4>)
 8013130:	fba2 2303 	umull	r2, r3, r2, r3
 8013134:	095b      	lsrs	r3, r3, #5
 8013136:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801313a:	441c      	add	r4, r3
 801313c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8013140:	2200      	movs	r2, #0
 8013142:	673b      	str	r3, [r7, #112]	; 0x70
 8013144:	677a      	str	r2, [r7, #116]	; 0x74
 8013146:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 801314a:	4642      	mov	r2, r8
 801314c:	464b      	mov	r3, r9
 801314e:	1891      	adds	r1, r2, r2
 8013150:	60b9      	str	r1, [r7, #8]
 8013152:	415b      	adcs	r3, r3
 8013154:	60fb      	str	r3, [r7, #12]
 8013156:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 801315a:	4641      	mov	r1, r8
 801315c:	1851      	adds	r1, r2, r1
 801315e:	6039      	str	r1, [r7, #0]
 8013160:	4649      	mov	r1, r9
 8013162:	414b      	adcs	r3, r1
 8013164:	607b      	str	r3, [r7, #4]
 8013166:	f04f 0200 	mov.w	r2, #0
 801316a:	f04f 0300 	mov.w	r3, #0
 801316e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8013172:	4659      	mov	r1, fp
 8013174:	00cb      	lsls	r3, r1, #3
 8013176:	4651      	mov	r1, sl
 8013178:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 801317c:	4651      	mov	r1, sl
 801317e:	00ca      	lsls	r2, r1, #3
 8013180:	4610      	mov	r0, r2
 8013182:	4619      	mov	r1, r3
 8013184:	4603      	mov	r3, r0
 8013186:	4642      	mov	r2, r8
 8013188:	189b      	adds	r3, r3, r2
 801318a:	66bb      	str	r3, [r7, #104]	; 0x68
 801318c:	464b      	mov	r3, r9
 801318e:	460a      	mov	r2, r1
 8013190:	eb42 0303 	adc.w	r3, r2, r3
 8013194:	66fb      	str	r3, [r7, #108]	; 0x6c
 8013196:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 801319a:	685b      	ldr	r3, [r3, #4]
 801319c:	2200      	movs	r2, #0
 801319e:	663b      	str	r3, [r7, #96]	; 0x60
 80131a0:	667a      	str	r2, [r7, #100]	; 0x64
 80131a2:	f04f 0200 	mov.w	r2, #0
 80131a6:	f04f 0300 	mov.w	r3, #0
 80131aa:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80131ae:	4649      	mov	r1, r9
 80131b0:	008b      	lsls	r3, r1, #2
 80131b2:	4641      	mov	r1, r8
 80131b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80131b8:	4641      	mov	r1, r8
 80131ba:	008a      	lsls	r2, r1, #2
 80131bc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80131c0:	f7ed fcac 	bl	8000b1c <__aeabi_uldivmod>
 80131c4:	4602      	mov	r2, r0
 80131c6:	460b      	mov	r3, r1
 80131c8:	4b0d      	ldr	r3, [pc, #52]	; (8013200 <UART_SetConfig+0x4e4>)
 80131ca:	fba3 1302 	umull	r1, r3, r3, r2
 80131ce:	095b      	lsrs	r3, r3, #5
 80131d0:	2164      	movs	r1, #100	; 0x64
 80131d2:	fb01 f303 	mul.w	r3, r1, r3
 80131d6:	1ad3      	subs	r3, r2, r3
 80131d8:	011b      	lsls	r3, r3, #4
 80131da:	3332      	adds	r3, #50	; 0x32
 80131dc:	4a08      	ldr	r2, [pc, #32]	; (8013200 <UART_SetConfig+0x4e4>)
 80131de:	fba2 2303 	umull	r2, r3, r2, r3
 80131e2:	095b      	lsrs	r3, r3, #5
 80131e4:	f003 020f 	and.w	r2, r3, #15
 80131e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80131ec:	681b      	ldr	r3, [r3, #0]
 80131ee:	4422      	add	r2, r4
 80131f0:	609a      	str	r2, [r3, #8]
}
 80131f2:	bf00      	nop
 80131f4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80131f8:	46bd      	mov	sp, r7
 80131fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80131fe:	bf00      	nop
 8013200:	51eb851f 	.word	0x51eb851f

08013204 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_InitTypeDef *Init)
{
 8013204:	b480      	push	{r7}
 8013206:	b083      	sub	sp, #12
 8013208:	af00      	add	r7, sp, #0
 801320a:	6078      	str	r0, [r7, #4]
 801320c:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 801320e:	683b      	ldr	r3, [r7, #0]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	2b00      	cmp	r3, #0
 8013214:	d123      	bne.n	801325e <FMC_SDRAM_Init+0x5a>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8013216:	687b      	ldr	r3, [r7, #4]
 8013218:	681b      	ldr	r3, [r3, #0]
 801321a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 801321e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013222:	683a      	ldr	r2, [r7, #0]
 8013224:	6851      	ldr	r1, [r2, #4]
 8013226:	683a      	ldr	r2, [r7, #0]
 8013228:	6892      	ldr	r2, [r2, #8]
 801322a:	4311      	orrs	r1, r2
 801322c:	683a      	ldr	r2, [r7, #0]
 801322e:	68d2      	ldr	r2, [r2, #12]
 8013230:	4311      	orrs	r1, r2
 8013232:	683a      	ldr	r2, [r7, #0]
 8013234:	6912      	ldr	r2, [r2, #16]
 8013236:	4311      	orrs	r1, r2
 8013238:	683a      	ldr	r2, [r7, #0]
 801323a:	6952      	ldr	r2, [r2, #20]
 801323c:	4311      	orrs	r1, r2
 801323e:	683a      	ldr	r2, [r7, #0]
 8013240:	6992      	ldr	r2, [r2, #24]
 8013242:	4311      	orrs	r1, r2
 8013244:	683a      	ldr	r2, [r7, #0]
 8013246:	69d2      	ldr	r2, [r2, #28]
 8013248:	4311      	orrs	r1, r2
 801324a:	683a      	ldr	r2, [r7, #0]
 801324c:	6a12      	ldr	r2, [r2, #32]
 801324e:	4311      	orrs	r1, r2
 8013250:	683a      	ldr	r2, [r7, #0]
 8013252:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8013254:	430a      	orrs	r2, r1
 8013256:	431a      	orrs	r2, r3
 8013258:	687b      	ldr	r3, [r7, #4]
 801325a:	601a      	str	r2, [r3, #0]
 801325c:	e028      	b.n	80132b0 <FMC_SDRAM_Init+0xac>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	681b      	ldr	r3, [r3, #0]
 8013262:	f423 42f8 	bic.w	r2, r3, #31744	; 0x7c00
 8013266:	683b      	ldr	r3, [r7, #0]
 8013268:	69d9      	ldr	r1, [r3, #28]
 801326a:	683b      	ldr	r3, [r7, #0]
 801326c:	6a1b      	ldr	r3, [r3, #32]
 801326e:	4319      	orrs	r1, r3
 8013270:	683b      	ldr	r3, [r7, #0]
 8013272:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013274:	430b      	orrs	r3, r1
 8013276:	431a      	orrs	r2, r3
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	601a      	str	r2, [r3, #0]
               FMC_SDCR1_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	685b      	ldr	r3, [r3, #4]
 8013280:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8013284:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8013288:	683a      	ldr	r2, [r7, #0]
 801328a:	6851      	ldr	r1, [r2, #4]
 801328c:	683a      	ldr	r2, [r7, #0]
 801328e:	6892      	ldr	r2, [r2, #8]
 8013290:	4311      	orrs	r1, r2
 8013292:	683a      	ldr	r2, [r7, #0]
 8013294:	68d2      	ldr	r2, [r2, #12]
 8013296:	4311      	orrs	r1, r2
 8013298:	683a      	ldr	r2, [r7, #0]
 801329a:	6912      	ldr	r2, [r2, #16]
 801329c:	4311      	orrs	r1, r2
 801329e:	683a      	ldr	r2, [r7, #0]
 80132a0:	6952      	ldr	r2, [r2, #20]
 80132a2:	4311      	orrs	r1, r2
 80132a4:	683a      	ldr	r2, [r7, #0]
 80132a6:	6992      	ldr	r2, [r2, #24]
 80132a8:	430a      	orrs	r2, r1
 80132aa:	431a      	orrs	r2, r3
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 80132b0:	2300      	movs	r3, #0
}
 80132b2:	4618      	mov	r0, r3
 80132b4:	370c      	adds	r7, #12
 80132b6:	46bd      	mov	sp, r7
 80132b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132bc:	4770      	bx	lr

080132be <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 80132be:	b480      	push	{r7}
 80132c0:	b085      	sub	sp, #20
 80132c2:	af00      	add	r7, sp, #0
 80132c4:	60f8      	str	r0, [r7, #12]
 80132c6:	60b9      	str	r1, [r7, #8]
 80132c8:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d128      	bne.n	8013322 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80132d0:	68fb      	ldr	r3, [r7, #12]
 80132d2:	689b      	ldr	r3, [r3, #8]
 80132d4:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 80132d8:	68bb      	ldr	r3, [r7, #8]
 80132da:	681b      	ldr	r3, [r3, #0]
 80132dc:	1e59      	subs	r1, r3, #1
 80132de:	68bb      	ldr	r3, [r7, #8]
 80132e0:	685b      	ldr	r3, [r3, #4]
 80132e2:	3b01      	subs	r3, #1
 80132e4:	011b      	lsls	r3, r3, #4
 80132e6:	4319      	orrs	r1, r3
 80132e8:	68bb      	ldr	r3, [r7, #8]
 80132ea:	689b      	ldr	r3, [r3, #8]
 80132ec:	3b01      	subs	r3, #1
 80132ee:	021b      	lsls	r3, r3, #8
 80132f0:	4319      	orrs	r1, r3
 80132f2:	68bb      	ldr	r3, [r7, #8]
 80132f4:	68db      	ldr	r3, [r3, #12]
 80132f6:	3b01      	subs	r3, #1
 80132f8:	031b      	lsls	r3, r3, #12
 80132fa:	4319      	orrs	r1, r3
 80132fc:	68bb      	ldr	r3, [r7, #8]
 80132fe:	691b      	ldr	r3, [r3, #16]
 8013300:	3b01      	subs	r3, #1
 8013302:	041b      	lsls	r3, r3, #16
 8013304:	4319      	orrs	r1, r3
 8013306:	68bb      	ldr	r3, [r7, #8]
 8013308:	695b      	ldr	r3, [r3, #20]
 801330a:	3b01      	subs	r3, #1
 801330c:	051b      	lsls	r3, r3, #20
 801330e:	4319      	orrs	r1, r3
 8013310:	68bb      	ldr	r3, [r7, #8]
 8013312:	699b      	ldr	r3, [r3, #24]
 8013314:	3b01      	subs	r3, #1
 8013316:	061b      	lsls	r3, r3, #24
 8013318:	430b      	orrs	r3, r1
 801331a:	431a      	orrs	r2, r3
 801331c:	68fb      	ldr	r3, [r7, #12]
 801331e:	609a      	str	r2, [r3, #8]
 8013320:	e02f      	b.n	8013382 <FMC_SDRAM_Timing_Init+0xc4>
                (((Timing->RPDelay) - 1U)              << FMC_SDTR1_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	689b      	ldr	r3, [r3, #8]
 8013326:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 801332a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 801332e:	68ba      	ldr	r2, [r7, #8]
 8013330:	68d2      	ldr	r2, [r2, #12]
 8013332:	3a01      	subs	r2, #1
 8013334:	0311      	lsls	r1, r2, #12
 8013336:	68ba      	ldr	r2, [r7, #8]
 8013338:	6952      	ldr	r2, [r2, #20]
 801333a:	3a01      	subs	r2, #1
 801333c:	0512      	lsls	r2, r2, #20
 801333e:	430a      	orrs	r2, r1
 8013340:	431a      	orrs	r2, r3
 8013342:	68fb      	ldr	r3, [r7, #12]
 8013344:	609a      	str	r2, [r3, #8]
               FMC_SDTR1_TRC |
               FMC_SDTR1_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTR1_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTR1_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 8013346:	68fb      	ldr	r3, [r7, #12]
 8013348:	68db      	ldr	r3, [r3, #12]
 801334a:	f003 4270 	and.w	r2, r3, #4026531840	; 0xf0000000
 801334e:	68bb      	ldr	r3, [r7, #8]
 8013350:	681b      	ldr	r3, [r3, #0]
 8013352:	1e59      	subs	r1, r3, #1
 8013354:	68bb      	ldr	r3, [r7, #8]
 8013356:	685b      	ldr	r3, [r3, #4]
 8013358:	3b01      	subs	r3, #1
 801335a:	011b      	lsls	r3, r3, #4
 801335c:	4319      	orrs	r1, r3
 801335e:	68bb      	ldr	r3, [r7, #8]
 8013360:	689b      	ldr	r3, [r3, #8]
 8013362:	3b01      	subs	r3, #1
 8013364:	021b      	lsls	r3, r3, #8
 8013366:	4319      	orrs	r1, r3
 8013368:	68bb      	ldr	r3, [r7, #8]
 801336a:	691b      	ldr	r3, [r3, #16]
 801336c:	3b01      	subs	r3, #1
 801336e:	041b      	lsls	r3, r3, #16
 8013370:	4319      	orrs	r1, r3
 8013372:	68bb      	ldr	r3, [r7, #8]
 8013374:	699b      	ldr	r3, [r3, #24]
 8013376:	3b01      	subs	r3, #1
 8013378:	061b      	lsls	r3, r3, #24
 801337a:	430b      	orrs	r3, r1
 801337c:	431a      	orrs	r2, r3
 801337e:	68fb      	ldr	r3, [r7, #12]
 8013380:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTR1_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTR1_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTR1_TRCD_Pos)));
  }

  return HAL_OK;
 8013382:	2300      	movs	r3, #0
}
 8013384:	4618      	mov	r0, r3
 8013386:	3714      	adds	r7, #20
 8013388:	46bd      	mov	sp, r7
 801338a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801338e:	4770      	bx	lr

08013390 <FMC_SDRAM_WriteProtection_Disable>:
  * @brief  Disables dynamically FMC_SDRAM write protection.
  * @param  hsdram FMC_SDRAM handle
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_WriteProtection_Disable(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 8013390:	b480      	push	{r7}
 8013392:	b083      	sub	sp, #12
 8013394:	af00      	add	r7, sp, #0
 8013396:	6078      	str	r0, [r7, #4]
 8013398:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Disable write protection */
  CLEAR_BIT(Device->SDCR[Bank], FMC_SDRAM_WRITE_PROTECTION_ENABLE);
 801339a:	687b      	ldr	r3, [r7, #4]
 801339c:	683a      	ldr	r2, [r7, #0]
 801339e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80133a2:	f423 7100 	bic.w	r1, r3, #512	; 0x200
 80133a6:	687b      	ldr	r3, [r7, #4]
 80133a8:	683a      	ldr	r2, [r7, #0]
 80133aa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  return HAL_OK;
 80133ae:	2300      	movs	r3, #0
}
 80133b0:	4618      	mov	r0, r3
 80133b2:	370c      	adds	r7, #12
 80133b4:	46bd      	mov	sp, r7
 80133b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80133ba:	4770      	bx	lr

080133bc <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80133bc:	b580      	push	{r7, lr}
 80133be:	b086      	sub	sp, #24
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	60f8      	str	r0, [r7, #12]
 80133c4:	60b9      	str	r1, [r7, #8]
 80133c6:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 80133c8:	2300      	movs	r3, #0
 80133ca:	617b      	str	r3, [r7, #20]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 80133cc:	68fb      	ldr	r3, [r7, #12]
 80133ce:	691b      	ldr	r3, [r3, #16]
 80133d0:	0d9b      	lsrs	r3, r3, #22
 80133d2:	059b      	lsls	r3, r3, #22
 80133d4:	68ba      	ldr	r2, [r7, #8]
 80133d6:	6811      	ldr	r1, [r2, #0]
 80133d8:	68ba      	ldr	r2, [r7, #8]
 80133da:	6852      	ldr	r2, [r2, #4]
 80133dc:	4311      	orrs	r1, r2
 80133de:	68ba      	ldr	r2, [r7, #8]
 80133e0:	6892      	ldr	r2, [r2, #8]
 80133e2:	3a01      	subs	r2, #1
 80133e4:	0152      	lsls	r2, r2, #5
 80133e6:	4311      	orrs	r1, r2
 80133e8:	68ba      	ldr	r2, [r7, #8]
 80133ea:	68d2      	ldr	r2, [r2, #12]
 80133ec:	0252      	lsls	r2, r2, #9
 80133ee:	430a      	orrs	r2, r1
 80133f0:	431a      	orrs	r2, r3
 80133f2:	68fb      	ldr	r3, [r7, #12]
 80133f4:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Get tick */
  tickstart = HAL_GetTick();
 80133f6:	f7f9 fe1b 	bl	800d030 <HAL_GetTick>
 80133fa:	6178      	str	r0, [r7, #20]

  /* wait until command is send */
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80133fc:	e010      	b.n	8013420 <FMC_SDRAM_SendCommand+0x64>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013404:	d00c      	beq.n	8013420 <FMC_SDRAM_SendCommand+0x64>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8013406:	687b      	ldr	r3, [r7, #4]
 8013408:	2b00      	cmp	r3, #0
 801340a:	d007      	beq.n	801341c <FMC_SDRAM_SendCommand+0x60>
 801340c:	f7f9 fe10 	bl	800d030 <HAL_GetTick>
 8013410:	4602      	mov	r2, r0
 8013412:	697b      	ldr	r3, [r7, #20]
 8013414:	1ad3      	subs	r3, r2, r3
 8013416:	687a      	ldr	r2, [r7, #4]
 8013418:	429a      	cmp	r2, r3
 801341a:	d201      	bcs.n	8013420 <FMC_SDRAM_SendCommand+0x64>
      {
        return HAL_TIMEOUT;
 801341c:	2303      	movs	r3, #3
 801341e:	e006      	b.n	801342e <FMC_SDRAM_SendCommand+0x72>
  while (HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 8013420:	68fb      	ldr	r3, [r7, #12]
 8013422:	699b      	ldr	r3, [r3, #24]
 8013424:	f003 0320 	and.w	r3, r3, #32
 8013428:	2b20      	cmp	r3, #32
 801342a:	d0e8      	beq.n	80133fe <FMC_SDRAM_SendCommand+0x42>
      }
    }
  }
  return HAL_OK;
 801342c:	2300      	movs	r3, #0
}
 801342e:	4618      	mov	r0, r3
 8013430:	3718      	adds	r7, #24
 8013432:	46bd      	mov	sp, r7
 8013434:	bd80      	pop	{r7, pc}

08013436 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 8013436:	b480      	push	{r7}
 8013438:	b083      	sub	sp, #12
 801343a:	af00      	add	r7, sp, #0
 801343c:	6078      	str	r0, [r7, #4]
 801343e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	695b      	ldr	r3, [r3, #20]
 8013444:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8013448:	f023 033e 	bic.w	r3, r3, #62	; 0x3e
 801344c:	683a      	ldr	r2, [r7, #0]
 801344e:	0052      	lsls	r2, r2, #1
 8013450:	431a      	orrs	r2, r3
 8013452:	687b      	ldr	r3, [r7, #4]
 8013454:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8013456:	2300      	movs	r3, #0
}
 8013458:	4618      	mov	r0, r3
 801345a:	370c      	adds	r7, #12
 801345c:	46bd      	mov	sp, r7
 801345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013462:	4770      	bx	lr

08013464 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013464:	b084      	sub	sp, #16
 8013466:	b580      	push	{r7, lr}
 8013468:	b084      	sub	sp, #16
 801346a:	af00      	add	r7, sp, #0
 801346c:	6078      	str	r0, [r7, #4]
 801346e:	f107 001c 	add.w	r0, r7, #28
 8013472:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8013476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8013478:	2b01      	cmp	r3, #1
 801347a:	d122      	bne.n	80134c2 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8013480:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	68db      	ldr	r3, [r3, #12]
 801348c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8013490:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8013494:	687a      	ldr	r2, [r7, #4]
 8013496:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8013498:	687b      	ldr	r3, [r7, #4]
 801349a:	68db      	ldr	r3, [r3, #12]
 801349c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80134a4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80134a6:	2b01      	cmp	r3, #1
 80134a8:	d105      	bne.n	80134b6 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	68db      	ldr	r3, [r3, #12]
 80134ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80134b6:	6878      	ldr	r0, [r7, #4]
 80134b8:	f001 fbee 	bl	8014c98 <USB_CoreReset>
 80134bc:	4603      	mov	r3, r0
 80134be:	73fb      	strb	r3, [r7, #15]
 80134c0:	e01a      	b.n	80134f8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80134c2:	687b      	ldr	r3, [r7, #4]
 80134c4:	68db      	ldr	r3, [r3, #12]
 80134c6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80134ca:	687b      	ldr	r3, [r7, #4]
 80134cc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80134ce:	6878      	ldr	r0, [r7, #4]
 80134d0:	f001 fbe2 	bl	8014c98 <USB_CoreReset>
 80134d4:	4603      	mov	r3, r0
 80134d6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80134d8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80134da:	2b00      	cmp	r3, #0
 80134dc:	d106      	bne.n	80134ec <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80134de:	687b      	ldr	r3, [r7, #4]
 80134e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134e2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	639a      	str	r2, [r3, #56]	; 0x38
 80134ea:	e005      	b.n	80134f8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80134f0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80134f4:	687b      	ldr	r3, [r7, #4]
 80134f6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80134f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80134fa:	2b01      	cmp	r3, #1
 80134fc:	d10b      	bne.n	8013516 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80134fe:	687b      	ldr	r3, [r7, #4]
 8013500:	689b      	ldr	r3, [r3, #8]
 8013502:	f043 0206 	orr.w	r2, r3, #6
 8013506:	687b      	ldr	r3, [r7, #4]
 8013508:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	689b      	ldr	r3, [r3, #8]
 801350e:	f043 0220 	orr.w	r2, r3, #32
 8013512:	687b      	ldr	r3, [r7, #4]
 8013514:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8013516:	7bfb      	ldrb	r3, [r7, #15]
}
 8013518:	4618      	mov	r0, r3
 801351a:	3710      	adds	r7, #16
 801351c:	46bd      	mov	sp, r7
 801351e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013522:	b004      	add	sp, #16
 8013524:	4770      	bx	lr
	...

08013528 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8013528:	b480      	push	{r7}
 801352a:	b087      	sub	sp, #28
 801352c:	af00      	add	r7, sp, #0
 801352e:	60f8      	str	r0, [r7, #12]
 8013530:	60b9      	str	r1, [r7, #8]
 8013532:	4613      	mov	r3, r2
 8013534:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8013536:	79fb      	ldrb	r3, [r7, #7]
 8013538:	2b02      	cmp	r3, #2
 801353a:	d165      	bne.n	8013608 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 801353c:	68bb      	ldr	r3, [r7, #8]
 801353e:	4a41      	ldr	r2, [pc, #260]	; (8013644 <USB_SetTurnaroundTime+0x11c>)
 8013540:	4293      	cmp	r3, r2
 8013542:	d906      	bls.n	8013552 <USB_SetTurnaroundTime+0x2a>
 8013544:	68bb      	ldr	r3, [r7, #8]
 8013546:	4a40      	ldr	r2, [pc, #256]	; (8013648 <USB_SetTurnaroundTime+0x120>)
 8013548:	4293      	cmp	r3, r2
 801354a:	d202      	bcs.n	8013552 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 801354c:	230f      	movs	r3, #15
 801354e:	617b      	str	r3, [r7, #20]
 8013550:	e062      	b.n	8013618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8013552:	68bb      	ldr	r3, [r7, #8]
 8013554:	4a3c      	ldr	r2, [pc, #240]	; (8013648 <USB_SetTurnaroundTime+0x120>)
 8013556:	4293      	cmp	r3, r2
 8013558:	d306      	bcc.n	8013568 <USB_SetTurnaroundTime+0x40>
 801355a:	68bb      	ldr	r3, [r7, #8]
 801355c:	4a3b      	ldr	r2, [pc, #236]	; (801364c <USB_SetTurnaroundTime+0x124>)
 801355e:	4293      	cmp	r3, r2
 8013560:	d202      	bcs.n	8013568 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8013562:	230e      	movs	r3, #14
 8013564:	617b      	str	r3, [r7, #20]
 8013566:	e057      	b.n	8013618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8013568:	68bb      	ldr	r3, [r7, #8]
 801356a:	4a38      	ldr	r2, [pc, #224]	; (801364c <USB_SetTurnaroundTime+0x124>)
 801356c:	4293      	cmp	r3, r2
 801356e:	d306      	bcc.n	801357e <USB_SetTurnaroundTime+0x56>
 8013570:	68bb      	ldr	r3, [r7, #8]
 8013572:	4a37      	ldr	r2, [pc, #220]	; (8013650 <USB_SetTurnaroundTime+0x128>)
 8013574:	4293      	cmp	r3, r2
 8013576:	d202      	bcs.n	801357e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8013578:	230d      	movs	r3, #13
 801357a:	617b      	str	r3, [r7, #20]
 801357c:	e04c      	b.n	8013618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 801357e:	68bb      	ldr	r3, [r7, #8]
 8013580:	4a33      	ldr	r2, [pc, #204]	; (8013650 <USB_SetTurnaroundTime+0x128>)
 8013582:	4293      	cmp	r3, r2
 8013584:	d306      	bcc.n	8013594 <USB_SetTurnaroundTime+0x6c>
 8013586:	68bb      	ldr	r3, [r7, #8]
 8013588:	4a32      	ldr	r2, [pc, #200]	; (8013654 <USB_SetTurnaroundTime+0x12c>)
 801358a:	4293      	cmp	r3, r2
 801358c:	d802      	bhi.n	8013594 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 801358e:	230c      	movs	r3, #12
 8013590:	617b      	str	r3, [r7, #20]
 8013592:	e041      	b.n	8013618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8013594:	68bb      	ldr	r3, [r7, #8]
 8013596:	4a2f      	ldr	r2, [pc, #188]	; (8013654 <USB_SetTurnaroundTime+0x12c>)
 8013598:	4293      	cmp	r3, r2
 801359a:	d906      	bls.n	80135aa <USB_SetTurnaroundTime+0x82>
 801359c:	68bb      	ldr	r3, [r7, #8]
 801359e:	4a2e      	ldr	r2, [pc, #184]	; (8013658 <USB_SetTurnaroundTime+0x130>)
 80135a0:	4293      	cmp	r3, r2
 80135a2:	d802      	bhi.n	80135aa <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80135a4:	230b      	movs	r3, #11
 80135a6:	617b      	str	r3, [r7, #20]
 80135a8:	e036      	b.n	8013618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80135aa:	68bb      	ldr	r3, [r7, #8]
 80135ac:	4a2a      	ldr	r2, [pc, #168]	; (8013658 <USB_SetTurnaroundTime+0x130>)
 80135ae:	4293      	cmp	r3, r2
 80135b0:	d906      	bls.n	80135c0 <USB_SetTurnaroundTime+0x98>
 80135b2:	68bb      	ldr	r3, [r7, #8]
 80135b4:	4a29      	ldr	r2, [pc, #164]	; (801365c <USB_SetTurnaroundTime+0x134>)
 80135b6:	4293      	cmp	r3, r2
 80135b8:	d802      	bhi.n	80135c0 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80135ba:	230a      	movs	r3, #10
 80135bc:	617b      	str	r3, [r7, #20]
 80135be:	e02b      	b.n	8013618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80135c0:	68bb      	ldr	r3, [r7, #8]
 80135c2:	4a26      	ldr	r2, [pc, #152]	; (801365c <USB_SetTurnaroundTime+0x134>)
 80135c4:	4293      	cmp	r3, r2
 80135c6:	d906      	bls.n	80135d6 <USB_SetTurnaroundTime+0xae>
 80135c8:	68bb      	ldr	r3, [r7, #8]
 80135ca:	4a25      	ldr	r2, [pc, #148]	; (8013660 <USB_SetTurnaroundTime+0x138>)
 80135cc:	4293      	cmp	r3, r2
 80135ce:	d202      	bcs.n	80135d6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80135d0:	2309      	movs	r3, #9
 80135d2:	617b      	str	r3, [r7, #20]
 80135d4:	e020      	b.n	8013618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80135d6:	68bb      	ldr	r3, [r7, #8]
 80135d8:	4a21      	ldr	r2, [pc, #132]	; (8013660 <USB_SetTurnaroundTime+0x138>)
 80135da:	4293      	cmp	r3, r2
 80135dc:	d306      	bcc.n	80135ec <USB_SetTurnaroundTime+0xc4>
 80135de:	68bb      	ldr	r3, [r7, #8]
 80135e0:	4a20      	ldr	r2, [pc, #128]	; (8013664 <USB_SetTurnaroundTime+0x13c>)
 80135e2:	4293      	cmp	r3, r2
 80135e4:	d802      	bhi.n	80135ec <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80135e6:	2308      	movs	r3, #8
 80135e8:	617b      	str	r3, [r7, #20]
 80135ea:	e015      	b.n	8013618 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80135ec:	68bb      	ldr	r3, [r7, #8]
 80135ee:	4a1d      	ldr	r2, [pc, #116]	; (8013664 <USB_SetTurnaroundTime+0x13c>)
 80135f0:	4293      	cmp	r3, r2
 80135f2:	d906      	bls.n	8013602 <USB_SetTurnaroundTime+0xda>
 80135f4:	68bb      	ldr	r3, [r7, #8]
 80135f6:	4a1c      	ldr	r2, [pc, #112]	; (8013668 <USB_SetTurnaroundTime+0x140>)
 80135f8:	4293      	cmp	r3, r2
 80135fa:	d202      	bcs.n	8013602 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80135fc:	2307      	movs	r3, #7
 80135fe:	617b      	str	r3, [r7, #20]
 8013600:	e00a      	b.n	8013618 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8013602:	2306      	movs	r3, #6
 8013604:	617b      	str	r3, [r7, #20]
 8013606:	e007      	b.n	8013618 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8013608:	79fb      	ldrb	r3, [r7, #7]
 801360a:	2b00      	cmp	r3, #0
 801360c:	d102      	bne.n	8013614 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 801360e:	2309      	movs	r3, #9
 8013610:	617b      	str	r3, [r7, #20]
 8013612:	e001      	b.n	8013618 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8013614:	2309      	movs	r3, #9
 8013616:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8013618:	68fb      	ldr	r3, [r7, #12]
 801361a:	68db      	ldr	r3, [r3, #12]
 801361c:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8013620:	68fb      	ldr	r3, [r7, #12]
 8013622:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8013624:	68fb      	ldr	r3, [r7, #12]
 8013626:	68da      	ldr	r2, [r3, #12]
 8013628:	697b      	ldr	r3, [r7, #20]
 801362a:	029b      	lsls	r3, r3, #10
 801362c:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8013630:	431a      	orrs	r2, r3
 8013632:	68fb      	ldr	r3, [r7, #12]
 8013634:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8013636:	2300      	movs	r3, #0
}
 8013638:	4618      	mov	r0, r3
 801363a:	371c      	adds	r7, #28
 801363c:	46bd      	mov	sp, r7
 801363e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013642:	4770      	bx	lr
 8013644:	00d8acbf 	.word	0x00d8acbf
 8013648:	00e4e1c0 	.word	0x00e4e1c0
 801364c:	00f42400 	.word	0x00f42400
 8013650:	01067380 	.word	0x01067380
 8013654:	011a499f 	.word	0x011a499f
 8013658:	01312cff 	.word	0x01312cff
 801365c:	014ca43f 	.word	0x014ca43f
 8013660:	016e3600 	.word	0x016e3600
 8013664:	01a6ab1f 	.word	0x01a6ab1f
 8013668:	01e84800 	.word	0x01e84800

0801366c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801366c:	b480      	push	{r7}
 801366e:	b083      	sub	sp, #12
 8013670:	af00      	add	r7, sp, #0
 8013672:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8013674:	687b      	ldr	r3, [r7, #4]
 8013676:	689b      	ldr	r3, [r3, #8]
 8013678:	f043 0201 	orr.w	r2, r3, #1
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8013680:	2300      	movs	r3, #0
}
 8013682:	4618      	mov	r0, r3
 8013684:	370c      	adds	r7, #12
 8013686:	46bd      	mov	sp, r7
 8013688:	f85d 7b04 	ldr.w	r7, [sp], #4
 801368c:	4770      	bx	lr

0801368e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 801368e:	b480      	push	{r7}
 8013690:	b083      	sub	sp, #12
 8013692:	af00      	add	r7, sp, #0
 8013694:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8013696:	687b      	ldr	r3, [r7, #4]
 8013698:	689b      	ldr	r3, [r3, #8]
 801369a:	f023 0201 	bic.w	r2, r3, #1
 801369e:	687b      	ldr	r3, [r7, #4]
 80136a0:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80136a2:	2300      	movs	r3, #0
}
 80136a4:	4618      	mov	r0, r3
 80136a6:	370c      	adds	r7, #12
 80136a8:	46bd      	mov	sp, r7
 80136aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80136ae:	4770      	bx	lr

080136b0 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80136b0:	b580      	push	{r7, lr}
 80136b2:	b084      	sub	sp, #16
 80136b4:	af00      	add	r7, sp, #0
 80136b6:	6078      	str	r0, [r7, #4]
 80136b8:	460b      	mov	r3, r1
 80136ba:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80136bc:	2300      	movs	r3, #0
 80136be:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80136c0:	687b      	ldr	r3, [r7, #4]
 80136c2:	68db      	ldr	r3, [r3, #12]
 80136c4:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80136cc:	78fb      	ldrb	r3, [r7, #3]
 80136ce:	2b01      	cmp	r3, #1
 80136d0:	d115      	bne.n	80136fe <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80136d2:	687b      	ldr	r3, [r7, #4]
 80136d4:	68db      	ldr	r3, [r3, #12]
 80136d6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80136de:	2001      	movs	r0, #1
 80136e0:	f7f9 fcb2 	bl	800d048 <HAL_Delay>
      ms++;
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	3301      	adds	r3, #1
 80136e8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80136ea:	6878      	ldr	r0, [r7, #4]
 80136ec:	f001 fa45 	bl	8014b7a <USB_GetMode>
 80136f0:	4603      	mov	r3, r0
 80136f2:	2b01      	cmp	r3, #1
 80136f4:	d01e      	beq.n	8013734 <USB_SetCurrentMode+0x84>
 80136f6:	68fb      	ldr	r3, [r7, #12]
 80136f8:	2b31      	cmp	r3, #49	; 0x31
 80136fa:	d9f0      	bls.n	80136de <USB_SetCurrentMode+0x2e>
 80136fc:	e01a      	b.n	8013734 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80136fe:	78fb      	ldrb	r3, [r7, #3]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d115      	bne.n	8013730 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8013704:	687b      	ldr	r3, [r7, #4]
 8013706:	68db      	ldr	r3, [r3, #12]
 8013708:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 801370c:	687b      	ldr	r3, [r7, #4]
 801370e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8013710:	2001      	movs	r0, #1
 8013712:	f7f9 fc99 	bl	800d048 <HAL_Delay>
      ms++;
 8013716:	68fb      	ldr	r3, [r7, #12]
 8013718:	3301      	adds	r3, #1
 801371a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 801371c:	6878      	ldr	r0, [r7, #4]
 801371e:	f001 fa2c 	bl	8014b7a <USB_GetMode>
 8013722:	4603      	mov	r3, r0
 8013724:	2b00      	cmp	r3, #0
 8013726:	d005      	beq.n	8013734 <USB_SetCurrentMode+0x84>
 8013728:	68fb      	ldr	r3, [r7, #12]
 801372a:	2b31      	cmp	r3, #49	; 0x31
 801372c:	d9f0      	bls.n	8013710 <USB_SetCurrentMode+0x60>
 801372e:	e001      	b.n	8013734 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8013730:	2301      	movs	r3, #1
 8013732:	e005      	b.n	8013740 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	2b32      	cmp	r3, #50	; 0x32
 8013738:	d101      	bne.n	801373e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 801373a:	2301      	movs	r3, #1
 801373c:	e000      	b.n	8013740 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 801373e:	2300      	movs	r3, #0
}
 8013740:	4618      	mov	r0, r3
 8013742:	3710      	adds	r7, #16
 8013744:	46bd      	mov	sp, r7
 8013746:	bd80      	pop	{r7, pc}

08013748 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8013748:	b084      	sub	sp, #16
 801374a:	b580      	push	{r7, lr}
 801374c:	b086      	sub	sp, #24
 801374e:	af00      	add	r7, sp, #0
 8013750:	6078      	str	r0, [r7, #4]
 8013752:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8013756:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 801375a:	2300      	movs	r3, #0
 801375c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8013762:	2300      	movs	r3, #0
 8013764:	613b      	str	r3, [r7, #16]
 8013766:	e009      	b.n	801377c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8013768:	687a      	ldr	r2, [r7, #4]
 801376a:	693b      	ldr	r3, [r7, #16]
 801376c:	3340      	adds	r3, #64	; 0x40
 801376e:	009b      	lsls	r3, r3, #2
 8013770:	4413      	add	r3, r2
 8013772:	2200      	movs	r2, #0
 8013774:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8013776:	693b      	ldr	r3, [r7, #16]
 8013778:	3301      	adds	r3, #1
 801377a:	613b      	str	r3, [r7, #16]
 801377c:	693b      	ldr	r3, [r7, #16]
 801377e:	2b0e      	cmp	r3, #14
 8013780:	d9f2      	bls.n	8013768 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8013782:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8013784:	2b00      	cmp	r3, #0
 8013786:	d11c      	bne.n	80137c2 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8013788:	68fb      	ldr	r3, [r7, #12]
 801378a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801378e:	685b      	ldr	r3, [r3, #4]
 8013790:	68fa      	ldr	r2, [r7, #12]
 8013792:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8013796:	f043 0302 	orr.w	r3, r3, #2
 801379a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137a0:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80137a8:	687b      	ldr	r3, [r7, #4]
 80137aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137ac:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80137b4:	687b      	ldr	r3, [r7, #4]
 80137b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137b8:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	639a      	str	r2, [r3, #56]	; 0x38
 80137c0:	e00b      	b.n	80137da <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137c6:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80137ce:	687b      	ldr	r3, [r7, #4]
 80137d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80137d2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80137da:	68fb      	ldr	r3, [r7, #12]
 80137dc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80137e0:	461a      	mov	r2, r3
 80137e2:	2300      	movs	r3, #0
 80137e4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80137e6:	68fb      	ldr	r3, [r7, #12]
 80137e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80137ec:	4619      	mov	r1, r3
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80137f4:	461a      	mov	r2, r3
 80137f6:	680b      	ldr	r3, [r1, #0]
 80137f8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80137fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80137fc:	2b01      	cmp	r3, #1
 80137fe:	d10c      	bne.n	801381a <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8013800:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8013802:	2b00      	cmp	r3, #0
 8013804:	d104      	bne.n	8013810 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8013806:	2100      	movs	r1, #0
 8013808:	6878      	ldr	r0, [r7, #4]
 801380a:	f000 f965 	bl	8013ad8 <USB_SetDevSpeed>
 801380e:	e008      	b.n	8013822 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8013810:	2101      	movs	r1, #1
 8013812:	6878      	ldr	r0, [r7, #4]
 8013814:	f000 f960 	bl	8013ad8 <USB_SetDevSpeed>
 8013818:	e003      	b.n	8013822 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 801381a:	2103      	movs	r1, #3
 801381c:	6878      	ldr	r0, [r7, #4]
 801381e:	f000 f95b 	bl	8013ad8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8013822:	2110      	movs	r1, #16
 8013824:	6878      	ldr	r0, [r7, #4]
 8013826:	f000 f8f3 	bl	8013a10 <USB_FlushTxFifo>
 801382a:	4603      	mov	r3, r0
 801382c:	2b00      	cmp	r3, #0
 801382e:	d001      	beq.n	8013834 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8013830:	2301      	movs	r3, #1
 8013832:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8013834:	6878      	ldr	r0, [r7, #4]
 8013836:	f000 f91f 	bl	8013a78 <USB_FlushRxFifo>
 801383a:	4603      	mov	r3, r0
 801383c:	2b00      	cmp	r3, #0
 801383e:	d001      	beq.n	8013844 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8013840:	2301      	movs	r3, #1
 8013842:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8013844:	68fb      	ldr	r3, [r7, #12]
 8013846:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801384a:	461a      	mov	r2, r3
 801384c:	2300      	movs	r3, #0
 801384e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8013850:	68fb      	ldr	r3, [r7, #12]
 8013852:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013856:	461a      	mov	r2, r3
 8013858:	2300      	movs	r3, #0
 801385a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013862:	461a      	mov	r2, r3
 8013864:	2300      	movs	r3, #0
 8013866:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013868:	2300      	movs	r3, #0
 801386a:	613b      	str	r3, [r7, #16]
 801386c:	e043      	b.n	80138f6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801386e:	693b      	ldr	r3, [r7, #16]
 8013870:	015a      	lsls	r2, r3, #5
 8013872:	68fb      	ldr	r3, [r7, #12]
 8013874:	4413      	add	r3, r2
 8013876:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013880:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013884:	d118      	bne.n	80138b8 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8013886:	693b      	ldr	r3, [r7, #16]
 8013888:	2b00      	cmp	r3, #0
 801388a:	d10a      	bne.n	80138a2 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 801388c:	693b      	ldr	r3, [r7, #16]
 801388e:	015a      	lsls	r2, r3, #5
 8013890:	68fb      	ldr	r3, [r7, #12]
 8013892:	4413      	add	r3, r2
 8013894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013898:	461a      	mov	r2, r3
 801389a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 801389e:	6013      	str	r3, [r2, #0]
 80138a0:	e013      	b.n	80138ca <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80138a2:	693b      	ldr	r3, [r7, #16]
 80138a4:	015a      	lsls	r2, r3, #5
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	4413      	add	r3, r2
 80138aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138ae:	461a      	mov	r2, r3
 80138b0:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80138b4:	6013      	str	r3, [r2, #0]
 80138b6:	e008      	b.n	80138ca <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80138b8:	693b      	ldr	r3, [r7, #16]
 80138ba:	015a      	lsls	r2, r3, #5
 80138bc:	68fb      	ldr	r3, [r7, #12]
 80138be:	4413      	add	r3, r2
 80138c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138c4:	461a      	mov	r2, r3
 80138c6:	2300      	movs	r3, #0
 80138c8:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80138ca:	693b      	ldr	r3, [r7, #16]
 80138cc:	015a      	lsls	r2, r3, #5
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	4413      	add	r3, r2
 80138d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138d6:	461a      	mov	r2, r3
 80138d8:	2300      	movs	r3, #0
 80138da:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80138dc:	693b      	ldr	r3, [r7, #16]
 80138de:	015a      	lsls	r2, r3, #5
 80138e0:	68fb      	ldr	r3, [r7, #12]
 80138e2:	4413      	add	r3, r2
 80138e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80138e8:	461a      	mov	r2, r3
 80138ea:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80138ee:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80138f0:	693b      	ldr	r3, [r7, #16]
 80138f2:	3301      	adds	r3, #1
 80138f4:	613b      	str	r3, [r7, #16]
 80138f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138f8:	693a      	ldr	r2, [r7, #16]
 80138fa:	429a      	cmp	r2, r3
 80138fc:	d3b7      	bcc.n	801386e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80138fe:	2300      	movs	r3, #0
 8013900:	613b      	str	r3, [r7, #16]
 8013902:	e043      	b.n	801398c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013904:	693b      	ldr	r3, [r7, #16]
 8013906:	015a      	lsls	r2, r3, #5
 8013908:	68fb      	ldr	r3, [r7, #12]
 801390a:	4413      	add	r3, r2
 801390c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013910:	681b      	ldr	r3, [r3, #0]
 8013912:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013916:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801391a:	d118      	bne.n	801394e <USB_DevInit+0x206>
    {
      if (i == 0U)
 801391c:	693b      	ldr	r3, [r7, #16]
 801391e:	2b00      	cmp	r3, #0
 8013920:	d10a      	bne.n	8013938 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8013922:	693b      	ldr	r3, [r7, #16]
 8013924:	015a      	lsls	r2, r3, #5
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	4413      	add	r3, r2
 801392a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801392e:	461a      	mov	r2, r3
 8013930:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8013934:	6013      	str	r3, [r2, #0]
 8013936:	e013      	b.n	8013960 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8013938:	693b      	ldr	r3, [r7, #16]
 801393a:	015a      	lsls	r2, r3, #5
 801393c:	68fb      	ldr	r3, [r7, #12]
 801393e:	4413      	add	r3, r2
 8013940:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013944:	461a      	mov	r2, r3
 8013946:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 801394a:	6013      	str	r3, [r2, #0]
 801394c:	e008      	b.n	8013960 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 801394e:	693b      	ldr	r3, [r7, #16]
 8013950:	015a      	lsls	r2, r3, #5
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	4413      	add	r3, r2
 8013956:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801395a:	461a      	mov	r2, r3
 801395c:	2300      	movs	r3, #0
 801395e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8013960:	693b      	ldr	r3, [r7, #16]
 8013962:	015a      	lsls	r2, r3, #5
 8013964:	68fb      	ldr	r3, [r7, #12]
 8013966:	4413      	add	r3, r2
 8013968:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801396c:	461a      	mov	r2, r3
 801396e:	2300      	movs	r3, #0
 8013970:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8013972:	693b      	ldr	r3, [r7, #16]
 8013974:	015a      	lsls	r2, r3, #5
 8013976:	68fb      	ldr	r3, [r7, #12]
 8013978:	4413      	add	r3, r2
 801397a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801397e:	461a      	mov	r2, r3
 8013980:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8013984:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8013986:	693b      	ldr	r3, [r7, #16]
 8013988:	3301      	adds	r3, #1
 801398a:	613b      	str	r3, [r7, #16]
 801398c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801398e:	693a      	ldr	r2, [r7, #16]
 8013990:	429a      	cmp	r2, r3
 8013992:	d3b7      	bcc.n	8013904 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8013994:	68fb      	ldr	r3, [r7, #12]
 8013996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801399a:	691b      	ldr	r3, [r3, #16]
 801399c:	68fa      	ldr	r2, [r7, #12]
 801399e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80139a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80139a6:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	2200      	movs	r2, #0
 80139ac:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80139b4:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80139b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80139b8:	2b00      	cmp	r3, #0
 80139ba:	d105      	bne.n	80139c8 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	699b      	ldr	r3, [r3, #24]
 80139c0:	f043 0210 	orr.w	r2, r3, #16
 80139c4:	687b      	ldr	r3, [r7, #4]
 80139c6:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80139c8:	687b      	ldr	r3, [r7, #4]
 80139ca:	699a      	ldr	r2, [r3, #24]
 80139cc:	4b0f      	ldr	r3, [pc, #60]	; (8013a0c <USB_DevInit+0x2c4>)
 80139ce:	4313      	orrs	r3, r2
 80139d0:	687a      	ldr	r2, [r7, #4]
 80139d2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80139d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d005      	beq.n	80139e6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80139da:	687b      	ldr	r3, [r7, #4]
 80139dc:	699b      	ldr	r3, [r3, #24]
 80139de:	f043 0208 	orr.w	r2, r3, #8
 80139e2:	687b      	ldr	r3, [r7, #4]
 80139e4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80139e6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80139e8:	2b01      	cmp	r3, #1
 80139ea:	d107      	bne.n	80139fc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	699b      	ldr	r3, [r3, #24]
 80139f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80139f4:	f043 0304 	orr.w	r3, r3, #4
 80139f8:	687a      	ldr	r2, [r7, #4]
 80139fa:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80139fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80139fe:	4618      	mov	r0, r3
 8013a00:	3718      	adds	r7, #24
 8013a02:	46bd      	mov	sp, r7
 8013a04:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8013a08:	b004      	add	sp, #16
 8013a0a:	4770      	bx	lr
 8013a0c:	803c3800 	.word	0x803c3800

08013a10 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8013a10:	b480      	push	{r7}
 8013a12:	b085      	sub	sp, #20
 8013a14:	af00      	add	r7, sp, #0
 8013a16:	6078      	str	r0, [r7, #4]
 8013a18:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8013a1a:	2300      	movs	r3, #0
 8013a1c:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	3301      	adds	r3, #1
 8013a22:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	4a13      	ldr	r2, [pc, #76]	; (8013a74 <USB_FlushTxFifo+0x64>)
 8013a28:	4293      	cmp	r3, r2
 8013a2a:	d901      	bls.n	8013a30 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8013a2c:	2303      	movs	r3, #3
 8013a2e:	e01b      	b.n	8013a68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013a30:	687b      	ldr	r3, [r7, #4]
 8013a32:	691b      	ldr	r3, [r3, #16]
 8013a34:	2b00      	cmp	r3, #0
 8013a36:	daf2      	bge.n	8013a1e <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8013a38:	2300      	movs	r3, #0
 8013a3a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8013a3c:	683b      	ldr	r3, [r7, #0]
 8013a3e:	019b      	lsls	r3, r3, #6
 8013a40:	f043 0220 	orr.w	r2, r3, #32
 8013a44:	687b      	ldr	r3, [r7, #4]
 8013a46:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013a48:	68fb      	ldr	r3, [r7, #12]
 8013a4a:	3301      	adds	r3, #1
 8013a4c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013a4e:	68fb      	ldr	r3, [r7, #12]
 8013a50:	4a08      	ldr	r2, [pc, #32]	; (8013a74 <USB_FlushTxFifo+0x64>)
 8013a52:	4293      	cmp	r3, r2
 8013a54:	d901      	bls.n	8013a5a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8013a56:	2303      	movs	r3, #3
 8013a58:	e006      	b.n	8013a68 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	691b      	ldr	r3, [r3, #16]
 8013a5e:	f003 0320 	and.w	r3, r3, #32
 8013a62:	2b20      	cmp	r3, #32
 8013a64:	d0f0      	beq.n	8013a48 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8013a66:	2300      	movs	r3, #0
}
 8013a68:	4618      	mov	r0, r3
 8013a6a:	3714      	adds	r7, #20
 8013a6c:	46bd      	mov	sp, r7
 8013a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a72:	4770      	bx	lr
 8013a74:	00030d40 	.word	0x00030d40

08013a78 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8013a78:	b480      	push	{r7}
 8013a7a:	b085      	sub	sp, #20
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8013a80:	2300      	movs	r3, #0
 8013a82:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8013a84:	68fb      	ldr	r3, [r7, #12]
 8013a86:	3301      	adds	r3, #1
 8013a88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013a8a:	68fb      	ldr	r3, [r7, #12]
 8013a8c:	4a11      	ldr	r2, [pc, #68]	; (8013ad4 <USB_FlushRxFifo+0x5c>)
 8013a8e:	4293      	cmp	r3, r2
 8013a90:	d901      	bls.n	8013a96 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8013a92:	2303      	movs	r3, #3
 8013a94:	e018      	b.n	8013ac8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	691b      	ldr	r3, [r3, #16]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	daf2      	bge.n	8013a84 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8013a9e:	2300      	movs	r3, #0
 8013aa0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8013aa2:	687b      	ldr	r3, [r7, #4]
 8013aa4:	2210      	movs	r2, #16
 8013aa6:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8013aa8:	68fb      	ldr	r3, [r7, #12]
 8013aaa:	3301      	adds	r3, #1
 8013aac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8013aae:	68fb      	ldr	r3, [r7, #12]
 8013ab0:	4a08      	ldr	r2, [pc, #32]	; (8013ad4 <USB_FlushRxFifo+0x5c>)
 8013ab2:	4293      	cmp	r3, r2
 8013ab4:	d901      	bls.n	8013aba <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8013ab6:	2303      	movs	r3, #3
 8013ab8:	e006      	b.n	8013ac8 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8013aba:	687b      	ldr	r3, [r7, #4]
 8013abc:	691b      	ldr	r3, [r3, #16]
 8013abe:	f003 0310 	and.w	r3, r3, #16
 8013ac2:	2b10      	cmp	r3, #16
 8013ac4:	d0f0      	beq.n	8013aa8 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8013ac6:	2300      	movs	r3, #0
}
 8013ac8:	4618      	mov	r0, r3
 8013aca:	3714      	adds	r7, #20
 8013acc:	46bd      	mov	sp, r7
 8013ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ad2:	4770      	bx	lr
 8013ad4:	00030d40 	.word	0x00030d40

08013ad8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8013ad8:	b480      	push	{r7}
 8013ada:	b085      	sub	sp, #20
 8013adc:	af00      	add	r7, sp, #0
 8013ade:	6078      	str	r0, [r7, #4]
 8013ae0:	460b      	mov	r3, r1
 8013ae2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013ae4:	687b      	ldr	r3, [r7, #4]
 8013ae6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8013ae8:	68fb      	ldr	r3, [r7, #12]
 8013aea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013aee:	681a      	ldr	r2, [r3, #0]
 8013af0:	78fb      	ldrb	r3, [r7, #3]
 8013af2:	68f9      	ldr	r1, [r7, #12]
 8013af4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013af8:	4313      	orrs	r3, r2
 8013afa:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8013afc:	2300      	movs	r3, #0
}
 8013afe:	4618      	mov	r0, r3
 8013b00:	3714      	adds	r7, #20
 8013b02:	46bd      	mov	sp, r7
 8013b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b08:	4770      	bx	lr

08013b0a <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8013b0a:	b480      	push	{r7}
 8013b0c:	b087      	sub	sp, #28
 8013b0e:	af00      	add	r7, sp, #0
 8013b10:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b12:	687b      	ldr	r3, [r7, #4]
 8013b14:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8013b16:	693b      	ldr	r3, [r7, #16]
 8013b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b1c:	689b      	ldr	r3, [r3, #8]
 8013b1e:	f003 0306 	and.w	r3, r3, #6
 8013b22:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8013b24:	68fb      	ldr	r3, [r7, #12]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	d102      	bne.n	8013b30 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8013b2a:	2300      	movs	r3, #0
 8013b2c:	75fb      	strb	r3, [r7, #23]
 8013b2e:	e00a      	b.n	8013b46 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8013b30:	68fb      	ldr	r3, [r7, #12]
 8013b32:	2b02      	cmp	r3, #2
 8013b34:	d002      	beq.n	8013b3c <USB_GetDevSpeed+0x32>
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	2b06      	cmp	r3, #6
 8013b3a:	d102      	bne.n	8013b42 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8013b3c:	2302      	movs	r3, #2
 8013b3e:	75fb      	strb	r3, [r7, #23]
 8013b40:	e001      	b.n	8013b46 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8013b42:	230f      	movs	r3, #15
 8013b44:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8013b46:	7dfb      	ldrb	r3, [r7, #23]
}
 8013b48:	4618      	mov	r0, r3
 8013b4a:	371c      	adds	r7, #28
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b52:	4770      	bx	lr

08013b54 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013b54:	b480      	push	{r7}
 8013b56:	b085      	sub	sp, #20
 8013b58:	af00      	add	r7, sp, #0
 8013b5a:	6078      	str	r0, [r7, #4]
 8013b5c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013b5e:	687b      	ldr	r3, [r7, #4]
 8013b60:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013b62:	683b      	ldr	r3, [r7, #0]
 8013b64:	781b      	ldrb	r3, [r3, #0]
 8013b66:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8013b68:	683b      	ldr	r3, [r7, #0]
 8013b6a:	785b      	ldrb	r3, [r3, #1]
 8013b6c:	2b01      	cmp	r3, #1
 8013b6e:	d13a      	bne.n	8013be6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8013b70:	68fb      	ldr	r3, [r7, #12]
 8013b72:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013b76:	69da      	ldr	r2, [r3, #28]
 8013b78:	683b      	ldr	r3, [r7, #0]
 8013b7a:	781b      	ldrb	r3, [r3, #0]
 8013b7c:	f003 030f 	and.w	r3, r3, #15
 8013b80:	2101      	movs	r1, #1
 8013b82:	fa01 f303 	lsl.w	r3, r1, r3
 8013b86:	b29b      	uxth	r3, r3
 8013b88:	68f9      	ldr	r1, [r7, #12]
 8013b8a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013b8e:	4313      	orrs	r3, r2
 8013b90:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8013b92:	68bb      	ldr	r3, [r7, #8]
 8013b94:	015a      	lsls	r2, r3, #5
 8013b96:	68fb      	ldr	r3, [r7, #12]
 8013b98:	4413      	add	r3, r2
 8013b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013b9e:	681b      	ldr	r3, [r3, #0]
 8013ba0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d155      	bne.n	8013c54 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013ba8:	68bb      	ldr	r3, [r7, #8]
 8013baa:	015a      	lsls	r2, r3, #5
 8013bac:	68fb      	ldr	r3, [r7, #12]
 8013bae:	4413      	add	r3, r2
 8013bb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013bb4:	681a      	ldr	r2, [r3, #0]
 8013bb6:	683b      	ldr	r3, [r7, #0]
 8013bb8:	68db      	ldr	r3, [r3, #12]
 8013bba:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013bbe:	683b      	ldr	r3, [r7, #0]
 8013bc0:	791b      	ldrb	r3, [r3, #4]
 8013bc2:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013bc4:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8013bc6:	68bb      	ldr	r3, [r7, #8]
 8013bc8:	059b      	lsls	r3, r3, #22
 8013bca:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8013bcc:	4313      	orrs	r3, r2
 8013bce:	68ba      	ldr	r2, [r7, #8]
 8013bd0:	0151      	lsls	r1, r2, #5
 8013bd2:	68fa      	ldr	r2, [r7, #12]
 8013bd4:	440a      	add	r2, r1
 8013bd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013bda:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013bde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013be2:	6013      	str	r3, [r2, #0]
 8013be4:	e036      	b.n	8013c54 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013bec:	69da      	ldr	r2, [r3, #28]
 8013bee:	683b      	ldr	r3, [r7, #0]
 8013bf0:	781b      	ldrb	r3, [r3, #0]
 8013bf2:	f003 030f 	and.w	r3, r3, #15
 8013bf6:	2101      	movs	r1, #1
 8013bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8013bfc:	041b      	lsls	r3, r3, #16
 8013bfe:	68f9      	ldr	r1, [r7, #12]
 8013c00:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013c04:	4313      	orrs	r3, r2
 8013c06:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8013c08:	68bb      	ldr	r3, [r7, #8]
 8013c0a:	015a      	lsls	r2, r3, #5
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	4413      	add	r3, r2
 8013c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8013c1a:	2b00      	cmp	r3, #0
 8013c1c:	d11a      	bne.n	8013c54 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013c1e:	68bb      	ldr	r3, [r7, #8]
 8013c20:	015a      	lsls	r2, r3, #5
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	4413      	add	r3, r2
 8013c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013c2a:	681a      	ldr	r2, [r3, #0]
 8013c2c:	683b      	ldr	r3, [r7, #0]
 8013c2e:	68db      	ldr	r3, [r3, #12]
 8013c30:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8013c34:	683b      	ldr	r3, [r7, #0]
 8013c36:	791b      	ldrb	r3, [r3, #4]
 8013c38:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8013c3a:	430b      	orrs	r3, r1
 8013c3c:	4313      	orrs	r3, r2
 8013c3e:	68ba      	ldr	r2, [r7, #8]
 8013c40:	0151      	lsls	r1, r2, #5
 8013c42:	68fa      	ldr	r2, [r7, #12]
 8013c44:	440a      	add	r2, r1
 8013c46:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013c4a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8013c4e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8013c52:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8013c54:	2300      	movs	r3, #0
}
 8013c56:	4618      	mov	r0, r3
 8013c58:	3714      	adds	r7, #20
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013c60:	4770      	bx	lr
	...

08013c64 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8013c64:	b480      	push	{r7}
 8013c66:	b085      	sub	sp, #20
 8013c68:	af00      	add	r7, sp, #0
 8013c6a:	6078      	str	r0, [r7, #4]
 8013c6c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013c6e:	687b      	ldr	r3, [r7, #4]
 8013c70:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8013c72:	683b      	ldr	r3, [r7, #0]
 8013c74:	781b      	ldrb	r3, [r3, #0]
 8013c76:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8013c78:	683b      	ldr	r3, [r7, #0]
 8013c7a:	785b      	ldrb	r3, [r3, #1]
 8013c7c:	2b01      	cmp	r3, #1
 8013c7e:	d161      	bne.n	8013d44 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8013c80:	68bb      	ldr	r3, [r7, #8]
 8013c82:	015a      	lsls	r2, r3, #5
 8013c84:	68fb      	ldr	r3, [r7, #12]
 8013c86:	4413      	add	r3, r2
 8013c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013c92:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013c96:	d11f      	bne.n	8013cd8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8013c98:	68bb      	ldr	r3, [r7, #8]
 8013c9a:	015a      	lsls	r2, r3, #5
 8013c9c:	68fb      	ldr	r3, [r7, #12]
 8013c9e:	4413      	add	r3, r2
 8013ca0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ca4:	681b      	ldr	r3, [r3, #0]
 8013ca6:	68ba      	ldr	r2, [r7, #8]
 8013ca8:	0151      	lsls	r1, r2, #5
 8013caa:	68fa      	ldr	r2, [r7, #12]
 8013cac:	440a      	add	r2, r1
 8013cae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013cb2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013cb6:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8013cb8:	68bb      	ldr	r3, [r7, #8]
 8013cba:	015a      	lsls	r2, r3, #5
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	4413      	add	r3, r2
 8013cc0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013cc4:	681b      	ldr	r3, [r3, #0]
 8013cc6:	68ba      	ldr	r2, [r7, #8]
 8013cc8:	0151      	lsls	r1, r2, #5
 8013cca:	68fa      	ldr	r2, [r7, #12]
 8013ccc:	440a      	add	r2, r1
 8013cce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013cd2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013cd6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013cd8:	68fb      	ldr	r3, [r7, #12]
 8013cda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013cde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013ce0:	683b      	ldr	r3, [r7, #0]
 8013ce2:	781b      	ldrb	r3, [r3, #0]
 8013ce4:	f003 030f 	and.w	r3, r3, #15
 8013ce8:	2101      	movs	r1, #1
 8013cea:	fa01 f303 	lsl.w	r3, r1, r3
 8013cee:	b29b      	uxth	r3, r3
 8013cf0:	43db      	mvns	r3, r3
 8013cf2:	68f9      	ldr	r1, [r7, #12]
 8013cf4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013cf8:	4013      	ands	r3, r2
 8013cfa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8013cfc:	68fb      	ldr	r3, [r7, #12]
 8013cfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013d02:	69da      	ldr	r2, [r3, #28]
 8013d04:	683b      	ldr	r3, [r7, #0]
 8013d06:	781b      	ldrb	r3, [r3, #0]
 8013d08:	f003 030f 	and.w	r3, r3, #15
 8013d0c:	2101      	movs	r1, #1
 8013d0e:	fa01 f303 	lsl.w	r3, r1, r3
 8013d12:	b29b      	uxth	r3, r3
 8013d14:	43db      	mvns	r3, r3
 8013d16:	68f9      	ldr	r1, [r7, #12]
 8013d18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013d1c:	4013      	ands	r3, r2
 8013d1e:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8013d20:	68bb      	ldr	r3, [r7, #8]
 8013d22:	015a      	lsls	r2, r3, #5
 8013d24:	68fb      	ldr	r3, [r7, #12]
 8013d26:	4413      	add	r3, r2
 8013d28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d2c:	681a      	ldr	r2, [r3, #0]
 8013d2e:	68bb      	ldr	r3, [r7, #8]
 8013d30:	0159      	lsls	r1, r3, #5
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	440b      	add	r3, r1
 8013d36:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013d3a:	4619      	mov	r1, r3
 8013d3c:	4b35      	ldr	r3, [pc, #212]	; (8013e14 <USB_DeactivateEndpoint+0x1b0>)
 8013d3e:	4013      	ands	r3, r2
 8013d40:	600b      	str	r3, [r1, #0]
 8013d42:	e060      	b.n	8013e06 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8013d44:	68bb      	ldr	r3, [r7, #8]
 8013d46:	015a      	lsls	r2, r3, #5
 8013d48:	68fb      	ldr	r3, [r7, #12]
 8013d4a:	4413      	add	r3, r2
 8013d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d50:	681b      	ldr	r3, [r3, #0]
 8013d52:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8013d56:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8013d5a:	d11f      	bne.n	8013d9c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8013d5c:	68bb      	ldr	r3, [r7, #8]
 8013d5e:	015a      	lsls	r2, r3, #5
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	4413      	add	r3, r2
 8013d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d68:	681b      	ldr	r3, [r3, #0]
 8013d6a:	68ba      	ldr	r2, [r7, #8]
 8013d6c:	0151      	lsls	r1, r2, #5
 8013d6e:	68fa      	ldr	r2, [r7, #12]
 8013d70:	440a      	add	r2, r1
 8013d72:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d76:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8013d7a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8013d7c:	68bb      	ldr	r3, [r7, #8]
 8013d7e:	015a      	lsls	r2, r3, #5
 8013d80:	68fb      	ldr	r3, [r7, #12]
 8013d82:	4413      	add	r3, r2
 8013d84:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	68ba      	ldr	r2, [r7, #8]
 8013d8c:	0151      	lsls	r1, r2, #5
 8013d8e:	68fa      	ldr	r2, [r7, #12]
 8013d90:	440a      	add	r2, r1
 8013d92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8013d96:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8013d9a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013d9c:	68fb      	ldr	r3, [r7, #12]
 8013d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013da2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8013da4:	683b      	ldr	r3, [r7, #0]
 8013da6:	781b      	ldrb	r3, [r3, #0]
 8013da8:	f003 030f 	and.w	r3, r3, #15
 8013dac:	2101      	movs	r1, #1
 8013dae:	fa01 f303 	lsl.w	r3, r1, r3
 8013db2:	041b      	lsls	r3, r3, #16
 8013db4:	43db      	mvns	r3, r3
 8013db6:	68f9      	ldr	r1, [r7, #12]
 8013db8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013dbc:	4013      	ands	r3, r2
 8013dbe:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8013dc0:	68fb      	ldr	r3, [r7, #12]
 8013dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013dc6:	69da      	ldr	r2, [r3, #28]
 8013dc8:	683b      	ldr	r3, [r7, #0]
 8013dca:	781b      	ldrb	r3, [r3, #0]
 8013dcc:	f003 030f 	and.w	r3, r3, #15
 8013dd0:	2101      	movs	r1, #1
 8013dd2:	fa01 f303 	lsl.w	r3, r1, r3
 8013dd6:	041b      	lsls	r3, r3, #16
 8013dd8:	43db      	mvns	r3, r3
 8013dda:	68f9      	ldr	r1, [r7, #12]
 8013ddc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8013de0:	4013      	ands	r3, r2
 8013de2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8013de4:	68bb      	ldr	r3, [r7, #8]
 8013de6:	015a      	lsls	r2, r3, #5
 8013de8:	68fb      	ldr	r3, [r7, #12]
 8013dea:	4413      	add	r3, r2
 8013dec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013df0:	681a      	ldr	r2, [r3, #0]
 8013df2:	68bb      	ldr	r3, [r7, #8]
 8013df4:	0159      	lsls	r1, r3, #5
 8013df6:	68fb      	ldr	r3, [r7, #12]
 8013df8:	440b      	add	r3, r1
 8013dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8013dfe:	4619      	mov	r1, r3
 8013e00:	4b05      	ldr	r3, [pc, #20]	; (8013e18 <USB_DeactivateEndpoint+0x1b4>)
 8013e02:	4013      	ands	r3, r2
 8013e04:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8013e06:	2300      	movs	r3, #0
}
 8013e08:	4618      	mov	r0, r3
 8013e0a:	3714      	adds	r7, #20
 8013e0c:	46bd      	mov	sp, r7
 8013e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e12:	4770      	bx	lr
 8013e14:	ec337800 	.word	0xec337800
 8013e18:	eff37800 	.word	0xeff37800

08013e1c <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8013e1c:	b580      	push	{r7, lr}
 8013e1e:	b08a      	sub	sp, #40	; 0x28
 8013e20:	af02      	add	r7, sp, #8
 8013e22:	60f8      	str	r0, [r7, #12]
 8013e24:	60b9      	str	r1, [r7, #8]
 8013e26:	4613      	mov	r3, r2
 8013e28:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8013e2a:	68fb      	ldr	r3, [r7, #12]
 8013e2c:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8013e2e:	68bb      	ldr	r3, [r7, #8]
 8013e30:	781b      	ldrb	r3, [r3, #0]
 8013e32:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8013e34:	68bb      	ldr	r3, [r7, #8]
 8013e36:	785b      	ldrb	r3, [r3, #1]
 8013e38:	2b01      	cmp	r3, #1
 8013e3a:	f040 815c 	bne.w	80140f6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8013e3e:	68bb      	ldr	r3, [r7, #8]
 8013e40:	699b      	ldr	r3, [r3, #24]
 8013e42:	2b00      	cmp	r3, #0
 8013e44:	d132      	bne.n	8013eac <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013e46:	69bb      	ldr	r3, [r7, #24]
 8013e48:	015a      	lsls	r2, r3, #5
 8013e4a:	69fb      	ldr	r3, [r7, #28]
 8013e4c:	4413      	add	r3, r2
 8013e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e52:	691b      	ldr	r3, [r3, #16]
 8013e54:	69ba      	ldr	r2, [r7, #24]
 8013e56:	0151      	lsls	r1, r2, #5
 8013e58:	69fa      	ldr	r2, [r7, #28]
 8013e5a:	440a      	add	r2, r1
 8013e5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013e60:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8013e64:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8013e68:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8013e6a:	69bb      	ldr	r3, [r7, #24]
 8013e6c:	015a      	lsls	r2, r3, #5
 8013e6e:	69fb      	ldr	r3, [r7, #28]
 8013e70:	4413      	add	r3, r2
 8013e72:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e76:	691b      	ldr	r3, [r3, #16]
 8013e78:	69ba      	ldr	r2, [r7, #24]
 8013e7a:	0151      	lsls	r1, r2, #5
 8013e7c:	69fa      	ldr	r2, [r7, #28]
 8013e7e:	440a      	add	r2, r1
 8013e80:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013e84:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8013e88:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013e8a:	69bb      	ldr	r3, [r7, #24]
 8013e8c:	015a      	lsls	r2, r3, #5
 8013e8e:	69fb      	ldr	r3, [r7, #28]
 8013e90:	4413      	add	r3, r2
 8013e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013e96:	691b      	ldr	r3, [r3, #16]
 8013e98:	69ba      	ldr	r2, [r7, #24]
 8013e9a:	0151      	lsls	r1, r2, #5
 8013e9c:	69fa      	ldr	r2, [r7, #28]
 8013e9e:	440a      	add	r2, r1
 8013ea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ea4:	0cdb      	lsrs	r3, r3, #19
 8013ea6:	04db      	lsls	r3, r3, #19
 8013ea8:	6113      	str	r3, [r2, #16]
 8013eaa:	e074      	b.n	8013f96 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8013eac:	69bb      	ldr	r3, [r7, #24]
 8013eae:	015a      	lsls	r2, r3, #5
 8013eb0:	69fb      	ldr	r3, [r7, #28]
 8013eb2:	4413      	add	r3, r2
 8013eb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013eb8:	691b      	ldr	r3, [r3, #16]
 8013eba:	69ba      	ldr	r2, [r7, #24]
 8013ebc:	0151      	lsls	r1, r2, #5
 8013ebe:	69fa      	ldr	r2, [r7, #28]
 8013ec0:	440a      	add	r2, r1
 8013ec2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ec6:	0cdb      	lsrs	r3, r3, #19
 8013ec8:	04db      	lsls	r3, r3, #19
 8013eca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8013ecc:	69bb      	ldr	r3, [r7, #24]
 8013ece:	015a      	lsls	r2, r3, #5
 8013ed0:	69fb      	ldr	r3, [r7, #28]
 8013ed2:	4413      	add	r3, r2
 8013ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ed8:	691b      	ldr	r3, [r3, #16]
 8013eda:	69ba      	ldr	r2, [r7, #24]
 8013edc:	0151      	lsls	r1, r2, #5
 8013ede:	69fa      	ldr	r2, [r7, #28]
 8013ee0:	440a      	add	r2, r1
 8013ee2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013ee6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8013eea:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8013eee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013ef0:	69bb      	ldr	r3, [r7, #24]
 8013ef2:	015a      	lsls	r2, r3, #5
 8013ef4:	69fb      	ldr	r3, [r7, #28]
 8013ef6:	4413      	add	r3, r2
 8013ef8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013efc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8013efe:	68bb      	ldr	r3, [r7, #8]
 8013f00:	6999      	ldr	r1, [r3, #24]
 8013f02:	68bb      	ldr	r3, [r7, #8]
 8013f04:	68db      	ldr	r3, [r3, #12]
 8013f06:	440b      	add	r3, r1
 8013f08:	1e59      	subs	r1, r3, #1
 8013f0a:	68bb      	ldr	r3, [r7, #8]
 8013f0c:	68db      	ldr	r3, [r3, #12]
 8013f0e:	fbb1 f3f3 	udiv	r3, r1, r3
 8013f12:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8013f14:	4b9d      	ldr	r3, [pc, #628]	; (801418c <USB_EPStartXfer+0x370>)
 8013f16:	400b      	ands	r3, r1
 8013f18:	69b9      	ldr	r1, [r7, #24]
 8013f1a:	0148      	lsls	r0, r1, #5
 8013f1c:	69f9      	ldr	r1, [r7, #28]
 8013f1e:	4401      	add	r1, r0
 8013f20:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013f24:	4313      	orrs	r3, r2
 8013f26:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8013f28:	69bb      	ldr	r3, [r7, #24]
 8013f2a:	015a      	lsls	r2, r3, #5
 8013f2c:	69fb      	ldr	r3, [r7, #28]
 8013f2e:	4413      	add	r3, r2
 8013f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f34:	691a      	ldr	r2, [r3, #16]
 8013f36:	68bb      	ldr	r3, [r7, #8]
 8013f38:	699b      	ldr	r3, [r3, #24]
 8013f3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8013f3e:	69b9      	ldr	r1, [r7, #24]
 8013f40:	0148      	lsls	r0, r1, #5
 8013f42:	69f9      	ldr	r1, [r7, #28]
 8013f44:	4401      	add	r1, r0
 8013f46:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8013f4a:	4313      	orrs	r3, r2
 8013f4c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8013f4e:	68bb      	ldr	r3, [r7, #8]
 8013f50:	791b      	ldrb	r3, [r3, #4]
 8013f52:	2b01      	cmp	r3, #1
 8013f54:	d11f      	bne.n	8013f96 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8013f56:	69bb      	ldr	r3, [r7, #24]
 8013f58:	015a      	lsls	r2, r3, #5
 8013f5a:	69fb      	ldr	r3, [r7, #28]
 8013f5c:	4413      	add	r3, r2
 8013f5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f62:	691b      	ldr	r3, [r3, #16]
 8013f64:	69ba      	ldr	r2, [r7, #24]
 8013f66:	0151      	lsls	r1, r2, #5
 8013f68:	69fa      	ldr	r2, [r7, #28]
 8013f6a:	440a      	add	r2, r1
 8013f6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013f70:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8013f74:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8013f76:	69bb      	ldr	r3, [r7, #24]
 8013f78:	015a      	lsls	r2, r3, #5
 8013f7a:	69fb      	ldr	r3, [r7, #28]
 8013f7c:	4413      	add	r3, r2
 8013f7e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013f82:	691b      	ldr	r3, [r3, #16]
 8013f84:	69ba      	ldr	r2, [r7, #24]
 8013f86:	0151      	lsls	r1, r2, #5
 8013f88:	69fa      	ldr	r2, [r7, #28]
 8013f8a:	440a      	add	r2, r1
 8013f8c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013f90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013f94:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8013f96:	79fb      	ldrb	r3, [r7, #7]
 8013f98:	2b01      	cmp	r3, #1
 8013f9a:	d14b      	bne.n	8014034 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8013f9c:	68bb      	ldr	r3, [r7, #8]
 8013f9e:	695b      	ldr	r3, [r3, #20]
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	d009      	beq.n	8013fb8 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8013fa4:	69bb      	ldr	r3, [r7, #24]
 8013fa6:	015a      	lsls	r2, r3, #5
 8013fa8:	69fb      	ldr	r3, [r7, #28]
 8013faa:	4413      	add	r3, r2
 8013fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fb0:	461a      	mov	r2, r3
 8013fb2:	68bb      	ldr	r3, [r7, #8]
 8013fb4:	695b      	ldr	r3, [r3, #20]
 8013fb6:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8013fb8:	68bb      	ldr	r3, [r7, #8]
 8013fba:	791b      	ldrb	r3, [r3, #4]
 8013fbc:	2b01      	cmp	r3, #1
 8013fbe:	d128      	bne.n	8014012 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8013fc0:	69fb      	ldr	r3, [r7, #28]
 8013fc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8013fc6:	689b      	ldr	r3, [r3, #8]
 8013fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8013fcc:	2b00      	cmp	r3, #0
 8013fce:	d110      	bne.n	8013ff2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8013fd0:	69bb      	ldr	r3, [r7, #24]
 8013fd2:	015a      	lsls	r2, r3, #5
 8013fd4:	69fb      	ldr	r3, [r7, #28]
 8013fd6:	4413      	add	r3, r2
 8013fd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	69ba      	ldr	r2, [r7, #24]
 8013fe0:	0151      	lsls	r1, r2, #5
 8013fe2:	69fa      	ldr	r2, [r7, #28]
 8013fe4:	440a      	add	r2, r1
 8013fe6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8013fea:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8013fee:	6013      	str	r3, [r2, #0]
 8013ff0:	e00f      	b.n	8014012 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8013ff2:	69bb      	ldr	r3, [r7, #24]
 8013ff4:	015a      	lsls	r2, r3, #5
 8013ff6:	69fb      	ldr	r3, [r7, #28]
 8013ff8:	4413      	add	r3, r2
 8013ffa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8013ffe:	681b      	ldr	r3, [r3, #0]
 8014000:	69ba      	ldr	r2, [r7, #24]
 8014002:	0151      	lsls	r1, r2, #5
 8014004:	69fa      	ldr	r2, [r7, #28]
 8014006:	440a      	add	r2, r1
 8014008:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801400c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014010:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014012:	69bb      	ldr	r3, [r7, #24]
 8014014:	015a      	lsls	r2, r3, #5
 8014016:	69fb      	ldr	r3, [r7, #28]
 8014018:	4413      	add	r3, r2
 801401a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	69ba      	ldr	r2, [r7, #24]
 8014022:	0151      	lsls	r1, r2, #5
 8014024:	69fa      	ldr	r2, [r7, #28]
 8014026:	440a      	add	r2, r1
 8014028:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801402c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014030:	6013      	str	r3, [r2, #0]
 8014032:	e133      	b.n	801429c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8014034:	69bb      	ldr	r3, [r7, #24]
 8014036:	015a      	lsls	r2, r3, #5
 8014038:	69fb      	ldr	r3, [r7, #28]
 801403a:	4413      	add	r3, r2
 801403c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014040:	681b      	ldr	r3, [r3, #0]
 8014042:	69ba      	ldr	r2, [r7, #24]
 8014044:	0151      	lsls	r1, r2, #5
 8014046:	69fa      	ldr	r2, [r7, #28]
 8014048:	440a      	add	r2, r1
 801404a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801404e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8014052:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8014054:	68bb      	ldr	r3, [r7, #8]
 8014056:	791b      	ldrb	r3, [r3, #4]
 8014058:	2b01      	cmp	r3, #1
 801405a:	d015      	beq.n	8014088 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 801405c:	68bb      	ldr	r3, [r7, #8]
 801405e:	699b      	ldr	r3, [r3, #24]
 8014060:	2b00      	cmp	r3, #0
 8014062:	f000 811b 	beq.w	801429c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014066:	69fb      	ldr	r3, [r7, #28]
 8014068:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801406c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 801406e:	68bb      	ldr	r3, [r7, #8]
 8014070:	781b      	ldrb	r3, [r3, #0]
 8014072:	f003 030f 	and.w	r3, r3, #15
 8014076:	2101      	movs	r1, #1
 8014078:	fa01 f303 	lsl.w	r3, r1, r3
 801407c:	69f9      	ldr	r1, [r7, #28]
 801407e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014082:	4313      	orrs	r3, r2
 8014084:	634b      	str	r3, [r1, #52]	; 0x34
 8014086:	e109      	b.n	801429c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8014088:	69fb      	ldr	r3, [r7, #28]
 801408a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801408e:	689b      	ldr	r3, [r3, #8]
 8014090:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014094:	2b00      	cmp	r3, #0
 8014096:	d110      	bne.n	80140ba <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8014098:	69bb      	ldr	r3, [r7, #24]
 801409a:	015a      	lsls	r2, r3, #5
 801409c:	69fb      	ldr	r3, [r7, #28]
 801409e:	4413      	add	r3, r2
 80140a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	69ba      	ldr	r2, [r7, #24]
 80140a8:	0151      	lsls	r1, r2, #5
 80140aa:	69fa      	ldr	r2, [r7, #28]
 80140ac:	440a      	add	r2, r1
 80140ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80140b2:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80140b6:	6013      	str	r3, [r2, #0]
 80140b8:	e00f      	b.n	80140da <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80140ba:	69bb      	ldr	r3, [r7, #24]
 80140bc:	015a      	lsls	r2, r3, #5
 80140be:	69fb      	ldr	r3, [r7, #28]
 80140c0:	4413      	add	r3, r2
 80140c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80140c6:	681b      	ldr	r3, [r3, #0]
 80140c8:	69ba      	ldr	r2, [r7, #24]
 80140ca:	0151      	lsls	r1, r2, #5
 80140cc:	69fa      	ldr	r2, [r7, #28]
 80140ce:	440a      	add	r2, r1
 80140d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80140d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80140d8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80140da:	68bb      	ldr	r3, [r7, #8]
 80140dc:	6919      	ldr	r1, [r3, #16]
 80140de:	68bb      	ldr	r3, [r7, #8]
 80140e0:	781a      	ldrb	r2, [r3, #0]
 80140e2:	68bb      	ldr	r3, [r7, #8]
 80140e4:	699b      	ldr	r3, [r3, #24]
 80140e6:	b298      	uxth	r0, r3
 80140e8:	79fb      	ldrb	r3, [r7, #7]
 80140ea:	9300      	str	r3, [sp, #0]
 80140ec:	4603      	mov	r3, r0
 80140ee:	68f8      	ldr	r0, [r7, #12]
 80140f0:	f000 fade 	bl	80146b0 <USB_WritePacket>
 80140f4:	e0d2      	b.n	801429c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80140f6:	69bb      	ldr	r3, [r7, #24]
 80140f8:	015a      	lsls	r2, r3, #5
 80140fa:	69fb      	ldr	r3, [r7, #28]
 80140fc:	4413      	add	r3, r2
 80140fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014102:	691b      	ldr	r3, [r3, #16]
 8014104:	69ba      	ldr	r2, [r7, #24]
 8014106:	0151      	lsls	r1, r2, #5
 8014108:	69fa      	ldr	r2, [r7, #28]
 801410a:	440a      	add	r2, r1
 801410c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014110:	0cdb      	lsrs	r3, r3, #19
 8014112:	04db      	lsls	r3, r3, #19
 8014114:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8014116:	69bb      	ldr	r3, [r7, #24]
 8014118:	015a      	lsls	r2, r3, #5
 801411a:	69fb      	ldr	r3, [r7, #28]
 801411c:	4413      	add	r3, r2
 801411e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014122:	691b      	ldr	r3, [r3, #16]
 8014124:	69ba      	ldr	r2, [r7, #24]
 8014126:	0151      	lsls	r1, r2, #5
 8014128:	69fa      	ldr	r2, [r7, #28]
 801412a:	440a      	add	r2, r1
 801412c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014130:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8014134:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8014138:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 801413a:	68bb      	ldr	r3, [r7, #8]
 801413c:	699b      	ldr	r3, [r3, #24]
 801413e:	2b00      	cmp	r3, #0
 8014140:	d126      	bne.n	8014190 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8014142:	69bb      	ldr	r3, [r7, #24]
 8014144:	015a      	lsls	r2, r3, #5
 8014146:	69fb      	ldr	r3, [r7, #28]
 8014148:	4413      	add	r3, r2
 801414a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801414e:	691a      	ldr	r2, [r3, #16]
 8014150:	68bb      	ldr	r3, [r7, #8]
 8014152:	68db      	ldr	r3, [r3, #12]
 8014154:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014158:	69b9      	ldr	r1, [r7, #24]
 801415a:	0148      	lsls	r0, r1, #5
 801415c:	69f9      	ldr	r1, [r7, #28]
 801415e:	4401      	add	r1, r0
 8014160:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014164:	4313      	orrs	r3, r2
 8014166:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014168:	69bb      	ldr	r3, [r7, #24]
 801416a:	015a      	lsls	r2, r3, #5
 801416c:	69fb      	ldr	r3, [r7, #28]
 801416e:	4413      	add	r3, r2
 8014170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014174:	691b      	ldr	r3, [r3, #16]
 8014176:	69ba      	ldr	r2, [r7, #24]
 8014178:	0151      	lsls	r1, r2, #5
 801417a:	69fa      	ldr	r2, [r7, #28]
 801417c:	440a      	add	r2, r1
 801417e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014182:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014186:	6113      	str	r3, [r2, #16]
 8014188:	e03a      	b.n	8014200 <USB_EPStartXfer+0x3e4>
 801418a:	bf00      	nop
 801418c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8014190:	68bb      	ldr	r3, [r7, #8]
 8014192:	699a      	ldr	r2, [r3, #24]
 8014194:	68bb      	ldr	r3, [r7, #8]
 8014196:	68db      	ldr	r3, [r3, #12]
 8014198:	4413      	add	r3, r2
 801419a:	1e5a      	subs	r2, r3, #1
 801419c:	68bb      	ldr	r3, [r7, #8]
 801419e:	68db      	ldr	r3, [r3, #12]
 80141a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80141a4:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80141a6:	68bb      	ldr	r3, [r7, #8]
 80141a8:	68db      	ldr	r3, [r3, #12]
 80141aa:	8afa      	ldrh	r2, [r7, #22]
 80141ac:	fb03 f202 	mul.w	r2, r3, r2
 80141b0:	68bb      	ldr	r3, [r7, #8]
 80141b2:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80141b4:	69bb      	ldr	r3, [r7, #24]
 80141b6:	015a      	lsls	r2, r3, #5
 80141b8:	69fb      	ldr	r3, [r7, #28]
 80141ba:	4413      	add	r3, r2
 80141bc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141c0:	691a      	ldr	r2, [r3, #16]
 80141c2:	8afb      	ldrh	r3, [r7, #22]
 80141c4:	04d9      	lsls	r1, r3, #19
 80141c6:	4b38      	ldr	r3, [pc, #224]	; (80142a8 <USB_EPStartXfer+0x48c>)
 80141c8:	400b      	ands	r3, r1
 80141ca:	69b9      	ldr	r1, [r7, #24]
 80141cc:	0148      	lsls	r0, r1, #5
 80141ce:	69f9      	ldr	r1, [r7, #28]
 80141d0:	4401      	add	r1, r0
 80141d2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80141d6:	4313      	orrs	r3, r2
 80141d8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80141da:	69bb      	ldr	r3, [r7, #24]
 80141dc:	015a      	lsls	r2, r3, #5
 80141de:	69fb      	ldr	r3, [r7, #28]
 80141e0:	4413      	add	r3, r2
 80141e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80141e6:	691a      	ldr	r2, [r3, #16]
 80141e8:	68bb      	ldr	r3, [r7, #8]
 80141ea:	69db      	ldr	r3, [r3, #28]
 80141ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80141f0:	69b9      	ldr	r1, [r7, #24]
 80141f2:	0148      	lsls	r0, r1, #5
 80141f4:	69f9      	ldr	r1, [r7, #28]
 80141f6:	4401      	add	r1, r0
 80141f8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80141fc:	4313      	orrs	r3, r2
 80141fe:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8014200:	79fb      	ldrb	r3, [r7, #7]
 8014202:	2b01      	cmp	r3, #1
 8014204:	d10d      	bne.n	8014222 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014206:	68bb      	ldr	r3, [r7, #8]
 8014208:	691b      	ldr	r3, [r3, #16]
 801420a:	2b00      	cmp	r3, #0
 801420c:	d009      	beq.n	8014222 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801420e:	68bb      	ldr	r3, [r7, #8]
 8014210:	6919      	ldr	r1, [r3, #16]
 8014212:	69bb      	ldr	r3, [r7, #24]
 8014214:	015a      	lsls	r2, r3, #5
 8014216:	69fb      	ldr	r3, [r7, #28]
 8014218:	4413      	add	r3, r2
 801421a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801421e:	460a      	mov	r2, r1
 8014220:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8014222:	68bb      	ldr	r3, [r7, #8]
 8014224:	791b      	ldrb	r3, [r3, #4]
 8014226:	2b01      	cmp	r3, #1
 8014228:	d128      	bne.n	801427c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 801422a:	69fb      	ldr	r3, [r7, #28]
 801422c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014230:	689b      	ldr	r3, [r3, #8]
 8014232:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8014236:	2b00      	cmp	r3, #0
 8014238:	d110      	bne.n	801425c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 801423a:	69bb      	ldr	r3, [r7, #24]
 801423c:	015a      	lsls	r2, r3, #5
 801423e:	69fb      	ldr	r3, [r7, #28]
 8014240:	4413      	add	r3, r2
 8014242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014246:	681b      	ldr	r3, [r3, #0]
 8014248:	69ba      	ldr	r2, [r7, #24]
 801424a:	0151      	lsls	r1, r2, #5
 801424c:	69fa      	ldr	r2, [r7, #28]
 801424e:	440a      	add	r2, r1
 8014250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014254:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8014258:	6013      	str	r3, [r2, #0]
 801425a:	e00f      	b.n	801427c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 801425c:	69bb      	ldr	r3, [r7, #24]
 801425e:	015a      	lsls	r2, r3, #5
 8014260:	69fb      	ldr	r3, [r7, #28]
 8014262:	4413      	add	r3, r2
 8014264:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014268:	681b      	ldr	r3, [r3, #0]
 801426a:	69ba      	ldr	r2, [r7, #24]
 801426c:	0151      	lsls	r1, r2, #5
 801426e:	69fa      	ldr	r2, [r7, #28]
 8014270:	440a      	add	r2, r1
 8014272:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014276:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 801427a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801427c:	69bb      	ldr	r3, [r7, #24]
 801427e:	015a      	lsls	r2, r3, #5
 8014280:	69fb      	ldr	r3, [r7, #28]
 8014282:	4413      	add	r3, r2
 8014284:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014288:	681b      	ldr	r3, [r3, #0]
 801428a:	69ba      	ldr	r2, [r7, #24]
 801428c:	0151      	lsls	r1, r2, #5
 801428e:	69fa      	ldr	r2, [r7, #28]
 8014290:	440a      	add	r2, r1
 8014292:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014296:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801429a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801429c:	2300      	movs	r3, #0
}
 801429e:	4618      	mov	r0, r3
 80142a0:	3720      	adds	r7, #32
 80142a2:	46bd      	mov	sp, r7
 80142a4:	bd80      	pop	{r7, pc}
 80142a6:	bf00      	nop
 80142a8:	1ff80000 	.word	0x1ff80000

080142ac <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80142ac:	b480      	push	{r7}
 80142ae:	b087      	sub	sp, #28
 80142b0:	af00      	add	r7, sp, #0
 80142b2:	60f8      	str	r0, [r7, #12]
 80142b4:	60b9      	str	r1, [r7, #8]
 80142b6:	4613      	mov	r3, r2
 80142b8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80142ba:	68fb      	ldr	r3, [r7, #12]
 80142bc:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80142be:	68bb      	ldr	r3, [r7, #8]
 80142c0:	781b      	ldrb	r3, [r3, #0]
 80142c2:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80142c4:	68bb      	ldr	r3, [r7, #8]
 80142c6:	785b      	ldrb	r3, [r3, #1]
 80142c8:	2b01      	cmp	r3, #1
 80142ca:	f040 80ce 	bne.w	801446a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80142ce:	68bb      	ldr	r3, [r7, #8]
 80142d0:	699b      	ldr	r3, [r3, #24]
 80142d2:	2b00      	cmp	r3, #0
 80142d4:	d132      	bne.n	801433c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80142d6:	693b      	ldr	r3, [r7, #16]
 80142d8:	015a      	lsls	r2, r3, #5
 80142da:	697b      	ldr	r3, [r7, #20]
 80142dc:	4413      	add	r3, r2
 80142de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80142e2:	691b      	ldr	r3, [r3, #16]
 80142e4:	693a      	ldr	r2, [r7, #16]
 80142e6:	0151      	lsls	r1, r2, #5
 80142e8:	697a      	ldr	r2, [r7, #20]
 80142ea:	440a      	add	r2, r1
 80142ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80142f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80142f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80142f8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80142fa:	693b      	ldr	r3, [r7, #16]
 80142fc:	015a      	lsls	r2, r3, #5
 80142fe:	697b      	ldr	r3, [r7, #20]
 8014300:	4413      	add	r3, r2
 8014302:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014306:	691b      	ldr	r3, [r3, #16]
 8014308:	693a      	ldr	r2, [r7, #16]
 801430a:	0151      	lsls	r1, r2, #5
 801430c:	697a      	ldr	r2, [r7, #20]
 801430e:	440a      	add	r2, r1
 8014310:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014314:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014318:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801431a:	693b      	ldr	r3, [r7, #16]
 801431c:	015a      	lsls	r2, r3, #5
 801431e:	697b      	ldr	r3, [r7, #20]
 8014320:	4413      	add	r3, r2
 8014322:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014326:	691b      	ldr	r3, [r3, #16]
 8014328:	693a      	ldr	r2, [r7, #16]
 801432a:	0151      	lsls	r1, r2, #5
 801432c:	697a      	ldr	r2, [r7, #20]
 801432e:	440a      	add	r2, r1
 8014330:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014334:	0cdb      	lsrs	r3, r3, #19
 8014336:	04db      	lsls	r3, r3, #19
 8014338:	6113      	str	r3, [r2, #16]
 801433a:	e04e      	b.n	80143da <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 801433c:	693b      	ldr	r3, [r7, #16]
 801433e:	015a      	lsls	r2, r3, #5
 8014340:	697b      	ldr	r3, [r7, #20]
 8014342:	4413      	add	r3, r2
 8014344:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014348:	691b      	ldr	r3, [r3, #16]
 801434a:	693a      	ldr	r2, [r7, #16]
 801434c:	0151      	lsls	r1, r2, #5
 801434e:	697a      	ldr	r2, [r7, #20]
 8014350:	440a      	add	r2, r1
 8014352:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014356:	0cdb      	lsrs	r3, r3, #19
 8014358:	04db      	lsls	r3, r3, #19
 801435a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 801435c:	693b      	ldr	r3, [r7, #16]
 801435e:	015a      	lsls	r2, r3, #5
 8014360:	697b      	ldr	r3, [r7, #20]
 8014362:	4413      	add	r3, r2
 8014364:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014368:	691b      	ldr	r3, [r3, #16]
 801436a:	693a      	ldr	r2, [r7, #16]
 801436c:	0151      	lsls	r1, r2, #5
 801436e:	697a      	ldr	r2, [r7, #20]
 8014370:	440a      	add	r2, r1
 8014372:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014376:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 801437a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 801437e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8014380:	68bb      	ldr	r3, [r7, #8]
 8014382:	699a      	ldr	r2, [r3, #24]
 8014384:	68bb      	ldr	r3, [r7, #8]
 8014386:	68db      	ldr	r3, [r3, #12]
 8014388:	429a      	cmp	r2, r3
 801438a:	d903      	bls.n	8014394 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 801438c:	68bb      	ldr	r3, [r7, #8]
 801438e:	68da      	ldr	r2, [r3, #12]
 8014390:	68bb      	ldr	r3, [r7, #8]
 8014392:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8014394:	693b      	ldr	r3, [r7, #16]
 8014396:	015a      	lsls	r2, r3, #5
 8014398:	697b      	ldr	r3, [r7, #20]
 801439a:	4413      	add	r3, r2
 801439c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143a0:	691b      	ldr	r3, [r3, #16]
 80143a2:	693a      	ldr	r2, [r7, #16]
 80143a4:	0151      	lsls	r1, r2, #5
 80143a6:	697a      	ldr	r2, [r7, #20]
 80143a8:	440a      	add	r2, r1
 80143aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80143ae:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80143b2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80143b4:	693b      	ldr	r3, [r7, #16]
 80143b6:	015a      	lsls	r2, r3, #5
 80143b8:	697b      	ldr	r3, [r7, #20]
 80143ba:	4413      	add	r3, r2
 80143bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143c0:	691a      	ldr	r2, [r3, #16]
 80143c2:	68bb      	ldr	r3, [r7, #8]
 80143c4:	699b      	ldr	r3, [r3, #24]
 80143c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80143ca:	6939      	ldr	r1, [r7, #16]
 80143cc:	0148      	lsls	r0, r1, #5
 80143ce:	6979      	ldr	r1, [r7, #20]
 80143d0:	4401      	add	r1, r0
 80143d2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80143d6:	4313      	orrs	r3, r2
 80143d8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80143da:	79fb      	ldrb	r3, [r7, #7]
 80143dc:	2b01      	cmp	r3, #1
 80143de:	d11e      	bne.n	801441e <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80143e0:	68bb      	ldr	r3, [r7, #8]
 80143e2:	695b      	ldr	r3, [r3, #20]
 80143e4:	2b00      	cmp	r3, #0
 80143e6:	d009      	beq.n	80143fc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80143e8:	693b      	ldr	r3, [r7, #16]
 80143ea:	015a      	lsls	r2, r3, #5
 80143ec:	697b      	ldr	r3, [r7, #20]
 80143ee:	4413      	add	r3, r2
 80143f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80143f4:	461a      	mov	r2, r3
 80143f6:	68bb      	ldr	r3, [r7, #8]
 80143f8:	695b      	ldr	r3, [r3, #20]
 80143fa:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80143fc:	693b      	ldr	r3, [r7, #16]
 80143fe:	015a      	lsls	r2, r3, #5
 8014400:	697b      	ldr	r3, [r7, #20]
 8014402:	4413      	add	r3, r2
 8014404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014408:	681b      	ldr	r3, [r3, #0]
 801440a:	693a      	ldr	r2, [r7, #16]
 801440c:	0151      	lsls	r1, r2, #5
 801440e:	697a      	ldr	r2, [r7, #20]
 8014410:	440a      	add	r2, r1
 8014412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014416:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801441a:	6013      	str	r3, [r2, #0]
 801441c:	e097      	b.n	801454e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 801441e:	693b      	ldr	r3, [r7, #16]
 8014420:	015a      	lsls	r2, r3, #5
 8014422:	697b      	ldr	r3, [r7, #20]
 8014424:	4413      	add	r3, r2
 8014426:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801442a:	681b      	ldr	r3, [r3, #0]
 801442c:	693a      	ldr	r2, [r7, #16]
 801442e:	0151      	lsls	r1, r2, #5
 8014430:	697a      	ldr	r2, [r7, #20]
 8014432:	440a      	add	r2, r1
 8014434:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014438:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801443c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 801443e:	68bb      	ldr	r3, [r7, #8]
 8014440:	699b      	ldr	r3, [r3, #24]
 8014442:	2b00      	cmp	r3, #0
 8014444:	f000 8083 	beq.w	801454e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8014448:	697b      	ldr	r3, [r7, #20]
 801444a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801444e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8014450:	68bb      	ldr	r3, [r7, #8]
 8014452:	781b      	ldrb	r3, [r3, #0]
 8014454:	f003 030f 	and.w	r3, r3, #15
 8014458:	2101      	movs	r1, #1
 801445a:	fa01 f303 	lsl.w	r3, r1, r3
 801445e:	6979      	ldr	r1, [r7, #20]
 8014460:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8014464:	4313      	orrs	r3, r2
 8014466:	634b      	str	r3, [r1, #52]	; 0x34
 8014468:	e071      	b.n	801454e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 801446a:	693b      	ldr	r3, [r7, #16]
 801446c:	015a      	lsls	r2, r3, #5
 801446e:	697b      	ldr	r3, [r7, #20]
 8014470:	4413      	add	r3, r2
 8014472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014476:	691b      	ldr	r3, [r3, #16]
 8014478:	693a      	ldr	r2, [r7, #16]
 801447a:	0151      	lsls	r1, r2, #5
 801447c:	697a      	ldr	r2, [r7, #20]
 801447e:	440a      	add	r2, r1
 8014480:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014484:	0cdb      	lsrs	r3, r3, #19
 8014486:	04db      	lsls	r3, r3, #19
 8014488:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 801448a:	693b      	ldr	r3, [r7, #16]
 801448c:	015a      	lsls	r2, r3, #5
 801448e:	697b      	ldr	r3, [r7, #20]
 8014490:	4413      	add	r3, r2
 8014492:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014496:	691b      	ldr	r3, [r3, #16]
 8014498:	693a      	ldr	r2, [r7, #16]
 801449a:	0151      	lsls	r1, r2, #5
 801449c:	697a      	ldr	r2, [r7, #20]
 801449e:	440a      	add	r2, r1
 80144a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80144a4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80144a8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80144ac:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80144ae:	68bb      	ldr	r3, [r7, #8]
 80144b0:	699b      	ldr	r3, [r3, #24]
 80144b2:	2b00      	cmp	r3, #0
 80144b4:	d003      	beq.n	80144be <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80144b6:	68bb      	ldr	r3, [r7, #8]
 80144b8:	68da      	ldr	r2, [r3, #12]
 80144ba:	68bb      	ldr	r3, [r7, #8]
 80144bc:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80144be:	68bb      	ldr	r3, [r7, #8]
 80144c0:	68da      	ldr	r2, [r3, #12]
 80144c2:	68bb      	ldr	r3, [r7, #8]
 80144c4:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80144c6:	693b      	ldr	r3, [r7, #16]
 80144c8:	015a      	lsls	r2, r3, #5
 80144ca:	697b      	ldr	r3, [r7, #20]
 80144cc:	4413      	add	r3, r2
 80144ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144d2:	691b      	ldr	r3, [r3, #16]
 80144d4:	693a      	ldr	r2, [r7, #16]
 80144d6:	0151      	lsls	r1, r2, #5
 80144d8:	697a      	ldr	r2, [r7, #20]
 80144da:	440a      	add	r2, r1
 80144dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80144e0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80144e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80144e6:	693b      	ldr	r3, [r7, #16]
 80144e8:	015a      	lsls	r2, r3, #5
 80144ea:	697b      	ldr	r3, [r7, #20]
 80144ec:	4413      	add	r3, r2
 80144ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80144f2:	691a      	ldr	r2, [r3, #16]
 80144f4:	68bb      	ldr	r3, [r7, #8]
 80144f6:	69db      	ldr	r3, [r3, #28]
 80144f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80144fc:	6939      	ldr	r1, [r7, #16]
 80144fe:	0148      	lsls	r0, r1, #5
 8014500:	6979      	ldr	r1, [r7, #20]
 8014502:	4401      	add	r1, r0
 8014504:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8014508:	4313      	orrs	r3, r2
 801450a:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 801450c:	79fb      	ldrb	r3, [r7, #7]
 801450e:	2b01      	cmp	r3, #1
 8014510:	d10d      	bne.n	801452e <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8014512:	68bb      	ldr	r3, [r7, #8]
 8014514:	691b      	ldr	r3, [r3, #16]
 8014516:	2b00      	cmp	r3, #0
 8014518:	d009      	beq.n	801452e <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 801451a:	68bb      	ldr	r3, [r7, #8]
 801451c:	6919      	ldr	r1, [r3, #16]
 801451e:	693b      	ldr	r3, [r7, #16]
 8014520:	015a      	lsls	r2, r3, #5
 8014522:	697b      	ldr	r3, [r7, #20]
 8014524:	4413      	add	r3, r2
 8014526:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801452a:	460a      	mov	r2, r1
 801452c:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 801452e:	693b      	ldr	r3, [r7, #16]
 8014530:	015a      	lsls	r2, r3, #5
 8014532:	697b      	ldr	r3, [r7, #20]
 8014534:	4413      	add	r3, r2
 8014536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801453a:	681b      	ldr	r3, [r3, #0]
 801453c:	693a      	ldr	r2, [r7, #16]
 801453e:	0151      	lsls	r1, r2, #5
 8014540:	697a      	ldr	r2, [r7, #20]
 8014542:	440a      	add	r2, r1
 8014544:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014548:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 801454c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 801454e:	2300      	movs	r3, #0
}
 8014550:	4618      	mov	r0, r3
 8014552:	371c      	adds	r7, #28
 8014554:	46bd      	mov	sp, r7
 8014556:	f85d 7b04 	ldr.w	r7, [sp], #4
 801455a:	4770      	bx	lr

0801455c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 801455c:	b480      	push	{r7}
 801455e:	b087      	sub	sp, #28
 8014560:	af00      	add	r7, sp, #0
 8014562:	6078      	str	r0, [r7, #4]
 8014564:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8014566:	2300      	movs	r3, #0
 8014568:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 801456a:	2300      	movs	r3, #0
 801456c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801456e:	687b      	ldr	r3, [r7, #4]
 8014570:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8014572:	683b      	ldr	r3, [r7, #0]
 8014574:	785b      	ldrb	r3, [r3, #1]
 8014576:	2b01      	cmp	r3, #1
 8014578:	d14a      	bne.n	8014610 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 801457a:	683b      	ldr	r3, [r7, #0]
 801457c:	781b      	ldrb	r3, [r3, #0]
 801457e:	015a      	lsls	r2, r3, #5
 8014580:	693b      	ldr	r3, [r7, #16]
 8014582:	4413      	add	r3, r2
 8014584:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801458e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014592:	f040 8086 	bne.w	80146a2 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8014596:	683b      	ldr	r3, [r7, #0]
 8014598:	781b      	ldrb	r3, [r3, #0]
 801459a:	015a      	lsls	r2, r3, #5
 801459c:	693b      	ldr	r3, [r7, #16]
 801459e:	4413      	add	r3, r2
 80145a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145a4:	681b      	ldr	r3, [r3, #0]
 80145a6:	683a      	ldr	r2, [r7, #0]
 80145a8:	7812      	ldrb	r2, [r2, #0]
 80145aa:	0151      	lsls	r1, r2, #5
 80145ac:	693a      	ldr	r2, [r7, #16]
 80145ae:	440a      	add	r2, r1
 80145b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80145b4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80145b8:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80145ba:	683b      	ldr	r3, [r7, #0]
 80145bc:	781b      	ldrb	r3, [r3, #0]
 80145be:	015a      	lsls	r2, r3, #5
 80145c0:	693b      	ldr	r3, [r7, #16]
 80145c2:	4413      	add	r3, r2
 80145c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	683a      	ldr	r2, [r7, #0]
 80145cc:	7812      	ldrb	r2, [r2, #0]
 80145ce:	0151      	lsls	r1, r2, #5
 80145d0:	693a      	ldr	r2, [r7, #16]
 80145d2:	440a      	add	r2, r1
 80145d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80145d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80145dc:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80145de:	68fb      	ldr	r3, [r7, #12]
 80145e0:	3301      	adds	r3, #1
 80145e2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80145e4:	68fb      	ldr	r3, [r7, #12]
 80145e6:	f242 7210 	movw	r2, #10000	; 0x2710
 80145ea:	4293      	cmp	r3, r2
 80145ec:	d902      	bls.n	80145f4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80145ee:	2301      	movs	r3, #1
 80145f0:	75fb      	strb	r3, [r7, #23]
          break;
 80145f2:	e056      	b.n	80146a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80145f4:	683b      	ldr	r3, [r7, #0]
 80145f6:	781b      	ldrb	r3, [r3, #0]
 80145f8:	015a      	lsls	r2, r3, #5
 80145fa:	693b      	ldr	r3, [r7, #16]
 80145fc:	4413      	add	r3, r2
 80145fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014608:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 801460c:	d0e7      	beq.n	80145de <USB_EPStopXfer+0x82>
 801460e:	e048      	b.n	80146a2 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014610:	683b      	ldr	r3, [r7, #0]
 8014612:	781b      	ldrb	r3, [r3, #0]
 8014614:	015a      	lsls	r2, r3, #5
 8014616:	693b      	ldr	r3, [r7, #16]
 8014618:	4413      	add	r3, r2
 801461a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801461e:	681b      	ldr	r3, [r3, #0]
 8014620:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014624:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014628:	d13b      	bne.n	80146a2 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 801462a:	683b      	ldr	r3, [r7, #0]
 801462c:	781b      	ldrb	r3, [r3, #0]
 801462e:	015a      	lsls	r2, r3, #5
 8014630:	693b      	ldr	r3, [r7, #16]
 8014632:	4413      	add	r3, r2
 8014634:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014638:	681b      	ldr	r3, [r3, #0]
 801463a:	683a      	ldr	r2, [r7, #0]
 801463c:	7812      	ldrb	r2, [r2, #0]
 801463e:	0151      	lsls	r1, r2, #5
 8014640:	693a      	ldr	r2, [r7, #16]
 8014642:	440a      	add	r2, r1
 8014644:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014648:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 801464c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 801464e:	683b      	ldr	r3, [r7, #0]
 8014650:	781b      	ldrb	r3, [r3, #0]
 8014652:	015a      	lsls	r2, r3, #5
 8014654:	693b      	ldr	r3, [r7, #16]
 8014656:	4413      	add	r3, r2
 8014658:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801465c:	681b      	ldr	r3, [r3, #0]
 801465e:	683a      	ldr	r2, [r7, #0]
 8014660:	7812      	ldrb	r2, [r2, #0]
 8014662:	0151      	lsls	r1, r2, #5
 8014664:	693a      	ldr	r2, [r7, #16]
 8014666:	440a      	add	r2, r1
 8014668:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 801466c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8014670:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8014672:	68fb      	ldr	r3, [r7, #12]
 8014674:	3301      	adds	r3, #1
 8014676:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8014678:	68fb      	ldr	r3, [r7, #12]
 801467a:	f242 7210 	movw	r2, #10000	; 0x2710
 801467e:	4293      	cmp	r3, r2
 8014680:	d902      	bls.n	8014688 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8014682:	2301      	movs	r3, #1
 8014684:	75fb      	strb	r3, [r7, #23]
          break;
 8014686:	e00c      	b.n	80146a2 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8014688:	683b      	ldr	r3, [r7, #0]
 801468a:	781b      	ldrb	r3, [r3, #0]
 801468c:	015a      	lsls	r2, r3, #5
 801468e:	693b      	ldr	r3, [r7, #16]
 8014690:	4413      	add	r3, r2
 8014692:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014696:	681b      	ldr	r3, [r3, #0]
 8014698:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 801469c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80146a0:	d0e7      	beq.n	8014672 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80146a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80146a4:	4618      	mov	r0, r3
 80146a6:	371c      	adds	r7, #28
 80146a8:	46bd      	mov	sp, r7
 80146aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146ae:	4770      	bx	lr

080146b0 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80146b0:	b480      	push	{r7}
 80146b2:	b089      	sub	sp, #36	; 0x24
 80146b4:	af00      	add	r7, sp, #0
 80146b6:	60f8      	str	r0, [r7, #12]
 80146b8:	60b9      	str	r1, [r7, #8]
 80146ba:	4611      	mov	r1, r2
 80146bc:	461a      	mov	r2, r3
 80146be:	460b      	mov	r3, r1
 80146c0:	71fb      	strb	r3, [r7, #7]
 80146c2:	4613      	mov	r3, r2
 80146c4:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80146c6:	68fb      	ldr	r3, [r7, #12]
 80146c8:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80146ca:	68bb      	ldr	r3, [r7, #8]
 80146cc:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80146ce:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d123      	bne.n	801471e <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80146d6:	88bb      	ldrh	r3, [r7, #4]
 80146d8:	3303      	adds	r3, #3
 80146da:	089b      	lsrs	r3, r3, #2
 80146dc:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80146de:	2300      	movs	r3, #0
 80146e0:	61bb      	str	r3, [r7, #24]
 80146e2:	e018      	b.n	8014716 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80146e4:	79fb      	ldrb	r3, [r7, #7]
 80146e6:	031a      	lsls	r2, r3, #12
 80146e8:	697b      	ldr	r3, [r7, #20]
 80146ea:	4413      	add	r3, r2
 80146ec:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80146f0:	461a      	mov	r2, r3
 80146f2:	69fb      	ldr	r3, [r7, #28]
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80146f8:	69fb      	ldr	r3, [r7, #28]
 80146fa:	3301      	adds	r3, #1
 80146fc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80146fe:	69fb      	ldr	r3, [r7, #28]
 8014700:	3301      	adds	r3, #1
 8014702:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8014704:	69fb      	ldr	r3, [r7, #28]
 8014706:	3301      	adds	r3, #1
 8014708:	61fb      	str	r3, [r7, #28]
      pSrc++;
 801470a:	69fb      	ldr	r3, [r7, #28]
 801470c:	3301      	adds	r3, #1
 801470e:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8014710:	69bb      	ldr	r3, [r7, #24]
 8014712:	3301      	adds	r3, #1
 8014714:	61bb      	str	r3, [r7, #24]
 8014716:	69ba      	ldr	r2, [r7, #24]
 8014718:	693b      	ldr	r3, [r7, #16]
 801471a:	429a      	cmp	r2, r3
 801471c:	d3e2      	bcc.n	80146e4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 801471e:	2300      	movs	r3, #0
}
 8014720:	4618      	mov	r0, r3
 8014722:	3724      	adds	r7, #36	; 0x24
 8014724:	46bd      	mov	sp, r7
 8014726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801472a:	4770      	bx	lr

0801472c <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 801472c:	b480      	push	{r7}
 801472e:	b08b      	sub	sp, #44	; 0x2c
 8014730:	af00      	add	r7, sp, #0
 8014732:	60f8      	str	r0, [r7, #12]
 8014734:	60b9      	str	r1, [r7, #8]
 8014736:	4613      	mov	r3, r2
 8014738:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 801473a:	68fb      	ldr	r3, [r7, #12]
 801473c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 801473e:	68bb      	ldr	r3, [r7, #8]
 8014740:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8014742:	88fb      	ldrh	r3, [r7, #6]
 8014744:	089b      	lsrs	r3, r3, #2
 8014746:	b29b      	uxth	r3, r3
 8014748:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 801474a:	88fb      	ldrh	r3, [r7, #6]
 801474c:	f003 0303 	and.w	r3, r3, #3
 8014750:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8014752:	2300      	movs	r3, #0
 8014754:	623b      	str	r3, [r7, #32]
 8014756:	e014      	b.n	8014782 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8014758:	69bb      	ldr	r3, [r7, #24]
 801475a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801475e:	681a      	ldr	r2, [r3, #0]
 8014760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014762:	601a      	str	r2, [r3, #0]
    pDest++;
 8014764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014766:	3301      	adds	r3, #1
 8014768:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 801476a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801476c:	3301      	adds	r3, #1
 801476e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014770:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014772:	3301      	adds	r3, #1
 8014774:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8014776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8014778:	3301      	adds	r3, #1
 801477a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 801477c:	6a3b      	ldr	r3, [r7, #32]
 801477e:	3301      	adds	r3, #1
 8014780:	623b      	str	r3, [r7, #32]
 8014782:	6a3a      	ldr	r2, [r7, #32]
 8014784:	697b      	ldr	r3, [r7, #20]
 8014786:	429a      	cmp	r2, r3
 8014788:	d3e6      	bcc.n	8014758 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 801478a:	8bfb      	ldrh	r3, [r7, #30]
 801478c:	2b00      	cmp	r3, #0
 801478e:	d01e      	beq.n	80147ce <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8014790:	2300      	movs	r3, #0
 8014792:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8014794:	69bb      	ldr	r3, [r7, #24]
 8014796:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 801479a:	461a      	mov	r2, r3
 801479c:	f107 0310 	add.w	r3, r7, #16
 80147a0:	6812      	ldr	r2, [r2, #0]
 80147a2:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80147a4:	693a      	ldr	r2, [r7, #16]
 80147a6:	6a3b      	ldr	r3, [r7, #32]
 80147a8:	b2db      	uxtb	r3, r3
 80147aa:	00db      	lsls	r3, r3, #3
 80147ac:	fa22 f303 	lsr.w	r3, r2, r3
 80147b0:	b2da      	uxtb	r2, r3
 80147b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147b4:	701a      	strb	r2, [r3, #0]
      i++;
 80147b6:	6a3b      	ldr	r3, [r7, #32]
 80147b8:	3301      	adds	r3, #1
 80147ba:	623b      	str	r3, [r7, #32]
      pDest++;
 80147bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147be:	3301      	adds	r3, #1
 80147c0:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80147c2:	8bfb      	ldrh	r3, [r7, #30]
 80147c4:	3b01      	subs	r3, #1
 80147c6:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80147c8:	8bfb      	ldrh	r3, [r7, #30]
 80147ca:	2b00      	cmp	r3, #0
 80147cc:	d1ea      	bne.n	80147a4 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80147ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80147d0:	4618      	mov	r0, r3
 80147d2:	372c      	adds	r7, #44	; 0x2c
 80147d4:	46bd      	mov	sp, r7
 80147d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147da:	4770      	bx	lr

080147dc <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80147dc:	b480      	push	{r7}
 80147de:	b085      	sub	sp, #20
 80147e0:	af00      	add	r7, sp, #0
 80147e2:	6078      	str	r0, [r7, #4]
 80147e4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80147ea:	683b      	ldr	r3, [r7, #0]
 80147ec:	781b      	ldrb	r3, [r3, #0]
 80147ee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80147f0:	683b      	ldr	r3, [r7, #0]
 80147f2:	785b      	ldrb	r3, [r3, #1]
 80147f4:	2b01      	cmp	r3, #1
 80147f6:	d12c      	bne.n	8014852 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80147f8:	68bb      	ldr	r3, [r7, #8]
 80147fa:	015a      	lsls	r2, r3, #5
 80147fc:	68fb      	ldr	r3, [r7, #12]
 80147fe:	4413      	add	r3, r2
 8014800:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	2b00      	cmp	r3, #0
 8014808:	db12      	blt.n	8014830 <USB_EPSetStall+0x54>
 801480a:	68bb      	ldr	r3, [r7, #8]
 801480c:	2b00      	cmp	r3, #0
 801480e:	d00f      	beq.n	8014830 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8014810:	68bb      	ldr	r3, [r7, #8]
 8014812:	015a      	lsls	r2, r3, #5
 8014814:	68fb      	ldr	r3, [r7, #12]
 8014816:	4413      	add	r3, r2
 8014818:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	68ba      	ldr	r2, [r7, #8]
 8014820:	0151      	lsls	r1, r2, #5
 8014822:	68fa      	ldr	r2, [r7, #12]
 8014824:	440a      	add	r2, r1
 8014826:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801482a:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 801482e:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8014830:	68bb      	ldr	r3, [r7, #8]
 8014832:	015a      	lsls	r2, r3, #5
 8014834:	68fb      	ldr	r3, [r7, #12]
 8014836:	4413      	add	r3, r2
 8014838:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 801483c:	681b      	ldr	r3, [r3, #0]
 801483e:	68ba      	ldr	r2, [r7, #8]
 8014840:	0151      	lsls	r1, r2, #5
 8014842:	68fa      	ldr	r2, [r7, #12]
 8014844:	440a      	add	r2, r1
 8014846:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801484a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 801484e:	6013      	str	r3, [r2, #0]
 8014850:	e02b      	b.n	80148aa <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8014852:	68bb      	ldr	r3, [r7, #8]
 8014854:	015a      	lsls	r2, r3, #5
 8014856:	68fb      	ldr	r3, [r7, #12]
 8014858:	4413      	add	r3, r2
 801485a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	2b00      	cmp	r3, #0
 8014862:	db12      	blt.n	801488a <USB_EPSetStall+0xae>
 8014864:	68bb      	ldr	r3, [r7, #8]
 8014866:	2b00      	cmp	r3, #0
 8014868:	d00f      	beq.n	801488a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 801486a:	68bb      	ldr	r3, [r7, #8]
 801486c:	015a      	lsls	r2, r3, #5
 801486e:	68fb      	ldr	r3, [r7, #12]
 8014870:	4413      	add	r3, r2
 8014872:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	68ba      	ldr	r2, [r7, #8]
 801487a:	0151      	lsls	r1, r2, #5
 801487c:	68fa      	ldr	r2, [r7, #12]
 801487e:	440a      	add	r2, r1
 8014880:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014884:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8014888:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 801488a:	68bb      	ldr	r3, [r7, #8]
 801488c:	015a      	lsls	r2, r3, #5
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	4413      	add	r3, r2
 8014892:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	68ba      	ldr	r2, [r7, #8]
 801489a:	0151      	lsls	r1, r2, #5
 801489c:	68fa      	ldr	r2, [r7, #12]
 801489e:	440a      	add	r2, r1
 80148a0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80148a4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80148a8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80148aa:	2300      	movs	r3, #0
}
 80148ac:	4618      	mov	r0, r3
 80148ae:	3714      	adds	r7, #20
 80148b0:	46bd      	mov	sp, r7
 80148b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80148b6:	4770      	bx	lr

080148b8 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80148b8:	b480      	push	{r7}
 80148ba:	b085      	sub	sp, #20
 80148bc:	af00      	add	r7, sp, #0
 80148be:	6078      	str	r0, [r7, #4]
 80148c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80148c2:	687b      	ldr	r3, [r7, #4]
 80148c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80148c6:	683b      	ldr	r3, [r7, #0]
 80148c8:	781b      	ldrb	r3, [r3, #0]
 80148ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80148cc:	683b      	ldr	r3, [r7, #0]
 80148ce:	785b      	ldrb	r3, [r3, #1]
 80148d0:	2b01      	cmp	r3, #1
 80148d2:	d128      	bne.n	8014926 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80148d4:	68bb      	ldr	r3, [r7, #8]
 80148d6:	015a      	lsls	r2, r3, #5
 80148d8:	68fb      	ldr	r3, [r7, #12]
 80148da:	4413      	add	r3, r2
 80148dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80148e0:	681b      	ldr	r3, [r3, #0]
 80148e2:	68ba      	ldr	r2, [r7, #8]
 80148e4:	0151      	lsls	r1, r2, #5
 80148e6:	68fa      	ldr	r2, [r7, #12]
 80148e8:	440a      	add	r2, r1
 80148ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80148ee:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80148f2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80148f4:	683b      	ldr	r3, [r7, #0]
 80148f6:	791b      	ldrb	r3, [r3, #4]
 80148f8:	2b03      	cmp	r3, #3
 80148fa:	d003      	beq.n	8014904 <USB_EPClearStall+0x4c>
 80148fc:	683b      	ldr	r3, [r7, #0]
 80148fe:	791b      	ldrb	r3, [r3, #4]
 8014900:	2b02      	cmp	r3, #2
 8014902:	d138      	bne.n	8014976 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014904:	68bb      	ldr	r3, [r7, #8]
 8014906:	015a      	lsls	r2, r3, #5
 8014908:	68fb      	ldr	r3, [r7, #12]
 801490a:	4413      	add	r3, r2
 801490c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	68ba      	ldr	r2, [r7, #8]
 8014914:	0151      	lsls	r1, r2, #5
 8014916:	68fa      	ldr	r2, [r7, #12]
 8014918:	440a      	add	r2, r1
 801491a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 801491e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014922:	6013      	str	r3, [r2, #0]
 8014924:	e027      	b.n	8014976 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8014926:	68bb      	ldr	r3, [r7, #8]
 8014928:	015a      	lsls	r2, r3, #5
 801492a:	68fb      	ldr	r3, [r7, #12]
 801492c:	4413      	add	r3, r2
 801492e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	68ba      	ldr	r2, [r7, #8]
 8014936:	0151      	lsls	r1, r2, #5
 8014938:	68fa      	ldr	r2, [r7, #12]
 801493a:	440a      	add	r2, r1
 801493c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014940:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8014944:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8014946:	683b      	ldr	r3, [r7, #0]
 8014948:	791b      	ldrb	r3, [r3, #4]
 801494a:	2b03      	cmp	r3, #3
 801494c:	d003      	beq.n	8014956 <USB_EPClearStall+0x9e>
 801494e:	683b      	ldr	r3, [r7, #0]
 8014950:	791b      	ldrb	r3, [r3, #4]
 8014952:	2b02      	cmp	r3, #2
 8014954:	d10f      	bne.n	8014976 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8014956:	68bb      	ldr	r3, [r7, #8]
 8014958:	015a      	lsls	r2, r3, #5
 801495a:	68fb      	ldr	r3, [r7, #12]
 801495c:	4413      	add	r3, r2
 801495e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014962:	681b      	ldr	r3, [r3, #0]
 8014964:	68ba      	ldr	r2, [r7, #8]
 8014966:	0151      	lsls	r1, r2, #5
 8014968:	68fa      	ldr	r2, [r7, #12]
 801496a:	440a      	add	r2, r1
 801496c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014970:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8014974:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8014976:	2300      	movs	r3, #0
}
 8014978:	4618      	mov	r0, r3
 801497a:	3714      	adds	r7, #20
 801497c:	46bd      	mov	sp, r7
 801497e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014982:	4770      	bx	lr

08014984 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8014984:	b480      	push	{r7}
 8014986:	b085      	sub	sp, #20
 8014988:	af00      	add	r7, sp, #0
 801498a:	6078      	str	r0, [r7, #4]
 801498c:	460b      	mov	r3, r1
 801498e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014990:	687b      	ldr	r3, [r7, #4]
 8014992:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8014994:	68fb      	ldr	r3, [r7, #12]
 8014996:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	68fa      	ldr	r2, [r7, #12]
 801499e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80149a2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80149a6:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 80149a8:	68fb      	ldr	r3, [r7, #12]
 80149aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80149ae:	681a      	ldr	r2, [r3, #0]
 80149b0:	78fb      	ldrb	r3, [r7, #3]
 80149b2:	011b      	lsls	r3, r3, #4
 80149b4:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80149b8:	68f9      	ldr	r1, [r7, #12]
 80149ba:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80149be:	4313      	orrs	r3, r2
 80149c0:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80149c2:	2300      	movs	r3, #0
}
 80149c4:	4618      	mov	r0, r3
 80149c6:	3714      	adds	r7, #20
 80149c8:	46bd      	mov	sp, r7
 80149ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149ce:	4770      	bx	lr

080149d0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80149d0:	b480      	push	{r7}
 80149d2:	b085      	sub	sp, #20
 80149d4:	af00      	add	r7, sp, #0
 80149d6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80149d8:	687b      	ldr	r3, [r7, #4]
 80149da:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80149dc:	68fb      	ldr	r3, [r7, #12]
 80149de:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80149e2:	681b      	ldr	r3, [r3, #0]
 80149e4:	68fa      	ldr	r2, [r7, #12]
 80149e6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80149ea:	f023 0303 	bic.w	r3, r3, #3
 80149ee:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80149f0:	68fb      	ldr	r3, [r7, #12]
 80149f2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80149f6:	685b      	ldr	r3, [r3, #4]
 80149f8:	68fa      	ldr	r2, [r7, #12]
 80149fa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80149fe:	f023 0302 	bic.w	r3, r3, #2
 8014a02:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014a04:	2300      	movs	r3, #0
}
 8014a06:	4618      	mov	r0, r3
 8014a08:	3714      	adds	r7, #20
 8014a0a:	46bd      	mov	sp, r7
 8014a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a10:	4770      	bx	lr

08014a12 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8014a12:	b480      	push	{r7}
 8014a14:	b085      	sub	sp, #20
 8014a16:	af00      	add	r7, sp, #0
 8014a18:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a1a:	687b      	ldr	r3, [r7, #4]
 8014a1c:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8014a1e:	68fb      	ldr	r3, [r7, #12]
 8014a20:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8014a24:	681b      	ldr	r3, [r3, #0]
 8014a26:	68fa      	ldr	r2, [r7, #12]
 8014a28:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8014a2c:	f023 0303 	bic.w	r3, r3, #3
 8014a30:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8014a32:	68fb      	ldr	r3, [r7, #12]
 8014a34:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014a38:	685b      	ldr	r3, [r3, #4]
 8014a3a:	68fa      	ldr	r2, [r7, #12]
 8014a3c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014a40:	f043 0302 	orr.w	r3, r3, #2
 8014a44:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014a46:	2300      	movs	r3, #0
}
 8014a48:	4618      	mov	r0, r3
 8014a4a:	3714      	adds	r7, #20
 8014a4c:	46bd      	mov	sp, r7
 8014a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a52:	4770      	bx	lr

08014a54 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8014a54:	b480      	push	{r7}
 8014a56:	b085      	sub	sp, #20
 8014a58:	af00      	add	r7, sp, #0
 8014a5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	695b      	ldr	r3, [r3, #20]
 8014a60:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8014a62:	687b      	ldr	r3, [r7, #4]
 8014a64:	699b      	ldr	r3, [r3, #24]
 8014a66:	68fa      	ldr	r2, [r7, #12]
 8014a68:	4013      	ands	r3, r2
 8014a6a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8014a6c:	68fb      	ldr	r3, [r7, #12]
}
 8014a6e:	4618      	mov	r0, r3
 8014a70:	3714      	adds	r7, #20
 8014a72:	46bd      	mov	sp, r7
 8014a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a78:	4770      	bx	lr

08014a7a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014a7a:	b480      	push	{r7}
 8014a7c:	b085      	sub	sp, #20
 8014a7e:	af00      	add	r7, sp, #0
 8014a80:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014a82:	687b      	ldr	r3, [r7, #4]
 8014a84:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014a86:	68fb      	ldr	r3, [r7, #12]
 8014a88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014a8c:	699b      	ldr	r3, [r3, #24]
 8014a8e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014a90:	68fb      	ldr	r3, [r7, #12]
 8014a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014a96:	69db      	ldr	r3, [r3, #28]
 8014a98:	68ba      	ldr	r2, [r7, #8]
 8014a9a:	4013      	ands	r3, r2
 8014a9c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8014a9e:	68bb      	ldr	r3, [r7, #8]
 8014aa0:	0c1b      	lsrs	r3, r3, #16
}
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	3714      	adds	r7, #20
 8014aa6:	46bd      	mov	sp, r7
 8014aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aac:	4770      	bx	lr

08014aae <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8014aae:	b480      	push	{r7}
 8014ab0:	b085      	sub	sp, #20
 8014ab2:	af00      	add	r7, sp, #0
 8014ab4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8014aba:	68fb      	ldr	r3, [r7, #12]
 8014abc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014ac0:	699b      	ldr	r3, [r3, #24]
 8014ac2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014aca:	69db      	ldr	r3, [r3, #28]
 8014acc:	68ba      	ldr	r2, [r7, #8]
 8014ace:	4013      	ands	r3, r2
 8014ad0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8014ad2:	68bb      	ldr	r3, [r7, #8]
 8014ad4:	b29b      	uxth	r3, r3
}
 8014ad6:	4618      	mov	r0, r3
 8014ad8:	3714      	adds	r7, #20
 8014ada:	46bd      	mov	sp, r7
 8014adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ae0:	4770      	bx	lr

08014ae2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014ae2:	b480      	push	{r7}
 8014ae4:	b085      	sub	sp, #20
 8014ae6:	af00      	add	r7, sp, #0
 8014ae8:	6078      	str	r0, [r7, #4]
 8014aea:	460b      	mov	r3, r1
 8014aec:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014aee:	687b      	ldr	r3, [r7, #4]
 8014af0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8014af2:	78fb      	ldrb	r3, [r7, #3]
 8014af4:	015a      	lsls	r2, r3, #5
 8014af6:	68fb      	ldr	r3, [r7, #12]
 8014af8:	4413      	add	r3, r2
 8014afa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014afe:	689b      	ldr	r3, [r3, #8]
 8014b00:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8014b02:	68fb      	ldr	r3, [r7, #12]
 8014b04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014b08:	695b      	ldr	r3, [r3, #20]
 8014b0a:	68ba      	ldr	r2, [r7, #8]
 8014b0c:	4013      	ands	r3, r2
 8014b0e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014b10:	68bb      	ldr	r3, [r7, #8]
}
 8014b12:	4618      	mov	r0, r3
 8014b14:	3714      	adds	r7, #20
 8014b16:	46bd      	mov	sp, r7
 8014b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b1c:	4770      	bx	lr

08014b1e <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8014b1e:	b480      	push	{r7}
 8014b20:	b087      	sub	sp, #28
 8014b22:	af00      	add	r7, sp, #0
 8014b24:	6078      	str	r0, [r7, #4]
 8014b26:	460b      	mov	r3, r1
 8014b28:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8014b2e:	697b      	ldr	r3, [r7, #20]
 8014b30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014b34:	691b      	ldr	r3, [r3, #16]
 8014b36:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8014b38:	697b      	ldr	r3, [r7, #20]
 8014b3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014b3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8014b40:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8014b42:	78fb      	ldrb	r3, [r7, #3]
 8014b44:	f003 030f 	and.w	r3, r3, #15
 8014b48:	68fa      	ldr	r2, [r7, #12]
 8014b4a:	fa22 f303 	lsr.w	r3, r2, r3
 8014b4e:	01db      	lsls	r3, r3, #7
 8014b50:	b2db      	uxtb	r3, r3
 8014b52:	693a      	ldr	r2, [r7, #16]
 8014b54:	4313      	orrs	r3, r2
 8014b56:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8014b58:	78fb      	ldrb	r3, [r7, #3]
 8014b5a:	015a      	lsls	r2, r3, #5
 8014b5c:	697b      	ldr	r3, [r7, #20]
 8014b5e:	4413      	add	r3, r2
 8014b60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014b64:	689b      	ldr	r3, [r3, #8]
 8014b66:	693a      	ldr	r2, [r7, #16]
 8014b68:	4013      	ands	r3, r2
 8014b6a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8014b6c:	68bb      	ldr	r3, [r7, #8]
}
 8014b6e:	4618      	mov	r0, r3
 8014b70:	371c      	adds	r7, #28
 8014b72:	46bd      	mov	sp, r7
 8014b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b78:	4770      	bx	lr

08014b7a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8014b7a:	b480      	push	{r7}
 8014b7c:	b083      	sub	sp, #12
 8014b7e:	af00      	add	r7, sp, #0
 8014b80:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8014b82:	687b      	ldr	r3, [r7, #4]
 8014b84:	695b      	ldr	r3, [r3, #20]
 8014b86:	f003 0301 	and.w	r3, r3, #1
}
 8014b8a:	4618      	mov	r0, r3
 8014b8c:	370c      	adds	r7, #12
 8014b8e:	46bd      	mov	sp, r7
 8014b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b94:	4770      	bx	lr

08014b96 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8014b96:	b480      	push	{r7}
 8014b98:	b085      	sub	sp, #20
 8014b9a:	af00      	add	r7, sp, #0
 8014b9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014b9e:	687b      	ldr	r3, [r7, #4]
 8014ba0:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8014ba8:	681b      	ldr	r3, [r3, #0]
 8014baa:	68fa      	ldr	r2, [r7, #12]
 8014bac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8014bb0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8014bb4:	f023 0307 	bic.w	r3, r3, #7
 8014bb8:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8014bc0:	685b      	ldr	r3, [r3, #4]
 8014bc2:	68fa      	ldr	r2, [r7, #12]
 8014bc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8014bc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8014bcc:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8014bce:	2300      	movs	r3, #0
}
 8014bd0:	4618      	mov	r0, r3
 8014bd2:	3714      	adds	r7, #20
 8014bd4:	46bd      	mov	sp, r7
 8014bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bda:	4770      	bx	lr

08014bdc <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8014bdc:	b480      	push	{r7}
 8014bde:	b087      	sub	sp, #28
 8014be0:	af00      	add	r7, sp, #0
 8014be2:	60f8      	str	r0, [r7, #12]
 8014be4:	460b      	mov	r3, r1
 8014be6:	607a      	str	r2, [r7, #4]
 8014be8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8014bea:	68fb      	ldr	r3, [r7, #12]
 8014bec:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8014bee:	68fb      	ldr	r3, [r7, #12]
 8014bf0:	333c      	adds	r3, #60	; 0x3c
 8014bf2:	3304      	adds	r3, #4
 8014bf4:	681b      	ldr	r3, [r3, #0]
 8014bf6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8014bf8:	693b      	ldr	r3, [r7, #16]
 8014bfa:	4a26      	ldr	r2, [pc, #152]	; (8014c94 <USB_EP0_OutStart+0xb8>)
 8014bfc:	4293      	cmp	r3, r2
 8014bfe:	d90a      	bls.n	8014c16 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8014c00:	697b      	ldr	r3, [r7, #20]
 8014c02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c06:	681b      	ldr	r3, [r3, #0]
 8014c08:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8014c0c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8014c10:	d101      	bne.n	8014c16 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8014c12:	2300      	movs	r3, #0
 8014c14:	e037      	b.n	8014c86 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8014c16:	697b      	ldr	r3, [r7, #20]
 8014c18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c1c:	461a      	mov	r2, r3
 8014c1e:	2300      	movs	r3, #0
 8014c20:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8014c22:	697b      	ldr	r3, [r7, #20]
 8014c24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c28:	691b      	ldr	r3, [r3, #16]
 8014c2a:	697a      	ldr	r2, [r7, #20]
 8014c2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014c30:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8014c34:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8014c36:	697b      	ldr	r3, [r7, #20]
 8014c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c3c:	691b      	ldr	r3, [r3, #16]
 8014c3e:	697a      	ldr	r2, [r7, #20]
 8014c40:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014c44:	f043 0318 	orr.w	r3, r3, #24
 8014c48:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8014c4a:	697b      	ldr	r3, [r7, #20]
 8014c4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c50:	691b      	ldr	r3, [r3, #16]
 8014c52:	697a      	ldr	r2, [r7, #20]
 8014c54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014c58:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8014c5c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8014c5e:	7afb      	ldrb	r3, [r7, #11]
 8014c60:	2b01      	cmp	r3, #1
 8014c62:	d10f      	bne.n	8014c84 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8014c64:	697b      	ldr	r3, [r7, #20]
 8014c66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c6a:	461a      	mov	r2, r3
 8014c6c:	687b      	ldr	r3, [r7, #4]
 8014c6e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8014c70:	697b      	ldr	r3, [r7, #20]
 8014c72:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8014c76:	681b      	ldr	r3, [r3, #0]
 8014c78:	697a      	ldr	r2, [r7, #20]
 8014c7a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8014c7e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8014c82:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8014c84:	2300      	movs	r3, #0
}
 8014c86:	4618      	mov	r0, r3
 8014c88:	371c      	adds	r7, #28
 8014c8a:	46bd      	mov	sp, r7
 8014c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c90:	4770      	bx	lr
 8014c92:	bf00      	nop
 8014c94:	4f54300a 	.word	0x4f54300a

08014c98 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8014c98:	b480      	push	{r7}
 8014c9a:	b085      	sub	sp, #20
 8014c9c:	af00      	add	r7, sp, #0
 8014c9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8014ca0:	2300      	movs	r3, #0
 8014ca2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8014ca4:	68fb      	ldr	r3, [r7, #12]
 8014ca6:	3301      	adds	r3, #1
 8014ca8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014caa:	68fb      	ldr	r3, [r7, #12]
 8014cac:	4a13      	ldr	r2, [pc, #76]	; (8014cfc <USB_CoreReset+0x64>)
 8014cae:	4293      	cmp	r3, r2
 8014cb0:	d901      	bls.n	8014cb6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8014cb2:	2303      	movs	r3, #3
 8014cb4:	e01b      	b.n	8014cee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8014cb6:	687b      	ldr	r3, [r7, #4]
 8014cb8:	691b      	ldr	r3, [r3, #16]
 8014cba:	2b00      	cmp	r3, #0
 8014cbc:	daf2      	bge.n	8014ca4 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8014cbe:	2300      	movs	r3, #0
 8014cc0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8014cc2:	687b      	ldr	r3, [r7, #4]
 8014cc4:	691b      	ldr	r3, [r3, #16]
 8014cc6:	f043 0201 	orr.w	r2, r3, #1
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8014cce:	68fb      	ldr	r3, [r7, #12]
 8014cd0:	3301      	adds	r3, #1
 8014cd2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8014cd4:	68fb      	ldr	r3, [r7, #12]
 8014cd6:	4a09      	ldr	r2, [pc, #36]	; (8014cfc <USB_CoreReset+0x64>)
 8014cd8:	4293      	cmp	r3, r2
 8014cda:	d901      	bls.n	8014ce0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8014cdc:	2303      	movs	r3, #3
 8014cde:	e006      	b.n	8014cee <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	691b      	ldr	r3, [r3, #16]
 8014ce4:	f003 0301 	and.w	r3, r3, #1
 8014ce8:	2b01      	cmp	r3, #1
 8014cea:	d0f0      	beq.n	8014cce <USB_CoreReset+0x36>

  return HAL_OK;
 8014cec:	2300      	movs	r3, #0
}
 8014cee:	4618      	mov	r0, r3
 8014cf0:	3714      	adds	r7, #20
 8014cf2:	46bd      	mov	sp, r7
 8014cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014cf8:	4770      	bx	lr
 8014cfa:	bf00      	nop
 8014cfc:	00030d40 	.word	0x00030d40

08014d00 <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014d00:	b580      	push	{r7, lr}
 8014d02:	b084      	sub	sp, #16
 8014d04:	af00      	add	r7, sp, #0
 8014d06:	6078      	str	r0, [r7, #4]
 8014d08:	460b      	mov	r3, r1
 8014d0a:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_CDC_HandleTypeDef *hcdc;

  hcdc = (USBD_CDC_HandleTypeDef *)USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 8014d0c:	f44f 7007 	mov.w	r0, #540	; 0x21c
 8014d10:	f002 fc48 	bl	80175a4 <USBD_static_malloc>
 8014d14:	60f8      	str	r0, [r7, #12]

  if (hcdc == NULL)
 8014d16:	68fb      	ldr	r3, [r7, #12]
 8014d18:	2b00      	cmp	r3, #0
 8014d1a:	d109      	bne.n	8014d30 <USBD_CDC_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014d1c:	687b      	ldr	r3, [r7, #4]
 8014d1e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d22:	687b      	ldr	r3, [r7, #4]
 8014d24:	32b0      	adds	r2, #176	; 0xb0
 8014d26:	2100      	movs	r1, #0
 8014d28:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8014d2c:	2302      	movs	r3, #2
 8014d2e:	e0d4      	b.n	8014eda <USBD_CDC_Init+0x1da>
  }

  (void)USBD_memset(hcdc, 0, sizeof(USBD_CDC_HandleTypeDef));
 8014d30:	f44f 7207 	mov.w	r2, #540	; 0x21c
 8014d34:	2100      	movs	r1, #0
 8014d36:	68f8      	ldr	r0, [r7, #12]
 8014d38:	f002 fcc0 	bl	80176bc <memset>

  pdev->pClassDataCmsit[pdev->classId] = (void *)hcdc;
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	32b0      	adds	r2, #176	; 0xb0
 8014d46:	68f9      	ldr	r1, [r7, #12]
 8014d48:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8014d4c:	687b      	ldr	r3, [r7, #4]
 8014d4e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	32b0      	adds	r2, #176	; 0xb0
 8014d56:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  CDCInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_BULK);
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	7c1b      	ldrb	r3, [r3, #16]
 8014d64:	2b00      	cmp	r3, #0
 8014d66:	d138      	bne.n	8014dda <USBD_CDC_Init+0xda>
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014d68:	4b5e      	ldr	r3, [pc, #376]	; (8014ee4 <USBD_CDC_Init+0x1e4>)
 8014d6a:	7819      	ldrb	r1, [r3, #0]
 8014d6c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014d70:	2202      	movs	r2, #2
 8014d72:	6878      	ldr	r0, [r7, #4]
 8014d74:	f002 faf3 	bl	801735e <USBD_LL_OpenEP>
                         CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014d78:	4b5a      	ldr	r3, [pc, #360]	; (8014ee4 <USBD_CDC_Init+0x1e4>)
 8014d7a:	781b      	ldrb	r3, [r3, #0]
 8014d7c:	f003 020f 	and.w	r2, r3, #15
 8014d80:	6879      	ldr	r1, [r7, #4]
 8014d82:	4613      	mov	r3, r2
 8014d84:	009b      	lsls	r3, r3, #2
 8014d86:	4413      	add	r3, r2
 8014d88:	009b      	lsls	r3, r3, #2
 8014d8a:	440b      	add	r3, r1
 8014d8c:	3324      	adds	r3, #36	; 0x24
 8014d8e:	2201      	movs	r2, #1
 8014d90:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014d92:	4b55      	ldr	r3, [pc, #340]	; (8014ee8 <USBD_CDC_Init+0x1e8>)
 8014d94:	7819      	ldrb	r1, [r3, #0]
 8014d96:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014d9a:	2202      	movs	r2, #2
 8014d9c:	6878      	ldr	r0, [r7, #4]
 8014d9e:	f002 fade 	bl	801735e <USBD_LL_OpenEP>
                         CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014da2:	4b51      	ldr	r3, [pc, #324]	; (8014ee8 <USBD_CDC_Init+0x1e8>)
 8014da4:	781b      	ldrb	r3, [r3, #0]
 8014da6:	f003 020f 	and.w	r2, r3, #15
 8014daa:	6879      	ldr	r1, [r7, #4]
 8014dac:	4613      	mov	r3, r2
 8014dae:	009b      	lsls	r3, r3, #2
 8014db0:	4413      	add	r3, r2
 8014db2:	009b      	lsls	r3, r3, #2
 8014db4:	440b      	add	r3, r1
 8014db6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014dba:	2201      	movs	r2, #1
 8014dbc:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CDC CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_HS_BINTERVAL;
 8014dbe:	4b4b      	ldr	r3, [pc, #300]	; (8014eec <USBD_CDC_Init+0x1ec>)
 8014dc0:	781b      	ldrb	r3, [r3, #0]
 8014dc2:	f003 020f 	and.w	r2, r3, #15
 8014dc6:	6879      	ldr	r1, [r7, #4]
 8014dc8:	4613      	mov	r3, r2
 8014dca:	009b      	lsls	r3, r3, #2
 8014dcc:	4413      	add	r3, r2
 8014dce:	009b      	lsls	r3, r3, #2
 8014dd0:	440b      	add	r3, r1
 8014dd2:	3326      	adds	r3, #38	; 0x26
 8014dd4:	2210      	movs	r2, #16
 8014dd6:	801a      	strh	r2, [r3, #0]
 8014dd8:	e035      	b.n	8014e46 <USBD_CDC_Init+0x146>
  }
  else
  {
    /* Open EP IN */
    (void)USBD_LL_OpenEP(pdev, CDCInEpAdd, USBD_EP_TYPE_BULK,
 8014dda:	4b42      	ldr	r3, [pc, #264]	; (8014ee4 <USBD_CDC_Init+0x1e4>)
 8014ddc:	7819      	ldrb	r1, [r3, #0]
 8014dde:	2340      	movs	r3, #64	; 0x40
 8014de0:	2202      	movs	r2, #2
 8014de2:	6878      	ldr	r0, [r7, #4]
 8014de4:	f002 fabb 	bl	801735e <USBD_LL_OpenEP>
                         CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 1U;
 8014de8:	4b3e      	ldr	r3, [pc, #248]	; (8014ee4 <USBD_CDC_Init+0x1e4>)
 8014dea:	781b      	ldrb	r3, [r3, #0]
 8014dec:	f003 020f 	and.w	r2, r3, #15
 8014df0:	6879      	ldr	r1, [r7, #4]
 8014df2:	4613      	mov	r3, r2
 8014df4:	009b      	lsls	r3, r3, #2
 8014df6:	4413      	add	r3, r2
 8014df8:	009b      	lsls	r3, r3, #2
 8014dfa:	440b      	add	r3, r1
 8014dfc:	3324      	adds	r3, #36	; 0x24
 8014dfe:	2201      	movs	r2, #1
 8014e00:	801a      	strh	r2, [r3, #0]

    /* Open EP OUT */
    (void)USBD_LL_OpenEP(pdev, CDCOutEpAdd, USBD_EP_TYPE_BULK,
 8014e02:	4b39      	ldr	r3, [pc, #228]	; (8014ee8 <USBD_CDC_Init+0x1e8>)
 8014e04:	7819      	ldrb	r1, [r3, #0]
 8014e06:	2340      	movs	r3, #64	; 0x40
 8014e08:	2202      	movs	r2, #2
 8014e0a:	6878      	ldr	r0, [r7, #4]
 8014e0c:	f002 faa7 	bl	801735e <USBD_LL_OpenEP>
                         CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 1U;
 8014e10:	4b35      	ldr	r3, [pc, #212]	; (8014ee8 <USBD_CDC_Init+0x1e8>)
 8014e12:	781b      	ldrb	r3, [r3, #0]
 8014e14:	f003 020f 	and.w	r2, r3, #15
 8014e18:	6879      	ldr	r1, [r7, #4]
 8014e1a:	4613      	mov	r3, r2
 8014e1c:	009b      	lsls	r3, r3, #2
 8014e1e:	4413      	add	r3, r2
 8014e20:	009b      	lsls	r3, r3, #2
 8014e22:	440b      	add	r3, r1
 8014e24:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014e28:	2201      	movs	r2, #1
 8014e2a:	801a      	strh	r2, [r3, #0]

    /* Set bInterval for CMD Endpoint */
    pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = CDC_FS_BINTERVAL;
 8014e2c:	4b2f      	ldr	r3, [pc, #188]	; (8014eec <USBD_CDC_Init+0x1ec>)
 8014e2e:	781b      	ldrb	r3, [r3, #0]
 8014e30:	f003 020f 	and.w	r2, r3, #15
 8014e34:	6879      	ldr	r1, [r7, #4]
 8014e36:	4613      	mov	r3, r2
 8014e38:	009b      	lsls	r3, r3, #2
 8014e3a:	4413      	add	r3, r2
 8014e3c:	009b      	lsls	r3, r3, #2
 8014e3e:	440b      	add	r3, r1
 8014e40:	3326      	adds	r3, #38	; 0x26
 8014e42:	2210      	movs	r2, #16
 8014e44:	801a      	strh	r2, [r3, #0]
  }

  /* Open Command IN EP */
  (void)USBD_LL_OpenEP(pdev, CDCCmdEpAdd, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 8014e46:	4b29      	ldr	r3, [pc, #164]	; (8014eec <USBD_CDC_Init+0x1ec>)
 8014e48:	7819      	ldrb	r1, [r3, #0]
 8014e4a:	2308      	movs	r3, #8
 8014e4c:	2203      	movs	r2, #3
 8014e4e:	6878      	ldr	r0, [r7, #4]
 8014e50:	f002 fa85 	bl	801735e <USBD_LL_OpenEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 1U;
 8014e54:	4b25      	ldr	r3, [pc, #148]	; (8014eec <USBD_CDC_Init+0x1ec>)
 8014e56:	781b      	ldrb	r3, [r3, #0]
 8014e58:	f003 020f 	and.w	r2, r3, #15
 8014e5c:	6879      	ldr	r1, [r7, #4]
 8014e5e:	4613      	mov	r3, r2
 8014e60:	009b      	lsls	r3, r3, #2
 8014e62:	4413      	add	r3, r2
 8014e64:	009b      	lsls	r3, r3, #2
 8014e66:	440b      	add	r3, r1
 8014e68:	3324      	adds	r3, #36	; 0x24
 8014e6a:	2201      	movs	r2, #1
 8014e6c:	801a      	strh	r2, [r3, #0]

  hcdc->RxBuffer = NULL;
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	2200      	movs	r2, #0
 8014e72:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  /* Init  physical Interface components */
  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init();
 8014e76:	687b      	ldr	r3, [r7, #4]
 8014e78:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014e7c:	687a      	ldr	r2, [r7, #4]
 8014e7e:	33b0      	adds	r3, #176	; 0xb0
 8014e80:	009b      	lsls	r3, r3, #2
 8014e82:	4413      	add	r3, r2
 8014e84:	685b      	ldr	r3, [r3, #4]
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	4798      	blx	r3

  /* Init Xfer states */
  hcdc->TxState = 0U;
 8014e8a:	68fb      	ldr	r3, [r7, #12]
 8014e8c:	2200      	movs	r2, #0
 8014e8e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
  hcdc->RxState = 0U;
 8014e92:	68fb      	ldr	r3, [r7, #12]
 8014e94:	2200      	movs	r2, #0
 8014e96:	f8c3 2218 	str.w	r2, [r3, #536]	; 0x218

  if (hcdc->RxBuffer == NULL)
 8014e9a:	68fb      	ldr	r3, [r7, #12]
 8014e9c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8014ea0:	2b00      	cmp	r3, #0
 8014ea2:	d101      	bne.n	8014ea8 <USBD_CDC_Init+0x1a8>
  {
    return (uint8_t)USBD_EMEM;
 8014ea4:	2302      	movs	r3, #2
 8014ea6:	e018      	b.n	8014eda <USBD_CDC_Init+0x1da>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	7c1b      	ldrb	r3, [r3, #16]
 8014eac:	2b00      	cmp	r3, #0
 8014eae:	d10a      	bne.n	8014ec6 <USBD_CDC_Init+0x1c6>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014eb0:	4b0d      	ldr	r3, [pc, #52]	; (8014ee8 <USBD_CDC_Init+0x1e8>)
 8014eb2:	7819      	ldrb	r1, [r3, #0]
 8014eb4:	68fb      	ldr	r3, [r7, #12]
 8014eb6:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014eba:	f44f 7300 	mov.w	r3, #512	; 0x200
 8014ebe:	6878      	ldr	r0, [r7, #4]
 8014ec0:	f002 fb3c 	bl	801753c <USBD_LL_PrepareReceive>
 8014ec4:	e008      	b.n	8014ed8 <USBD_CDC_Init+0x1d8>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8014ec6:	4b08      	ldr	r3, [pc, #32]	; (8014ee8 <USBD_CDC_Init+0x1e8>)
 8014ec8:	7819      	ldrb	r1, [r3, #0]
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8014ed0:	2340      	movs	r3, #64	; 0x40
 8014ed2:	6878      	ldr	r0, [r7, #4]
 8014ed4:	f002 fb32 	bl	801753c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8014ed8:	2300      	movs	r3, #0
}
 8014eda:	4618      	mov	r0, r3
 8014edc:	3710      	adds	r7, #16
 8014ede:	46bd      	mov	sp, r7
 8014ee0:	bd80      	pop	{r7, pc}
 8014ee2:	bf00      	nop
 8014ee4:	2000028b 	.word	0x2000028b
 8014ee8:	2000028c 	.word	0x2000028c
 8014eec:	2000028d 	.word	0x2000028d

08014ef0 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8014ef0:	b580      	push	{r7, lr}
 8014ef2:	b082      	sub	sp, #8
 8014ef4:	af00      	add	r7, sp, #0
 8014ef6:	6078      	str	r0, [r7, #4]
 8014ef8:	460b      	mov	r3, r1
 8014efa:	70fb      	strb	r3, [r7, #3]
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
  CDCCmdEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close EP IN */
  (void)USBD_LL_CloseEP(pdev, CDCInEpAdd);
 8014efc:	4b3a      	ldr	r3, [pc, #232]	; (8014fe8 <USBD_CDC_DeInit+0xf8>)
 8014efe:	781b      	ldrb	r3, [r3, #0]
 8014f00:	4619      	mov	r1, r3
 8014f02:	6878      	ldr	r0, [r7, #4]
 8014f04:	f002 fa51 	bl	80173aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCInEpAdd & 0xFU].is_used = 0U;
 8014f08:	4b37      	ldr	r3, [pc, #220]	; (8014fe8 <USBD_CDC_DeInit+0xf8>)
 8014f0a:	781b      	ldrb	r3, [r3, #0]
 8014f0c:	f003 020f 	and.w	r2, r3, #15
 8014f10:	6879      	ldr	r1, [r7, #4]
 8014f12:	4613      	mov	r3, r2
 8014f14:	009b      	lsls	r3, r3, #2
 8014f16:	4413      	add	r3, r2
 8014f18:	009b      	lsls	r3, r3, #2
 8014f1a:	440b      	add	r3, r1
 8014f1c:	3324      	adds	r3, #36	; 0x24
 8014f1e:	2200      	movs	r2, #0
 8014f20:	801a      	strh	r2, [r3, #0]

  /* Close EP OUT */
  (void)USBD_LL_CloseEP(pdev, CDCOutEpAdd);
 8014f22:	4b32      	ldr	r3, [pc, #200]	; (8014fec <USBD_CDC_DeInit+0xfc>)
 8014f24:	781b      	ldrb	r3, [r3, #0]
 8014f26:	4619      	mov	r1, r3
 8014f28:	6878      	ldr	r0, [r7, #4]
 8014f2a:	f002 fa3e 	bl	80173aa <USBD_LL_CloseEP>
  pdev->ep_out[CDCOutEpAdd & 0xFU].is_used = 0U;
 8014f2e:	4b2f      	ldr	r3, [pc, #188]	; (8014fec <USBD_CDC_DeInit+0xfc>)
 8014f30:	781b      	ldrb	r3, [r3, #0]
 8014f32:	f003 020f 	and.w	r2, r3, #15
 8014f36:	6879      	ldr	r1, [r7, #4]
 8014f38:	4613      	mov	r3, r2
 8014f3a:	009b      	lsls	r3, r3, #2
 8014f3c:	4413      	add	r3, r2
 8014f3e:	009b      	lsls	r3, r3, #2
 8014f40:	440b      	add	r3, r1
 8014f42:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8014f46:	2200      	movs	r2, #0
 8014f48:	801a      	strh	r2, [r3, #0]

  /* Close Command IN EP */
  (void)USBD_LL_CloseEP(pdev, CDCCmdEpAdd);
 8014f4a:	4b29      	ldr	r3, [pc, #164]	; (8014ff0 <USBD_CDC_DeInit+0x100>)
 8014f4c:	781b      	ldrb	r3, [r3, #0]
 8014f4e:	4619      	mov	r1, r3
 8014f50:	6878      	ldr	r0, [r7, #4]
 8014f52:	f002 fa2a 	bl	80173aa <USBD_LL_CloseEP>
  pdev->ep_in[CDCCmdEpAdd & 0xFU].is_used = 0U;
 8014f56:	4b26      	ldr	r3, [pc, #152]	; (8014ff0 <USBD_CDC_DeInit+0x100>)
 8014f58:	781b      	ldrb	r3, [r3, #0]
 8014f5a:	f003 020f 	and.w	r2, r3, #15
 8014f5e:	6879      	ldr	r1, [r7, #4]
 8014f60:	4613      	mov	r3, r2
 8014f62:	009b      	lsls	r3, r3, #2
 8014f64:	4413      	add	r3, r2
 8014f66:	009b      	lsls	r3, r3, #2
 8014f68:	440b      	add	r3, r1
 8014f6a:	3324      	adds	r3, #36	; 0x24
 8014f6c:	2200      	movs	r2, #0
 8014f6e:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[CDCCmdEpAdd & 0xFU].bInterval = 0U;
 8014f70:	4b1f      	ldr	r3, [pc, #124]	; (8014ff0 <USBD_CDC_DeInit+0x100>)
 8014f72:	781b      	ldrb	r3, [r3, #0]
 8014f74:	f003 020f 	and.w	r2, r3, #15
 8014f78:	6879      	ldr	r1, [r7, #4]
 8014f7a:	4613      	mov	r3, r2
 8014f7c:	009b      	lsls	r3, r3, #2
 8014f7e:	4413      	add	r3, r2
 8014f80:	009b      	lsls	r3, r3, #2
 8014f82:	440b      	add	r3, r1
 8014f84:	3326      	adds	r3, #38	; 0x26
 8014f86:	2200      	movs	r2, #0
 8014f88:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8014f8a:	687b      	ldr	r3, [r7, #4]
 8014f8c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	32b0      	adds	r2, #176	; 0xb0
 8014f94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d01f      	beq.n	8014fdc <USBD_CDC_DeInit+0xec>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit();
 8014f9c:	687b      	ldr	r3, [r7, #4]
 8014f9e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8014fa2:	687a      	ldr	r2, [r7, #4]
 8014fa4:	33b0      	adds	r3, #176	; 0xb0
 8014fa6:	009b      	lsls	r3, r3, #2
 8014fa8:	4413      	add	r3, r2
 8014faa:	685b      	ldr	r3, [r3, #4]
 8014fac:	685b      	ldr	r3, [r3, #4]
 8014fae:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8014fb0:	687b      	ldr	r3, [r7, #4]
 8014fb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014fb6:	687b      	ldr	r3, [r7, #4]
 8014fb8:	32b0      	adds	r2, #176	; 0xb0
 8014fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8014fbe:	4618      	mov	r0, r3
 8014fc0:	f002 fafe 	bl	80175c0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8014fc4:	687b      	ldr	r3, [r7, #4]
 8014fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8014fca:	687b      	ldr	r3, [r7, #4]
 8014fcc:	32b0      	adds	r2, #176	; 0xb0
 8014fce:	2100      	movs	r1, #0
 8014fd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8014fd4:	687b      	ldr	r3, [r7, #4]
 8014fd6:	2200      	movs	r2, #0
 8014fd8:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 8014fdc:	2300      	movs	r3, #0
}
 8014fde:	4618      	mov	r0, r3
 8014fe0:	3708      	adds	r7, #8
 8014fe2:	46bd      	mov	sp, r7
 8014fe4:	bd80      	pop	{r7, pc}
 8014fe6:	bf00      	nop
 8014fe8:	2000028b 	.word	0x2000028b
 8014fec:	2000028c 	.word	0x2000028c
 8014ff0:	2000028d 	.word	0x2000028d

08014ff4 <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                              USBD_SetupReqTypedef *req)
{
 8014ff4:	b580      	push	{r7, lr}
 8014ff6:	b086      	sub	sp, #24
 8014ff8:	af00      	add	r7, sp, #0
 8014ffa:	6078      	str	r0, [r7, #4]
 8014ffc:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015004:	687b      	ldr	r3, [r7, #4]
 8015006:	32b0      	adds	r2, #176	; 0xb0
 8015008:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801500c:	613b      	str	r3, [r7, #16]
  uint16_t len;
  uint8_t ifalt = 0U;
 801500e:	2300      	movs	r3, #0
 8015010:	737b      	strb	r3, [r7, #13]
  uint16_t status_info = 0U;
 8015012:	2300      	movs	r3, #0
 8015014:	817b      	strh	r3, [r7, #10]
  USBD_StatusTypeDef ret = USBD_OK;
 8015016:	2300      	movs	r3, #0
 8015018:	75fb      	strb	r3, [r7, #23]

  if (hcdc == NULL)
 801501a:	693b      	ldr	r3, [r7, #16]
 801501c:	2b00      	cmp	r3, #0
 801501e:	d101      	bne.n	8015024 <USBD_CDC_Setup+0x30>
  {
    return (uint8_t)USBD_FAIL;
 8015020:	2303      	movs	r3, #3
 8015022:	e0bf      	b.n	80151a4 <USBD_CDC_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015024:	683b      	ldr	r3, [r7, #0]
 8015026:	781b      	ldrb	r3, [r3, #0]
 8015028:	f003 0360 	and.w	r3, r3, #96	; 0x60
 801502c:	2b00      	cmp	r3, #0
 801502e:	d050      	beq.n	80150d2 <USBD_CDC_Setup+0xde>
 8015030:	2b20      	cmp	r3, #32
 8015032:	f040 80af 	bne.w	8015194 <USBD_CDC_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      if (req->wLength != 0U)
 8015036:	683b      	ldr	r3, [r7, #0]
 8015038:	88db      	ldrh	r3, [r3, #6]
 801503a:	2b00      	cmp	r3, #0
 801503c:	d03a      	beq.n	80150b4 <USBD_CDC_Setup+0xc0>
      {
        if ((req->bmRequest & 0x80U) != 0U)
 801503e:	683b      	ldr	r3, [r7, #0]
 8015040:	781b      	ldrb	r3, [r3, #0]
 8015042:	b25b      	sxtb	r3, r3
 8015044:	2b00      	cmp	r3, #0
 8015046:	da1b      	bge.n	8015080 <USBD_CDC_Setup+0x8c>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801504e:	687a      	ldr	r2, [r7, #4]
 8015050:	33b0      	adds	r3, #176	; 0xb0
 8015052:	009b      	lsls	r3, r3, #2
 8015054:	4413      	add	r3, r2
 8015056:	685b      	ldr	r3, [r3, #4]
 8015058:	689b      	ldr	r3, [r3, #8]
 801505a:	683a      	ldr	r2, [r7, #0]
 801505c:	7850      	ldrb	r0, [r2, #1]
                                                                           (uint8_t *)hcdc->data,
 801505e:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 8015060:	683a      	ldr	r2, [r7, #0]
 8015062:	88d2      	ldrh	r2, [r2, #6]
 8015064:	4798      	blx	r3
                                                                           req->wLength);

          len = MIN(CDC_REQ_MAX_DATA_SIZE, req->wLength);
 8015066:	683b      	ldr	r3, [r7, #0]
 8015068:	88db      	ldrh	r3, [r3, #6]
 801506a:	2b07      	cmp	r3, #7
 801506c:	bf28      	it	cs
 801506e:	2307      	movcs	r3, #7
 8015070:	81fb      	strh	r3, [r7, #14]
          (void)USBD_CtlSendData(pdev, (uint8_t *)hcdc->data, len);
 8015072:	693b      	ldr	r3, [r7, #16]
 8015074:	89fa      	ldrh	r2, [r7, #14]
 8015076:	4619      	mov	r1, r3
 8015078:	6878      	ldr	r0, [r7, #4]
 801507a:	f001 fd43 	bl	8016b04 <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
                                                                         (uint8_t *)req, 0U);
      }
      break;
 801507e:	e090      	b.n	80151a2 <USBD_CDC_Setup+0x1ae>
          hcdc->CmdOpCode = req->bRequest;
 8015080:	683b      	ldr	r3, [r7, #0]
 8015082:	785a      	ldrb	r2, [r3, #1]
 8015084:	693b      	ldr	r3, [r7, #16]
 8015086:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
          hcdc->CmdLength = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);
 801508a:	683b      	ldr	r3, [r7, #0]
 801508c:	88db      	ldrh	r3, [r3, #6]
 801508e:	2b3f      	cmp	r3, #63	; 0x3f
 8015090:	d803      	bhi.n	801509a <USBD_CDC_Setup+0xa6>
 8015092:	683b      	ldr	r3, [r7, #0]
 8015094:	88db      	ldrh	r3, [r3, #6]
 8015096:	b2da      	uxtb	r2, r3
 8015098:	e000      	b.n	801509c <USBD_CDC_Setup+0xa8>
 801509a:	2240      	movs	r2, #64	; 0x40
 801509c:	693b      	ldr	r3, [r7, #16]
 801509e:	f883 2201 	strb.w	r2, [r3, #513]	; 0x201
          (void)USBD_CtlPrepareRx(pdev, (uint8_t *)hcdc->data, hcdc->CmdLength);
 80150a2:	6939      	ldr	r1, [r7, #16]
 80150a4:	693b      	ldr	r3, [r7, #16]
 80150a6:	f893 3201 	ldrb.w	r3, [r3, #513]	; 0x201
 80150aa:	461a      	mov	r2, r3
 80150ac:	6878      	ldr	r0, [r7, #4]
 80150ae:	f001 fd55 	bl	8016b5c <USBD_CtlPrepareRx>
      break;
 80150b2:	e076      	b.n	80151a2 <USBD_CDC_Setup+0x1ae>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(req->bRequest,
 80150b4:	687b      	ldr	r3, [r7, #4]
 80150b6:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80150ba:	687a      	ldr	r2, [r7, #4]
 80150bc:	33b0      	adds	r3, #176	; 0xb0
 80150be:	009b      	lsls	r3, r3, #2
 80150c0:	4413      	add	r3, r2
 80150c2:	685b      	ldr	r3, [r3, #4]
 80150c4:	689b      	ldr	r3, [r3, #8]
 80150c6:	683a      	ldr	r2, [r7, #0]
 80150c8:	7850      	ldrb	r0, [r2, #1]
 80150ca:	2200      	movs	r2, #0
 80150cc:	6839      	ldr	r1, [r7, #0]
 80150ce:	4798      	blx	r3
      break;
 80150d0:	e067      	b.n	80151a2 <USBD_CDC_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80150d2:	683b      	ldr	r3, [r7, #0]
 80150d4:	785b      	ldrb	r3, [r3, #1]
 80150d6:	2b0b      	cmp	r3, #11
 80150d8:	d851      	bhi.n	801517e <USBD_CDC_Setup+0x18a>
 80150da:	a201      	add	r2, pc, #4	; (adr r2, 80150e0 <USBD_CDC_Setup+0xec>)
 80150dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80150e0:	08015111 	.word	0x08015111
 80150e4:	0801518d 	.word	0x0801518d
 80150e8:	0801517f 	.word	0x0801517f
 80150ec:	0801517f 	.word	0x0801517f
 80150f0:	0801517f 	.word	0x0801517f
 80150f4:	0801517f 	.word	0x0801517f
 80150f8:	0801517f 	.word	0x0801517f
 80150fc:	0801517f 	.word	0x0801517f
 8015100:	0801517f 	.word	0x0801517f
 8015104:	0801517f 	.word	0x0801517f
 8015108:	0801513b 	.word	0x0801513b
 801510c:	08015165 	.word	0x08015165
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015116:	b2db      	uxtb	r3, r3
 8015118:	2b03      	cmp	r3, #3
 801511a:	d107      	bne.n	801512c <USBD_CDC_Setup+0x138>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 801511c:	f107 030a 	add.w	r3, r7, #10
 8015120:	2202      	movs	r2, #2
 8015122:	4619      	mov	r1, r3
 8015124:	6878      	ldr	r0, [r7, #4]
 8015126:	f001 fced 	bl	8016b04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 801512a:	e032      	b.n	8015192 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 801512c:	6839      	ldr	r1, [r7, #0]
 801512e:	6878      	ldr	r0, [r7, #4]
 8015130:	f001 fc77 	bl	8016a22 <USBD_CtlError>
            ret = USBD_FAIL;
 8015134:	2303      	movs	r3, #3
 8015136:	75fb      	strb	r3, [r7, #23]
          break;
 8015138:	e02b      	b.n	8015192 <USBD_CDC_Setup+0x19e>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 801513a:	687b      	ldr	r3, [r7, #4]
 801513c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015140:	b2db      	uxtb	r3, r3
 8015142:	2b03      	cmp	r3, #3
 8015144:	d107      	bne.n	8015156 <USBD_CDC_Setup+0x162>
          {
            (void)USBD_CtlSendData(pdev, &ifalt, 1U);
 8015146:	f107 030d 	add.w	r3, r7, #13
 801514a:	2201      	movs	r2, #1
 801514c:	4619      	mov	r1, r3
 801514e:	6878      	ldr	r0, [r7, #4]
 8015150:	f001 fcd8 	bl	8016b04 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8015154:	e01d      	b.n	8015192 <USBD_CDC_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8015156:	6839      	ldr	r1, [r7, #0]
 8015158:	6878      	ldr	r0, [r7, #4]
 801515a:	f001 fc62 	bl	8016a22 <USBD_CtlError>
            ret = USBD_FAIL;
 801515e:	2303      	movs	r3, #3
 8015160:	75fb      	strb	r3, [r7, #23]
          break;
 8015162:	e016      	b.n	8015192 <USBD_CDC_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801516a:	b2db      	uxtb	r3, r3
 801516c:	2b03      	cmp	r3, #3
 801516e:	d00f      	beq.n	8015190 <USBD_CDC_Setup+0x19c>
          {
            USBD_CtlError(pdev, req);
 8015170:	6839      	ldr	r1, [r7, #0]
 8015172:	6878      	ldr	r0, [r7, #4]
 8015174:	f001 fc55 	bl	8016a22 <USBD_CtlError>
            ret = USBD_FAIL;
 8015178:	2303      	movs	r3, #3
 801517a:	75fb      	strb	r3, [r7, #23]
          }
          break;
 801517c:	e008      	b.n	8015190 <USBD_CDC_Setup+0x19c>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 801517e:	6839      	ldr	r1, [r7, #0]
 8015180:	6878      	ldr	r0, [r7, #4]
 8015182:	f001 fc4e 	bl	8016a22 <USBD_CtlError>
          ret = USBD_FAIL;
 8015186:	2303      	movs	r3, #3
 8015188:	75fb      	strb	r3, [r7, #23]
          break;
 801518a:	e002      	b.n	8015192 <USBD_CDC_Setup+0x19e>
          break;
 801518c:	bf00      	nop
 801518e:	e008      	b.n	80151a2 <USBD_CDC_Setup+0x1ae>
          break;
 8015190:	bf00      	nop
      }
      break;
 8015192:	e006      	b.n	80151a2 <USBD_CDC_Setup+0x1ae>

    default:
      USBD_CtlError(pdev, req);
 8015194:	6839      	ldr	r1, [r7, #0]
 8015196:	6878      	ldr	r0, [r7, #4]
 8015198:	f001 fc43 	bl	8016a22 <USBD_CtlError>
      ret = USBD_FAIL;
 801519c:	2303      	movs	r3, #3
 801519e:	75fb      	strb	r3, [r7, #23]
      break;
 80151a0:	bf00      	nop
  }

  return (uint8_t)ret;
 80151a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80151a4:	4618      	mov	r0, r3
 80151a6:	3718      	adds	r7, #24
 80151a8:	46bd      	mov	sp, r7
 80151aa:	bd80      	pop	{r7, pc}

080151ac <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80151ac:	b580      	push	{r7, lr}
 80151ae:	b084      	sub	sp, #16
 80151b0:	af00      	add	r7, sp, #0
 80151b2:	6078      	str	r0, [r7, #4]
 80151b4:	460b      	mov	r3, r1
 80151b6:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc;
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef *)pdev->pData;
 80151b8:	687b      	ldr	r3, [r7, #4]
 80151ba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80151be:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	32b0      	adds	r2, #176	; 0xb0
 80151ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151ce:	2b00      	cmp	r3, #0
 80151d0:	d101      	bne.n	80151d6 <USBD_CDC_DataIn+0x2a>
  {
    return (uint8_t)USBD_FAIL;
 80151d2:	2303      	movs	r3, #3
 80151d4:	e065      	b.n	80152a2 <USBD_CDC_DataIn+0xf6>
  }

  hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	32b0      	adds	r2, #176	; 0xb0
 80151e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80151e4:	60bb      	str	r3, [r7, #8]

  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 80151e6:	78fb      	ldrb	r3, [r7, #3]
 80151e8:	f003 020f 	and.w	r2, r3, #15
 80151ec:	6879      	ldr	r1, [r7, #4]
 80151ee:	4613      	mov	r3, r2
 80151f0:	009b      	lsls	r3, r3, #2
 80151f2:	4413      	add	r3, r2
 80151f4:	009b      	lsls	r3, r3, #2
 80151f6:	440b      	add	r3, r1
 80151f8:	3318      	adds	r3, #24
 80151fa:	681b      	ldr	r3, [r3, #0]
 80151fc:	2b00      	cmp	r3, #0
 80151fe:	d02f      	beq.n	8015260 <USBD_CDC_DataIn+0xb4>
      ((pdev->ep_in[epnum & 0xFU].total_length % hpcd->IN_ep[epnum & 0xFU].maxpacket) == 0U))
 8015200:	78fb      	ldrb	r3, [r7, #3]
 8015202:	f003 020f 	and.w	r2, r3, #15
 8015206:	6879      	ldr	r1, [r7, #4]
 8015208:	4613      	mov	r3, r2
 801520a:	009b      	lsls	r3, r3, #2
 801520c:	4413      	add	r3, r2
 801520e:	009b      	lsls	r3, r3, #2
 8015210:	440b      	add	r3, r1
 8015212:	3318      	adds	r3, #24
 8015214:	681a      	ldr	r2, [r3, #0]
 8015216:	78fb      	ldrb	r3, [r7, #3]
 8015218:	f003 010f 	and.w	r1, r3, #15
 801521c:	68f8      	ldr	r0, [r7, #12]
 801521e:	460b      	mov	r3, r1
 8015220:	00db      	lsls	r3, r3, #3
 8015222:	440b      	add	r3, r1
 8015224:	009b      	lsls	r3, r3, #2
 8015226:	4403      	add	r3, r0
 8015228:	3348      	adds	r3, #72	; 0x48
 801522a:	681b      	ldr	r3, [r3, #0]
 801522c:	fbb2 f1f3 	udiv	r1, r2, r3
 8015230:	fb01 f303 	mul.w	r3, r1, r3
 8015234:	1ad3      	subs	r3, r2, r3
  if ((pdev->ep_in[epnum & 0xFU].total_length > 0U) &&
 8015236:	2b00      	cmp	r3, #0
 8015238:	d112      	bne.n	8015260 <USBD_CDC_DataIn+0xb4>
  {
    /* Update the packet total length */
    pdev->ep_in[epnum & 0xFU].total_length = 0U;
 801523a:	78fb      	ldrb	r3, [r7, #3]
 801523c:	f003 020f 	and.w	r2, r3, #15
 8015240:	6879      	ldr	r1, [r7, #4]
 8015242:	4613      	mov	r3, r2
 8015244:	009b      	lsls	r3, r3, #2
 8015246:	4413      	add	r3, r2
 8015248:	009b      	lsls	r3, r3, #2
 801524a:	440b      	add	r3, r1
 801524c:	3318      	adds	r3, #24
 801524e:	2200      	movs	r2, #0
 8015250:	601a      	str	r2, [r3, #0]

    /* Send ZLP */
    (void)USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 8015252:	78f9      	ldrb	r1, [r7, #3]
 8015254:	2300      	movs	r3, #0
 8015256:	2200      	movs	r2, #0
 8015258:	6878      	ldr	r0, [r7, #4]
 801525a:	f002 f94e 	bl	80174fa <USBD_LL_Transmit>
 801525e:	e01f      	b.n	80152a0 <USBD_CDC_DataIn+0xf4>
  }
  else
  {
    hcdc->TxState = 0U;
 8015260:	68bb      	ldr	r3, [r7, #8]
 8015262:	2200      	movs	r2, #0
 8015264:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214

    if (((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt != NULL)
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801526e:	687a      	ldr	r2, [r7, #4]
 8015270:	33b0      	adds	r3, #176	; 0xb0
 8015272:	009b      	lsls	r3, r3, #2
 8015274:	4413      	add	r3, r2
 8015276:	685b      	ldr	r3, [r3, #4]
 8015278:	691b      	ldr	r3, [r3, #16]
 801527a:	2b00      	cmp	r3, #0
 801527c:	d010      	beq.n	80152a0 <USBD_CDC_DataIn+0xf4>
    {
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->TransmitCplt(hcdc->TxBuffer, &hcdc->TxLength, epnum);
 801527e:	687b      	ldr	r3, [r7, #4]
 8015280:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015284:	687a      	ldr	r2, [r7, #4]
 8015286:	33b0      	adds	r3, #176	; 0xb0
 8015288:	009b      	lsls	r3, r3, #2
 801528a:	4413      	add	r3, r2
 801528c:	685b      	ldr	r3, [r3, #4]
 801528e:	691b      	ldr	r3, [r3, #16]
 8015290:	68ba      	ldr	r2, [r7, #8]
 8015292:	f8d2 0208 	ldr.w	r0, [r2, #520]	; 0x208
 8015296:	68ba      	ldr	r2, [r7, #8]
 8015298:	f502 7104 	add.w	r1, r2, #528	; 0x210
 801529c:	78fa      	ldrb	r2, [r7, #3]
 801529e:	4798      	blx	r3
    }
  }

  return (uint8_t)USBD_OK;
 80152a0:	2300      	movs	r3, #0
}
 80152a2:	4618      	mov	r0, r3
 80152a4:	3710      	adds	r7, #16
 80152a6:	46bd      	mov	sp, r7
 80152a8:	bd80      	pop	{r7, pc}

080152aa <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80152aa:	b580      	push	{r7, lr}
 80152ac:	b084      	sub	sp, #16
 80152ae:	af00      	add	r7, sp, #0
 80152b0:	6078      	str	r0, [r7, #4]
 80152b2:	460b      	mov	r3, r1
 80152b4:	70fb      	strb	r3, [r7, #3]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80152bc:	687b      	ldr	r3, [r7, #4]
 80152be:	32b0      	adds	r2, #176	; 0xb0
 80152c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152c4:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80152c6:	687b      	ldr	r3, [r7, #4]
 80152c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	32b0      	adds	r2, #176	; 0xb0
 80152d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80152d4:	2b00      	cmp	r3, #0
 80152d6:	d101      	bne.n	80152dc <USBD_CDC_DataOut+0x32>
  {
    return (uint8_t)USBD_FAIL;
 80152d8:	2303      	movs	r3, #3
 80152da:	e01a      	b.n	8015312 <USBD_CDC_DataOut+0x68>
  }

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 80152dc:	78fb      	ldrb	r3, [r7, #3]
 80152de:	4619      	mov	r1, r3
 80152e0:	6878      	ldr	r0, [r7, #4]
 80152e2:	f002 f94c 	bl	801757e <USBD_LL_GetRxDataSize>
 80152e6:	4602      	mov	r2, r0
 80152e8:	68fb      	ldr	r3, [r7, #12]
 80152ea:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */

  ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 80152ee:	687b      	ldr	r3, [r7, #4]
 80152f0:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80152f4:	687a      	ldr	r2, [r7, #4]
 80152f6:	33b0      	adds	r3, #176	; 0xb0
 80152f8:	009b      	lsls	r3, r3, #2
 80152fa:	4413      	add	r3, r2
 80152fc:	685b      	ldr	r3, [r3, #4]
 80152fe:	68db      	ldr	r3, [r3, #12]
 8015300:	68fa      	ldr	r2, [r7, #12]
 8015302:	f8d2 0204 	ldr.w	r0, [r2, #516]	; 0x204
 8015306:	68fa      	ldr	r2, [r7, #12]
 8015308:	f502 7203 	add.w	r2, r2, #524	; 0x20c
 801530c:	4611      	mov	r1, r2
 801530e:	4798      	blx	r3

  return (uint8_t)USBD_OK;
 8015310:	2300      	movs	r3, #0
}
 8015312:	4618      	mov	r0, r3
 8015314:	3710      	adds	r7, #16
 8015316:	46bd      	mov	sp, r7
 8015318:	bd80      	pop	{r7, pc}

0801531a <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 801531a:	b580      	push	{r7, lr}
 801531c:	b084      	sub	sp, #16
 801531e:	af00      	add	r7, sp, #0
 8015320:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015328:	687b      	ldr	r3, [r7, #4]
 801532a:	32b0      	adds	r2, #176	; 0xb0
 801532c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015330:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015332:	68fb      	ldr	r3, [r7, #12]
 8015334:	2b00      	cmp	r3, #0
 8015336:	d101      	bne.n	801533c <USBD_CDC_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 8015338:	2303      	movs	r3, #3
 801533a:	e025      	b.n	8015388 <USBD_CDC_EP0_RxReady+0x6e>
  }

  if ((pdev->pUserData[pdev->classId] != NULL) && (hcdc->CmdOpCode != 0xFFU))
 801533c:	687b      	ldr	r3, [r7, #4]
 801533e:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015342:	687a      	ldr	r2, [r7, #4]
 8015344:	33b0      	adds	r3, #176	; 0xb0
 8015346:	009b      	lsls	r3, r3, #2
 8015348:	4413      	add	r3, r2
 801534a:	685b      	ldr	r3, [r3, #4]
 801534c:	2b00      	cmp	r3, #0
 801534e:	d01a      	beq.n	8015386 <USBD_CDC_EP0_RxReady+0x6c>
 8015350:	68fb      	ldr	r3, [r7, #12]
 8015352:	f893 3200 	ldrb.w	r3, [r3, #512]	; 0x200
 8015356:	2bff      	cmp	r3, #255	; 0xff
 8015358:	d015      	beq.n	8015386 <USBD_CDC_EP0_RxReady+0x6c>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8015360:	687a      	ldr	r2, [r7, #4]
 8015362:	33b0      	adds	r3, #176	; 0xb0
 8015364:	009b      	lsls	r3, r3, #2
 8015366:	4413      	add	r3, r2
 8015368:	685b      	ldr	r3, [r3, #4]
 801536a:	689b      	ldr	r3, [r3, #8]
 801536c:	68fa      	ldr	r2, [r7, #12]
 801536e:	f892 0200 	ldrb.w	r0, [r2, #512]	; 0x200
                                                                     (uint8_t *)hcdc->data,
 8015372:	68f9      	ldr	r1, [r7, #12]
                                                                     (uint16_t)hcdc->CmdLength);
 8015374:	68fa      	ldr	r2, [r7, #12]
 8015376:	f892 2201 	ldrb.w	r2, [r2, #513]	; 0x201
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData[pdev->classId])->Control(hcdc->CmdOpCode,
 801537a:	b292      	uxth	r2, r2
 801537c:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 801537e:	68fb      	ldr	r3, [r7, #12]
 8015380:	22ff      	movs	r2, #255	; 0xff
 8015382:	f883 2200 	strb.w	r2, [r3, #512]	; 0x200
  }

  return (uint8_t)USBD_OK;
 8015386:	2300      	movs	r3, #0
}
 8015388:	4618      	mov	r0, r3
 801538a:	3710      	adds	r7, #16
 801538c:	46bd      	mov	sp, r7
 801538e:	bd80      	pop	{r7, pc}

08015390 <USBD_CDC_GetFSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8015390:	b580      	push	{r7, lr}
 8015392:	b086      	sub	sp, #24
 8015394:	af00      	add	r7, sp, #0
 8015396:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015398:	2182      	movs	r1, #130	; 0x82
 801539a:	4818      	ldr	r0, [pc, #96]	; (80153fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 801539c:	f000 fd09 	bl	8015db2 <USBD_GetEpDesc>
 80153a0:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 80153a2:	2101      	movs	r1, #1
 80153a4:	4815      	ldr	r0, [pc, #84]	; (80153fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80153a6:	f000 fd04 	bl	8015db2 <USBD_GetEpDesc>
 80153aa:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 80153ac:	2181      	movs	r1, #129	; 0x81
 80153ae:	4813      	ldr	r0, [pc, #76]	; (80153fc <USBD_CDC_GetFSCfgDesc+0x6c>)
 80153b0:	f000 fcff 	bl	8015db2 <USBD_GetEpDesc>
 80153b4:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 80153b6:	697b      	ldr	r3, [r7, #20]
 80153b8:	2b00      	cmp	r3, #0
 80153ba:	d002      	beq.n	80153c2 <USBD_CDC_GetFSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 80153bc:	697b      	ldr	r3, [r7, #20]
 80153be:	2210      	movs	r2, #16
 80153c0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80153c2:	693b      	ldr	r3, [r7, #16]
 80153c4:	2b00      	cmp	r3, #0
 80153c6:	d006      	beq.n	80153d6 <USBD_CDC_GetFSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80153c8:	693b      	ldr	r3, [r7, #16]
 80153ca:	2200      	movs	r2, #0
 80153cc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80153d0:	711a      	strb	r2, [r3, #4]
 80153d2:	2200      	movs	r2, #0
 80153d4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80153d6:	68fb      	ldr	r3, [r7, #12]
 80153d8:	2b00      	cmp	r3, #0
 80153da:	d006      	beq.n	80153ea <USBD_CDC_GetFSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80153dc:	68fb      	ldr	r3, [r7, #12]
 80153de:	2200      	movs	r2, #0
 80153e0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80153e4:	711a      	strb	r2, [r3, #4]
 80153e6:	2200      	movs	r2, #0
 80153e8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	2243      	movs	r2, #67	; 0x43
 80153ee:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80153f0:	4b02      	ldr	r3, [pc, #8]	; (80153fc <USBD_CDC_GetFSCfgDesc+0x6c>)
}
 80153f2:	4618      	mov	r0, r3
 80153f4:	3718      	adds	r7, #24
 80153f6:	46bd      	mov	sp, r7
 80153f8:	bd80      	pop	{r7, pc}
 80153fa:	bf00      	nop
 80153fc:	20000248 	.word	0x20000248

08015400 <USBD_CDC_GetHSCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8015400:	b580      	push	{r7, lr}
 8015402:	b086      	sub	sp, #24
 8015404:	af00      	add	r7, sp, #0
 8015406:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015408:	2182      	movs	r1, #130	; 0x82
 801540a:	4818      	ldr	r0, [pc, #96]	; (801546c <USBD_CDC_GetHSCfgDesc+0x6c>)
 801540c:	f000 fcd1 	bl	8015db2 <USBD_GetEpDesc>
 8015410:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015412:	2101      	movs	r1, #1
 8015414:	4815      	ldr	r0, [pc, #84]	; (801546c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015416:	f000 fccc 	bl	8015db2 <USBD_GetEpDesc>
 801541a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801541c:	2181      	movs	r1, #129	; 0x81
 801541e:	4813      	ldr	r0, [pc, #76]	; (801546c <USBD_CDC_GetHSCfgDesc+0x6c>)
 8015420:	f000 fcc7 	bl	8015db2 <USBD_GetEpDesc>
 8015424:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015426:	697b      	ldr	r3, [r7, #20]
 8015428:	2b00      	cmp	r3, #0
 801542a:	d002      	beq.n	8015432 <USBD_CDC_GetHSCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_HS_BINTERVAL;
 801542c:	697b      	ldr	r3, [r7, #20]
 801542e:	2210      	movs	r2, #16
 8015430:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 8015432:	693b      	ldr	r3, [r7, #16]
 8015434:	2b00      	cmp	r3, #0
 8015436:	d006      	beq.n	8015446 <USBD_CDC_GetHSCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 8015438:	693b      	ldr	r3, [r7, #16]
 801543a:	2200      	movs	r2, #0
 801543c:	711a      	strb	r2, [r3, #4]
 801543e:	2200      	movs	r2, #0
 8015440:	f042 0202 	orr.w	r2, r2, #2
 8015444:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	2b00      	cmp	r3, #0
 801544a:	d006      	beq.n	801545a <USBD_CDC_GetHSCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_HS_MAX_PACKET_SIZE;
 801544c:	68fb      	ldr	r3, [r7, #12]
 801544e:	2200      	movs	r2, #0
 8015450:	711a      	strb	r2, [r3, #4]
 8015452:	2200      	movs	r2, #0
 8015454:	f042 0202 	orr.w	r2, r2, #2
 8015458:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	2243      	movs	r2, #67	; 0x43
 801545e:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 8015460:	4b02      	ldr	r3, [pc, #8]	; (801546c <USBD_CDC_GetHSCfgDesc+0x6c>)
}
 8015462:	4618      	mov	r0, r3
 8015464:	3718      	adds	r7, #24
 8015466:	46bd      	mov	sp, r7
 8015468:	bd80      	pop	{r7, pc}
 801546a:	bf00      	nop
 801546c:	20000248 	.word	0x20000248

08015470 <USBD_CDC_GetOtherSpeedCfgDesc>:
  *         Return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8015470:	b580      	push	{r7, lr}
 8015472:	b086      	sub	sp, #24
 8015474:	af00      	add	r7, sp, #0
 8015476:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpCmdDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_CMD_EP);
 8015478:	2182      	movs	r1, #130	; 0x82
 801547a:	4818      	ldr	r0, [pc, #96]	; (80154dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 801547c:	f000 fc99 	bl	8015db2 <USBD_GetEpDesc>
 8015480:	6178      	str	r0, [r7, #20]
  USBD_EpDescTypeDef *pEpOutDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_OUT_EP);
 8015482:	2101      	movs	r1, #1
 8015484:	4815      	ldr	r0, [pc, #84]	; (80154dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015486:	f000 fc94 	bl	8015db2 <USBD_GetEpDesc>
 801548a:	6138      	str	r0, [r7, #16]
  USBD_EpDescTypeDef *pEpInDesc = USBD_GetEpDesc(USBD_CDC_CfgDesc, CDC_IN_EP);
 801548c:	2181      	movs	r1, #129	; 0x81
 801548e:	4813      	ldr	r0, [pc, #76]	; (80154dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
 8015490:	f000 fc8f 	bl	8015db2 <USBD_GetEpDesc>
 8015494:	60f8      	str	r0, [r7, #12]

  if (pEpCmdDesc != NULL)
 8015496:	697b      	ldr	r3, [r7, #20]
 8015498:	2b00      	cmp	r3, #0
 801549a:	d002      	beq.n	80154a2 <USBD_CDC_GetOtherSpeedCfgDesc+0x32>
  {
    pEpCmdDesc->bInterval = CDC_FS_BINTERVAL;
 801549c:	697b      	ldr	r3, [r7, #20]
 801549e:	2210      	movs	r2, #16
 80154a0:	719a      	strb	r2, [r3, #6]
  }

  if (pEpOutDesc != NULL)
 80154a2:	693b      	ldr	r3, [r7, #16]
 80154a4:	2b00      	cmp	r3, #0
 80154a6:	d006      	beq.n	80154b6 <USBD_CDC_GetOtherSpeedCfgDesc+0x46>
  {
    pEpOutDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80154a8:	693b      	ldr	r3, [r7, #16]
 80154aa:	2200      	movs	r2, #0
 80154ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80154b0:	711a      	strb	r2, [r3, #4]
 80154b2:	2200      	movs	r2, #0
 80154b4:	715a      	strb	r2, [r3, #5]
  }

  if (pEpInDesc != NULL)
 80154b6:	68fb      	ldr	r3, [r7, #12]
 80154b8:	2b00      	cmp	r3, #0
 80154ba:	d006      	beq.n	80154ca <USBD_CDC_GetOtherSpeedCfgDesc+0x5a>
  {
    pEpInDesc->wMaxPacketSize = CDC_DATA_FS_MAX_PACKET_SIZE;
 80154bc:	68fb      	ldr	r3, [r7, #12]
 80154be:	2200      	movs	r2, #0
 80154c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80154c4:	711a      	strb	r2, [r3, #4]
 80154c6:	2200      	movs	r2, #0
 80154c8:	715a      	strb	r2, [r3, #5]
  }

  *length = (uint16_t)sizeof(USBD_CDC_CfgDesc);
 80154ca:	687b      	ldr	r3, [r7, #4]
 80154cc:	2243      	movs	r2, #67	; 0x43
 80154ce:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgDesc;
 80154d0:	4b02      	ldr	r3, [pc, #8]	; (80154dc <USBD_CDC_GetOtherSpeedCfgDesc+0x6c>)
}
 80154d2:	4618      	mov	r0, r3
 80154d4:	3718      	adds	r7, #24
 80154d6:	46bd      	mov	sp, r7
 80154d8:	bd80      	pop	{r7, pc}
 80154da:	bf00      	nop
 80154dc:	20000248 	.word	0x20000248

080154e0 <USBD_CDC_GetDeviceQualifierDescriptor>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
uint8_t *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 80154e0:	b480      	push	{r7}
 80154e2:	b083      	sub	sp, #12
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_CDC_DeviceQualifierDesc);
 80154e8:	687b      	ldr	r3, [r7, #4]
 80154ea:	220a      	movs	r2, #10
 80154ec:	801a      	strh	r2, [r3, #0]

  return USBD_CDC_DeviceQualifierDesc;
 80154ee:	4b03      	ldr	r3, [pc, #12]	; (80154fc <USBD_CDC_GetDeviceQualifierDescriptor+0x1c>)
}
 80154f0:	4618      	mov	r0, r3
 80154f2:	370c      	adds	r7, #12
 80154f4:	46bd      	mov	sp, r7
 80154f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80154fa:	4770      	bx	lr
 80154fc:	20000204 	.word	0x20000204

08015500 <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t USBD_CDC_RegisterInterface(USBD_HandleTypeDef *pdev,
                                   USBD_CDC_ItfTypeDef *fops)
{
 8015500:	b480      	push	{r7}
 8015502:	b083      	sub	sp, #12
 8015504:	af00      	add	r7, sp, #0
 8015506:	6078      	str	r0, [r7, #4]
 8015508:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 801550a:	683b      	ldr	r3, [r7, #0]
 801550c:	2b00      	cmp	r3, #0
 801550e:	d101      	bne.n	8015514 <USBD_CDC_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 8015510:	2303      	movs	r3, #3
 8015512:	e009      	b.n	8015528 <USBD_CDC_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8015514:	687b      	ldr	r3, [r7, #4]
 8015516:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 801551a:	687a      	ldr	r2, [r7, #4]
 801551c:	33b0      	adds	r3, #176	; 0xb0
 801551e:	009b      	lsls	r3, r3, #2
 8015520:	4413      	add	r3, r2
 8015522:	683a      	ldr	r2, [r7, #0]
 8015524:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 8015526:	2300      	movs	r3, #0
}
 8015528:	4618      	mov	r0, r3
 801552a:	370c      	adds	r7, #12
 801552c:	46bd      	mov	sp, r7
 801552e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015532:	4770      	bx	lr

08015534 <USBD_CDC_SetTxBuffer>:
  * @param  length: Tx Buffer length
  * @retval status
  */
uint8_t USBD_CDC_SetTxBuffer(USBD_HandleTypeDef *pdev,
                             uint8_t *pbuff, uint32_t length)
{
 8015534:	b480      	push	{r7}
 8015536:	b087      	sub	sp, #28
 8015538:	af00      	add	r7, sp, #0
 801553a:	60f8      	str	r0, [r7, #12]
 801553c:	60b9      	str	r1, [r7, #8]
 801553e:	607a      	str	r2, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015540:	68fb      	ldr	r3, [r7, #12]
 8015542:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015546:	68fb      	ldr	r3, [r7, #12]
 8015548:	32b0      	adds	r2, #176	; 0xb0
 801554a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801554e:	617b      	str	r3, [r7, #20]

  if (hcdc == NULL)
 8015550:	697b      	ldr	r3, [r7, #20]
 8015552:	2b00      	cmp	r3, #0
 8015554:	d101      	bne.n	801555a <USBD_CDC_SetTxBuffer+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8015556:	2303      	movs	r3, #3
 8015558:	e008      	b.n	801556c <USBD_CDC_SetTxBuffer+0x38>
  }

  hcdc->TxBuffer = pbuff;
 801555a:	697b      	ldr	r3, [r7, #20]
 801555c:	68ba      	ldr	r2, [r7, #8]
 801555e:	f8c3 2208 	str.w	r2, [r3, #520]	; 0x208
  hcdc->TxLength = length;
 8015562:	697b      	ldr	r3, [r7, #20]
 8015564:	687a      	ldr	r2, [r7, #4]
 8015566:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210

  return (uint8_t)USBD_OK;
 801556a:	2300      	movs	r3, #0
}
 801556c:	4618      	mov	r0, r3
 801556e:	371c      	adds	r7, #28
 8015570:	46bd      	mov	sp, r7
 8015572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015576:	4770      	bx	lr

08015578 <USBD_CDC_SetRxBuffer>:
  * @param  pdev: device instance
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t USBD_CDC_SetRxBuffer(USBD_HandleTypeDef *pdev, uint8_t *pbuff)
{
 8015578:	b480      	push	{r7}
 801557a:	b085      	sub	sp, #20
 801557c:	af00      	add	r7, sp, #0
 801557e:	6078      	str	r0, [r7, #4]
 8015580:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8015582:	687b      	ldr	r3, [r7, #4]
 8015584:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	32b0      	adds	r2, #176	; 0xb0
 801558c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015590:	60fb      	str	r3, [r7, #12]

  if (hcdc == NULL)
 8015592:	68fb      	ldr	r3, [r7, #12]
 8015594:	2b00      	cmp	r3, #0
 8015596:	d101      	bne.n	801559c <USBD_CDC_SetRxBuffer+0x24>
  {
    return (uint8_t)USBD_FAIL;
 8015598:	2303      	movs	r3, #3
 801559a:	e004      	b.n	80155a6 <USBD_CDC_SetRxBuffer+0x2e>
  }

  hcdc->RxBuffer = pbuff;
 801559c:	68fb      	ldr	r3, [r7, #12]
 801559e:	683a      	ldr	r2, [r7, #0]
 80155a0:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204

  return (uint8_t)USBD_OK;
 80155a4:	2300      	movs	r3, #0
}
 80155a6:	4618      	mov	r0, r3
 80155a8:	3714      	adds	r7, #20
 80155aa:	46bd      	mov	sp, r7
 80155ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155b0:	4770      	bx	lr
	...

080155b4 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 80155b4:	b580      	push	{r7, lr}
 80155b6:	b084      	sub	sp, #16
 80155b8:	af00      	add	r7, sp, #0
 80155ba:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	32b0      	adds	r2, #176	; 0xb0
 80155c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155ca:	60fb      	str	r3, [r7, #12]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  CDCOutEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_BULK);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->pClassDataCmsit[pdev->classId] == NULL)
 80155cc:	687b      	ldr	r3, [r7, #4]
 80155ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80155d2:	687b      	ldr	r3, [r7, #4]
 80155d4:	32b0      	adds	r2, #176	; 0xb0
 80155d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d101      	bne.n	80155e2 <USBD_CDC_ReceivePacket+0x2e>
  {
    return (uint8_t)USBD_FAIL;
 80155de:	2303      	movs	r3, #3
 80155e0:	e018      	b.n	8015614 <USBD_CDC_ReceivePacket+0x60>
  }

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80155e2:	687b      	ldr	r3, [r7, #4]
 80155e4:	7c1b      	ldrb	r3, [r3, #16]
 80155e6:	2b00      	cmp	r3, #0
 80155e8:	d10a      	bne.n	8015600 <USBD_CDC_ReceivePacket+0x4c>
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 80155ea:	4b0c      	ldr	r3, [pc, #48]	; (801561c <USBD_CDC_ReceivePacket+0x68>)
 80155ec:	7819      	ldrb	r1, [r3, #0]
 80155ee:	68fb      	ldr	r3, [r7, #12]
 80155f0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80155f4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80155f8:	6878      	ldr	r0, [r7, #4]
 80155fa:	f001 ff9f 	bl	801753c <USBD_LL_PrepareReceive>
 80155fe:	e008      	b.n	8015612 <USBD_CDC_ReceivePacket+0x5e>
                                 CDC_DATA_HS_OUT_PACKET_SIZE);
  }
  else
  {
    /* Prepare Out endpoint to receive next packet */
    (void)USBD_LL_PrepareReceive(pdev, CDCOutEpAdd, hcdc->RxBuffer,
 8015600:	4b06      	ldr	r3, [pc, #24]	; (801561c <USBD_CDC_ReceivePacket+0x68>)
 8015602:	7819      	ldrb	r1, [r3, #0]
 8015604:	68fb      	ldr	r3, [r7, #12]
 8015606:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 801560a:	2340      	movs	r3, #64	; 0x40
 801560c:	6878      	ldr	r0, [r7, #4]
 801560e:	f001 ff95 	bl	801753c <USBD_LL_PrepareReceive>
                                 CDC_DATA_FS_OUT_PACKET_SIZE);
  }

  return (uint8_t)USBD_OK;
 8015612:	2300      	movs	r3, #0
}
 8015614:	4618      	mov	r0, r3
 8015616:	3710      	adds	r7, #16
 8015618:	46bd      	mov	sp, r7
 801561a:	bd80      	pop	{r7, pc}
 801561c:	2000028c 	.word	0x2000028c

08015620 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8015620:	b580      	push	{r7, lr}
 8015622:	b086      	sub	sp, #24
 8015624:	af00      	add	r7, sp, #0
 8015626:	60f8      	str	r0, [r7, #12]
 8015628:	60b9      	str	r1, [r7, #8]
 801562a:	4613      	mov	r3, r2
 801562c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 801562e:	68fb      	ldr	r3, [r7, #12]
 8015630:	2b00      	cmp	r3, #0
 8015632:	d101      	bne.n	8015638 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015634:	2303      	movs	r3, #3
 8015636:	e01f      	b.n	8015678 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8015638:	68fb      	ldr	r3, [r7, #12]
 801563a:	2200      	movs	r2, #0
 801563c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8015640:	68fb      	ldr	r3, [r7, #12]
 8015642:	2200      	movs	r2, #0
 8015644:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8015648:	68fb      	ldr	r3, [r7, #12]
 801564a:	2200      	movs	r2, #0
 801564c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8015650:	68bb      	ldr	r3, [r7, #8]
 8015652:	2b00      	cmp	r3, #0
 8015654:	d003      	beq.n	801565e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8015656:	68fb      	ldr	r3, [r7, #12]
 8015658:	68ba      	ldr	r2, [r7, #8]
 801565a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801565e:	68fb      	ldr	r3, [r7, #12]
 8015660:	2201      	movs	r2, #1
 8015662:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8015666:	68fb      	ldr	r3, [r7, #12]
 8015668:	79fa      	ldrb	r2, [r7, #7]
 801566a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 801566c:	68f8      	ldr	r0, [r7, #12]
 801566e:	f001 fe09 	bl	8017284 <USBD_LL_Init>
 8015672:	4603      	mov	r3, r0
 8015674:	75fb      	strb	r3, [r7, #23]

  return ret;
 8015676:	7dfb      	ldrb	r3, [r7, #23]
}
 8015678:	4618      	mov	r0, r3
 801567a:	3718      	adds	r7, #24
 801567c:	46bd      	mov	sp, r7
 801567e:	bd80      	pop	{r7, pc}

08015680 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8015680:	b580      	push	{r7, lr}
 8015682:	b084      	sub	sp, #16
 8015684:	af00      	add	r7, sp, #0
 8015686:	6078      	str	r0, [r7, #4]
 8015688:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801568a:	2300      	movs	r3, #0
 801568c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 801568e:	683b      	ldr	r3, [r7, #0]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d101      	bne.n	8015698 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8015694:	2303      	movs	r3, #3
 8015696:	e025      	b.n	80156e4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	683a      	ldr	r2, [r7, #0]
 801569c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80156a0:	687b      	ldr	r3, [r7, #4]
 80156a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80156a6:	687b      	ldr	r3, [r7, #4]
 80156a8:	32ae      	adds	r2, #174	; 0xae
 80156aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156b0:	2b00      	cmp	r3, #0
 80156b2:	d00f      	beq.n	80156d4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80156b4:	687b      	ldr	r3, [r7, #4]
 80156b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80156ba:	687b      	ldr	r3, [r7, #4]
 80156bc:	32ae      	adds	r2, #174	; 0xae
 80156be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80156c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80156c4:	f107 020e 	add.w	r2, r7, #14
 80156c8:	4610      	mov	r0, r2
 80156ca:	4798      	blx	r3
 80156cc:	4602      	mov	r2, r0
 80156ce:	687b      	ldr	r3, [r7, #4]
 80156d0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80156d4:	687b      	ldr	r3, [r7, #4]
 80156d6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80156da:	1c5a      	adds	r2, r3, #1
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80156e2:	2300      	movs	r3, #0
}
 80156e4:	4618      	mov	r0, r3
 80156e6:	3710      	adds	r7, #16
 80156e8:	46bd      	mov	sp, r7
 80156ea:	bd80      	pop	{r7, pc}

080156ec <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80156ec:	b580      	push	{r7, lr}
 80156ee:	b082      	sub	sp, #8
 80156f0:	af00      	add	r7, sp, #0
 80156f2:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80156f4:	6878      	ldr	r0, [r7, #4]
 80156f6:	f001 fe17 	bl	8017328 <USBD_LL_Start>
 80156fa:	4603      	mov	r3, r0
}
 80156fc:	4618      	mov	r0, r3
 80156fe:	3708      	adds	r7, #8
 8015700:	46bd      	mov	sp, r7
 8015702:	bd80      	pop	{r7, pc}

08015704 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8015704:	b480      	push	{r7}
 8015706:	b083      	sub	sp, #12
 8015708:	af00      	add	r7, sp, #0
 801570a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 801570c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 801570e:	4618      	mov	r0, r3
 8015710:	370c      	adds	r7, #12
 8015712:	46bd      	mov	sp, r7
 8015714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015718:	4770      	bx	lr

0801571a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801571a:	b580      	push	{r7, lr}
 801571c:	b084      	sub	sp, #16
 801571e:	af00      	add	r7, sp, #0
 8015720:	6078      	str	r0, [r7, #4]
 8015722:	460b      	mov	r3, r1
 8015724:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8015726:	2300      	movs	r3, #0
 8015728:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 801572a:	687b      	ldr	r3, [r7, #4]
 801572c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015730:	2b00      	cmp	r3, #0
 8015732:	d009      	beq.n	8015748 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8015734:	687b      	ldr	r3, [r7, #4]
 8015736:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801573a:	681b      	ldr	r3, [r3, #0]
 801573c:	78fa      	ldrb	r2, [r7, #3]
 801573e:	4611      	mov	r1, r2
 8015740:	6878      	ldr	r0, [r7, #4]
 8015742:	4798      	blx	r3
 8015744:	4603      	mov	r3, r0
 8015746:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015748:	7bfb      	ldrb	r3, [r7, #15]
}
 801574a:	4618      	mov	r0, r3
 801574c:	3710      	adds	r7, #16
 801574e:	46bd      	mov	sp, r7
 8015750:	bd80      	pop	{r7, pc}

08015752 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8015752:	b580      	push	{r7, lr}
 8015754:	b084      	sub	sp, #16
 8015756:	af00      	add	r7, sp, #0
 8015758:	6078      	str	r0, [r7, #4]
 801575a:	460b      	mov	r3, r1
 801575c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 801575e:	2300      	movs	r3, #0
 8015760:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8015762:	687b      	ldr	r3, [r7, #4]
 8015764:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015768:	685b      	ldr	r3, [r3, #4]
 801576a:	78fa      	ldrb	r2, [r7, #3]
 801576c:	4611      	mov	r1, r2
 801576e:	6878      	ldr	r0, [r7, #4]
 8015770:	4798      	blx	r3
 8015772:	4603      	mov	r3, r0
 8015774:	2b00      	cmp	r3, #0
 8015776:	d001      	beq.n	801577c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8015778:	2303      	movs	r3, #3
 801577a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 801577c:	7bfb      	ldrb	r3, [r7, #15]
}
 801577e:	4618      	mov	r0, r3
 8015780:	3710      	adds	r7, #16
 8015782:	46bd      	mov	sp, r7
 8015784:	bd80      	pop	{r7, pc}

08015786 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8015786:	b580      	push	{r7, lr}
 8015788:	b084      	sub	sp, #16
 801578a:	af00      	add	r7, sp, #0
 801578c:	6078      	str	r0, [r7, #4]
 801578e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8015790:	687b      	ldr	r3, [r7, #4]
 8015792:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8015796:	6839      	ldr	r1, [r7, #0]
 8015798:	4618      	mov	r0, r3
 801579a:	f001 f908 	bl	80169ae <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 801579e:	687b      	ldr	r3, [r7, #4]
 80157a0:	2201      	movs	r2, #1
 80157a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80157a6:	687b      	ldr	r3, [r7, #4]
 80157a8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80157ac:	461a      	mov	r2, r3
 80157ae:	687b      	ldr	r3, [r7, #4]
 80157b0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80157ba:	f003 031f 	and.w	r3, r3, #31
 80157be:	2b02      	cmp	r3, #2
 80157c0:	d01a      	beq.n	80157f8 <USBD_LL_SetupStage+0x72>
 80157c2:	2b02      	cmp	r3, #2
 80157c4:	d822      	bhi.n	801580c <USBD_LL_SetupStage+0x86>
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d002      	beq.n	80157d0 <USBD_LL_SetupStage+0x4a>
 80157ca:	2b01      	cmp	r3, #1
 80157cc:	d00a      	beq.n	80157e4 <USBD_LL_SetupStage+0x5e>
 80157ce:	e01d      	b.n	801580c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80157d6:	4619      	mov	r1, r3
 80157d8:	6878      	ldr	r0, [r7, #4]
 80157da:	f000 fb5f 	bl	8015e9c <USBD_StdDevReq>
 80157de:	4603      	mov	r3, r0
 80157e0:	73fb      	strb	r3, [r7, #15]
      break;
 80157e2:	e020      	b.n	8015826 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80157e4:	687b      	ldr	r3, [r7, #4]
 80157e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80157ea:	4619      	mov	r1, r3
 80157ec:	6878      	ldr	r0, [r7, #4]
 80157ee:	f000 fbc7 	bl	8015f80 <USBD_StdItfReq>
 80157f2:	4603      	mov	r3, r0
 80157f4:	73fb      	strb	r3, [r7, #15]
      break;
 80157f6:	e016      	b.n	8015826 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80157fe:	4619      	mov	r1, r3
 8015800:	6878      	ldr	r0, [r7, #4]
 8015802:	f000 fc29 	bl	8016058 <USBD_StdEPReq>
 8015806:	4603      	mov	r3, r0
 8015808:	73fb      	strb	r3, [r7, #15]
      break;
 801580a:	e00c      	b.n	8015826 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015812:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8015816:	b2db      	uxtb	r3, r3
 8015818:	4619      	mov	r1, r3
 801581a:	6878      	ldr	r0, [r7, #4]
 801581c:	f001 fde4 	bl	80173e8 <USBD_LL_StallEP>
 8015820:	4603      	mov	r3, r0
 8015822:	73fb      	strb	r3, [r7, #15]
      break;
 8015824:	bf00      	nop
  }

  return ret;
 8015826:	7bfb      	ldrb	r3, [r7, #15]
}
 8015828:	4618      	mov	r0, r3
 801582a:	3710      	adds	r7, #16
 801582c:	46bd      	mov	sp, r7
 801582e:	bd80      	pop	{r7, pc}

08015830 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8015830:	b580      	push	{r7, lr}
 8015832:	b086      	sub	sp, #24
 8015834:	af00      	add	r7, sp, #0
 8015836:	60f8      	str	r0, [r7, #12]
 8015838:	460b      	mov	r3, r1
 801583a:	607a      	str	r2, [r7, #4]
 801583c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 801583e:	2300      	movs	r3, #0
 8015840:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8015842:	7afb      	ldrb	r3, [r7, #11]
 8015844:	2b00      	cmp	r3, #0
 8015846:	d16e      	bne.n	8015926 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8015848:	68fb      	ldr	r3, [r7, #12]
 801584a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 801584e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8015850:	68fb      	ldr	r3, [r7, #12]
 8015852:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8015856:	2b03      	cmp	r3, #3
 8015858:	f040 8098 	bne.w	801598c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 801585c:	693b      	ldr	r3, [r7, #16]
 801585e:	689a      	ldr	r2, [r3, #8]
 8015860:	693b      	ldr	r3, [r7, #16]
 8015862:	68db      	ldr	r3, [r3, #12]
 8015864:	429a      	cmp	r2, r3
 8015866:	d913      	bls.n	8015890 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8015868:	693b      	ldr	r3, [r7, #16]
 801586a:	689a      	ldr	r2, [r3, #8]
 801586c:	693b      	ldr	r3, [r7, #16]
 801586e:	68db      	ldr	r3, [r3, #12]
 8015870:	1ad2      	subs	r2, r2, r3
 8015872:	693b      	ldr	r3, [r7, #16]
 8015874:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8015876:	693b      	ldr	r3, [r7, #16]
 8015878:	68da      	ldr	r2, [r3, #12]
 801587a:	693b      	ldr	r3, [r7, #16]
 801587c:	689b      	ldr	r3, [r3, #8]
 801587e:	4293      	cmp	r3, r2
 8015880:	bf28      	it	cs
 8015882:	4613      	movcs	r3, r2
 8015884:	461a      	mov	r2, r3
 8015886:	6879      	ldr	r1, [r7, #4]
 8015888:	68f8      	ldr	r0, [r7, #12]
 801588a:	f001 f984 	bl	8016b96 <USBD_CtlContinueRx>
 801588e:	e07d      	b.n	801598c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8015896:	f003 031f 	and.w	r3, r3, #31
 801589a:	2b02      	cmp	r3, #2
 801589c:	d014      	beq.n	80158c8 <USBD_LL_DataOutStage+0x98>
 801589e:	2b02      	cmp	r3, #2
 80158a0:	d81d      	bhi.n	80158de <USBD_LL_DataOutStage+0xae>
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d002      	beq.n	80158ac <USBD_LL_DataOutStage+0x7c>
 80158a6:	2b01      	cmp	r3, #1
 80158a8:	d003      	beq.n	80158b2 <USBD_LL_DataOutStage+0x82>
 80158aa:	e018      	b.n	80158de <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80158ac:	2300      	movs	r3, #0
 80158ae:	75bb      	strb	r3, [r7, #22]
            break;
 80158b0:	e018      	b.n	80158e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80158b2:	68fb      	ldr	r3, [r7, #12]
 80158b4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80158b8:	b2db      	uxtb	r3, r3
 80158ba:	4619      	mov	r1, r3
 80158bc:	68f8      	ldr	r0, [r7, #12]
 80158be:	f000 fa5e 	bl	8015d7e <USBD_CoreFindIF>
 80158c2:	4603      	mov	r3, r0
 80158c4:	75bb      	strb	r3, [r7, #22]
            break;
 80158c6:	e00d      	b.n	80158e4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80158ce:	b2db      	uxtb	r3, r3
 80158d0:	4619      	mov	r1, r3
 80158d2:	68f8      	ldr	r0, [r7, #12]
 80158d4:	f000 fa60 	bl	8015d98 <USBD_CoreFindEP>
 80158d8:	4603      	mov	r3, r0
 80158da:	75bb      	strb	r3, [r7, #22]
            break;
 80158dc:	e002      	b.n	80158e4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80158de:	2300      	movs	r3, #0
 80158e0:	75bb      	strb	r3, [r7, #22]
            break;
 80158e2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80158e4:	7dbb      	ldrb	r3, [r7, #22]
 80158e6:	2b00      	cmp	r3, #0
 80158e8:	d119      	bne.n	801591e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80158ea:	68fb      	ldr	r3, [r7, #12]
 80158ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80158f0:	b2db      	uxtb	r3, r3
 80158f2:	2b03      	cmp	r3, #3
 80158f4:	d113      	bne.n	801591e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80158f6:	7dba      	ldrb	r2, [r7, #22]
 80158f8:	68fb      	ldr	r3, [r7, #12]
 80158fa:	32ae      	adds	r2, #174	; 0xae
 80158fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015900:	691b      	ldr	r3, [r3, #16]
 8015902:	2b00      	cmp	r3, #0
 8015904:	d00b      	beq.n	801591e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8015906:	7dba      	ldrb	r2, [r7, #22]
 8015908:	68fb      	ldr	r3, [r7, #12]
 801590a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 801590e:	7dba      	ldrb	r2, [r7, #22]
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	32ae      	adds	r2, #174	; 0xae
 8015914:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015918:	691b      	ldr	r3, [r3, #16]
 801591a:	68f8      	ldr	r0, [r7, #12]
 801591c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 801591e:	68f8      	ldr	r0, [r7, #12]
 8015920:	f001 f94a 	bl	8016bb8 <USBD_CtlSendStatus>
 8015924:	e032      	b.n	801598c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8015926:	7afb      	ldrb	r3, [r7, #11]
 8015928:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801592c:	b2db      	uxtb	r3, r3
 801592e:	4619      	mov	r1, r3
 8015930:	68f8      	ldr	r0, [r7, #12]
 8015932:	f000 fa31 	bl	8015d98 <USBD_CoreFindEP>
 8015936:	4603      	mov	r3, r0
 8015938:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 801593a:	7dbb      	ldrb	r3, [r7, #22]
 801593c:	2bff      	cmp	r3, #255	; 0xff
 801593e:	d025      	beq.n	801598c <USBD_LL_DataOutStage+0x15c>
 8015940:	7dbb      	ldrb	r3, [r7, #22]
 8015942:	2b00      	cmp	r3, #0
 8015944:	d122      	bne.n	801598c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015946:	68fb      	ldr	r3, [r7, #12]
 8015948:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801594c:	b2db      	uxtb	r3, r3
 801594e:	2b03      	cmp	r3, #3
 8015950:	d117      	bne.n	8015982 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8015952:	7dba      	ldrb	r2, [r7, #22]
 8015954:	68fb      	ldr	r3, [r7, #12]
 8015956:	32ae      	adds	r2, #174	; 0xae
 8015958:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801595c:	699b      	ldr	r3, [r3, #24]
 801595e:	2b00      	cmp	r3, #0
 8015960:	d00f      	beq.n	8015982 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8015962:	7dba      	ldrb	r2, [r7, #22]
 8015964:	68fb      	ldr	r3, [r7, #12]
 8015966:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 801596a:	7dba      	ldrb	r2, [r7, #22]
 801596c:	68fb      	ldr	r3, [r7, #12]
 801596e:	32ae      	adds	r2, #174	; 0xae
 8015970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015974:	699b      	ldr	r3, [r3, #24]
 8015976:	7afa      	ldrb	r2, [r7, #11]
 8015978:	4611      	mov	r1, r2
 801597a:	68f8      	ldr	r0, [r7, #12]
 801597c:	4798      	blx	r3
 801597e:	4603      	mov	r3, r0
 8015980:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8015982:	7dfb      	ldrb	r3, [r7, #23]
 8015984:	2b00      	cmp	r3, #0
 8015986:	d001      	beq.n	801598c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8015988:	7dfb      	ldrb	r3, [r7, #23]
 801598a:	e000      	b.n	801598e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 801598c:	2300      	movs	r3, #0
}
 801598e:	4618      	mov	r0, r3
 8015990:	3718      	adds	r7, #24
 8015992:	46bd      	mov	sp, r7
 8015994:	bd80      	pop	{r7, pc}

08015996 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8015996:	b580      	push	{r7, lr}
 8015998:	b086      	sub	sp, #24
 801599a:	af00      	add	r7, sp, #0
 801599c:	60f8      	str	r0, [r7, #12]
 801599e:	460b      	mov	r3, r1
 80159a0:	607a      	str	r2, [r7, #4]
 80159a2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80159a4:	7afb      	ldrb	r3, [r7, #11]
 80159a6:	2b00      	cmp	r3, #0
 80159a8:	d16f      	bne.n	8015a8a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80159aa:	68fb      	ldr	r3, [r7, #12]
 80159ac:	3314      	adds	r3, #20
 80159ae:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80159b0:	68fb      	ldr	r3, [r7, #12]
 80159b2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80159b6:	2b02      	cmp	r3, #2
 80159b8:	d15a      	bne.n	8015a70 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80159ba:	693b      	ldr	r3, [r7, #16]
 80159bc:	689a      	ldr	r2, [r3, #8]
 80159be:	693b      	ldr	r3, [r7, #16]
 80159c0:	68db      	ldr	r3, [r3, #12]
 80159c2:	429a      	cmp	r2, r3
 80159c4:	d914      	bls.n	80159f0 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80159c6:	693b      	ldr	r3, [r7, #16]
 80159c8:	689a      	ldr	r2, [r3, #8]
 80159ca:	693b      	ldr	r3, [r7, #16]
 80159cc:	68db      	ldr	r3, [r3, #12]
 80159ce:	1ad2      	subs	r2, r2, r3
 80159d0:	693b      	ldr	r3, [r7, #16]
 80159d2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80159d4:	693b      	ldr	r3, [r7, #16]
 80159d6:	689b      	ldr	r3, [r3, #8]
 80159d8:	461a      	mov	r2, r3
 80159da:	6879      	ldr	r1, [r7, #4]
 80159dc:	68f8      	ldr	r0, [r7, #12]
 80159de:	f001 f8ac 	bl	8016b3a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80159e2:	2300      	movs	r3, #0
 80159e4:	2200      	movs	r2, #0
 80159e6:	2100      	movs	r1, #0
 80159e8:	68f8      	ldr	r0, [r7, #12]
 80159ea:	f001 fda7 	bl	801753c <USBD_LL_PrepareReceive>
 80159ee:	e03f      	b.n	8015a70 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80159f0:	693b      	ldr	r3, [r7, #16]
 80159f2:	68da      	ldr	r2, [r3, #12]
 80159f4:	693b      	ldr	r3, [r7, #16]
 80159f6:	689b      	ldr	r3, [r3, #8]
 80159f8:	429a      	cmp	r2, r3
 80159fa:	d11c      	bne.n	8015a36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80159fc:	693b      	ldr	r3, [r7, #16]
 80159fe:	685a      	ldr	r2, [r3, #4]
 8015a00:	693b      	ldr	r3, [r7, #16]
 8015a02:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8015a04:	429a      	cmp	r2, r3
 8015a06:	d316      	bcc.n	8015a36 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8015a08:	693b      	ldr	r3, [r7, #16]
 8015a0a:	685a      	ldr	r2, [r3, #4]
 8015a0c:	68fb      	ldr	r3, [r7, #12]
 8015a0e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8015a12:	429a      	cmp	r2, r3
 8015a14:	d20f      	bcs.n	8015a36 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8015a16:	2200      	movs	r2, #0
 8015a18:	2100      	movs	r1, #0
 8015a1a:	68f8      	ldr	r0, [r7, #12]
 8015a1c:	f001 f88d 	bl	8016b3a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8015a20:	68fb      	ldr	r3, [r7, #12]
 8015a22:	2200      	movs	r2, #0
 8015a24:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8015a28:	2300      	movs	r3, #0
 8015a2a:	2200      	movs	r2, #0
 8015a2c:	2100      	movs	r1, #0
 8015a2e:	68f8      	ldr	r0, [r7, #12]
 8015a30:	f001 fd84 	bl	801753c <USBD_LL_PrepareReceive>
 8015a34:	e01c      	b.n	8015a70 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015a36:	68fb      	ldr	r3, [r7, #12]
 8015a38:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015a3c:	b2db      	uxtb	r3, r3
 8015a3e:	2b03      	cmp	r3, #3
 8015a40:	d10f      	bne.n	8015a62 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8015a42:	68fb      	ldr	r3, [r7, #12]
 8015a44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a48:	68db      	ldr	r3, [r3, #12]
 8015a4a:	2b00      	cmp	r3, #0
 8015a4c:	d009      	beq.n	8015a62 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8015a4e:	68fb      	ldr	r3, [r7, #12]
 8015a50:	2200      	movs	r2, #0
 8015a52:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015a5c:	68db      	ldr	r3, [r3, #12]
 8015a5e:	68f8      	ldr	r0, [r7, #12]
 8015a60:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8015a62:	2180      	movs	r1, #128	; 0x80
 8015a64:	68f8      	ldr	r0, [r7, #12]
 8015a66:	f001 fcbf 	bl	80173e8 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8015a6a:	68f8      	ldr	r0, [r7, #12]
 8015a6c:	f001 f8b7 	bl	8016bde <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8015a70:	68fb      	ldr	r3, [r7, #12]
 8015a72:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d03a      	beq.n	8015af0 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8015a7a:	68f8      	ldr	r0, [r7, #12]
 8015a7c:	f7ff fe42 	bl	8015704 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8015a80:	68fb      	ldr	r3, [r7, #12]
 8015a82:	2200      	movs	r2, #0
 8015a84:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8015a88:	e032      	b.n	8015af0 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8015a8a:	7afb      	ldrb	r3, [r7, #11]
 8015a8c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8015a90:	b2db      	uxtb	r3, r3
 8015a92:	4619      	mov	r1, r3
 8015a94:	68f8      	ldr	r0, [r7, #12]
 8015a96:	f000 f97f 	bl	8015d98 <USBD_CoreFindEP>
 8015a9a:	4603      	mov	r3, r0
 8015a9c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015a9e:	7dfb      	ldrb	r3, [r7, #23]
 8015aa0:	2bff      	cmp	r3, #255	; 0xff
 8015aa2:	d025      	beq.n	8015af0 <USBD_LL_DataInStage+0x15a>
 8015aa4:	7dfb      	ldrb	r3, [r7, #23]
 8015aa6:	2b00      	cmp	r3, #0
 8015aa8:	d122      	bne.n	8015af0 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ab0:	b2db      	uxtb	r3, r3
 8015ab2:	2b03      	cmp	r3, #3
 8015ab4:	d11c      	bne.n	8015af0 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8015ab6:	7dfa      	ldrb	r2, [r7, #23]
 8015ab8:	68fb      	ldr	r3, [r7, #12]
 8015aba:	32ae      	adds	r2, #174	; 0xae
 8015abc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ac0:	695b      	ldr	r3, [r3, #20]
 8015ac2:	2b00      	cmp	r3, #0
 8015ac4:	d014      	beq.n	8015af0 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8015ac6:	7dfa      	ldrb	r2, [r7, #23]
 8015ac8:	68fb      	ldr	r3, [r7, #12]
 8015aca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8015ace:	7dfa      	ldrb	r2, [r7, #23]
 8015ad0:	68fb      	ldr	r3, [r7, #12]
 8015ad2:	32ae      	adds	r2, #174	; 0xae
 8015ad4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ad8:	695b      	ldr	r3, [r3, #20]
 8015ada:	7afa      	ldrb	r2, [r7, #11]
 8015adc:	4611      	mov	r1, r2
 8015ade:	68f8      	ldr	r0, [r7, #12]
 8015ae0:	4798      	blx	r3
 8015ae2:	4603      	mov	r3, r0
 8015ae4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8015ae6:	7dbb      	ldrb	r3, [r7, #22]
 8015ae8:	2b00      	cmp	r3, #0
 8015aea:	d001      	beq.n	8015af0 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8015aec:	7dbb      	ldrb	r3, [r7, #22]
 8015aee:	e000      	b.n	8015af2 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8015af0:	2300      	movs	r3, #0
}
 8015af2:	4618      	mov	r0, r3
 8015af4:	3718      	adds	r7, #24
 8015af6:	46bd      	mov	sp, r7
 8015af8:	bd80      	pop	{r7, pc}

08015afa <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8015afa:	b580      	push	{r7, lr}
 8015afc:	b084      	sub	sp, #16
 8015afe:	af00      	add	r7, sp, #0
 8015b00:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8015b02:	2300      	movs	r3, #0
 8015b04:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015b06:	687b      	ldr	r3, [r7, #4]
 8015b08:	2201      	movs	r2, #1
 8015b0a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8015b0e:	687b      	ldr	r3, [r7, #4]
 8015b10:	2200      	movs	r2, #0
 8015b12:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	2200      	movs	r2, #0
 8015b1a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8015b1c:	687b      	ldr	r3, [r7, #4]
 8015b1e:	2200      	movs	r2, #0
 8015b20:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8015b24:	687b      	ldr	r3, [r7, #4]
 8015b26:	2200      	movs	r2, #0
 8015b28:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8015b2c:	687b      	ldr	r3, [r7, #4]
 8015b2e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b32:	2b00      	cmp	r3, #0
 8015b34:	d014      	beq.n	8015b60 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8015b36:	687b      	ldr	r3, [r7, #4]
 8015b38:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b3c:	685b      	ldr	r3, [r3, #4]
 8015b3e:	2b00      	cmp	r3, #0
 8015b40:	d00e      	beq.n	8015b60 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8015b42:	687b      	ldr	r3, [r7, #4]
 8015b44:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015b48:	685b      	ldr	r3, [r3, #4]
 8015b4a:	687a      	ldr	r2, [r7, #4]
 8015b4c:	6852      	ldr	r2, [r2, #4]
 8015b4e:	b2d2      	uxtb	r2, r2
 8015b50:	4611      	mov	r1, r2
 8015b52:	6878      	ldr	r0, [r7, #4]
 8015b54:	4798      	blx	r3
 8015b56:	4603      	mov	r3, r0
 8015b58:	2b00      	cmp	r3, #0
 8015b5a:	d001      	beq.n	8015b60 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8015b5c:	2303      	movs	r3, #3
 8015b5e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015b60:	2340      	movs	r3, #64	; 0x40
 8015b62:	2200      	movs	r2, #0
 8015b64:	2100      	movs	r1, #0
 8015b66:	6878      	ldr	r0, [r7, #4]
 8015b68:	f001 fbf9 	bl	801735e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8015b6c:	687b      	ldr	r3, [r7, #4]
 8015b6e:	2201      	movs	r2, #1
 8015b70:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8015b74:	687b      	ldr	r3, [r7, #4]
 8015b76:	2240      	movs	r2, #64	; 0x40
 8015b78:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8015b7c:	2340      	movs	r3, #64	; 0x40
 8015b7e:	2200      	movs	r2, #0
 8015b80:	2180      	movs	r1, #128	; 0x80
 8015b82:	6878      	ldr	r0, [r7, #4]
 8015b84:	f001 fbeb 	bl	801735e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8015b88:	687b      	ldr	r3, [r7, #4]
 8015b8a:	2201      	movs	r2, #1
 8015b8c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8015b8e:	687b      	ldr	r3, [r7, #4]
 8015b90:	2240      	movs	r2, #64	; 0x40
 8015b92:	621a      	str	r2, [r3, #32]

  return ret;
 8015b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b96:	4618      	mov	r0, r3
 8015b98:	3710      	adds	r7, #16
 8015b9a:	46bd      	mov	sp, r7
 8015b9c:	bd80      	pop	{r7, pc}

08015b9e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8015b9e:	b480      	push	{r7}
 8015ba0:	b083      	sub	sp, #12
 8015ba2:	af00      	add	r7, sp, #0
 8015ba4:	6078      	str	r0, [r7, #4]
 8015ba6:	460b      	mov	r3, r1
 8015ba8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	78fa      	ldrb	r2, [r7, #3]
 8015bae:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8015bb0:	2300      	movs	r3, #0
}
 8015bb2:	4618      	mov	r0, r3
 8015bb4:	370c      	adds	r7, #12
 8015bb6:	46bd      	mov	sp, r7
 8015bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015bbc:	4770      	bx	lr

08015bbe <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8015bbe:	b480      	push	{r7}
 8015bc0:	b083      	sub	sp, #12
 8015bc2:	af00      	add	r7, sp, #0
 8015bc4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8015bc6:	687b      	ldr	r3, [r7, #4]
 8015bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015bcc:	b2da      	uxtb	r2, r3
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8015bd4:	687b      	ldr	r3, [r7, #4]
 8015bd6:	2204      	movs	r2, #4
 8015bd8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8015bdc:	2300      	movs	r3, #0
}
 8015bde:	4618      	mov	r0, r3
 8015be0:	370c      	adds	r7, #12
 8015be2:	46bd      	mov	sp, r7
 8015be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015be8:	4770      	bx	lr

08015bea <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8015bea:	b480      	push	{r7}
 8015bec:	b083      	sub	sp, #12
 8015bee:	af00      	add	r7, sp, #0
 8015bf0:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015bf8:	b2db      	uxtb	r3, r3
 8015bfa:	2b04      	cmp	r3, #4
 8015bfc:	d106      	bne.n	8015c0c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8015bfe:	687b      	ldr	r3, [r7, #4]
 8015c00:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8015c04:	b2da      	uxtb	r2, r3
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8015c0c:	2300      	movs	r3, #0
}
 8015c0e:	4618      	mov	r0, r3
 8015c10:	370c      	adds	r7, #12
 8015c12:	46bd      	mov	sp, r7
 8015c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c18:	4770      	bx	lr

08015c1a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8015c1a:	b580      	push	{r7, lr}
 8015c1c:	b082      	sub	sp, #8
 8015c1e:	af00      	add	r7, sp, #0
 8015c20:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015c22:	687b      	ldr	r3, [r7, #4]
 8015c24:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c28:	b2db      	uxtb	r3, r3
 8015c2a:	2b03      	cmp	r3, #3
 8015c2c:	d110      	bne.n	8015c50 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c34:	2b00      	cmp	r3, #0
 8015c36:	d00b      	beq.n	8015c50 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8015c38:	687b      	ldr	r3, [r7, #4]
 8015c3a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c3e:	69db      	ldr	r3, [r3, #28]
 8015c40:	2b00      	cmp	r3, #0
 8015c42:	d005      	beq.n	8015c50 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015c4a:	69db      	ldr	r3, [r3, #28]
 8015c4c:	6878      	ldr	r0, [r7, #4]
 8015c4e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8015c50:	2300      	movs	r3, #0
}
 8015c52:	4618      	mov	r0, r3
 8015c54:	3708      	adds	r7, #8
 8015c56:	46bd      	mov	sp, r7
 8015c58:	bd80      	pop	{r7, pc}

08015c5a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8015c5a:	b580      	push	{r7, lr}
 8015c5c:	b082      	sub	sp, #8
 8015c5e:	af00      	add	r7, sp, #0
 8015c60:	6078      	str	r0, [r7, #4]
 8015c62:	460b      	mov	r3, r1
 8015c64:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015c66:	687b      	ldr	r3, [r7, #4]
 8015c68:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	32ae      	adds	r2, #174	; 0xae
 8015c70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d101      	bne.n	8015c7c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8015c78:	2303      	movs	r3, #3
 8015c7a:	e01c      	b.n	8015cb6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015c82:	b2db      	uxtb	r3, r3
 8015c84:	2b03      	cmp	r3, #3
 8015c86:	d115      	bne.n	8015cb4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015c8e:	687b      	ldr	r3, [r7, #4]
 8015c90:	32ae      	adds	r2, #174	; 0xae
 8015c92:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015c96:	6a1b      	ldr	r3, [r3, #32]
 8015c98:	2b00      	cmp	r3, #0
 8015c9a:	d00b      	beq.n	8015cb4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8015c9c:	687b      	ldr	r3, [r7, #4]
 8015c9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015ca2:	687b      	ldr	r3, [r7, #4]
 8015ca4:	32ae      	adds	r2, #174	; 0xae
 8015ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015caa:	6a1b      	ldr	r3, [r3, #32]
 8015cac:	78fa      	ldrb	r2, [r7, #3]
 8015cae:	4611      	mov	r1, r2
 8015cb0:	6878      	ldr	r0, [r7, #4]
 8015cb2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015cb4:	2300      	movs	r3, #0
}
 8015cb6:	4618      	mov	r0, r3
 8015cb8:	3708      	adds	r7, #8
 8015cba:	46bd      	mov	sp, r7
 8015cbc:	bd80      	pop	{r7, pc}

08015cbe <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8015cbe:	b580      	push	{r7, lr}
 8015cc0:	b082      	sub	sp, #8
 8015cc2:	af00      	add	r7, sp, #0
 8015cc4:	6078      	str	r0, [r7, #4]
 8015cc6:	460b      	mov	r3, r1
 8015cc8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8015cca:	687b      	ldr	r3, [r7, #4]
 8015ccc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015cd0:	687b      	ldr	r3, [r7, #4]
 8015cd2:	32ae      	adds	r2, #174	; 0xae
 8015cd4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cd8:	2b00      	cmp	r3, #0
 8015cda:	d101      	bne.n	8015ce0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8015cdc:	2303      	movs	r3, #3
 8015cde:	e01c      	b.n	8015d1a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8015ce0:	687b      	ldr	r3, [r7, #4]
 8015ce2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015ce6:	b2db      	uxtb	r3, r3
 8015ce8:	2b03      	cmp	r3, #3
 8015cea:	d115      	bne.n	8015d18 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8015cec:	687b      	ldr	r3, [r7, #4]
 8015cee:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	32ae      	adds	r2, #174	; 0xae
 8015cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015cfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015cfc:	2b00      	cmp	r3, #0
 8015cfe:	d00b      	beq.n	8015d18 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8015d00:	687b      	ldr	r3, [r7, #4]
 8015d02:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	32ae      	adds	r2, #174	; 0xae
 8015d0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015d0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d10:	78fa      	ldrb	r2, [r7, #3]
 8015d12:	4611      	mov	r1, r2
 8015d14:	6878      	ldr	r0, [r7, #4]
 8015d16:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8015d18:	2300      	movs	r3, #0
}
 8015d1a:	4618      	mov	r0, r3
 8015d1c:	3708      	adds	r7, #8
 8015d1e:	46bd      	mov	sp, r7
 8015d20:	bd80      	pop	{r7, pc}

08015d22 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8015d22:	b480      	push	{r7}
 8015d24:	b083      	sub	sp, #12
 8015d26:	af00      	add	r7, sp, #0
 8015d28:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8015d2a:	2300      	movs	r3, #0
}
 8015d2c:	4618      	mov	r0, r3
 8015d2e:	370c      	adds	r7, #12
 8015d30:	46bd      	mov	sp, r7
 8015d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d36:	4770      	bx	lr

08015d38 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8015d38:	b580      	push	{r7, lr}
 8015d3a:	b084      	sub	sp, #16
 8015d3c:	af00      	add	r7, sp, #0
 8015d3e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8015d40:	2300      	movs	r3, #0
 8015d42:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8015d44:	687b      	ldr	r3, [r7, #4]
 8015d46:	2201      	movs	r2, #1
 8015d48:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	d00e      	beq.n	8015d74 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8015d5c:	685b      	ldr	r3, [r3, #4]
 8015d5e:	687a      	ldr	r2, [r7, #4]
 8015d60:	6852      	ldr	r2, [r2, #4]
 8015d62:	b2d2      	uxtb	r2, r2
 8015d64:	4611      	mov	r1, r2
 8015d66:	6878      	ldr	r0, [r7, #4]
 8015d68:	4798      	blx	r3
 8015d6a:	4603      	mov	r3, r0
 8015d6c:	2b00      	cmp	r3, #0
 8015d6e:	d001      	beq.n	8015d74 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8015d70:	2303      	movs	r3, #3
 8015d72:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8015d74:	7bfb      	ldrb	r3, [r7, #15]
}
 8015d76:	4618      	mov	r0, r3
 8015d78:	3710      	adds	r7, #16
 8015d7a:	46bd      	mov	sp, r7
 8015d7c:	bd80      	pop	{r7, pc}

08015d7e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015d7e:	b480      	push	{r7}
 8015d80:	b083      	sub	sp, #12
 8015d82:	af00      	add	r7, sp, #0
 8015d84:	6078      	str	r0, [r7, #4]
 8015d86:	460b      	mov	r3, r1
 8015d88:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015d8a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015d8c:	4618      	mov	r0, r3
 8015d8e:	370c      	adds	r7, #12
 8015d90:	46bd      	mov	sp, r7
 8015d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d96:	4770      	bx	lr

08015d98 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8015d98:	b480      	push	{r7}
 8015d9a:	b083      	sub	sp, #12
 8015d9c:	af00      	add	r7, sp, #0
 8015d9e:	6078      	str	r0, [r7, #4]
 8015da0:	460b      	mov	r3, r1
 8015da2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8015da4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8015da6:	4618      	mov	r0, r3
 8015da8:	370c      	adds	r7, #12
 8015daa:	46bd      	mov	sp, r7
 8015dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015db0:	4770      	bx	lr

08015db2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8015db2:	b580      	push	{r7, lr}
 8015db4:	b086      	sub	sp, #24
 8015db6:	af00      	add	r7, sp, #0
 8015db8:	6078      	str	r0, [r7, #4]
 8015dba:	460b      	mov	r3, r1
 8015dbc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8015dc6:	2300      	movs	r3, #0
 8015dc8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8015dca:	68fb      	ldr	r3, [r7, #12]
 8015dcc:	885b      	ldrh	r3, [r3, #2]
 8015dce:	b29a      	uxth	r2, r3
 8015dd0:	68fb      	ldr	r3, [r7, #12]
 8015dd2:	781b      	ldrb	r3, [r3, #0]
 8015dd4:	b29b      	uxth	r3, r3
 8015dd6:	429a      	cmp	r2, r3
 8015dd8:	d920      	bls.n	8015e1c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8015dda:	68fb      	ldr	r3, [r7, #12]
 8015ddc:	781b      	ldrb	r3, [r3, #0]
 8015dde:	b29b      	uxth	r3, r3
 8015de0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8015de2:	e013      	b.n	8015e0c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8015de4:	f107 030a 	add.w	r3, r7, #10
 8015de8:	4619      	mov	r1, r3
 8015dea:	6978      	ldr	r0, [r7, #20]
 8015dec:	f000 f81b 	bl	8015e26 <USBD_GetNextDesc>
 8015df0:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8015df2:	697b      	ldr	r3, [r7, #20]
 8015df4:	785b      	ldrb	r3, [r3, #1]
 8015df6:	2b05      	cmp	r3, #5
 8015df8:	d108      	bne.n	8015e0c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8015dfa:	697b      	ldr	r3, [r7, #20]
 8015dfc:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8015dfe:	693b      	ldr	r3, [r7, #16]
 8015e00:	789b      	ldrb	r3, [r3, #2]
 8015e02:	78fa      	ldrb	r2, [r7, #3]
 8015e04:	429a      	cmp	r2, r3
 8015e06:	d008      	beq.n	8015e1a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8015e08:	2300      	movs	r3, #0
 8015e0a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8015e0c:	68fb      	ldr	r3, [r7, #12]
 8015e0e:	885b      	ldrh	r3, [r3, #2]
 8015e10:	b29a      	uxth	r2, r3
 8015e12:	897b      	ldrh	r3, [r7, #10]
 8015e14:	429a      	cmp	r2, r3
 8015e16:	d8e5      	bhi.n	8015de4 <USBD_GetEpDesc+0x32>
 8015e18:	e000      	b.n	8015e1c <USBD_GetEpDesc+0x6a>
          break;
 8015e1a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8015e1c:	693b      	ldr	r3, [r7, #16]
}
 8015e1e:	4618      	mov	r0, r3
 8015e20:	3718      	adds	r7, #24
 8015e22:	46bd      	mov	sp, r7
 8015e24:	bd80      	pop	{r7, pc}

08015e26 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8015e26:	b480      	push	{r7}
 8015e28:	b085      	sub	sp, #20
 8015e2a:	af00      	add	r7, sp, #0
 8015e2c:	6078      	str	r0, [r7, #4]
 8015e2e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8015e30:	687b      	ldr	r3, [r7, #4]
 8015e32:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8015e34:	683b      	ldr	r3, [r7, #0]
 8015e36:	881a      	ldrh	r2, [r3, #0]
 8015e38:	68fb      	ldr	r3, [r7, #12]
 8015e3a:	781b      	ldrb	r3, [r3, #0]
 8015e3c:	b29b      	uxth	r3, r3
 8015e3e:	4413      	add	r3, r2
 8015e40:	b29a      	uxth	r2, r3
 8015e42:	683b      	ldr	r3, [r7, #0]
 8015e44:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8015e46:	68fb      	ldr	r3, [r7, #12]
 8015e48:	781b      	ldrb	r3, [r3, #0]
 8015e4a:	461a      	mov	r2, r3
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	4413      	add	r3, r2
 8015e50:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8015e52:	68fb      	ldr	r3, [r7, #12]
}
 8015e54:	4618      	mov	r0, r3
 8015e56:	3714      	adds	r7, #20
 8015e58:	46bd      	mov	sp, r7
 8015e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e5e:	4770      	bx	lr

08015e60 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8015e60:	b480      	push	{r7}
 8015e62:	b087      	sub	sp, #28
 8015e64:	af00      	add	r7, sp, #0
 8015e66:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8015e68:	687b      	ldr	r3, [r7, #4]
 8015e6a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8015e6c:	697b      	ldr	r3, [r7, #20]
 8015e6e:	781b      	ldrb	r3, [r3, #0]
 8015e70:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8015e72:	697b      	ldr	r3, [r7, #20]
 8015e74:	3301      	adds	r3, #1
 8015e76:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8015e78:	697b      	ldr	r3, [r7, #20]
 8015e7a:	781b      	ldrb	r3, [r3, #0]
 8015e7c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8015e7e:	8a3b      	ldrh	r3, [r7, #16]
 8015e80:	021b      	lsls	r3, r3, #8
 8015e82:	b21a      	sxth	r2, r3
 8015e84:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8015e88:	4313      	orrs	r3, r2
 8015e8a:	b21b      	sxth	r3, r3
 8015e8c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8015e8e:	89fb      	ldrh	r3, [r7, #14]
}
 8015e90:	4618      	mov	r0, r3
 8015e92:	371c      	adds	r7, #28
 8015e94:	46bd      	mov	sp, r7
 8015e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e9a:	4770      	bx	lr

08015e9c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015e9c:	b580      	push	{r7, lr}
 8015e9e:	b084      	sub	sp, #16
 8015ea0:	af00      	add	r7, sp, #0
 8015ea2:	6078      	str	r0, [r7, #4]
 8015ea4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015ea6:	2300      	movs	r3, #0
 8015ea8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015eaa:	683b      	ldr	r3, [r7, #0]
 8015eac:	781b      	ldrb	r3, [r3, #0]
 8015eae:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015eb2:	2b40      	cmp	r3, #64	; 0x40
 8015eb4:	d005      	beq.n	8015ec2 <USBD_StdDevReq+0x26>
 8015eb6:	2b40      	cmp	r3, #64	; 0x40
 8015eb8:	d857      	bhi.n	8015f6a <USBD_StdDevReq+0xce>
 8015eba:	2b00      	cmp	r3, #0
 8015ebc:	d00f      	beq.n	8015ede <USBD_StdDevReq+0x42>
 8015ebe:	2b20      	cmp	r3, #32
 8015ec0:	d153      	bne.n	8015f6a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8015ec2:	687b      	ldr	r3, [r7, #4]
 8015ec4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	32ae      	adds	r2, #174	; 0xae
 8015ecc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ed0:	689b      	ldr	r3, [r3, #8]
 8015ed2:	6839      	ldr	r1, [r7, #0]
 8015ed4:	6878      	ldr	r0, [r7, #4]
 8015ed6:	4798      	blx	r3
 8015ed8:	4603      	mov	r3, r0
 8015eda:	73fb      	strb	r3, [r7, #15]
      break;
 8015edc:	e04a      	b.n	8015f74 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8015ede:	683b      	ldr	r3, [r7, #0]
 8015ee0:	785b      	ldrb	r3, [r3, #1]
 8015ee2:	2b09      	cmp	r3, #9
 8015ee4:	d83b      	bhi.n	8015f5e <USBD_StdDevReq+0xc2>
 8015ee6:	a201      	add	r2, pc, #4	; (adr r2, 8015eec <USBD_StdDevReq+0x50>)
 8015ee8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015eec:	08015f41 	.word	0x08015f41
 8015ef0:	08015f55 	.word	0x08015f55
 8015ef4:	08015f5f 	.word	0x08015f5f
 8015ef8:	08015f4b 	.word	0x08015f4b
 8015efc:	08015f5f 	.word	0x08015f5f
 8015f00:	08015f1f 	.word	0x08015f1f
 8015f04:	08015f15 	.word	0x08015f15
 8015f08:	08015f5f 	.word	0x08015f5f
 8015f0c:	08015f37 	.word	0x08015f37
 8015f10:	08015f29 	.word	0x08015f29
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8015f14:	6839      	ldr	r1, [r7, #0]
 8015f16:	6878      	ldr	r0, [r7, #4]
 8015f18:	f000 fa3c 	bl	8016394 <USBD_GetDescriptor>
          break;
 8015f1c:	e024      	b.n	8015f68 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8015f1e:	6839      	ldr	r1, [r7, #0]
 8015f20:	6878      	ldr	r0, [r7, #4]
 8015f22:	f000 fba1 	bl	8016668 <USBD_SetAddress>
          break;
 8015f26:	e01f      	b.n	8015f68 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8015f28:	6839      	ldr	r1, [r7, #0]
 8015f2a:	6878      	ldr	r0, [r7, #4]
 8015f2c:	f000 fbe0 	bl	80166f0 <USBD_SetConfig>
 8015f30:	4603      	mov	r3, r0
 8015f32:	73fb      	strb	r3, [r7, #15]
          break;
 8015f34:	e018      	b.n	8015f68 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8015f36:	6839      	ldr	r1, [r7, #0]
 8015f38:	6878      	ldr	r0, [r7, #4]
 8015f3a:	f000 fc83 	bl	8016844 <USBD_GetConfig>
          break;
 8015f3e:	e013      	b.n	8015f68 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8015f40:	6839      	ldr	r1, [r7, #0]
 8015f42:	6878      	ldr	r0, [r7, #4]
 8015f44:	f000 fcb4 	bl	80168b0 <USBD_GetStatus>
          break;
 8015f48:	e00e      	b.n	8015f68 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8015f4a:	6839      	ldr	r1, [r7, #0]
 8015f4c:	6878      	ldr	r0, [r7, #4]
 8015f4e:	f000 fce3 	bl	8016918 <USBD_SetFeature>
          break;
 8015f52:	e009      	b.n	8015f68 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8015f54:	6839      	ldr	r1, [r7, #0]
 8015f56:	6878      	ldr	r0, [r7, #4]
 8015f58:	f000 fd07 	bl	801696a <USBD_ClrFeature>
          break;
 8015f5c:	e004      	b.n	8015f68 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8015f5e:	6839      	ldr	r1, [r7, #0]
 8015f60:	6878      	ldr	r0, [r7, #4]
 8015f62:	f000 fd5e 	bl	8016a22 <USBD_CtlError>
          break;
 8015f66:	bf00      	nop
      }
      break;
 8015f68:	e004      	b.n	8015f74 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8015f6a:	6839      	ldr	r1, [r7, #0]
 8015f6c:	6878      	ldr	r0, [r7, #4]
 8015f6e:	f000 fd58 	bl	8016a22 <USBD_CtlError>
      break;
 8015f72:	bf00      	nop
  }

  return ret;
 8015f74:	7bfb      	ldrb	r3, [r7, #15]
}
 8015f76:	4618      	mov	r0, r3
 8015f78:	3710      	adds	r7, #16
 8015f7a:	46bd      	mov	sp, r7
 8015f7c:	bd80      	pop	{r7, pc}
 8015f7e:	bf00      	nop

08015f80 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8015f80:	b580      	push	{r7, lr}
 8015f82:	b084      	sub	sp, #16
 8015f84:	af00      	add	r7, sp, #0
 8015f86:	6078      	str	r0, [r7, #4]
 8015f88:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8015f8a:	2300      	movs	r3, #0
 8015f8c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8015f8e:	683b      	ldr	r3, [r7, #0]
 8015f90:	781b      	ldrb	r3, [r3, #0]
 8015f92:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8015f96:	2b40      	cmp	r3, #64	; 0x40
 8015f98:	d005      	beq.n	8015fa6 <USBD_StdItfReq+0x26>
 8015f9a:	2b40      	cmp	r3, #64	; 0x40
 8015f9c:	d852      	bhi.n	8016044 <USBD_StdItfReq+0xc4>
 8015f9e:	2b00      	cmp	r3, #0
 8015fa0:	d001      	beq.n	8015fa6 <USBD_StdItfReq+0x26>
 8015fa2:	2b20      	cmp	r3, #32
 8015fa4:	d14e      	bne.n	8016044 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8015fa6:	687b      	ldr	r3, [r7, #4]
 8015fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8015fac:	b2db      	uxtb	r3, r3
 8015fae:	3b01      	subs	r3, #1
 8015fb0:	2b02      	cmp	r3, #2
 8015fb2:	d840      	bhi.n	8016036 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8015fb4:	683b      	ldr	r3, [r7, #0]
 8015fb6:	889b      	ldrh	r3, [r3, #4]
 8015fb8:	b2db      	uxtb	r3, r3
 8015fba:	2b01      	cmp	r3, #1
 8015fbc:	d836      	bhi.n	801602c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8015fbe:	683b      	ldr	r3, [r7, #0]
 8015fc0:	889b      	ldrh	r3, [r3, #4]
 8015fc2:	b2db      	uxtb	r3, r3
 8015fc4:	4619      	mov	r1, r3
 8015fc6:	6878      	ldr	r0, [r7, #4]
 8015fc8:	f7ff fed9 	bl	8015d7e <USBD_CoreFindIF>
 8015fcc:	4603      	mov	r3, r0
 8015fce:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8015fd0:	7bbb      	ldrb	r3, [r7, #14]
 8015fd2:	2bff      	cmp	r3, #255	; 0xff
 8015fd4:	d01d      	beq.n	8016012 <USBD_StdItfReq+0x92>
 8015fd6:	7bbb      	ldrb	r3, [r7, #14]
 8015fd8:	2b00      	cmp	r3, #0
 8015fda:	d11a      	bne.n	8016012 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8015fdc:	7bba      	ldrb	r2, [r7, #14]
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	32ae      	adds	r2, #174	; 0xae
 8015fe2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015fe6:	689b      	ldr	r3, [r3, #8]
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d00f      	beq.n	801600c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8015fec:	7bba      	ldrb	r2, [r7, #14]
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8015ff4:	7bba      	ldrb	r2, [r7, #14]
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	32ae      	adds	r2, #174	; 0xae
 8015ffa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8015ffe:	689b      	ldr	r3, [r3, #8]
 8016000:	6839      	ldr	r1, [r7, #0]
 8016002:	6878      	ldr	r0, [r7, #4]
 8016004:	4798      	blx	r3
 8016006:	4603      	mov	r3, r0
 8016008:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 801600a:	e004      	b.n	8016016 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 801600c:	2303      	movs	r3, #3
 801600e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8016010:	e001      	b.n	8016016 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8016012:	2303      	movs	r3, #3
 8016014:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8016016:	683b      	ldr	r3, [r7, #0]
 8016018:	88db      	ldrh	r3, [r3, #6]
 801601a:	2b00      	cmp	r3, #0
 801601c:	d110      	bne.n	8016040 <USBD_StdItfReq+0xc0>
 801601e:	7bfb      	ldrb	r3, [r7, #15]
 8016020:	2b00      	cmp	r3, #0
 8016022:	d10d      	bne.n	8016040 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8016024:	6878      	ldr	r0, [r7, #4]
 8016026:	f000 fdc7 	bl	8016bb8 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 801602a:	e009      	b.n	8016040 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 801602c:	6839      	ldr	r1, [r7, #0]
 801602e:	6878      	ldr	r0, [r7, #4]
 8016030:	f000 fcf7 	bl	8016a22 <USBD_CtlError>
          break;
 8016034:	e004      	b.n	8016040 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8016036:	6839      	ldr	r1, [r7, #0]
 8016038:	6878      	ldr	r0, [r7, #4]
 801603a:	f000 fcf2 	bl	8016a22 <USBD_CtlError>
          break;
 801603e:	e000      	b.n	8016042 <USBD_StdItfReq+0xc2>
          break;
 8016040:	bf00      	nop
      }
      break;
 8016042:	e004      	b.n	801604e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8016044:	6839      	ldr	r1, [r7, #0]
 8016046:	6878      	ldr	r0, [r7, #4]
 8016048:	f000 fceb 	bl	8016a22 <USBD_CtlError>
      break;
 801604c:	bf00      	nop
  }

  return ret;
 801604e:	7bfb      	ldrb	r3, [r7, #15]
}
 8016050:	4618      	mov	r0, r3
 8016052:	3710      	adds	r7, #16
 8016054:	46bd      	mov	sp, r7
 8016056:	bd80      	pop	{r7, pc}

08016058 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016058:	b580      	push	{r7, lr}
 801605a:	b084      	sub	sp, #16
 801605c:	af00      	add	r7, sp, #0
 801605e:	6078      	str	r0, [r7, #4]
 8016060:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8016062:	2300      	movs	r3, #0
 8016064:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8016066:	683b      	ldr	r3, [r7, #0]
 8016068:	889b      	ldrh	r3, [r3, #4]
 801606a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801606c:	683b      	ldr	r3, [r7, #0]
 801606e:	781b      	ldrb	r3, [r3, #0]
 8016070:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8016074:	2b40      	cmp	r3, #64	; 0x40
 8016076:	d007      	beq.n	8016088 <USBD_StdEPReq+0x30>
 8016078:	2b40      	cmp	r3, #64	; 0x40
 801607a:	f200 817f 	bhi.w	801637c <USBD_StdEPReq+0x324>
 801607e:	2b00      	cmp	r3, #0
 8016080:	d02a      	beq.n	80160d8 <USBD_StdEPReq+0x80>
 8016082:	2b20      	cmp	r3, #32
 8016084:	f040 817a 	bne.w	801637c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8016088:	7bbb      	ldrb	r3, [r7, #14]
 801608a:	4619      	mov	r1, r3
 801608c:	6878      	ldr	r0, [r7, #4]
 801608e:	f7ff fe83 	bl	8015d98 <USBD_CoreFindEP>
 8016092:	4603      	mov	r3, r0
 8016094:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8016096:	7b7b      	ldrb	r3, [r7, #13]
 8016098:	2bff      	cmp	r3, #255	; 0xff
 801609a:	f000 8174 	beq.w	8016386 <USBD_StdEPReq+0x32e>
 801609e:	7b7b      	ldrb	r3, [r7, #13]
 80160a0:	2b00      	cmp	r3, #0
 80160a2:	f040 8170 	bne.w	8016386 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80160a6:	7b7a      	ldrb	r2, [r7, #13]
 80160a8:	687b      	ldr	r3, [r7, #4]
 80160aa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80160ae:	7b7a      	ldrb	r2, [r7, #13]
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	32ae      	adds	r2, #174	; 0xae
 80160b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160b8:	689b      	ldr	r3, [r3, #8]
 80160ba:	2b00      	cmp	r3, #0
 80160bc:	f000 8163 	beq.w	8016386 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80160c0:	7b7a      	ldrb	r2, [r7, #13]
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	32ae      	adds	r2, #174	; 0xae
 80160c6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80160ca:	689b      	ldr	r3, [r3, #8]
 80160cc:	6839      	ldr	r1, [r7, #0]
 80160ce:	6878      	ldr	r0, [r7, #4]
 80160d0:	4798      	blx	r3
 80160d2:	4603      	mov	r3, r0
 80160d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80160d6:	e156      	b.n	8016386 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80160d8:	683b      	ldr	r3, [r7, #0]
 80160da:	785b      	ldrb	r3, [r3, #1]
 80160dc:	2b03      	cmp	r3, #3
 80160de:	d008      	beq.n	80160f2 <USBD_StdEPReq+0x9a>
 80160e0:	2b03      	cmp	r3, #3
 80160e2:	f300 8145 	bgt.w	8016370 <USBD_StdEPReq+0x318>
 80160e6:	2b00      	cmp	r3, #0
 80160e8:	f000 809b 	beq.w	8016222 <USBD_StdEPReq+0x1ca>
 80160ec:	2b01      	cmp	r3, #1
 80160ee:	d03c      	beq.n	801616a <USBD_StdEPReq+0x112>
 80160f0:	e13e      	b.n	8016370 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80160f2:	687b      	ldr	r3, [r7, #4]
 80160f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80160f8:	b2db      	uxtb	r3, r3
 80160fa:	2b02      	cmp	r3, #2
 80160fc:	d002      	beq.n	8016104 <USBD_StdEPReq+0xac>
 80160fe:	2b03      	cmp	r3, #3
 8016100:	d016      	beq.n	8016130 <USBD_StdEPReq+0xd8>
 8016102:	e02c      	b.n	801615e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016104:	7bbb      	ldrb	r3, [r7, #14]
 8016106:	2b00      	cmp	r3, #0
 8016108:	d00d      	beq.n	8016126 <USBD_StdEPReq+0xce>
 801610a:	7bbb      	ldrb	r3, [r7, #14]
 801610c:	2b80      	cmp	r3, #128	; 0x80
 801610e:	d00a      	beq.n	8016126 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016110:	7bbb      	ldrb	r3, [r7, #14]
 8016112:	4619      	mov	r1, r3
 8016114:	6878      	ldr	r0, [r7, #4]
 8016116:	f001 f967 	bl	80173e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 801611a:	2180      	movs	r1, #128	; 0x80
 801611c:	6878      	ldr	r0, [r7, #4]
 801611e:	f001 f963 	bl	80173e8 <USBD_LL_StallEP>
 8016122:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8016124:	e020      	b.n	8016168 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8016126:	6839      	ldr	r1, [r7, #0]
 8016128:	6878      	ldr	r0, [r7, #4]
 801612a:	f000 fc7a 	bl	8016a22 <USBD_CtlError>
              break;
 801612e:	e01b      	b.n	8016168 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8016130:	683b      	ldr	r3, [r7, #0]
 8016132:	885b      	ldrh	r3, [r3, #2]
 8016134:	2b00      	cmp	r3, #0
 8016136:	d10e      	bne.n	8016156 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8016138:	7bbb      	ldrb	r3, [r7, #14]
 801613a:	2b00      	cmp	r3, #0
 801613c:	d00b      	beq.n	8016156 <USBD_StdEPReq+0xfe>
 801613e:	7bbb      	ldrb	r3, [r7, #14]
 8016140:	2b80      	cmp	r3, #128	; 0x80
 8016142:	d008      	beq.n	8016156 <USBD_StdEPReq+0xfe>
 8016144:	683b      	ldr	r3, [r7, #0]
 8016146:	88db      	ldrh	r3, [r3, #6]
 8016148:	2b00      	cmp	r3, #0
 801614a:	d104      	bne.n	8016156 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 801614c:	7bbb      	ldrb	r3, [r7, #14]
 801614e:	4619      	mov	r1, r3
 8016150:	6878      	ldr	r0, [r7, #4]
 8016152:	f001 f949 	bl	80173e8 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8016156:	6878      	ldr	r0, [r7, #4]
 8016158:	f000 fd2e 	bl	8016bb8 <USBD_CtlSendStatus>

              break;
 801615c:	e004      	b.n	8016168 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 801615e:	6839      	ldr	r1, [r7, #0]
 8016160:	6878      	ldr	r0, [r7, #4]
 8016162:	f000 fc5e 	bl	8016a22 <USBD_CtlError>
              break;
 8016166:	bf00      	nop
          }
          break;
 8016168:	e107      	b.n	801637a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016170:	b2db      	uxtb	r3, r3
 8016172:	2b02      	cmp	r3, #2
 8016174:	d002      	beq.n	801617c <USBD_StdEPReq+0x124>
 8016176:	2b03      	cmp	r3, #3
 8016178:	d016      	beq.n	80161a8 <USBD_StdEPReq+0x150>
 801617a:	e04b      	b.n	8016214 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 801617c:	7bbb      	ldrb	r3, [r7, #14]
 801617e:	2b00      	cmp	r3, #0
 8016180:	d00d      	beq.n	801619e <USBD_StdEPReq+0x146>
 8016182:	7bbb      	ldrb	r3, [r7, #14]
 8016184:	2b80      	cmp	r3, #128	; 0x80
 8016186:	d00a      	beq.n	801619e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8016188:	7bbb      	ldrb	r3, [r7, #14]
 801618a:	4619      	mov	r1, r3
 801618c:	6878      	ldr	r0, [r7, #4]
 801618e:	f001 f92b 	bl	80173e8 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8016192:	2180      	movs	r1, #128	; 0x80
 8016194:	6878      	ldr	r0, [r7, #4]
 8016196:	f001 f927 	bl	80173e8 <USBD_LL_StallEP>
 801619a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 801619c:	e040      	b.n	8016220 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 801619e:	6839      	ldr	r1, [r7, #0]
 80161a0:	6878      	ldr	r0, [r7, #4]
 80161a2:	f000 fc3e 	bl	8016a22 <USBD_CtlError>
              break;
 80161a6:	e03b      	b.n	8016220 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80161a8:	683b      	ldr	r3, [r7, #0]
 80161aa:	885b      	ldrh	r3, [r3, #2]
 80161ac:	2b00      	cmp	r3, #0
 80161ae:	d136      	bne.n	801621e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80161b0:	7bbb      	ldrb	r3, [r7, #14]
 80161b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80161b6:	2b00      	cmp	r3, #0
 80161b8:	d004      	beq.n	80161c4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80161ba:	7bbb      	ldrb	r3, [r7, #14]
 80161bc:	4619      	mov	r1, r3
 80161be:	6878      	ldr	r0, [r7, #4]
 80161c0:	f001 f931 	bl	8017426 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80161c4:	6878      	ldr	r0, [r7, #4]
 80161c6:	f000 fcf7 	bl	8016bb8 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80161ca:	7bbb      	ldrb	r3, [r7, #14]
 80161cc:	4619      	mov	r1, r3
 80161ce:	6878      	ldr	r0, [r7, #4]
 80161d0:	f7ff fde2 	bl	8015d98 <USBD_CoreFindEP>
 80161d4:	4603      	mov	r3, r0
 80161d6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80161d8:	7b7b      	ldrb	r3, [r7, #13]
 80161da:	2bff      	cmp	r3, #255	; 0xff
 80161dc:	d01f      	beq.n	801621e <USBD_StdEPReq+0x1c6>
 80161de:	7b7b      	ldrb	r3, [r7, #13]
 80161e0:	2b00      	cmp	r3, #0
 80161e2:	d11c      	bne.n	801621e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 80161e4:	7b7a      	ldrb	r2, [r7, #13]
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80161ec:	7b7a      	ldrb	r2, [r7, #13]
 80161ee:	687b      	ldr	r3, [r7, #4]
 80161f0:	32ae      	adds	r2, #174	; 0xae
 80161f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80161f6:	689b      	ldr	r3, [r3, #8]
 80161f8:	2b00      	cmp	r3, #0
 80161fa:	d010      	beq.n	801621e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80161fc:	7b7a      	ldrb	r2, [r7, #13]
 80161fe:	687b      	ldr	r3, [r7, #4]
 8016200:	32ae      	adds	r2, #174	; 0xae
 8016202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8016206:	689b      	ldr	r3, [r3, #8]
 8016208:	6839      	ldr	r1, [r7, #0]
 801620a:	6878      	ldr	r0, [r7, #4]
 801620c:	4798      	blx	r3
 801620e:	4603      	mov	r3, r0
 8016210:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8016212:	e004      	b.n	801621e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8016214:	6839      	ldr	r1, [r7, #0]
 8016216:	6878      	ldr	r0, [r7, #4]
 8016218:	f000 fc03 	bl	8016a22 <USBD_CtlError>
              break;
 801621c:	e000      	b.n	8016220 <USBD_StdEPReq+0x1c8>
              break;
 801621e:	bf00      	nop
          }
          break;
 8016220:	e0ab      	b.n	801637a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016228:	b2db      	uxtb	r3, r3
 801622a:	2b02      	cmp	r3, #2
 801622c:	d002      	beq.n	8016234 <USBD_StdEPReq+0x1dc>
 801622e:	2b03      	cmp	r3, #3
 8016230:	d032      	beq.n	8016298 <USBD_StdEPReq+0x240>
 8016232:	e097      	b.n	8016364 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8016234:	7bbb      	ldrb	r3, [r7, #14]
 8016236:	2b00      	cmp	r3, #0
 8016238:	d007      	beq.n	801624a <USBD_StdEPReq+0x1f2>
 801623a:	7bbb      	ldrb	r3, [r7, #14]
 801623c:	2b80      	cmp	r3, #128	; 0x80
 801623e:	d004      	beq.n	801624a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8016240:	6839      	ldr	r1, [r7, #0]
 8016242:	6878      	ldr	r0, [r7, #4]
 8016244:	f000 fbed 	bl	8016a22 <USBD_CtlError>
                break;
 8016248:	e091      	b.n	801636e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 801624a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801624e:	2b00      	cmp	r3, #0
 8016250:	da0b      	bge.n	801626a <USBD_StdEPReq+0x212>
 8016252:	7bbb      	ldrb	r3, [r7, #14]
 8016254:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8016258:	4613      	mov	r3, r2
 801625a:	009b      	lsls	r3, r3, #2
 801625c:	4413      	add	r3, r2
 801625e:	009b      	lsls	r3, r3, #2
 8016260:	3310      	adds	r3, #16
 8016262:	687a      	ldr	r2, [r7, #4]
 8016264:	4413      	add	r3, r2
 8016266:	3304      	adds	r3, #4
 8016268:	e00b      	b.n	8016282 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801626a:	7bbb      	ldrb	r3, [r7, #14]
 801626c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016270:	4613      	mov	r3, r2
 8016272:	009b      	lsls	r3, r3, #2
 8016274:	4413      	add	r3, r2
 8016276:	009b      	lsls	r3, r3, #2
 8016278:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801627c:	687a      	ldr	r2, [r7, #4]
 801627e:	4413      	add	r3, r2
 8016280:	3304      	adds	r3, #4
 8016282:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8016284:	68bb      	ldr	r3, [r7, #8]
 8016286:	2200      	movs	r2, #0
 8016288:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 801628a:	68bb      	ldr	r3, [r7, #8]
 801628c:	2202      	movs	r2, #2
 801628e:	4619      	mov	r1, r3
 8016290:	6878      	ldr	r0, [r7, #4]
 8016292:	f000 fc37 	bl	8016b04 <USBD_CtlSendData>
              break;
 8016296:	e06a      	b.n	801636e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8016298:	f997 300e 	ldrsb.w	r3, [r7, #14]
 801629c:	2b00      	cmp	r3, #0
 801629e:	da11      	bge.n	80162c4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80162a0:	7bbb      	ldrb	r3, [r7, #14]
 80162a2:	f003 020f 	and.w	r2, r3, #15
 80162a6:	6879      	ldr	r1, [r7, #4]
 80162a8:	4613      	mov	r3, r2
 80162aa:	009b      	lsls	r3, r3, #2
 80162ac:	4413      	add	r3, r2
 80162ae:	009b      	lsls	r3, r3, #2
 80162b0:	440b      	add	r3, r1
 80162b2:	3324      	adds	r3, #36	; 0x24
 80162b4:	881b      	ldrh	r3, [r3, #0]
 80162b6:	2b00      	cmp	r3, #0
 80162b8:	d117      	bne.n	80162ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80162ba:	6839      	ldr	r1, [r7, #0]
 80162bc:	6878      	ldr	r0, [r7, #4]
 80162be:	f000 fbb0 	bl	8016a22 <USBD_CtlError>
                  break;
 80162c2:	e054      	b.n	801636e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80162c4:	7bbb      	ldrb	r3, [r7, #14]
 80162c6:	f003 020f 	and.w	r2, r3, #15
 80162ca:	6879      	ldr	r1, [r7, #4]
 80162cc:	4613      	mov	r3, r2
 80162ce:	009b      	lsls	r3, r3, #2
 80162d0:	4413      	add	r3, r2
 80162d2:	009b      	lsls	r3, r3, #2
 80162d4:	440b      	add	r3, r1
 80162d6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80162da:	881b      	ldrh	r3, [r3, #0]
 80162dc:	2b00      	cmp	r3, #0
 80162de:	d104      	bne.n	80162ea <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80162e0:	6839      	ldr	r1, [r7, #0]
 80162e2:	6878      	ldr	r0, [r7, #4]
 80162e4:	f000 fb9d 	bl	8016a22 <USBD_CtlError>
                  break;
 80162e8:	e041      	b.n	801636e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80162ea:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80162ee:	2b00      	cmp	r3, #0
 80162f0:	da0b      	bge.n	801630a <USBD_StdEPReq+0x2b2>
 80162f2:	7bbb      	ldrb	r3, [r7, #14]
 80162f4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80162f8:	4613      	mov	r3, r2
 80162fa:	009b      	lsls	r3, r3, #2
 80162fc:	4413      	add	r3, r2
 80162fe:	009b      	lsls	r3, r3, #2
 8016300:	3310      	adds	r3, #16
 8016302:	687a      	ldr	r2, [r7, #4]
 8016304:	4413      	add	r3, r2
 8016306:	3304      	adds	r3, #4
 8016308:	e00b      	b.n	8016322 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 801630a:	7bbb      	ldrb	r3, [r7, #14]
 801630c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8016310:	4613      	mov	r3, r2
 8016312:	009b      	lsls	r3, r3, #2
 8016314:	4413      	add	r3, r2
 8016316:	009b      	lsls	r3, r3, #2
 8016318:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 801631c:	687a      	ldr	r2, [r7, #4]
 801631e:	4413      	add	r3, r2
 8016320:	3304      	adds	r3, #4
 8016322:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8016324:	7bbb      	ldrb	r3, [r7, #14]
 8016326:	2b00      	cmp	r3, #0
 8016328:	d002      	beq.n	8016330 <USBD_StdEPReq+0x2d8>
 801632a:	7bbb      	ldrb	r3, [r7, #14]
 801632c:	2b80      	cmp	r3, #128	; 0x80
 801632e:	d103      	bne.n	8016338 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8016330:	68bb      	ldr	r3, [r7, #8]
 8016332:	2200      	movs	r2, #0
 8016334:	601a      	str	r2, [r3, #0]
 8016336:	e00e      	b.n	8016356 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8016338:	7bbb      	ldrb	r3, [r7, #14]
 801633a:	4619      	mov	r1, r3
 801633c:	6878      	ldr	r0, [r7, #4]
 801633e:	f001 f891 	bl	8017464 <USBD_LL_IsStallEP>
 8016342:	4603      	mov	r3, r0
 8016344:	2b00      	cmp	r3, #0
 8016346:	d003      	beq.n	8016350 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8016348:	68bb      	ldr	r3, [r7, #8]
 801634a:	2201      	movs	r2, #1
 801634c:	601a      	str	r2, [r3, #0]
 801634e:	e002      	b.n	8016356 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8016350:	68bb      	ldr	r3, [r7, #8]
 8016352:	2200      	movs	r2, #0
 8016354:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8016356:	68bb      	ldr	r3, [r7, #8]
 8016358:	2202      	movs	r2, #2
 801635a:	4619      	mov	r1, r3
 801635c:	6878      	ldr	r0, [r7, #4]
 801635e:	f000 fbd1 	bl	8016b04 <USBD_CtlSendData>
              break;
 8016362:	e004      	b.n	801636e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8016364:	6839      	ldr	r1, [r7, #0]
 8016366:	6878      	ldr	r0, [r7, #4]
 8016368:	f000 fb5b 	bl	8016a22 <USBD_CtlError>
              break;
 801636c:	bf00      	nop
          }
          break;
 801636e:	e004      	b.n	801637a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8016370:	6839      	ldr	r1, [r7, #0]
 8016372:	6878      	ldr	r0, [r7, #4]
 8016374:	f000 fb55 	bl	8016a22 <USBD_CtlError>
          break;
 8016378:	bf00      	nop
      }
      break;
 801637a:	e005      	b.n	8016388 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 801637c:	6839      	ldr	r1, [r7, #0]
 801637e:	6878      	ldr	r0, [r7, #4]
 8016380:	f000 fb4f 	bl	8016a22 <USBD_CtlError>
      break;
 8016384:	e000      	b.n	8016388 <USBD_StdEPReq+0x330>
      break;
 8016386:	bf00      	nop
  }

  return ret;
 8016388:	7bfb      	ldrb	r3, [r7, #15]
}
 801638a:	4618      	mov	r0, r3
 801638c:	3710      	adds	r7, #16
 801638e:	46bd      	mov	sp, r7
 8016390:	bd80      	pop	{r7, pc}
	...

08016394 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016394:	b580      	push	{r7, lr}
 8016396:	b084      	sub	sp, #16
 8016398:	af00      	add	r7, sp, #0
 801639a:	6078      	str	r0, [r7, #4]
 801639c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 801639e:	2300      	movs	r3, #0
 80163a0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80163a2:	2300      	movs	r3, #0
 80163a4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80163a6:	2300      	movs	r3, #0
 80163a8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80163aa:	683b      	ldr	r3, [r7, #0]
 80163ac:	885b      	ldrh	r3, [r3, #2]
 80163ae:	0a1b      	lsrs	r3, r3, #8
 80163b0:	b29b      	uxth	r3, r3
 80163b2:	3b01      	subs	r3, #1
 80163b4:	2b06      	cmp	r3, #6
 80163b6:	f200 8128 	bhi.w	801660a <USBD_GetDescriptor+0x276>
 80163ba:	a201      	add	r2, pc, #4	; (adr r2, 80163c0 <USBD_GetDescriptor+0x2c>)
 80163bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80163c0:	080163dd 	.word	0x080163dd
 80163c4:	080163f5 	.word	0x080163f5
 80163c8:	08016435 	.word	0x08016435
 80163cc:	0801660b 	.word	0x0801660b
 80163d0:	0801660b 	.word	0x0801660b
 80163d4:	080165ab 	.word	0x080165ab
 80163d8:	080165d7 	.word	0x080165d7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80163dc:	687b      	ldr	r3, [r7, #4]
 80163de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	687a      	ldr	r2, [r7, #4]
 80163e6:	7c12      	ldrb	r2, [r2, #16]
 80163e8:	f107 0108 	add.w	r1, r7, #8
 80163ec:	4610      	mov	r0, r2
 80163ee:	4798      	blx	r3
 80163f0:	60f8      	str	r0, [r7, #12]
      break;
 80163f2:	e112      	b.n	801661a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80163f4:	687b      	ldr	r3, [r7, #4]
 80163f6:	7c1b      	ldrb	r3, [r3, #16]
 80163f8:	2b00      	cmp	r3, #0
 80163fa:	d10d      	bne.n	8016418 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80163fc:	687b      	ldr	r3, [r7, #4]
 80163fe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8016402:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8016404:	f107 0208 	add.w	r2, r7, #8
 8016408:	4610      	mov	r0, r2
 801640a:	4798      	blx	r3
 801640c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801640e:	68fb      	ldr	r3, [r7, #12]
 8016410:	3301      	adds	r3, #1
 8016412:	2202      	movs	r2, #2
 8016414:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8016416:	e100      	b.n	801661a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8016418:	687b      	ldr	r3, [r7, #4]
 801641a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 801641e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8016420:	f107 0208 	add.w	r2, r7, #8
 8016424:	4610      	mov	r0, r2
 8016426:	4798      	blx	r3
 8016428:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801642a:	68fb      	ldr	r3, [r7, #12]
 801642c:	3301      	adds	r3, #1
 801642e:	2202      	movs	r2, #2
 8016430:	701a      	strb	r2, [r3, #0]
      break;
 8016432:	e0f2      	b.n	801661a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8016434:	683b      	ldr	r3, [r7, #0]
 8016436:	885b      	ldrh	r3, [r3, #2]
 8016438:	b2db      	uxtb	r3, r3
 801643a:	2b05      	cmp	r3, #5
 801643c:	f200 80ac 	bhi.w	8016598 <USBD_GetDescriptor+0x204>
 8016440:	a201      	add	r2, pc, #4	; (adr r2, 8016448 <USBD_GetDescriptor+0xb4>)
 8016442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016446:	bf00      	nop
 8016448:	08016461 	.word	0x08016461
 801644c:	08016495 	.word	0x08016495
 8016450:	080164c9 	.word	0x080164c9
 8016454:	080164fd 	.word	0x080164fd
 8016458:	08016531 	.word	0x08016531
 801645c:	08016565 	.word	0x08016565
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016466:	685b      	ldr	r3, [r3, #4]
 8016468:	2b00      	cmp	r3, #0
 801646a:	d00b      	beq.n	8016484 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801646c:	687b      	ldr	r3, [r7, #4]
 801646e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016472:	685b      	ldr	r3, [r3, #4]
 8016474:	687a      	ldr	r2, [r7, #4]
 8016476:	7c12      	ldrb	r2, [r2, #16]
 8016478:	f107 0108 	add.w	r1, r7, #8
 801647c:	4610      	mov	r0, r2
 801647e:	4798      	blx	r3
 8016480:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016482:	e091      	b.n	80165a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016484:	6839      	ldr	r1, [r7, #0]
 8016486:	6878      	ldr	r0, [r7, #4]
 8016488:	f000 facb 	bl	8016a22 <USBD_CtlError>
            err++;
 801648c:	7afb      	ldrb	r3, [r7, #11]
 801648e:	3301      	adds	r3, #1
 8016490:	72fb      	strb	r3, [r7, #11]
          break;
 8016492:	e089      	b.n	80165a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8016494:	687b      	ldr	r3, [r7, #4]
 8016496:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801649a:	689b      	ldr	r3, [r3, #8]
 801649c:	2b00      	cmp	r3, #0
 801649e:	d00b      	beq.n	80164b8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80164a0:	687b      	ldr	r3, [r7, #4]
 80164a2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80164a6:	689b      	ldr	r3, [r3, #8]
 80164a8:	687a      	ldr	r2, [r7, #4]
 80164aa:	7c12      	ldrb	r2, [r2, #16]
 80164ac:	f107 0108 	add.w	r1, r7, #8
 80164b0:	4610      	mov	r0, r2
 80164b2:	4798      	blx	r3
 80164b4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80164b6:	e077      	b.n	80165a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80164b8:	6839      	ldr	r1, [r7, #0]
 80164ba:	6878      	ldr	r0, [r7, #4]
 80164bc:	f000 fab1 	bl	8016a22 <USBD_CtlError>
            err++;
 80164c0:	7afb      	ldrb	r3, [r7, #11]
 80164c2:	3301      	adds	r3, #1
 80164c4:	72fb      	strb	r3, [r7, #11]
          break;
 80164c6:	e06f      	b.n	80165a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80164c8:	687b      	ldr	r3, [r7, #4]
 80164ca:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80164ce:	68db      	ldr	r3, [r3, #12]
 80164d0:	2b00      	cmp	r3, #0
 80164d2:	d00b      	beq.n	80164ec <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80164da:	68db      	ldr	r3, [r3, #12]
 80164dc:	687a      	ldr	r2, [r7, #4]
 80164de:	7c12      	ldrb	r2, [r2, #16]
 80164e0:	f107 0108 	add.w	r1, r7, #8
 80164e4:	4610      	mov	r0, r2
 80164e6:	4798      	blx	r3
 80164e8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80164ea:	e05d      	b.n	80165a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80164ec:	6839      	ldr	r1, [r7, #0]
 80164ee:	6878      	ldr	r0, [r7, #4]
 80164f0:	f000 fa97 	bl	8016a22 <USBD_CtlError>
            err++;
 80164f4:	7afb      	ldrb	r3, [r7, #11]
 80164f6:	3301      	adds	r3, #1
 80164f8:	72fb      	strb	r3, [r7, #11]
          break;
 80164fa:	e055      	b.n	80165a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80164fc:	687b      	ldr	r3, [r7, #4]
 80164fe:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016502:	691b      	ldr	r3, [r3, #16]
 8016504:	2b00      	cmp	r3, #0
 8016506:	d00b      	beq.n	8016520 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801650e:	691b      	ldr	r3, [r3, #16]
 8016510:	687a      	ldr	r2, [r7, #4]
 8016512:	7c12      	ldrb	r2, [r2, #16]
 8016514:	f107 0108 	add.w	r1, r7, #8
 8016518:	4610      	mov	r0, r2
 801651a:	4798      	blx	r3
 801651c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 801651e:	e043      	b.n	80165a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016520:	6839      	ldr	r1, [r7, #0]
 8016522:	6878      	ldr	r0, [r7, #4]
 8016524:	f000 fa7d 	bl	8016a22 <USBD_CtlError>
            err++;
 8016528:	7afb      	ldrb	r3, [r7, #11]
 801652a:	3301      	adds	r3, #1
 801652c:	72fb      	strb	r3, [r7, #11]
          break;
 801652e:	e03b      	b.n	80165a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8016530:	687b      	ldr	r3, [r7, #4]
 8016532:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016536:	695b      	ldr	r3, [r3, #20]
 8016538:	2b00      	cmp	r3, #0
 801653a:	d00b      	beq.n	8016554 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801653c:	687b      	ldr	r3, [r7, #4]
 801653e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016542:	695b      	ldr	r3, [r3, #20]
 8016544:	687a      	ldr	r2, [r7, #4]
 8016546:	7c12      	ldrb	r2, [r2, #16]
 8016548:	f107 0108 	add.w	r1, r7, #8
 801654c:	4610      	mov	r0, r2
 801654e:	4798      	blx	r3
 8016550:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016552:	e029      	b.n	80165a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016554:	6839      	ldr	r1, [r7, #0]
 8016556:	6878      	ldr	r0, [r7, #4]
 8016558:	f000 fa63 	bl	8016a22 <USBD_CtlError>
            err++;
 801655c:	7afb      	ldrb	r3, [r7, #11]
 801655e:	3301      	adds	r3, #1
 8016560:	72fb      	strb	r3, [r7, #11]
          break;
 8016562:	e021      	b.n	80165a8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8016564:	687b      	ldr	r3, [r7, #4]
 8016566:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 801656a:	699b      	ldr	r3, [r3, #24]
 801656c:	2b00      	cmp	r3, #0
 801656e:	d00b      	beq.n	8016588 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8016576:	699b      	ldr	r3, [r3, #24]
 8016578:	687a      	ldr	r2, [r7, #4]
 801657a:	7c12      	ldrb	r2, [r2, #16]
 801657c:	f107 0108 	add.w	r1, r7, #8
 8016580:	4610      	mov	r0, r2
 8016582:	4798      	blx	r3
 8016584:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8016586:	e00f      	b.n	80165a8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8016588:	6839      	ldr	r1, [r7, #0]
 801658a:	6878      	ldr	r0, [r7, #4]
 801658c:	f000 fa49 	bl	8016a22 <USBD_CtlError>
            err++;
 8016590:	7afb      	ldrb	r3, [r7, #11]
 8016592:	3301      	adds	r3, #1
 8016594:	72fb      	strb	r3, [r7, #11]
          break;
 8016596:	e007      	b.n	80165a8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8016598:	6839      	ldr	r1, [r7, #0]
 801659a:	6878      	ldr	r0, [r7, #4]
 801659c:	f000 fa41 	bl	8016a22 <USBD_CtlError>
          err++;
 80165a0:	7afb      	ldrb	r3, [r7, #11]
 80165a2:	3301      	adds	r3, #1
 80165a4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80165a6:	bf00      	nop
      }
      break;
 80165a8:	e037      	b.n	801661a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	7c1b      	ldrb	r3, [r3, #16]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	d109      	bne.n	80165c6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80165b2:	687b      	ldr	r3, [r7, #4]
 80165b4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80165b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80165ba:	f107 0208 	add.w	r2, r7, #8
 80165be:	4610      	mov	r0, r2
 80165c0:	4798      	blx	r3
 80165c2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80165c4:	e029      	b.n	801661a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80165c6:	6839      	ldr	r1, [r7, #0]
 80165c8:	6878      	ldr	r0, [r7, #4]
 80165ca:	f000 fa2a 	bl	8016a22 <USBD_CtlError>
        err++;
 80165ce:	7afb      	ldrb	r3, [r7, #11]
 80165d0:	3301      	adds	r3, #1
 80165d2:	72fb      	strb	r3, [r7, #11]
      break;
 80165d4:	e021      	b.n	801661a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80165d6:	687b      	ldr	r3, [r7, #4]
 80165d8:	7c1b      	ldrb	r3, [r3, #16]
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d10d      	bne.n	80165fa <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80165de:	687b      	ldr	r3, [r7, #4]
 80165e0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80165e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80165e6:	f107 0208 	add.w	r2, r7, #8
 80165ea:	4610      	mov	r0, r2
 80165ec:	4798      	blx	r3
 80165ee:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	3301      	adds	r3, #1
 80165f4:	2207      	movs	r2, #7
 80165f6:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80165f8:	e00f      	b.n	801661a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80165fa:	6839      	ldr	r1, [r7, #0]
 80165fc:	6878      	ldr	r0, [r7, #4]
 80165fe:	f000 fa10 	bl	8016a22 <USBD_CtlError>
        err++;
 8016602:	7afb      	ldrb	r3, [r7, #11]
 8016604:	3301      	adds	r3, #1
 8016606:	72fb      	strb	r3, [r7, #11]
      break;
 8016608:	e007      	b.n	801661a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 801660a:	6839      	ldr	r1, [r7, #0]
 801660c:	6878      	ldr	r0, [r7, #4]
 801660e:	f000 fa08 	bl	8016a22 <USBD_CtlError>
      err++;
 8016612:	7afb      	ldrb	r3, [r7, #11]
 8016614:	3301      	adds	r3, #1
 8016616:	72fb      	strb	r3, [r7, #11]
      break;
 8016618:	bf00      	nop
  }

  if (err != 0U)
 801661a:	7afb      	ldrb	r3, [r7, #11]
 801661c:	2b00      	cmp	r3, #0
 801661e:	d11e      	bne.n	801665e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8016620:	683b      	ldr	r3, [r7, #0]
 8016622:	88db      	ldrh	r3, [r3, #6]
 8016624:	2b00      	cmp	r3, #0
 8016626:	d016      	beq.n	8016656 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8016628:	893b      	ldrh	r3, [r7, #8]
 801662a:	2b00      	cmp	r3, #0
 801662c:	d00e      	beq.n	801664c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 801662e:	683b      	ldr	r3, [r7, #0]
 8016630:	88da      	ldrh	r2, [r3, #6]
 8016632:	893b      	ldrh	r3, [r7, #8]
 8016634:	4293      	cmp	r3, r2
 8016636:	bf28      	it	cs
 8016638:	4613      	movcs	r3, r2
 801663a:	b29b      	uxth	r3, r3
 801663c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 801663e:	893b      	ldrh	r3, [r7, #8]
 8016640:	461a      	mov	r2, r3
 8016642:	68f9      	ldr	r1, [r7, #12]
 8016644:	6878      	ldr	r0, [r7, #4]
 8016646:	f000 fa5d 	bl	8016b04 <USBD_CtlSendData>
 801664a:	e009      	b.n	8016660 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 801664c:	6839      	ldr	r1, [r7, #0]
 801664e:	6878      	ldr	r0, [r7, #4]
 8016650:	f000 f9e7 	bl	8016a22 <USBD_CtlError>
 8016654:	e004      	b.n	8016660 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8016656:	6878      	ldr	r0, [r7, #4]
 8016658:	f000 faae 	bl	8016bb8 <USBD_CtlSendStatus>
 801665c:	e000      	b.n	8016660 <USBD_GetDescriptor+0x2cc>
    return;
 801665e:	bf00      	nop
  }
}
 8016660:	3710      	adds	r7, #16
 8016662:	46bd      	mov	sp, r7
 8016664:	bd80      	pop	{r7, pc}
 8016666:	bf00      	nop

08016668 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016668:	b580      	push	{r7, lr}
 801666a:	b084      	sub	sp, #16
 801666c:	af00      	add	r7, sp, #0
 801666e:	6078      	str	r0, [r7, #4]
 8016670:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8016672:	683b      	ldr	r3, [r7, #0]
 8016674:	889b      	ldrh	r3, [r3, #4]
 8016676:	2b00      	cmp	r3, #0
 8016678:	d131      	bne.n	80166de <USBD_SetAddress+0x76>
 801667a:	683b      	ldr	r3, [r7, #0]
 801667c:	88db      	ldrh	r3, [r3, #6]
 801667e:	2b00      	cmp	r3, #0
 8016680:	d12d      	bne.n	80166de <USBD_SetAddress+0x76>
 8016682:	683b      	ldr	r3, [r7, #0]
 8016684:	885b      	ldrh	r3, [r3, #2]
 8016686:	2b7f      	cmp	r3, #127	; 0x7f
 8016688:	d829      	bhi.n	80166de <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 801668a:	683b      	ldr	r3, [r7, #0]
 801668c:	885b      	ldrh	r3, [r3, #2]
 801668e:	b2db      	uxtb	r3, r3
 8016690:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8016694:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8016696:	687b      	ldr	r3, [r7, #4]
 8016698:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801669c:	b2db      	uxtb	r3, r3
 801669e:	2b03      	cmp	r3, #3
 80166a0:	d104      	bne.n	80166ac <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80166a2:	6839      	ldr	r1, [r7, #0]
 80166a4:	6878      	ldr	r0, [r7, #4]
 80166a6:	f000 f9bc 	bl	8016a22 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166aa:	e01d      	b.n	80166e8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	7bfa      	ldrb	r2, [r7, #15]
 80166b0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80166b4:	7bfb      	ldrb	r3, [r7, #15]
 80166b6:	4619      	mov	r1, r3
 80166b8:	6878      	ldr	r0, [r7, #4]
 80166ba:	f000 feff 	bl	80174bc <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80166be:	6878      	ldr	r0, [r7, #4]
 80166c0:	f000 fa7a 	bl	8016bb8 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80166c4:	7bfb      	ldrb	r3, [r7, #15]
 80166c6:	2b00      	cmp	r3, #0
 80166c8:	d004      	beq.n	80166d4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	2202      	movs	r2, #2
 80166ce:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166d2:	e009      	b.n	80166e8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	2201      	movs	r2, #1
 80166d8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80166dc:	e004      	b.n	80166e8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80166de:	6839      	ldr	r1, [r7, #0]
 80166e0:	6878      	ldr	r0, [r7, #4]
 80166e2:	f000 f99e 	bl	8016a22 <USBD_CtlError>
  }
}
 80166e6:	bf00      	nop
 80166e8:	bf00      	nop
 80166ea:	3710      	adds	r7, #16
 80166ec:	46bd      	mov	sp, r7
 80166ee:	bd80      	pop	{r7, pc}

080166f0 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80166f0:	b580      	push	{r7, lr}
 80166f2:	b084      	sub	sp, #16
 80166f4:	af00      	add	r7, sp, #0
 80166f6:	6078      	str	r0, [r7, #4]
 80166f8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80166fa:	2300      	movs	r3, #0
 80166fc:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80166fe:	683b      	ldr	r3, [r7, #0]
 8016700:	885b      	ldrh	r3, [r3, #2]
 8016702:	b2da      	uxtb	r2, r3
 8016704:	4b4e      	ldr	r3, [pc, #312]	; (8016840 <USBD_SetConfig+0x150>)
 8016706:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8016708:	4b4d      	ldr	r3, [pc, #308]	; (8016840 <USBD_SetConfig+0x150>)
 801670a:	781b      	ldrb	r3, [r3, #0]
 801670c:	2b01      	cmp	r3, #1
 801670e:	d905      	bls.n	801671c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8016710:	6839      	ldr	r1, [r7, #0]
 8016712:	6878      	ldr	r0, [r7, #4]
 8016714:	f000 f985 	bl	8016a22 <USBD_CtlError>
    return USBD_FAIL;
 8016718:	2303      	movs	r3, #3
 801671a:	e08c      	b.n	8016836 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016722:	b2db      	uxtb	r3, r3
 8016724:	2b02      	cmp	r3, #2
 8016726:	d002      	beq.n	801672e <USBD_SetConfig+0x3e>
 8016728:	2b03      	cmp	r3, #3
 801672a:	d029      	beq.n	8016780 <USBD_SetConfig+0x90>
 801672c:	e075      	b.n	801681a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 801672e:	4b44      	ldr	r3, [pc, #272]	; (8016840 <USBD_SetConfig+0x150>)
 8016730:	781b      	ldrb	r3, [r3, #0]
 8016732:	2b00      	cmp	r3, #0
 8016734:	d020      	beq.n	8016778 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8016736:	4b42      	ldr	r3, [pc, #264]	; (8016840 <USBD_SetConfig+0x150>)
 8016738:	781b      	ldrb	r3, [r3, #0]
 801673a:	461a      	mov	r2, r3
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8016740:	4b3f      	ldr	r3, [pc, #252]	; (8016840 <USBD_SetConfig+0x150>)
 8016742:	781b      	ldrb	r3, [r3, #0]
 8016744:	4619      	mov	r1, r3
 8016746:	6878      	ldr	r0, [r7, #4]
 8016748:	f7fe ffe7 	bl	801571a <USBD_SetClassConfig>
 801674c:	4603      	mov	r3, r0
 801674e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8016750:	7bfb      	ldrb	r3, [r7, #15]
 8016752:	2b00      	cmp	r3, #0
 8016754:	d008      	beq.n	8016768 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8016756:	6839      	ldr	r1, [r7, #0]
 8016758:	6878      	ldr	r0, [r7, #4]
 801675a:	f000 f962 	bl	8016a22 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	2202      	movs	r2, #2
 8016762:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8016766:	e065      	b.n	8016834 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8016768:	6878      	ldr	r0, [r7, #4]
 801676a:	f000 fa25 	bl	8016bb8 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	2203      	movs	r2, #3
 8016772:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016776:	e05d      	b.n	8016834 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016778:	6878      	ldr	r0, [r7, #4]
 801677a:	f000 fa1d 	bl	8016bb8 <USBD_CtlSendStatus>
      break;
 801677e:	e059      	b.n	8016834 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8016780:	4b2f      	ldr	r3, [pc, #188]	; (8016840 <USBD_SetConfig+0x150>)
 8016782:	781b      	ldrb	r3, [r3, #0]
 8016784:	2b00      	cmp	r3, #0
 8016786:	d112      	bne.n	80167ae <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	2202      	movs	r2, #2
 801678c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8016790:	4b2b      	ldr	r3, [pc, #172]	; (8016840 <USBD_SetConfig+0x150>)
 8016792:	781b      	ldrb	r3, [r3, #0]
 8016794:	461a      	mov	r2, r3
 8016796:	687b      	ldr	r3, [r7, #4]
 8016798:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 801679a:	4b29      	ldr	r3, [pc, #164]	; (8016840 <USBD_SetConfig+0x150>)
 801679c:	781b      	ldrb	r3, [r3, #0]
 801679e:	4619      	mov	r1, r3
 80167a0:	6878      	ldr	r0, [r7, #4]
 80167a2:	f7fe ffd6 	bl	8015752 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80167a6:	6878      	ldr	r0, [r7, #4]
 80167a8:	f000 fa06 	bl	8016bb8 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80167ac:	e042      	b.n	8016834 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80167ae:	4b24      	ldr	r3, [pc, #144]	; (8016840 <USBD_SetConfig+0x150>)
 80167b0:	781b      	ldrb	r3, [r3, #0]
 80167b2:	461a      	mov	r2, r3
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	685b      	ldr	r3, [r3, #4]
 80167b8:	429a      	cmp	r2, r3
 80167ba:	d02a      	beq.n	8016812 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	685b      	ldr	r3, [r3, #4]
 80167c0:	b2db      	uxtb	r3, r3
 80167c2:	4619      	mov	r1, r3
 80167c4:	6878      	ldr	r0, [r7, #4]
 80167c6:	f7fe ffc4 	bl	8015752 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80167ca:	4b1d      	ldr	r3, [pc, #116]	; (8016840 <USBD_SetConfig+0x150>)
 80167cc:	781b      	ldrb	r3, [r3, #0]
 80167ce:	461a      	mov	r2, r3
 80167d0:	687b      	ldr	r3, [r7, #4]
 80167d2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80167d4:	4b1a      	ldr	r3, [pc, #104]	; (8016840 <USBD_SetConfig+0x150>)
 80167d6:	781b      	ldrb	r3, [r3, #0]
 80167d8:	4619      	mov	r1, r3
 80167da:	6878      	ldr	r0, [r7, #4]
 80167dc:	f7fe ff9d 	bl	801571a <USBD_SetClassConfig>
 80167e0:	4603      	mov	r3, r0
 80167e2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80167e4:	7bfb      	ldrb	r3, [r7, #15]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d00f      	beq.n	801680a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80167ea:	6839      	ldr	r1, [r7, #0]
 80167ec:	6878      	ldr	r0, [r7, #4]
 80167ee:	f000 f918 	bl	8016a22 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80167f2:	687b      	ldr	r3, [r7, #4]
 80167f4:	685b      	ldr	r3, [r3, #4]
 80167f6:	b2db      	uxtb	r3, r3
 80167f8:	4619      	mov	r1, r3
 80167fa:	6878      	ldr	r0, [r7, #4]
 80167fc:	f7fe ffa9 	bl	8015752 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	2202      	movs	r2, #2
 8016804:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8016808:	e014      	b.n	8016834 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 801680a:	6878      	ldr	r0, [r7, #4]
 801680c:	f000 f9d4 	bl	8016bb8 <USBD_CtlSendStatus>
      break;
 8016810:	e010      	b.n	8016834 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8016812:	6878      	ldr	r0, [r7, #4]
 8016814:	f000 f9d0 	bl	8016bb8 <USBD_CtlSendStatus>
      break;
 8016818:	e00c      	b.n	8016834 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 801681a:	6839      	ldr	r1, [r7, #0]
 801681c:	6878      	ldr	r0, [r7, #4]
 801681e:	f000 f900 	bl	8016a22 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8016822:	4b07      	ldr	r3, [pc, #28]	; (8016840 <USBD_SetConfig+0x150>)
 8016824:	781b      	ldrb	r3, [r3, #0]
 8016826:	4619      	mov	r1, r3
 8016828:	6878      	ldr	r0, [r7, #4]
 801682a:	f7fe ff92 	bl	8015752 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 801682e:	2303      	movs	r3, #3
 8016830:	73fb      	strb	r3, [r7, #15]
      break;
 8016832:	bf00      	nop
  }

  return ret;
 8016834:	7bfb      	ldrb	r3, [r7, #15]
}
 8016836:	4618      	mov	r0, r3
 8016838:	3710      	adds	r7, #16
 801683a:	46bd      	mov	sp, r7
 801683c:	bd80      	pop	{r7, pc}
 801683e:	bf00      	nop
 8016840:	20002400 	.word	0x20002400

08016844 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016844:	b580      	push	{r7, lr}
 8016846:	b082      	sub	sp, #8
 8016848:	af00      	add	r7, sp, #0
 801684a:	6078      	str	r0, [r7, #4]
 801684c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 801684e:	683b      	ldr	r3, [r7, #0]
 8016850:	88db      	ldrh	r3, [r3, #6]
 8016852:	2b01      	cmp	r3, #1
 8016854:	d004      	beq.n	8016860 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8016856:	6839      	ldr	r1, [r7, #0]
 8016858:	6878      	ldr	r0, [r7, #4]
 801685a:	f000 f8e2 	bl	8016a22 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 801685e:	e023      	b.n	80168a8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8016860:	687b      	ldr	r3, [r7, #4]
 8016862:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8016866:	b2db      	uxtb	r3, r3
 8016868:	2b02      	cmp	r3, #2
 801686a:	dc02      	bgt.n	8016872 <USBD_GetConfig+0x2e>
 801686c:	2b00      	cmp	r3, #0
 801686e:	dc03      	bgt.n	8016878 <USBD_GetConfig+0x34>
 8016870:	e015      	b.n	801689e <USBD_GetConfig+0x5a>
 8016872:	2b03      	cmp	r3, #3
 8016874:	d00b      	beq.n	801688e <USBD_GetConfig+0x4a>
 8016876:	e012      	b.n	801689e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8016878:	687b      	ldr	r3, [r7, #4]
 801687a:	2200      	movs	r2, #0
 801687c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 801687e:	687b      	ldr	r3, [r7, #4]
 8016880:	3308      	adds	r3, #8
 8016882:	2201      	movs	r2, #1
 8016884:	4619      	mov	r1, r3
 8016886:	6878      	ldr	r0, [r7, #4]
 8016888:	f000 f93c 	bl	8016b04 <USBD_CtlSendData>
        break;
 801688c:	e00c      	b.n	80168a8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	3304      	adds	r3, #4
 8016892:	2201      	movs	r2, #1
 8016894:	4619      	mov	r1, r3
 8016896:	6878      	ldr	r0, [r7, #4]
 8016898:	f000 f934 	bl	8016b04 <USBD_CtlSendData>
        break;
 801689c:	e004      	b.n	80168a8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 801689e:	6839      	ldr	r1, [r7, #0]
 80168a0:	6878      	ldr	r0, [r7, #4]
 80168a2:	f000 f8be 	bl	8016a22 <USBD_CtlError>
        break;
 80168a6:	bf00      	nop
}
 80168a8:	bf00      	nop
 80168aa:	3708      	adds	r7, #8
 80168ac:	46bd      	mov	sp, r7
 80168ae:	bd80      	pop	{r7, pc}

080168b0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80168b0:	b580      	push	{r7, lr}
 80168b2:	b082      	sub	sp, #8
 80168b4:	af00      	add	r7, sp, #0
 80168b6:	6078      	str	r0, [r7, #4]
 80168b8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80168ba:	687b      	ldr	r3, [r7, #4]
 80168bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80168c0:	b2db      	uxtb	r3, r3
 80168c2:	3b01      	subs	r3, #1
 80168c4:	2b02      	cmp	r3, #2
 80168c6:	d81e      	bhi.n	8016906 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80168c8:	683b      	ldr	r3, [r7, #0]
 80168ca:	88db      	ldrh	r3, [r3, #6]
 80168cc:	2b02      	cmp	r3, #2
 80168ce:	d004      	beq.n	80168da <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80168d0:	6839      	ldr	r1, [r7, #0]
 80168d2:	6878      	ldr	r0, [r7, #4]
 80168d4:	f000 f8a5 	bl	8016a22 <USBD_CtlError>
        break;
 80168d8:	e01a      	b.n	8016910 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80168da:	687b      	ldr	r3, [r7, #4]
 80168dc:	2201      	movs	r2, #1
 80168de:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80168e0:	687b      	ldr	r3, [r7, #4]
 80168e2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80168e6:	2b00      	cmp	r3, #0
 80168e8:	d005      	beq.n	80168f6 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80168ea:	687b      	ldr	r3, [r7, #4]
 80168ec:	68db      	ldr	r3, [r3, #12]
 80168ee:	f043 0202 	orr.w	r2, r3, #2
 80168f2:	687b      	ldr	r3, [r7, #4]
 80168f4:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	330c      	adds	r3, #12
 80168fa:	2202      	movs	r2, #2
 80168fc:	4619      	mov	r1, r3
 80168fe:	6878      	ldr	r0, [r7, #4]
 8016900:	f000 f900 	bl	8016b04 <USBD_CtlSendData>
      break;
 8016904:	e004      	b.n	8016910 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8016906:	6839      	ldr	r1, [r7, #0]
 8016908:	6878      	ldr	r0, [r7, #4]
 801690a:	f000 f88a 	bl	8016a22 <USBD_CtlError>
      break;
 801690e:	bf00      	nop
  }
}
 8016910:	bf00      	nop
 8016912:	3708      	adds	r7, #8
 8016914:	46bd      	mov	sp, r7
 8016916:	bd80      	pop	{r7, pc}

08016918 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016918:	b580      	push	{r7, lr}
 801691a:	b082      	sub	sp, #8
 801691c:	af00      	add	r7, sp, #0
 801691e:	6078      	str	r0, [r7, #4]
 8016920:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016922:	683b      	ldr	r3, [r7, #0]
 8016924:	885b      	ldrh	r3, [r3, #2]
 8016926:	2b01      	cmp	r3, #1
 8016928:	d107      	bne.n	801693a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	2201      	movs	r2, #1
 801692e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8016932:	6878      	ldr	r0, [r7, #4]
 8016934:	f000 f940 	bl	8016bb8 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8016938:	e013      	b.n	8016962 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 801693a:	683b      	ldr	r3, [r7, #0]
 801693c:	885b      	ldrh	r3, [r3, #2]
 801693e:	2b02      	cmp	r3, #2
 8016940:	d10b      	bne.n	801695a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8016942:	683b      	ldr	r3, [r7, #0]
 8016944:	889b      	ldrh	r3, [r3, #4]
 8016946:	0a1b      	lsrs	r3, r3, #8
 8016948:	b29b      	uxth	r3, r3
 801694a:	b2da      	uxtb	r2, r3
 801694c:	687b      	ldr	r3, [r7, #4]
 801694e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8016952:	6878      	ldr	r0, [r7, #4]
 8016954:	f000 f930 	bl	8016bb8 <USBD_CtlSendStatus>
}
 8016958:	e003      	b.n	8016962 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 801695a:	6839      	ldr	r1, [r7, #0]
 801695c:	6878      	ldr	r0, [r7, #4]
 801695e:	f000 f860 	bl	8016a22 <USBD_CtlError>
}
 8016962:	bf00      	nop
 8016964:	3708      	adds	r7, #8
 8016966:	46bd      	mov	sp, r7
 8016968:	bd80      	pop	{r7, pc}

0801696a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 801696a:	b580      	push	{r7, lr}
 801696c:	b082      	sub	sp, #8
 801696e:	af00      	add	r7, sp, #0
 8016970:	6078      	str	r0, [r7, #4]
 8016972:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8016974:	687b      	ldr	r3, [r7, #4]
 8016976:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 801697a:	b2db      	uxtb	r3, r3
 801697c:	3b01      	subs	r3, #1
 801697e:	2b02      	cmp	r3, #2
 8016980:	d80b      	bhi.n	801699a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8016982:	683b      	ldr	r3, [r7, #0]
 8016984:	885b      	ldrh	r3, [r3, #2]
 8016986:	2b01      	cmp	r3, #1
 8016988:	d10c      	bne.n	80169a4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 801698a:	687b      	ldr	r3, [r7, #4]
 801698c:	2200      	movs	r2, #0
 801698e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8016992:	6878      	ldr	r0, [r7, #4]
 8016994:	f000 f910 	bl	8016bb8 <USBD_CtlSendStatus>
      }
      break;
 8016998:	e004      	b.n	80169a4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 801699a:	6839      	ldr	r1, [r7, #0]
 801699c:	6878      	ldr	r0, [r7, #4]
 801699e:	f000 f840 	bl	8016a22 <USBD_CtlError>
      break;
 80169a2:	e000      	b.n	80169a6 <USBD_ClrFeature+0x3c>
      break;
 80169a4:	bf00      	nop
  }
}
 80169a6:	bf00      	nop
 80169a8:	3708      	adds	r7, #8
 80169aa:	46bd      	mov	sp, r7
 80169ac:	bd80      	pop	{r7, pc}

080169ae <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80169ae:	b580      	push	{r7, lr}
 80169b0:	b084      	sub	sp, #16
 80169b2:	af00      	add	r7, sp, #0
 80169b4:	6078      	str	r0, [r7, #4]
 80169b6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80169b8:	683b      	ldr	r3, [r7, #0]
 80169ba:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80169bc:	68fb      	ldr	r3, [r7, #12]
 80169be:	781a      	ldrb	r2, [r3, #0]
 80169c0:	687b      	ldr	r3, [r7, #4]
 80169c2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80169c4:	68fb      	ldr	r3, [r7, #12]
 80169c6:	3301      	adds	r3, #1
 80169c8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80169ca:	68fb      	ldr	r3, [r7, #12]
 80169cc:	781a      	ldrb	r2, [r3, #0]
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80169d2:	68fb      	ldr	r3, [r7, #12]
 80169d4:	3301      	adds	r3, #1
 80169d6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80169d8:	68f8      	ldr	r0, [r7, #12]
 80169da:	f7ff fa41 	bl	8015e60 <SWAPBYTE>
 80169de:	4603      	mov	r3, r0
 80169e0:	461a      	mov	r2, r3
 80169e2:	687b      	ldr	r3, [r7, #4]
 80169e4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80169e6:	68fb      	ldr	r3, [r7, #12]
 80169e8:	3301      	adds	r3, #1
 80169ea:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80169ec:	68fb      	ldr	r3, [r7, #12]
 80169ee:	3301      	adds	r3, #1
 80169f0:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80169f2:	68f8      	ldr	r0, [r7, #12]
 80169f4:	f7ff fa34 	bl	8015e60 <SWAPBYTE>
 80169f8:	4603      	mov	r3, r0
 80169fa:	461a      	mov	r2, r3
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8016a00:	68fb      	ldr	r3, [r7, #12]
 8016a02:	3301      	adds	r3, #1
 8016a04:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8016a06:	68fb      	ldr	r3, [r7, #12]
 8016a08:	3301      	adds	r3, #1
 8016a0a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8016a0c:	68f8      	ldr	r0, [r7, #12]
 8016a0e:	f7ff fa27 	bl	8015e60 <SWAPBYTE>
 8016a12:	4603      	mov	r3, r0
 8016a14:	461a      	mov	r2, r3
 8016a16:	687b      	ldr	r3, [r7, #4]
 8016a18:	80da      	strh	r2, [r3, #6]
}
 8016a1a:	bf00      	nop
 8016a1c:	3710      	adds	r7, #16
 8016a1e:	46bd      	mov	sp, r7
 8016a20:	bd80      	pop	{r7, pc}

08016a22 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8016a22:	b580      	push	{r7, lr}
 8016a24:	b082      	sub	sp, #8
 8016a26:	af00      	add	r7, sp, #0
 8016a28:	6078      	str	r0, [r7, #4]
 8016a2a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8016a2c:	2180      	movs	r1, #128	; 0x80
 8016a2e:	6878      	ldr	r0, [r7, #4]
 8016a30:	f000 fcda 	bl	80173e8 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8016a34:	2100      	movs	r1, #0
 8016a36:	6878      	ldr	r0, [r7, #4]
 8016a38:	f000 fcd6 	bl	80173e8 <USBD_LL_StallEP>
}
 8016a3c:	bf00      	nop
 8016a3e:	3708      	adds	r7, #8
 8016a40:	46bd      	mov	sp, r7
 8016a42:	bd80      	pop	{r7, pc}

08016a44 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8016a44:	b580      	push	{r7, lr}
 8016a46:	b086      	sub	sp, #24
 8016a48:	af00      	add	r7, sp, #0
 8016a4a:	60f8      	str	r0, [r7, #12]
 8016a4c:	60b9      	str	r1, [r7, #8]
 8016a4e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8016a50:	2300      	movs	r3, #0
 8016a52:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8016a54:	68fb      	ldr	r3, [r7, #12]
 8016a56:	2b00      	cmp	r3, #0
 8016a58:	d036      	beq.n	8016ac8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8016a5a:	68fb      	ldr	r3, [r7, #12]
 8016a5c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8016a5e:	6938      	ldr	r0, [r7, #16]
 8016a60:	f000 f836 	bl	8016ad0 <USBD_GetLen>
 8016a64:	4603      	mov	r3, r0
 8016a66:	3301      	adds	r3, #1
 8016a68:	b29b      	uxth	r3, r3
 8016a6a:	005b      	lsls	r3, r3, #1
 8016a6c:	b29a      	uxth	r2, r3
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8016a72:	7dfb      	ldrb	r3, [r7, #23]
 8016a74:	68ba      	ldr	r2, [r7, #8]
 8016a76:	4413      	add	r3, r2
 8016a78:	687a      	ldr	r2, [r7, #4]
 8016a7a:	7812      	ldrb	r2, [r2, #0]
 8016a7c:	701a      	strb	r2, [r3, #0]
  idx++;
 8016a7e:	7dfb      	ldrb	r3, [r7, #23]
 8016a80:	3301      	adds	r3, #1
 8016a82:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8016a84:	7dfb      	ldrb	r3, [r7, #23]
 8016a86:	68ba      	ldr	r2, [r7, #8]
 8016a88:	4413      	add	r3, r2
 8016a8a:	2203      	movs	r2, #3
 8016a8c:	701a      	strb	r2, [r3, #0]
  idx++;
 8016a8e:	7dfb      	ldrb	r3, [r7, #23]
 8016a90:	3301      	adds	r3, #1
 8016a92:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8016a94:	e013      	b.n	8016abe <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8016a96:	7dfb      	ldrb	r3, [r7, #23]
 8016a98:	68ba      	ldr	r2, [r7, #8]
 8016a9a:	4413      	add	r3, r2
 8016a9c:	693a      	ldr	r2, [r7, #16]
 8016a9e:	7812      	ldrb	r2, [r2, #0]
 8016aa0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8016aa2:	693b      	ldr	r3, [r7, #16]
 8016aa4:	3301      	adds	r3, #1
 8016aa6:	613b      	str	r3, [r7, #16]
    idx++;
 8016aa8:	7dfb      	ldrb	r3, [r7, #23]
 8016aaa:	3301      	adds	r3, #1
 8016aac:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8016aae:	7dfb      	ldrb	r3, [r7, #23]
 8016ab0:	68ba      	ldr	r2, [r7, #8]
 8016ab2:	4413      	add	r3, r2
 8016ab4:	2200      	movs	r2, #0
 8016ab6:	701a      	strb	r2, [r3, #0]
    idx++;
 8016ab8:	7dfb      	ldrb	r3, [r7, #23]
 8016aba:	3301      	adds	r3, #1
 8016abc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8016abe:	693b      	ldr	r3, [r7, #16]
 8016ac0:	781b      	ldrb	r3, [r3, #0]
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d1e7      	bne.n	8016a96 <USBD_GetString+0x52>
 8016ac6:	e000      	b.n	8016aca <USBD_GetString+0x86>
    return;
 8016ac8:	bf00      	nop
  }
}
 8016aca:	3718      	adds	r7, #24
 8016acc:	46bd      	mov	sp, r7
 8016ace:	bd80      	pop	{r7, pc}

08016ad0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8016ad0:	b480      	push	{r7}
 8016ad2:	b085      	sub	sp, #20
 8016ad4:	af00      	add	r7, sp, #0
 8016ad6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8016ad8:	2300      	movs	r3, #0
 8016ada:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8016ae0:	e005      	b.n	8016aee <USBD_GetLen+0x1e>
  {
    len++;
 8016ae2:	7bfb      	ldrb	r3, [r7, #15]
 8016ae4:	3301      	adds	r3, #1
 8016ae6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8016ae8:	68bb      	ldr	r3, [r7, #8]
 8016aea:	3301      	adds	r3, #1
 8016aec:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8016aee:	68bb      	ldr	r3, [r7, #8]
 8016af0:	781b      	ldrb	r3, [r3, #0]
 8016af2:	2b00      	cmp	r3, #0
 8016af4:	d1f5      	bne.n	8016ae2 <USBD_GetLen+0x12>
  }

  return len;
 8016af6:	7bfb      	ldrb	r3, [r7, #15]
}
 8016af8:	4618      	mov	r0, r3
 8016afa:	3714      	adds	r7, #20
 8016afc:	46bd      	mov	sp, r7
 8016afe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b02:	4770      	bx	lr

08016b04 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8016b04:	b580      	push	{r7, lr}
 8016b06:	b084      	sub	sp, #16
 8016b08:	af00      	add	r7, sp, #0
 8016b0a:	60f8      	str	r0, [r7, #12]
 8016b0c:	60b9      	str	r1, [r7, #8]
 8016b0e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8016b10:	68fb      	ldr	r3, [r7, #12]
 8016b12:	2202      	movs	r2, #2
 8016b14:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8016b18:	68fb      	ldr	r3, [r7, #12]
 8016b1a:	687a      	ldr	r2, [r7, #4]
 8016b1c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8016b1e:	68fb      	ldr	r3, [r7, #12]
 8016b20:	687a      	ldr	r2, [r7, #4]
 8016b22:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	68ba      	ldr	r2, [r7, #8]
 8016b28:	2100      	movs	r1, #0
 8016b2a:	68f8      	ldr	r0, [r7, #12]
 8016b2c:	f000 fce5 	bl	80174fa <USBD_LL_Transmit>

  return USBD_OK;
 8016b30:	2300      	movs	r3, #0
}
 8016b32:	4618      	mov	r0, r3
 8016b34:	3710      	adds	r7, #16
 8016b36:	46bd      	mov	sp, r7
 8016b38:	bd80      	pop	{r7, pc}

08016b3a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8016b3a:	b580      	push	{r7, lr}
 8016b3c:	b084      	sub	sp, #16
 8016b3e:	af00      	add	r7, sp, #0
 8016b40:	60f8      	str	r0, [r7, #12]
 8016b42:	60b9      	str	r1, [r7, #8]
 8016b44:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8016b46:	687b      	ldr	r3, [r7, #4]
 8016b48:	68ba      	ldr	r2, [r7, #8]
 8016b4a:	2100      	movs	r1, #0
 8016b4c:	68f8      	ldr	r0, [r7, #12]
 8016b4e:	f000 fcd4 	bl	80174fa <USBD_LL_Transmit>

  return USBD_OK;
 8016b52:	2300      	movs	r3, #0
}
 8016b54:	4618      	mov	r0, r3
 8016b56:	3710      	adds	r7, #16
 8016b58:	46bd      	mov	sp, r7
 8016b5a:	bd80      	pop	{r7, pc}

08016b5c <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8016b5c:	b580      	push	{r7, lr}
 8016b5e:	b084      	sub	sp, #16
 8016b60:	af00      	add	r7, sp, #0
 8016b62:	60f8      	str	r0, [r7, #12]
 8016b64:	60b9      	str	r1, [r7, #8]
 8016b66:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8016b68:	68fb      	ldr	r3, [r7, #12]
 8016b6a:	2203      	movs	r2, #3
 8016b6c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8016b70:	68fb      	ldr	r3, [r7, #12]
 8016b72:	687a      	ldr	r2, [r7, #4]
 8016b74:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 8016b78:	68fb      	ldr	r3, [r7, #12]
 8016b7a:	687a      	ldr	r2, [r7, #4]
 8016b7c:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	68ba      	ldr	r2, [r7, #8]
 8016b84:	2100      	movs	r1, #0
 8016b86:	68f8      	ldr	r0, [r7, #12]
 8016b88:	f000 fcd8 	bl	801753c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016b8c:	2300      	movs	r3, #0
}
 8016b8e:	4618      	mov	r0, r3
 8016b90:	3710      	adds	r7, #16
 8016b92:	46bd      	mov	sp, r7
 8016b94:	bd80      	pop	{r7, pc}

08016b96 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8016b96:	b580      	push	{r7, lr}
 8016b98:	b084      	sub	sp, #16
 8016b9a:	af00      	add	r7, sp, #0
 8016b9c:	60f8      	str	r0, [r7, #12]
 8016b9e:	60b9      	str	r1, [r7, #8]
 8016ba0:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	68ba      	ldr	r2, [r7, #8]
 8016ba6:	2100      	movs	r1, #0
 8016ba8:	68f8      	ldr	r0, [r7, #12]
 8016baa:	f000 fcc7 	bl	801753c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016bae:	2300      	movs	r3, #0
}
 8016bb0:	4618      	mov	r0, r3
 8016bb2:	3710      	adds	r7, #16
 8016bb4:	46bd      	mov	sp, r7
 8016bb6:	bd80      	pop	{r7, pc}

08016bb8 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8016bb8:	b580      	push	{r7, lr}
 8016bba:	b082      	sub	sp, #8
 8016bbc:	af00      	add	r7, sp, #0
 8016bbe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	2204      	movs	r2, #4
 8016bc4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8016bc8:	2300      	movs	r3, #0
 8016bca:	2200      	movs	r2, #0
 8016bcc:	2100      	movs	r1, #0
 8016bce:	6878      	ldr	r0, [r7, #4]
 8016bd0:	f000 fc93 	bl	80174fa <USBD_LL_Transmit>

  return USBD_OK;
 8016bd4:	2300      	movs	r3, #0
}
 8016bd6:	4618      	mov	r0, r3
 8016bd8:	3708      	adds	r7, #8
 8016bda:	46bd      	mov	sp, r7
 8016bdc:	bd80      	pop	{r7, pc}

08016bde <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8016bde:	b580      	push	{r7, lr}
 8016be0:	b082      	sub	sp, #8
 8016be2:	af00      	add	r7, sp, #0
 8016be4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8016be6:	687b      	ldr	r3, [r7, #4]
 8016be8:	2205      	movs	r2, #5
 8016bea:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8016bee:	2300      	movs	r3, #0
 8016bf0:	2200      	movs	r2, #0
 8016bf2:	2100      	movs	r1, #0
 8016bf4:	6878      	ldr	r0, [r7, #4]
 8016bf6:	f000 fca1 	bl	801753c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8016bfa:	2300      	movs	r3, #0
}
 8016bfc:	4618      	mov	r0, r3
 8016bfe:	3708      	adds	r7, #8
 8016c00:	46bd      	mov	sp, r7
 8016c02:	bd80      	pop	{r7, pc}

08016c04 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8016c04:	b580      	push	{r7, lr}
 8016c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8016c08:	2201      	movs	r2, #1
 8016c0a:	4912      	ldr	r1, [pc, #72]	; (8016c54 <MX_USB_DEVICE_Init+0x50>)
 8016c0c:	4812      	ldr	r0, [pc, #72]	; (8016c58 <MX_USB_DEVICE_Init+0x54>)
 8016c0e:	f7fe fd07 	bl	8015620 <USBD_Init>
 8016c12:	4603      	mov	r3, r0
 8016c14:	2b00      	cmp	r3, #0
 8016c16:	d001      	beq.n	8016c1c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8016c18:	f7f0 ffb4 	bl	8007b84 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_CDC) != USBD_OK)
 8016c1c:	490f      	ldr	r1, [pc, #60]	; (8016c5c <MX_USB_DEVICE_Init+0x58>)
 8016c1e:	480e      	ldr	r0, [pc, #56]	; (8016c58 <MX_USB_DEVICE_Init+0x54>)
 8016c20:	f7fe fd2e 	bl	8015680 <USBD_RegisterClass>
 8016c24:	4603      	mov	r3, r0
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d001      	beq.n	8016c2e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8016c2a:	f7f0 ffab 	bl	8007b84 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceHS, &USBD_Interface_fops_HS) != USBD_OK)
 8016c2e:	490c      	ldr	r1, [pc, #48]	; (8016c60 <MX_USB_DEVICE_Init+0x5c>)
 8016c30:	4809      	ldr	r0, [pc, #36]	; (8016c58 <MX_USB_DEVICE_Init+0x54>)
 8016c32:	f7fe fc65 	bl	8015500 <USBD_CDC_RegisterInterface>
 8016c36:	4603      	mov	r3, r0
 8016c38:	2b00      	cmp	r3, #0
 8016c3a:	d001      	beq.n	8016c40 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8016c3c:	f7f0 ffa2 	bl	8007b84 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8016c40:	4805      	ldr	r0, [pc, #20]	; (8016c58 <MX_USB_DEVICE_Init+0x54>)
 8016c42:	f7fe fd53 	bl	80156ec <USBD_Start>
 8016c46:	4603      	mov	r3, r0
 8016c48:	2b00      	cmp	r3, #0
 8016c4a:	d001      	beq.n	8016c50 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8016c4c:	f7f0 ff9a 	bl	8007b84 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8016c50:	bf00      	nop
 8016c52:	bd80      	pop	{r7, pc}
 8016c54:	200002a4 	.word	0x200002a4
 8016c58:	20002404 	.word	0x20002404
 8016c5c:	20000210 	.word	0x20000210
 8016c60:	20000290 	.word	0x20000290

08016c64 <CDC_Init_HS>:
/**
  * @brief  Initializes the CDC media low layer over the USB HS IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_HS(void)
{
 8016c64:	b580      	push	{r7, lr}
 8016c66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 8 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceHS, UserTxBufferHS, 0);
 8016c68:	2200      	movs	r2, #0
 8016c6a:	4905      	ldr	r1, [pc, #20]	; (8016c80 <CDC_Init_HS+0x1c>)
 8016c6c:	4805      	ldr	r0, [pc, #20]	; (8016c84 <CDC_Init_HS+0x20>)
 8016c6e:	f7fe fc61 	bl	8015534 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, UserRxBufferHS);
 8016c72:	4905      	ldr	r1, [pc, #20]	; (8016c88 <CDC_Init_HS+0x24>)
 8016c74:	4803      	ldr	r0, [pc, #12]	; (8016c84 <CDC_Init_HS+0x20>)
 8016c76:	f7fe fc7f 	bl	8015578 <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8016c7a:	2300      	movs	r3, #0
  /* USER CODE END 8 */
}
 8016c7c:	4618      	mov	r0, r3
 8016c7e:	bd80      	pop	{r7, pc}
 8016c80:	20002760 	.word	0x20002760
 8016c84:	20002404 	.word	0x20002404
 8016c88:	200026e0 	.word	0x200026e0

08016c8c <CDC_DeInit_HS>:
  * @brief  DeInitializes the CDC media low layer
  * @param  None
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_HS(void)
{
 8016c8c:	b480      	push	{r7}
 8016c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 9 */
  return (USBD_OK);
 8016c90:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8016c92:	4618      	mov	r0, r3
 8016c94:	46bd      	mov	sp, r7
 8016c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c9a:	4770      	bx	lr

08016c9c <CDC_Control_HS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_HS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8016c9c:	b480      	push	{r7}
 8016c9e:	b083      	sub	sp, #12
 8016ca0:	af00      	add	r7, sp, #0
 8016ca2:	4603      	mov	r3, r0
 8016ca4:	6039      	str	r1, [r7, #0]
 8016ca6:	71fb      	strb	r3, [r7, #7]
 8016ca8:	4613      	mov	r3, r2
 8016caa:	80bb      	strh	r3, [r7, #4]
  /* USER CODE BEGIN 10 */
  switch(cmd)
 8016cac:	79fb      	ldrb	r3, [r7, #7]
 8016cae:	2b23      	cmp	r3, #35	; 0x23
 8016cb0:	d84a      	bhi.n	8016d48 <CDC_Control_HS+0xac>
 8016cb2:	a201      	add	r2, pc, #4	; (adr r2, 8016cb8 <CDC_Control_HS+0x1c>)
 8016cb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016cb8:	08016d49 	.word	0x08016d49
 8016cbc:	08016d49 	.word	0x08016d49
 8016cc0:	08016d49 	.word	0x08016d49
 8016cc4:	08016d49 	.word	0x08016d49
 8016cc8:	08016d49 	.word	0x08016d49
 8016ccc:	08016d49 	.word	0x08016d49
 8016cd0:	08016d49 	.word	0x08016d49
 8016cd4:	08016d49 	.word	0x08016d49
 8016cd8:	08016d49 	.word	0x08016d49
 8016cdc:	08016d49 	.word	0x08016d49
 8016ce0:	08016d49 	.word	0x08016d49
 8016ce4:	08016d49 	.word	0x08016d49
 8016ce8:	08016d49 	.word	0x08016d49
 8016cec:	08016d49 	.word	0x08016d49
 8016cf0:	08016d49 	.word	0x08016d49
 8016cf4:	08016d49 	.word	0x08016d49
 8016cf8:	08016d49 	.word	0x08016d49
 8016cfc:	08016d49 	.word	0x08016d49
 8016d00:	08016d49 	.word	0x08016d49
 8016d04:	08016d49 	.word	0x08016d49
 8016d08:	08016d49 	.word	0x08016d49
 8016d0c:	08016d49 	.word	0x08016d49
 8016d10:	08016d49 	.word	0x08016d49
 8016d14:	08016d49 	.word	0x08016d49
 8016d18:	08016d49 	.word	0x08016d49
 8016d1c:	08016d49 	.word	0x08016d49
 8016d20:	08016d49 	.word	0x08016d49
 8016d24:	08016d49 	.word	0x08016d49
 8016d28:	08016d49 	.word	0x08016d49
 8016d2c:	08016d49 	.word	0x08016d49
 8016d30:	08016d49 	.word	0x08016d49
 8016d34:	08016d49 	.word	0x08016d49
 8016d38:	08016d49 	.word	0x08016d49
 8016d3c:	08016d49 	.word	0x08016d49
 8016d40:	08016d49 	.word	0x08016d49
 8016d44:	08016d49 	.word	0x08016d49
  case CDC_SEND_BREAK:

    break;

  default:
    break;
 8016d48:	bf00      	nop
  }

  return (USBD_OK);
 8016d4a:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 8016d4c:	4618      	mov	r0, r3
 8016d4e:	370c      	adds	r7, #12
 8016d50:	46bd      	mov	sp, r7
 8016d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016d56:	4770      	bx	lr

08016d58 <CDC_Receive_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAILL
  */
static int8_t CDC_Receive_HS(uint8_t* Buf, uint32_t *Len)
{
 8016d58:	b580      	push	{r7, lr}
 8016d5a:	b082      	sub	sp, #8
 8016d5c:	af00      	add	r7, sp, #0
 8016d5e:	6078      	str	r0, [r7, #4]
 8016d60:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 11 */
  USBD_CDC_SetRxBuffer(&hUsbDeviceHS, &Buf[0]);
 8016d62:	6879      	ldr	r1, [r7, #4]
 8016d64:	4805      	ldr	r0, [pc, #20]	; (8016d7c <CDC_Receive_HS+0x24>)
 8016d66:	f7fe fc07 	bl	8015578 <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceHS);
 8016d6a:	4804      	ldr	r0, [pc, #16]	; (8016d7c <CDC_Receive_HS+0x24>)
 8016d6c:	f7fe fc22 	bl	80155b4 <USBD_CDC_ReceivePacket>
  return (USBD_OK);
 8016d70:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8016d72:	4618      	mov	r0, r3
 8016d74:	3708      	adds	r7, #8
 8016d76:	46bd      	mov	sp, r7
 8016d78:	bd80      	pop	{r7, pc}
 8016d7a:	bf00      	nop
 8016d7c:	20002404 	.word	0x20002404

08016d80 <CDC_TransmitCplt_HS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_TransmitCplt_HS(uint8_t *Buf, uint32_t *Len, uint8_t epnum)
{
 8016d80:	b480      	push	{r7}
 8016d82:	b087      	sub	sp, #28
 8016d84:	af00      	add	r7, sp, #0
 8016d86:	60f8      	str	r0, [r7, #12]
 8016d88:	60b9      	str	r1, [r7, #8]
 8016d8a:	4613      	mov	r3, r2
 8016d8c:	71fb      	strb	r3, [r7, #7]
  uint8_t result = USBD_OK;
 8016d8e:	2300      	movs	r3, #0
 8016d90:	75fb      	strb	r3, [r7, #23]
  /* USER CODE BEGIN 14 */
  UNUSED(Buf);
  UNUSED(Len);
  UNUSED(epnum);
  /* USER CODE END 14 */
  return result;
 8016d92:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8016d96:	4618      	mov	r0, r3
 8016d98:	371c      	adds	r7, #28
 8016d9a:	46bd      	mov	sp, r7
 8016d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016da0:	4770      	bx	lr
	...

08016da4 <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016da4:	b480      	push	{r7}
 8016da6:	b083      	sub	sp, #12
 8016da8:	af00      	add	r7, sp, #0
 8016daa:	4603      	mov	r3, r0
 8016dac:	6039      	str	r1, [r7, #0]
 8016dae:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 8016db0:	683b      	ldr	r3, [r7, #0]
 8016db2:	2212      	movs	r2, #18
 8016db4:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 8016db6:	4b03      	ldr	r3, [pc, #12]	; (8016dc4 <USBD_HS_DeviceDescriptor+0x20>)
}
 8016db8:	4618      	mov	r0, r3
 8016dba:	370c      	adds	r7, #12
 8016dbc:	46bd      	mov	sp, r7
 8016dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016dc2:	4770      	bx	lr
 8016dc4:	200002c0 	.word	0x200002c0

08016dc8 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016dc8:	b480      	push	{r7}
 8016dca:	b083      	sub	sp, #12
 8016dcc:	af00      	add	r7, sp, #0
 8016dce:	4603      	mov	r3, r0
 8016dd0:	6039      	str	r1, [r7, #0]
 8016dd2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8016dd4:	683b      	ldr	r3, [r7, #0]
 8016dd6:	2204      	movs	r2, #4
 8016dd8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8016dda:	4b03      	ldr	r3, [pc, #12]	; (8016de8 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8016ddc:	4618      	mov	r0, r3
 8016dde:	370c      	adds	r7, #12
 8016de0:	46bd      	mov	sp, r7
 8016de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016de6:	4770      	bx	lr
 8016de8:	200002d4 	.word	0x200002d4

08016dec <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016dec:	b580      	push	{r7, lr}
 8016dee:	b082      	sub	sp, #8
 8016df0:	af00      	add	r7, sp, #0
 8016df2:	4603      	mov	r3, r0
 8016df4:	6039      	str	r1, [r7, #0]
 8016df6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016df8:	79fb      	ldrb	r3, [r7, #7]
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d105      	bne.n	8016e0a <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016dfe:	683a      	ldr	r2, [r7, #0]
 8016e00:	4907      	ldr	r1, [pc, #28]	; (8016e20 <USBD_HS_ProductStrDescriptor+0x34>)
 8016e02:	4808      	ldr	r0, [pc, #32]	; (8016e24 <USBD_HS_ProductStrDescriptor+0x38>)
 8016e04:	f7ff fe1e 	bl	8016a44 <USBD_GetString>
 8016e08:	e004      	b.n	8016e14 <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8016e0a:	683a      	ldr	r2, [r7, #0]
 8016e0c:	4904      	ldr	r1, [pc, #16]	; (8016e20 <USBD_HS_ProductStrDescriptor+0x34>)
 8016e0e:	4805      	ldr	r0, [pc, #20]	; (8016e24 <USBD_HS_ProductStrDescriptor+0x38>)
 8016e10:	f7ff fe18 	bl	8016a44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016e14:	4b02      	ldr	r3, [pc, #8]	; (8016e20 <USBD_HS_ProductStrDescriptor+0x34>)
}
 8016e16:	4618      	mov	r0, r3
 8016e18:	3708      	adds	r7, #8
 8016e1a:	46bd      	mov	sp, r7
 8016e1c:	bd80      	pop	{r7, pc}
 8016e1e:	bf00      	nop
 8016e20:	200028ec 	.word	0x200028ec
 8016e24:	08019308 	.word	0x08019308

08016e28 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016e28:	b580      	push	{r7, lr}
 8016e2a:	b082      	sub	sp, #8
 8016e2c:	af00      	add	r7, sp, #0
 8016e2e:	4603      	mov	r3, r0
 8016e30:	6039      	str	r1, [r7, #0]
 8016e32:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8016e34:	683a      	ldr	r2, [r7, #0]
 8016e36:	4904      	ldr	r1, [pc, #16]	; (8016e48 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8016e38:	4804      	ldr	r0, [pc, #16]	; (8016e4c <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8016e3a:	f7ff fe03 	bl	8016a44 <USBD_GetString>
  return USBD_StrDesc;
 8016e3e:	4b02      	ldr	r3, [pc, #8]	; (8016e48 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8016e40:	4618      	mov	r0, r3
 8016e42:	3708      	adds	r7, #8
 8016e44:	46bd      	mov	sp, r7
 8016e46:	bd80      	pop	{r7, pc}
 8016e48:	200028ec 	.word	0x200028ec
 8016e4c:	08019318 	.word	0x08019318

08016e50 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016e50:	b580      	push	{r7, lr}
 8016e52:	b082      	sub	sp, #8
 8016e54:	af00      	add	r7, sp, #0
 8016e56:	4603      	mov	r3, r0
 8016e58:	6039      	str	r1, [r7, #0]
 8016e5a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8016e5c:	683b      	ldr	r3, [r7, #0]
 8016e5e:	221a      	movs	r2, #26
 8016e60:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8016e62:	f000 f843 	bl	8016eec <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 8016e66:	4b02      	ldr	r3, [pc, #8]	; (8016e70 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8016e68:	4618      	mov	r0, r3
 8016e6a:	3708      	adds	r7, #8
 8016e6c:	46bd      	mov	sp, r7
 8016e6e:	bd80      	pop	{r7, pc}
 8016e70:	200002d8 	.word	0x200002d8

08016e74 <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016e74:	b580      	push	{r7, lr}
 8016e76:	b082      	sub	sp, #8
 8016e78:	af00      	add	r7, sp, #0
 8016e7a:	4603      	mov	r3, r0
 8016e7c:	6039      	str	r1, [r7, #0]
 8016e7e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8016e80:	79fb      	ldrb	r3, [r7, #7]
 8016e82:	2b00      	cmp	r3, #0
 8016e84:	d105      	bne.n	8016e92 <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016e86:	683a      	ldr	r2, [r7, #0]
 8016e88:	4907      	ldr	r1, [pc, #28]	; (8016ea8 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016e8a:	4808      	ldr	r0, [pc, #32]	; (8016eac <USBD_HS_ConfigStrDescriptor+0x38>)
 8016e8c:	f7ff fdda 	bl	8016a44 <USBD_GetString>
 8016e90:	e004      	b.n	8016e9c <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 8016e92:	683a      	ldr	r2, [r7, #0]
 8016e94:	4904      	ldr	r1, [pc, #16]	; (8016ea8 <USBD_HS_ConfigStrDescriptor+0x34>)
 8016e96:	4805      	ldr	r0, [pc, #20]	; (8016eac <USBD_HS_ConfigStrDescriptor+0x38>)
 8016e98:	f7ff fdd4 	bl	8016a44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016e9c:	4b02      	ldr	r3, [pc, #8]	; (8016ea8 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 8016e9e:	4618      	mov	r0, r3
 8016ea0:	3708      	adds	r7, #8
 8016ea2:	46bd      	mov	sp, r7
 8016ea4:	bd80      	pop	{r7, pc}
 8016ea6:	bf00      	nop
 8016ea8:	200028ec 	.word	0x200028ec
 8016eac:	0801932c 	.word	0x0801932c

08016eb0 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8016eb0:	b580      	push	{r7, lr}
 8016eb2:	b082      	sub	sp, #8
 8016eb4:	af00      	add	r7, sp, #0
 8016eb6:	4603      	mov	r3, r0
 8016eb8:	6039      	str	r1, [r7, #0]
 8016eba:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8016ebc:	79fb      	ldrb	r3, [r7, #7]
 8016ebe:	2b00      	cmp	r3, #0
 8016ec0:	d105      	bne.n	8016ece <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8016ec2:	683a      	ldr	r2, [r7, #0]
 8016ec4:	4907      	ldr	r1, [pc, #28]	; (8016ee4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016ec6:	4808      	ldr	r0, [pc, #32]	; (8016ee8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016ec8:	f7ff fdbc 	bl	8016a44 <USBD_GetString>
 8016ecc:	e004      	b.n	8016ed8 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 8016ece:	683a      	ldr	r2, [r7, #0]
 8016ed0:	4904      	ldr	r1, [pc, #16]	; (8016ee4 <USBD_HS_InterfaceStrDescriptor+0x34>)
 8016ed2:	4805      	ldr	r0, [pc, #20]	; (8016ee8 <USBD_HS_InterfaceStrDescriptor+0x38>)
 8016ed4:	f7ff fdb6 	bl	8016a44 <USBD_GetString>
  }
  return USBD_StrDesc;
 8016ed8:	4b02      	ldr	r3, [pc, #8]	; (8016ee4 <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8016eda:	4618      	mov	r0, r3
 8016edc:	3708      	adds	r7, #8
 8016ede:	46bd      	mov	sp, r7
 8016ee0:	bd80      	pop	{r7, pc}
 8016ee2:	bf00      	nop
 8016ee4:	200028ec 	.word	0x200028ec
 8016ee8:	08019338 	.word	0x08019338

08016eec <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8016eec:	b580      	push	{r7, lr}
 8016eee:	b084      	sub	sp, #16
 8016ef0:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8016ef2:	4b0f      	ldr	r3, [pc, #60]	; (8016f30 <Get_SerialNum+0x44>)
 8016ef4:	681b      	ldr	r3, [r3, #0]
 8016ef6:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8016ef8:	4b0e      	ldr	r3, [pc, #56]	; (8016f34 <Get_SerialNum+0x48>)
 8016efa:	681b      	ldr	r3, [r3, #0]
 8016efc:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8016efe:	4b0e      	ldr	r3, [pc, #56]	; (8016f38 <Get_SerialNum+0x4c>)
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8016f04:	68fa      	ldr	r2, [r7, #12]
 8016f06:	687b      	ldr	r3, [r7, #4]
 8016f08:	4413      	add	r3, r2
 8016f0a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8016f0c:	68fb      	ldr	r3, [r7, #12]
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	d009      	beq.n	8016f26 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8016f12:	2208      	movs	r2, #8
 8016f14:	4909      	ldr	r1, [pc, #36]	; (8016f3c <Get_SerialNum+0x50>)
 8016f16:	68f8      	ldr	r0, [r7, #12]
 8016f18:	f000 f814 	bl	8016f44 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8016f1c:	2204      	movs	r2, #4
 8016f1e:	4908      	ldr	r1, [pc, #32]	; (8016f40 <Get_SerialNum+0x54>)
 8016f20:	68b8      	ldr	r0, [r7, #8]
 8016f22:	f000 f80f 	bl	8016f44 <IntToUnicode>
  }
}
 8016f26:	bf00      	nop
 8016f28:	3710      	adds	r7, #16
 8016f2a:	46bd      	mov	sp, r7
 8016f2c:	bd80      	pop	{r7, pc}
 8016f2e:	bf00      	nop
 8016f30:	1fff7a10 	.word	0x1fff7a10
 8016f34:	1fff7a14 	.word	0x1fff7a14
 8016f38:	1fff7a18 	.word	0x1fff7a18
 8016f3c:	200002da 	.word	0x200002da
 8016f40:	200002ea 	.word	0x200002ea

08016f44 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8016f44:	b480      	push	{r7}
 8016f46:	b087      	sub	sp, #28
 8016f48:	af00      	add	r7, sp, #0
 8016f4a:	60f8      	str	r0, [r7, #12]
 8016f4c:	60b9      	str	r1, [r7, #8]
 8016f4e:	4613      	mov	r3, r2
 8016f50:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8016f52:	2300      	movs	r3, #0
 8016f54:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8016f56:	2300      	movs	r3, #0
 8016f58:	75fb      	strb	r3, [r7, #23]
 8016f5a:	e027      	b.n	8016fac <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8016f5c:	68fb      	ldr	r3, [r7, #12]
 8016f5e:	0f1b      	lsrs	r3, r3, #28
 8016f60:	2b09      	cmp	r3, #9
 8016f62:	d80b      	bhi.n	8016f7c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8016f64:	68fb      	ldr	r3, [r7, #12]
 8016f66:	0f1b      	lsrs	r3, r3, #28
 8016f68:	b2da      	uxtb	r2, r3
 8016f6a:	7dfb      	ldrb	r3, [r7, #23]
 8016f6c:	005b      	lsls	r3, r3, #1
 8016f6e:	4619      	mov	r1, r3
 8016f70:	68bb      	ldr	r3, [r7, #8]
 8016f72:	440b      	add	r3, r1
 8016f74:	3230      	adds	r2, #48	; 0x30
 8016f76:	b2d2      	uxtb	r2, r2
 8016f78:	701a      	strb	r2, [r3, #0]
 8016f7a:	e00a      	b.n	8016f92 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8016f7c:	68fb      	ldr	r3, [r7, #12]
 8016f7e:	0f1b      	lsrs	r3, r3, #28
 8016f80:	b2da      	uxtb	r2, r3
 8016f82:	7dfb      	ldrb	r3, [r7, #23]
 8016f84:	005b      	lsls	r3, r3, #1
 8016f86:	4619      	mov	r1, r3
 8016f88:	68bb      	ldr	r3, [r7, #8]
 8016f8a:	440b      	add	r3, r1
 8016f8c:	3237      	adds	r2, #55	; 0x37
 8016f8e:	b2d2      	uxtb	r2, r2
 8016f90:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8016f92:	68fb      	ldr	r3, [r7, #12]
 8016f94:	011b      	lsls	r3, r3, #4
 8016f96:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8016f98:	7dfb      	ldrb	r3, [r7, #23]
 8016f9a:	005b      	lsls	r3, r3, #1
 8016f9c:	3301      	adds	r3, #1
 8016f9e:	68ba      	ldr	r2, [r7, #8]
 8016fa0:	4413      	add	r3, r2
 8016fa2:	2200      	movs	r2, #0
 8016fa4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8016fa6:	7dfb      	ldrb	r3, [r7, #23]
 8016fa8:	3301      	adds	r3, #1
 8016faa:	75fb      	strb	r3, [r7, #23]
 8016fac:	7dfa      	ldrb	r2, [r7, #23]
 8016fae:	79fb      	ldrb	r3, [r7, #7]
 8016fb0:	429a      	cmp	r2, r3
 8016fb2:	d3d3      	bcc.n	8016f5c <IntToUnicode+0x18>
  }
}
 8016fb4:	bf00      	nop
 8016fb6:	bf00      	nop
 8016fb8:	371c      	adds	r7, #28
 8016fba:	46bd      	mov	sp, r7
 8016fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016fc0:	4770      	bx	lr
	...

08016fc4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8016fc4:	b580      	push	{r7, lr}
 8016fc6:	b08a      	sub	sp, #40	; 0x28
 8016fc8:	af00      	add	r7, sp, #0
 8016fca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8016fcc:	f107 0314 	add.w	r3, r7, #20
 8016fd0:	2200      	movs	r2, #0
 8016fd2:	601a      	str	r2, [r3, #0]
 8016fd4:	605a      	str	r2, [r3, #4]
 8016fd6:	609a      	str	r2, [r3, #8]
 8016fd8:	60da      	str	r2, [r3, #12]
 8016fda:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_HS)
 8016fdc:	687b      	ldr	r3, [r7, #4]
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	4a2c      	ldr	r2, [pc, #176]	; (8017094 <HAL_PCD_MspInit+0xd0>)
 8016fe2:	4293      	cmp	r3, r2
 8016fe4:	d152      	bne.n	801708c <HAL_PCD_MspInit+0xc8>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8016fe6:	2300      	movs	r3, #0
 8016fe8:	613b      	str	r3, [r7, #16]
 8016fea:	4b2b      	ldr	r3, [pc, #172]	; (8017098 <HAL_PCD_MspInit+0xd4>)
 8016fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016fee:	4a2a      	ldr	r2, [pc, #168]	; (8017098 <HAL_PCD_MspInit+0xd4>)
 8016ff0:	f043 0302 	orr.w	r3, r3, #2
 8016ff4:	6313      	str	r3, [r2, #48]	; 0x30
 8016ff6:	4b28      	ldr	r3, [pc, #160]	; (8017098 <HAL_PCD_MspInit+0xd4>)
 8016ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8016ffa:	f003 0302 	and.w	r3, r3, #2
 8016ffe:	613b      	str	r3, [r7, #16]
 8017000:	693b      	ldr	r3, [r7, #16]
    PB12     ------> USB_OTG_HS_ID
    PB13     ------> USB_OTG_HS_VBUS
    PB14     ------> USB_OTG_HS_DM
    PB15     ------> USB_OTG_HS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_ID_Pin|OTG_FS_DP_Pin;
 8017002:	f44f 4310 	mov.w	r3, #36864	; 0x9000
 8017006:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017008:	2302      	movs	r3, #2
 801700a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801700c:	2300      	movs	r3, #0
 801700e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8017010:	2300      	movs	r3, #0
 8017012:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8017014:	230c      	movs	r3, #12
 8017016:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017018:	f107 0314 	add.w	r3, r7, #20
 801701c:	4619      	mov	r1, r3
 801701e:	481f      	ldr	r0, [pc, #124]	; (801709c <HAL_PCD_MspInit+0xd8>)
 8017020:	f7f7 fe60 	bl	800ece4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VBUS_FS_Pin;
 8017024:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8017028:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 801702a:	2300      	movs	r3, #0
 801702c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801702e:	2300      	movs	r3, #0
 8017030:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(VBUS_FS_GPIO_Port, &GPIO_InitStruct);
 8017032:	f107 0314 	add.w	r3, r7, #20
 8017036:	4619      	mov	r1, r3
 8017038:	4818      	ldr	r0, [pc, #96]	; (801709c <HAL_PCD_MspInit+0xd8>)
 801703a:	f7f7 fe53 	bl	800ece4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_14;
 801703e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8017042:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8017044:	2302      	movs	r3, #2
 8017046:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8017048:	2300      	movs	r3, #0
 801704a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 801704c:	2303      	movs	r3, #3
 801704e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8017050:	230c      	movs	r3, #12
 8017052:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8017054:	f107 0314 	add.w	r3, r7, #20
 8017058:	4619      	mov	r1, r3
 801705a:	4810      	ldr	r0, [pc, #64]	; (801709c <HAL_PCD_MspInit+0xd8>)
 801705c:	f7f7 fe42 	bl	800ece4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8017060:	2300      	movs	r3, #0
 8017062:	60fb      	str	r3, [r7, #12]
 8017064:	4b0c      	ldr	r3, [pc, #48]	; (8017098 <HAL_PCD_MspInit+0xd4>)
 8017066:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017068:	4a0b      	ldr	r2, [pc, #44]	; (8017098 <HAL_PCD_MspInit+0xd4>)
 801706a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 801706e:	6313      	str	r3, [r2, #48]	; 0x30
 8017070:	4b09      	ldr	r3, [pc, #36]	; (8017098 <HAL_PCD_MspInit+0xd4>)
 8017072:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8017074:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8017078:	60fb      	str	r3, [r7, #12]
 801707a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 801707c:	2200      	movs	r2, #0
 801707e:	2100      	movs	r1, #0
 8017080:	204d      	movs	r0, #77	; 0x4d
 8017082:	f7f6 ff22 	bl	800deca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8017086:	204d      	movs	r0, #77	; 0x4d
 8017088:	f7f6 ff3b 	bl	800df02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */

  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }
}
 801708c:	bf00      	nop
 801708e:	3728      	adds	r7, #40	; 0x28
 8017090:	46bd      	mov	sp, r7
 8017092:	bd80      	pop	{r7, pc}
 8017094:	40040000 	.word	0x40040000
 8017098:	40023800 	.word	0x40023800
 801709c:	40020400 	.word	0x40020400

080170a0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80170a0:	b580      	push	{r7, lr}
 80170a2:	b082      	sub	sp, #8
 80170a4:	af00      	add	r7, sp, #0
 80170a6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80170a8:	687b      	ldr	r3, [r7, #4]
 80170aa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80170ae:	687b      	ldr	r3, [r7, #4]
 80170b0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80170b4:	4619      	mov	r1, r3
 80170b6:	4610      	mov	r0, r2
 80170b8:	f7fe fb65 	bl	8015786 <USBD_LL_SetupStage>
}
 80170bc:	bf00      	nop
 80170be:	3708      	adds	r7, #8
 80170c0:	46bd      	mov	sp, r7
 80170c2:	bd80      	pop	{r7, pc}

080170c4 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80170c4:	b580      	push	{r7, lr}
 80170c6:	b082      	sub	sp, #8
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	6078      	str	r0, [r7, #4]
 80170cc:	460b      	mov	r3, r1
 80170ce:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80170d0:	687b      	ldr	r3, [r7, #4]
 80170d2:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80170d6:	78fa      	ldrb	r2, [r7, #3]
 80170d8:	6879      	ldr	r1, [r7, #4]
 80170da:	4613      	mov	r3, r2
 80170dc:	00db      	lsls	r3, r3, #3
 80170de:	4413      	add	r3, r2
 80170e0:	009b      	lsls	r3, r3, #2
 80170e2:	440b      	add	r3, r1
 80170e4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80170e8:	681a      	ldr	r2, [r3, #0]
 80170ea:	78fb      	ldrb	r3, [r7, #3]
 80170ec:	4619      	mov	r1, r3
 80170ee:	f7fe fb9f 	bl	8015830 <USBD_LL_DataOutStage>
}
 80170f2:	bf00      	nop
 80170f4:	3708      	adds	r7, #8
 80170f6:	46bd      	mov	sp, r7
 80170f8:	bd80      	pop	{r7, pc}

080170fa <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80170fa:	b580      	push	{r7, lr}
 80170fc:	b082      	sub	sp, #8
 80170fe:	af00      	add	r7, sp, #0
 8017100:	6078      	str	r0, [r7, #4]
 8017102:	460b      	mov	r3, r1
 8017104:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 801710c:	78fa      	ldrb	r2, [r7, #3]
 801710e:	6879      	ldr	r1, [r7, #4]
 8017110:	4613      	mov	r3, r2
 8017112:	00db      	lsls	r3, r3, #3
 8017114:	4413      	add	r3, r2
 8017116:	009b      	lsls	r3, r3, #2
 8017118:	440b      	add	r3, r1
 801711a:	334c      	adds	r3, #76	; 0x4c
 801711c:	681a      	ldr	r2, [r3, #0]
 801711e:	78fb      	ldrb	r3, [r7, #3]
 8017120:	4619      	mov	r1, r3
 8017122:	f7fe fc38 	bl	8015996 <USBD_LL_DataInStage>
}
 8017126:	bf00      	nop
 8017128:	3708      	adds	r7, #8
 801712a:	46bd      	mov	sp, r7
 801712c:	bd80      	pop	{r7, pc}

0801712e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801712e:	b580      	push	{r7, lr}
 8017130:	b082      	sub	sp, #8
 8017132:	af00      	add	r7, sp, #0
 8017134:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8017136:	687b      	ldr	r3, [r7, #4]
 8017138:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801713c:	4618      	mov	r0, r3
 801713e:	f7fe fd6c 	bl	8015c1a <USBD_LL_SOF>
}
 8017142:	bf00      	nop
 8017144:	3708      	adds	r7, #8
 8017146:	46bd      	mov	sp, r7
 8017148:	bd80      	pop	{r7, pc}

0801714a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801714a:	b580      	push	{r7, lr}
 801714c:	b084      	sub	sp, #16
 801714e:	af00      	add	r7, sp, #0
 8017150:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8017152:	2301      	movs	r3, #1
 8017154:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8017156:	687b      	ldr	r3, [r7, #4]
 8017158:	68db      	ldr	r3, [r3, #12]
 801715a:	2b00      	cmp	r3, #0
 801715c:	d102      	bne.n	8017164 <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 801715e:	2300      	movs	r3, #0
 8017160:	73fb      	strb	r3, [r7, #15]
 8017162:	e008      	b.n	8017176 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8017164:	687b      	ldr	r3, [r7, #4]
 8017166:	68db      	ldr	r3, [r3, #12]
 8017168:	2b02      	cmp	r3, #2
 801716a:	d102      	bne.n	8017172 <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 801716c:	2301      	movs	r3, #1
 801716e:	73fb      	strb	r3, [r7, #15]
 8017170:	e001      	b.n	8017176 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8017172:	f7f0 fd07 	bl	8007b84 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8017176:	687b      	ldr	r3, [r7, #4]
 8017178:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801717c:	7bfa      	ldrb	r2, [r7, #15]
 801717e:	4611      	mov	r1, r2
 8017180:	4618      	mov	r0, r3
 8017182:	f7fe fd0c 	bl	8015b9e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8017186:	687b      	ldr	r3, [r7, #4]
 8017188:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801718c:	4618      	mov	r0, r3
 801718e:	f7fe fcb4 	bl	8015afa <USBD_LL_Reset>
}
 8017192:	bf00      	nop
 8017194:	3710      	adds	r7, #16
 8017196:	46bd      	mov	sp, r7
 8017198:	bd80      	pop	{r7, pc}
	...

0801719c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801719c:	b580      	push	{r7, lr}
 801719e:	b082      	sub	sp, #8
 80171a0:	af00      	add	r7, sp, #0
 80171a2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80171aa:	4618      	mov	r0, r3
 80171ac:	f7fe fd07 	bl	8015bbe <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80171b0:	687b      	ldr	r3, [r7, #4]
 80171b2:	681b      	ldr	r3, [r3, #0]
 80171b4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80171b8:	681b      	ldr	r3, [r3, #0]
 80171ba:	687a      	ldr	r2, [r7, #4]
 80171bc:	6812      	ldr	r2, [r2, #0]
 80171be:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80171c2:	f043 0301 	orr.w	r3, r3, #1
 80171c6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80171c8:	687b      	ldr	r3, [r7, #4]
 80171ca:	6a1b      	ldr	r3, [r3, #32]
 80171cc:	2b00      	cmp	r3, #0
 80171ce:	d005      	beq.n	80171dc <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80171d0:	4b04      	ldr	r3, [pc, #16]	; (80171e4 <HAL_PCD_SuspendCallback+0x48>)
 80171d2:	691b      	ldr	r3, [r3, #16]
 80171d4:	4a03      	ldr	r2, [pc, #12]	; (80171e4 <HAL_PCD_SuspendCallback+0x48>)
 80171d6:	f043 0306 	orr.w	r3, r3, #6
 80171da:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 80171dc:	bf00      	nop
 80171de:	3708      	adds	r7, #8
 80171e0:	46bd      	mov	sp, r7
 80171e2:	bd80      	pop	{r7, pc}
 80171e4:	e000ed00 	.word	0xe000ed00

080171e8 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80171e8:	b580      	push	{r7, lr}
 80171ea:	b082      	sub	sp, #8
 80171ec:	af00      	add	r7, sp, #0
 80171ee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80171f0:	687b      	ldr	r3, [r7, #4]
 80171f2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80171f6:	4618      	mov	r0, r3
 80171f8:	f7fe fcf7 	bl	8015bea <USBD_LL_Resume>
}
 80171fc:	bf00      	nop
 80171fe:	3708      	adds	r7, #8
 8017200:	46bd      	mov	sp, r7
 8017202:	bd80      	pop	{r7, pc}

08017204 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017204:	b580      	push	{r7, lr}
 8017206:	b082      	sub	sp, #8
 8017208:	af00      	add	r7, sp, #0
 801720a:	6078      	str	r0, [r7, #4]
 801720c:	460b      	mov	r3, r1
 801720e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017210:	687b      	ldr	r3, [r7, #4]
 8017212:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017216:	78fa      	ldrb	r2, [r7, #3]
 8017218:	4611      	mov	r1, r2
 801721a:	4618      	mov	r0, r3
 801721c:	f7fe fd4f 	bl	8015cbe <USBD_LL_IsoOUTIncomplete>
}
 8017220:	bf00      	nop
 8017222:	3708      	adds	r7, #8
 8017224:	46bd      	mov	sp, r7
 8017226:	bd80      	pop	{r7, pc}

08017228 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017228:	b580      	push	{r7, lr}
 801722a:	b082      	sub	sp, #8
 801722c:	af00      	add	r7, sp, #0
 801722e:	6078      	str	r0, [r7, #4]
 8017230:	460b      	mov	r3, r1
 8017232:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801723a:	78fa      	ldrb	r2, [r7, #3]
 801723c:	4611      	mov	r1, r2
 801723e:	4618      	mov	r0, r3
 8017240:	f7fe fd0b 	bl	8015c5a <USBD_LL_IsoINIncomplete>
}
 8017244:	bf00      	nop
 8017246:	3708      	adds	r7, #8
 8017248:	46bd      	mov	sp, r7
 801724a:	bd80      	pop	{r7, pc}

0801724c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801724c:	b580      	push	{r7, lr}
 801724e:	b082      	sub	sp, #8
 8017250:	af00      	add	r7, sp, #0
 8017252:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8017254:	687b      	ldr	r3, [r7, #4]
 8017256:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 801725a:	4618      	mov	r0, r3
 801725c:	f7fe fd61 	bl	8015d22 <USBD_LL_DevConnected>
}
 8017260:	bf00      	nop
 8017262:	3708      	adds	r7, #8
 8017264:	46bd      	mov	sp, r7
 8017266:	bd80      	pop	{r7, pc}

08017268 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8017268:	b580      	push	{r7, lr}
 801726a:	b082      	sub	sp, #8
 801726c:	af00      	add	r7, sp, #0
 801726e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8017270:	687b      	ldr	r3, [r7, #4]
 8017272:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8017276:	4618      	mov	r0, r3
 8017278:	f7fe fd5e 	bl	8015d38 <USBD_LL_DevDisconnected>
}
 801727c:	bf00      	nop
 801727e:	3708      	adds	r7, #8
 8017280:	46bd      	mov	sp, r7
 8017282:	bd80      	pop	{r7, pc}

08017284 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8017284:	b580      	push	{r7, lr}
 8017286:	b082      	sub	sp, #8
 8017288:	af00      	add	r7, sp, #0
 801728a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	781b      	ldrb	r3, [r3, #0]
 8017290:	2b01      	cmp	r3, #1
 8017292:	d140      	bne.n	8017316 <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8017294:	4a22      	ldr	r2, [pc, #136]	; (8017320 <USBD_LL_Init+0x9c>)
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	4a20      	ldr	r2, [pc, #128]	; (8017320 <USBD_LL_Init+0x9c>)
 80172a0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 80172a4:	4b1e      	ldr	r3, [pc, #120]	; (8017320 <USBD_LL_Init+0x9c>)
 80172a6:	4a1f      	ldr	r2, [pc, #124]	; (8017324 <USBD_LL_Init+0xa0>)
 80172a8:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 6;
 80172aa:	4b1d      	ldr	r3, [pc, #116]	; (8017320 <USBD_LL_Init+0x9c>)
 80172ac:	2206      	movs	r2, #6
 80172ae:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_FULL;
 80172b0:	4b1b      	ldr	r3, [pc, #108]	; (8017320 <USBD_LL_Init+0x9c>)
 80172b2:	2202      	movs	r2, #2
 80172b4:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 80172b6:	4b1a      	ldr	r3, [pc, #104]	; (8017320 <USBD_LL_Init+0x9c>)
 80172b8:	2200      	movs	r2, #0
 80172ba:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_EMBEDDED_PHY;
 80172bc:	4b18      	ldr	r3, [pc, #96]	; (8017320 <USBD_LL_Init+0x9c>)
 80172be:	2202      	movs	r2, #2
 80172c0:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 80172c2:	4b17      	ldr	r3, [pc, #92]	; (8017320 <USBD_LL_Init+0x9c>)
 80172c4:	2200      	movs	r2, #0
 80172c6:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 80172c8:	4b15      	ldr	r3, [pc, #84]	; (8017320 <USBD_LL_Init+0x9c>)
 80172ca:	2200      	movs	r2, #0
 80172cc:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 80172ce:	4b14      	ldr	r3, [pc, #80]	; (8017320 <USBD_LL_Init+0x9c>)
 80172d0:	2200      	movs	r2, #0
 80172d2:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 80172d4:	4b12      	ldr	r3, [pc, #72]	; (8017320 <USBD_LL_Init+0x9c>)
 80172d6:	2200      	movs	r2, #0
 80172d8:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 80172da:	4b11      	ldr	r3, [pc, #68]	; (8017320 <USBD_LL_Init+0x9c>)
 80172dc:	2200      	movs	r2, #0
 80172de:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 80172e0:	4b0f      	ldr	r3, [pc, #60]	; (8017320 <USBD_LL_Init+0x9c>)
 80172e2:	2200      	movs	r2, #0
 80172e4:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 80172e6:	480e      	ldr	r0, [pc, #56]	; (8017320 <USBD_LL_Init+0x9c>)
 80172e8:	f7f7 fef2 	bl	800f0d0 <HAL_PCD_Init>
 80172ec:	4603      	mov	r3, r0
 80172ee:	2b00      	cmp	r3, #0
 80172f0:	d001      	beq.n	80172f6 <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 80172f2:	f7f0 fc47 	bl	8007b84 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 80172f6:	f44f 7100 	mov.w	r1, #512	; 0x200
 80172fa:	4809      	ldr	r0, [pc, #36]	; (8017320 <USBD_LL_Init+0x9c>)
 80172fc:	f7f9 f949 	bl	8010592 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8017300:	2280      	movs	r2, #128	; 0x80
 8017302:	2100      	movs	r1, #0
 8017304:	4806      	ldr	r0, [pc, #24]	; (8017320 <USBD_LL_Init+0x9c>)
 8017306:	f7f9 f8fd 	bl	8010504 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 801730a:	f44f 72ba 	mov.w	r2, #372	; 0x174
 801730e:	2101      	movs	r1, #1
 8017310:	4803      	ldr	r0, [pc, #12]	; (8017320 <USBD_LL_Init+0x9c>)
 8017312:	f7f9 f8f7 	bl	8010504 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8017316:	2300      	movs	r3, #0
}
 8017318:	4618      	mov	r0, r3
 801731a:	3708      	adds	r7, #8
 801731c:	46bd      	mov	sp, r7
 801731e:	bd80      	pop	{r7, pc}
 8017320:	20002aec 	.word	0x20002aec
 8017324:	40040000 	.word	0x40040000

08017328 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8017328:	b580      	push	{r7, lr}
 801732a:	b084      	sub	sp, #16
 801732c:	af00      	add	r7, sp, #0
 801732e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017330:	2300      	movs	r3, #0
 8017332:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017334:	2300      	movs	r3, #0
 8017336:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 801733e:	4618      	mov	r0, r3
 8017340:	f7f7 ffe3 	bl	800f30a <HAL_PCD_Start>
 8017344:	4603      	mov	r3, r0
 8017346:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017348:	7bfb      	ldrb	r3, [r7, #15]
 801734a:	4618      	mov	r0, r3
 801734c:	f000 f942 	bl	80175d4 <USBD_Get_USB_Status>
 8017350:	4603      	mov	r3, r0
 8017352:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8017354:	7bbb      	ldrb	r3, [r7, #14]
}
 8017356:	4618      	mov	r0, r3
 8017358:	3710      	adds	r7, #16
 801735a:	46bd      	mov	sp, r7
 801735c:	bd80      	pop	{r7, pc}

0801735e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801735e:	b580      	push	{r7, lr}
 8017360:	b084      	sub	sp, #16
 8017362:	af00      	add	r7, sp, #0
 8017364:	6078      	str	r0, [r7, #4]
 8017366:	4608      	mov	r0, r1
 8017368:	4611      	mov	r1, r2
 801736a:	461a      	mov	r2, r3
 801736c:	4603      	mov	r3, r0
 801736e:	70fb      	strb	r3, [r7, #3]
 8017370:	460b      	mov	r3, r1
 8017372:	70bb      	strb	r3, [r7, #2]
 8017374:	4613      	mov	r3, r2
 8017376:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017378:	2300      	movs	r3, #0
 801737a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801737c:	2300      	movs	r3, #0
 801737e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8017380:	687b      	ldr	r3, [r7, #4]
 8017382:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017386:	78bb      	ldrb	r3, [r7, #2]
 8017388:	883a      	ldrh	r2, [r7, #0]
 801738a:	78f9      	ldrb	r1, [r7, #3]
 801738c:	f7f8 fcb4 	bl	800fcf8 <HAL_PCD_EP_Open>
 8017390:	4603      	mov	r3, r0
 8017392:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017394:	7bfb      	ldrb	r3, [r7, #15]
 8017396:	4618      	mov	r0, r3
 8017398:	f000 f91c 	bl	80175d4 <USBD_Get_USB_Status>
 801739c:	4603      	mov	r3, r0
 801739e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80173a0:	7bbb      	ldrb	r3, [r7, #14]
}
 80173a2:	4618      	mov	r0, r3
 80173a4:	3710      	adds	r7, #16
 80173a6:	46bd      	mov	sp, r7
 80173a8:	bd80      	pop	{r7, pc}

080173aa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80173aa:	b580      	push	{r7, lr}
 80173ac:	b084      	sub	sp, #16
 80173ae:	af00      	add	r7, sp, #0
 80173b0:	6078      	str	r0, [r7, #4]
 80173b2:	460b      	mov	r3, r1
 80173b4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80173b6:	2300      	movs	r3, #0
 80173b8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80173ba:	2300      	movs	r3, #0
 80173bc:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80173be:	687b      	ldr	r3, [r7, #4]
 80173c0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80173c4:	78fa      	ldrb	r2, [r7, #3]
 80173c6:	4611      	mov	r1, r2
 80173c8:	4618      	mov	r0, r3
 80173ca:	f7f8 fcfd 	bl	800fdc8 <HAL_PCD_EP_Close>
 80173ce:	4603      	mov	r3, r0
 80173d0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80173d2:	7bfb      	ldrb	r3, [r7, #15]
 80173d4:	4618      	mov	r0, r3
 80173d6:	f000 f8fd 	bl	80175d4 <USBD_Get_USB_Status>
 80173da:	4603      	mov	r3, r0
 80173dc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80173de:	7bbb      	ldrb	r3, [r7, #14]
}
 80173e0:	4618      	mov	r0, r3
 80173e2:	3710      	adds	r7, #16
 80173e4:	46bd      	mov	sp, r7
 80173e6:	bd80      	pop	{r7, pc}

080173e8 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80173e8:	b580      	push	{r7, lr}
 80173ea:	b084      	sub	sp, #16
 80173ec:	af00      	add	r7, sp, #0
 80173ee:	6078      	str	r0, [r7, #4]
 80173f0:	460b      	mov	r3, r1
 80173f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80173f4:	2300      	movs	r3, #0
 80173f6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80173f8:	2300      	movs	r3, #0
 80173fa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80173fc:	687b      	ldr	r3, [r7, #4]
 80173fe:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017402:	78fa      	ldrb	r2, [r7, #3]
 8017404:	4611      	mov	r1, r2
 8017406:	4618      	mov	r0, r3
 8017408:	f7f8 fdd5 	bl	800ffb6 <HAL_PCD_EP_SetStall>
 801740c:	4603      	mov	r3, r0
 801740e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017410:	7bfb      	ldrb	r3, [r7, #15]
 8017412:	4618      	mov	r0, r3
 8017414:	f000 f8de 	bl	80175d4 <USBD_Get_USB_Status>
 8017418:	4603      	mov	r3, r0
 801741a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801741c:	7bbb      	ldrb	r3, [r7, #14]
}
 801741e:	4618      	mov	r0, r3
 8017420:	3710      	adds	r7, #16
 8017422:	46bd      	mov	sp, r7
 8017424:	bd80      	pop	{r7, pc}

08017426 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017426:	b580      	push	{r7, lr}
 8017428:	b084      	sub	sp, #16
 801742a:	af00      	add	r7, sp, #0
 801742c:	6078      	str	r0, [r7, #4]
 801742e:	460b      	mov	r3, r1
 8017430:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8017432:	2300      	movs	r3, #0
 8017434:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017436:	2300      	movs	r3, #0
 8017438:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 801743a:	687b      	ldr	r3, [r7, #4]
 801743c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017440:	78fa      	ldrb	r2, [r7, #3]
 8017442:	4611      	mov	r1, r2
 8017444:	4618      	mov	r0, r3
 8017446:	f7f8 fe1a 	bl	801007e <HAL_PCD_EP_ClrStall>
 801744a:	4603      	mov	r3, r0
 801744c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801744e:	7bfb      	ldrb	r3, [r7, #15]
 8017450:	4618      	mov	r0, r3
 8017452:	f000 f8bf 	bl	80175d4 <USBD_Get_USB_Status>
 8017456:	4603      	mov	r3, r0
 8017458:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 801745a:	7bbb      	ldrb	r3, [r7, #14]
}
 801745c:	4618      	mov	r0, r3
 801745e:	3710      	adds	r7, #16
 8017460:	46bd      	mov	sp, r7
 8017462:	bd80      	pop	{r7, pc}

08017464 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8017464:	b480      	push	{r7}
 8017466:	b085      	sub	sp, #20
 8017468:	af00      	add	r7, sp, #0
 801746a:	6078      	str	r0, [r7, #4]
 801746c:	460b      	mov	r3, r1
 801746e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8017470:	687b      	ldr	r3, [r7, #4]
 8017472:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017476:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8017478:	f997 3003 	ldrsb.w	r3, [r7, #3]
 801747c:	2b00      	cmp	r3, #0
 801747e:	da0b      	bge.n	8017498 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8017480:	78fb      	ldrb	r3, [r7, #3]
 8017482:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8017486:	68f9      	ldr	r1, [r7, #12]
 8017488:	4613      	mov	r3, r2
 801748a:	00db      	lsls	r3, r3, #3
 801748c:	4413      	add	r3, r2
 801748e:	009b      	lsls	r3, r3, #2
 8017490:	440b      	add	r3, r1
 8017492:	333e      	adds	r3, #62	; 0x3e
 8017494:	781b      	ldrb	r3, [r3, #0]
 8017496:	e00b      	b.n	80174b0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8017498:	78fb      	ldrb	r3, [r7, #3]
 801749a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 801749e:	68f9      	ldr	r1, [r7, #12]
 80174a0:	4613      	mov	r3, r2
 80174a2:	00db      	lsls	r3, r3, #3
 80174a4:	4413      	add	r3, r2
 80174a6:	009b      	lsls	r3, r3, #2
 80174a8:	440b      	add	r3, r1
 80174aa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80174ae:	781b      	ldrb	r3, [r3, #0]
  }
}
 80174b0:	4618      	mov	r0, r3
 80174b2:	3714      	adds	r7, #20
 80174b4:	46bd      	mov	sp, r7
 80174b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174ba:	4770      	bx	lr

080174bc <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 80174bc:	b580      	push	{r7, lr}
 80174be:	b084      	sub	sp, #16
 80174c0:	af00      	add	r7, sp, #0
 80174c2:	6078      	str	r0, [r7, #4]
 80174c4:	460b      	mov	r3, r1
 80174c6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80174c8:	2300      	movs	r3, #0
 80174ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80174cc:	2300      	movs	r3, #0
 80174ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80174d0:	687b      	ldr	r3, [r7, #4]
 80174d2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80174d6:	78fa      	ldrb	r2, [r7, #3]
 80174d8:	4611      	mov	r1, r2
 80174da:	4618      	mov	r0, r3
 80174dc:	f7f8 fbe7 	bl	800fcae <HAL_PCD_SetAddress>
 80174e0:	4603      	mov	r3, r0
 80174e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80174e4:	7bfb      	ldrb	r3, [r7, #15]
 80174e6:	4618      	mov	r0, r3
 80174e8:	f000 f874 	bl	80175d4 <USBD_Get_USB_Status>
 80174ec:	4603      	mov	r3, r0
 80174ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80174f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80174f2:	4618      	mov	r0, r3
 80174f4:	3710      	adds	r7, #16
 80174f6:	46bd      	mov	sp, r7
 80174f8:	bd80      	pop	{r7, pc}

080174fa <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80174fa:	b580      	push	{r7, lr}
 80174fc:	b086      	sub	sp, #24
 80174fe:	af00      	add	r7, sp, #0
 8017500:	60f8      	str	r0, [r7, #12]
 8017502:	607a      	str	r2, [r7, #4]
 8017504:	603b      	str	r3, [r7, #0]
 8017506:	460b      	mov	r3, r1
 8017508:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801750a:	2300      	movs	r3, #0
 801750c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801750e:	2300      	movs	r3, #0
 8017510:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8017512:	68fb      	ldr	r3, [r7, #12]
 8017514:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8017518:	7af9      	ldrb	r1, [r7, #11]
 801751a:	683b      	ldr	r3, [r7, #0]
 801751c:	687a      	ldr	r2, [r7, #4]
 801751e:	f7f8 fd00 	bl	800ff22 <HAL_PCD_EP_Transmit>
 8017522:	4603      	mov	r3, r0
 8017524:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017526:	7dfb      	ldrb	r3, [r7, #23]
 8017528:	4618      	mov	r0, r3
 801752a:	f000 f853 	bl	80175d4 <USBD_Get_USB_Status>
 801752e:	4603      	mov	r3, r0
 8017530:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017532:	7dbb      	ldrb	r3, [r7, #22]
}
 8017534:	4618      	mov	r0, r3
 8017536:	3718      	adds	r7, #24
 8017538:	46bd      	mov	sp, r7
 801753a:	bd80      	pop	{r7, pc}

0801753c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 801753c:	b580      	push	{r7, lr}
 801753e:	b086      	sub	sp, #24
 8017540:	af00      	add	r7, sp, #0
 8017542:	60f8      	str	r0, [r7, #12]
 8017544:	607a      	str	r2, [r7, #4]
 8017546:	603b      	str	r3, [r7, #0]
 8017548:	460b      	mov	r3, r1
 801754a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801754c:	2300      	movs	r3, #0
 801754e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8017550:	2300      	movs	r3, #0
 8017552:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8017554:	68fb      	ldr	r3, [r7, #12]
 8017556:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 801755a:	7af9      	ldrb	r1, [r7, #11]
 801755c:	683b      	ldr	r3, [r7, #0]
 801755e:	687a      	ldr	r2, [r7, #4]
 8017560:	f7f8 fc7c 	bl	800fe5c <HAL_PCD_EP_Receive>
 8017564:	4603      	mov	r3, r0
 8017566:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8017568:	7dfb      	ldrb	r3, [r7, #23]
 801756a:	4618      	mov	r0, r3
 801756c:	f000 f832 	bl	80175d4 <USBD_Get_USB_Status>
 8017570:	4603      	mov	r3, r0
 8017572:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8017574:	7dbb      	ldrb	r3, [r7, #22]
}
 8017576:	4618      	mov	r0, r3
 8017578:	3718      	adds	r7, #24
 801757a:	46bd      	mov	sp, r7
 801757c:	bd80      	pop	{r7, pc}

0801757e <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 801757e:	b580      	push	{r7, lr}
 8017580:	b082      	sub	sp, #8
 8017582:	af00      	add	r7, sp, #0
 8017584:	6078      	str	r0, [r7, #4]
 8017586:	460b      	mov	r3, r1
 8017588:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8017590:	78fa      	ldrb	r2, [r7, #3]
 8017592:	4611      	mov	r1, r2
 8017594:	4618      	mov	r0, r3
 8017596:	f7f8 fcac 	bl	800fef2 <HAL_PCD_EP_GetRxCount>
 801759a:	4603      	mov	r3, r0
}
 801759c:	4618      	mov	r0, r3
 801759e:	3708      	adds	r7, #8
 80175a0:	46bd      	mov	sp, r7
 80175a2:	bd80      	pop	{r7, pc}

080175a4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80175a4:	b480      	push	{r7}
 80175a6:	b083      	sub	sp, #12
 80175a8:	af00      	add	r7, sp, #0
 80175aa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80175ac:	4b03      	ldr	r3, [pc, #12]	; (80175bc <USBD_static_malloc+0x18>)
}
 80175ae:	4618      	mov	r0, r3
 80175b0:	370c      	adds	r7, #12
 80175b2:	46bd      	mov	sp, r7
 80175b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175b8:	4770      	bx	lr
 80175ba:	bf00      	nop
 80175bc:	20002ff8 	.word	0x20002ff8

080175c0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80175c0:	b480      	push	{r7}
 80175c2:	b083      	sub	sp, #12
 80175c4:	af00      	add	r7, sp, #0
 80175c6:	6078      	str	r0, [r7, #4]

}
 80175c8:	bf00      	nop
 80175ca:	370c      	adds	r7, #12
 80175cc:	46bd      	mov	sp, r7
 80175ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80175d2:	4770      	bx	lr

080175d4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 80175d4:	b480      	push	{r7}
 80175d6:	b085      	sub	sp, #20
 80175d8:	af00      	add	r7, sp, #0
 80175da:	4603      	mov	r3, r0
 80175dc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80175de:	2300      	movs	r3, #0
 80175e0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 80175e2:	79fb      	ldrb	r3, [r7, #7]
 80175e4:	2b03      	cmp	r3, #3
 80175e6:	d817      	bhi.n	8017618 <USBD_Get_USB_Status+0x44>
 80175e8:	a201      	add	r2, pc, #4	; (adr r2, 80175f0 <USBD_Get_USB_Status+0x1c>)
 80175ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80175ee:	bf00      	nop
 80175f0:	08017601 	.word	0x08017601
 80175f4:	08017607 	.word	0x08017607
 80175f8:	0801760d 	.word	0x0801760d
 80175fc:	08017613 	.word	0x08017613
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8017600:	2300      	movs	r3, #0
 8017602:	73fb      	strb	r3, [r7, #15]
    break;
 8017604:	e00b      	b.n	801761e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8017606:	2303      	movs	r3, #3
 8017608:	73fb      	strb	r3, [r7, #15]
    break;
 801760a:	e008      	b.n	801761e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 801760c:	2301      	movs	r3, #1
 801760e:	73fb      	strb	r3, [r7, #15]
    break;
 8017610:	e005      	b.n	801761e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8017612:	2303      	movs	r3, #3
 8017614:	73fb      	strb	r3, [r7, #15]
    break;
 8017616:	e002      	b.n	801761e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8017618:	2303      	movs	r3, #3
 801761a:	73fb      	strb	r3, [r7, #15]
    break;
 801761c:	bf00      	nop
  }
  return usb_status;
 801761e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017620:	4618      	mov	r0, r3
 8017622:	3714      	adds	r7, #20
 8017624:	46bd      	mov	sp, r7
 8017626:	f85d 7b04 	ldr.w	r7, [sp], #4
 801762a:	4770      	bx	lr

0801762c <__errno>:
 801762c:	4b01      	ldr	r3, [pc, #4]	; (8017634 <__errno+0x8>)
 801762e:	6818      	ldr	r0, [r3, #0]
 8017630:	4770      	bx	lr
 8017632:	bf00      	nop
 8017634:	200002f4 	.word	0x200002f4

08017638 <__libc_init_array>:
 8017638:	b570      	push	{r4, r5, r6, lr}
 801763a:	4d0d      	ldr	r5, [pc, #52]	; (8017670 <__libc_init_array+0x38>)
 801763c:	4c0d      	ldr	r4, [pc, #52]	; (8017674 <__libc_init_array+0x3c>)
 801763e:	1b64      	subs	r4, r4, r5
 8017640:	10a4      	asrs	r4, r4, #2
 8017642:	2600      	movs	r6, #0
 8017644:	42a6      	cmp	r6, r4
 8017646:	d109      	bne.n	801765c <__libc_init_array+0x24>
 8017648:	4d0b      	ldr	r5, [pc, #44]	; (8017678 <__libc_init_array+0x40>)
 801764a:	4c0c      	ldr	r4, [pc, #48]	; (801767c <__libc_init_array+0x44>)
 801764c:	f001 fa0a 	bl	8018a64 <_init>
 8017650:	1b64      	subs	r4, r4, r5
 8017652:	10a4      	asrs	r4, r4, #2
 8017654:	2600      	movs	r6, #0
 8017656:	42a6      	cmp	r6, r4
 8017658:	d105      	bne.n	8017666 <__libc_init_array+0x2e>
 801765a:	bd70      	pop	{r4, r5, r6, pc}
 801765c:	f855 3b04 	ldr.w	r3, [r5], #4
 8017660:	4798      	blx	r3
 8017662:	3601      	adds	r6, #1
 8017664:	e7ee      	b.n	8017644 <__libc_init_array+0xc>
 8017666:	f855 3b04 	ldr.w	r3, [r5], #4
 801766a:	4798      	blx	r3
 801766c:	3601      	adds	r6, #1
 801766e:	e7f2      	b.n	8017656 <__libc_init_array+0x1e>
 8017670:	0801a9b0 	.word	0x0801a9b0
 8017674:	0801a9b0 	.word	0x0801a9b0
 8017678:	0801a9b0 	.word	0x0801a9b0
 801767c:	0801a9b4 	.word	0x0801a9b4

08017680 <malloc>:
 8017680:	4b02      	ldr	r3, [pc, #8]	; (801768c <malloc+0xc>)
 8017682:	4601      	mov	r1, r0
 8017684:	6818      	ldr	r0, [r3, #0]
 8017686:	f000 b88d 	b.w	80177a4 <_malloc_r>
 801768a:	bf00      	nop
 801768c:	200002f4 	.word	0x200002f4

08017690 <free>:
 8017690:	4b02      	ldr	r3, [pc, #8]	; (801769c <free+0xc>)
 8017692:	4601      	mov	r1, r0
 8017694:	6818      	ldr	r0, [r3, #0]
 8017696:	f000 b819 	b.w	80176cc <_free_r>
 801769a:	bf00      	nop
 801769c:	200002f4 	.word	0x200002f4

080176a0 <memcpy>:
 80176a0:	440a      	add	r2, r1
 80176a2:	4291      	cmp	r1, r2
 80176a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80176a8:	d100      	bne.n	80176ac <memcpy+0xc>
 80176aa:	4770      	bx	lr
 80176ac:	b510      	push	{r4, lr}
 80176ae:	f811 4b01 	ldrb.w	r4, [r1], #1
 80176b2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80176b6:	4291      	cmp	r1, r2
 80176b8:	d1f9      	bne.n	80176ae <memcpy+0xe>
 80176ba:	bd10      	pop	{r4, pc}

080176bc <memset>:
 80176bc:	4402      	add	r2, r0
 80176be:	4603      	mov	r3, r0
 80176c0:	4293      	cmp	r3, r2
 80176c2:	d100      	bne.n	80176c6 <memset+0xa>
 80176c4:	4770      	bx	lr
 80176c6:	f803 1b01 	strb.w	r1, [r3], #1
 80176ca:	e7f9      	b.n	80176c0 <memset+0x4>

080176cc <_free_r>:
 80176cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80176ce:	2900      	cmp	r1, #0
 80176d0:	d044      	beq.n	801775c <_free_r+0x90>
 80176d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80176d6:	9001      	str	r0, [sp, #4]
 80176d8:	2b00      	cmp	r3, #0
 80176da:	f1a1 0404 	sub.w	r4, r1, #4
 80176de:	bfb8      	it	lt
 80176e0:	18e4      	addlt	r4, r4, r3
 80176e2:	f000 fc6b 	bl	8017fbc <__malloc_lock>
 80176e6:	4a1e      	ldr	r2, [pc, #120]	; (8017760 <_free_r+0x94>)
 80176e8:	9801      	ldr	r0, [sp, #4]
 80176ea:	6813      	ldr	r3, [r2, #0]
 80176ec:	b933      	cbnz	r3, 80176fc <_free_r+0x30>
 80176ee:	6063      	str	r3, [r4, #4]
 80176f0:	6014      	str	r4, [r2, #0]
 80176f2:	b003      	add	sp, #12
 80176f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80176f8:	f000 bc66 	b.w	8017fc8 <__malloc_unlock>
 80176fc:	42a3      	cmp	r3, r4
 80176fe:	d908      	bls.n	8017712 <_free_r+0x46>
 8017700:	6825      	ldr	r5, [r4, #0]
 8017702:	1961      	adds	r1, r4, r5
 8017704:	428b      	cmp	r3, r1
 8017706:	bf01      	itttt	eq
 8017708:	6819      	ldreq	r1, [r3, #0]
 801770a:	685b      	ldreq	r3, [r3, #4]
 801770c:	1949      	addeq	r1, r1, r5
 801770e:	6021      	streq	r1, [r4, #0]
 8017710:	e7ed      	b.n	80176ee <_free_r+0x22>
 8017712:	461a      	mov	r2, r3
 8017714:	685b      	ldr	r3, [r3, #4]
 8017716:	b10b      	cbz	r3, 801771c <_free_r+0x50>
 8017718:	42a3      	cmp	r3, r4
 801771a:	d9fa      	bls.n	8017712 <_free_r+0x46>
 801771c:	6811      	ldr	r1, [r2, #0]
 801771e:	1855      	adds	r5, r2, r1
 8017720:	42a5      	cmp	r5, r4
 8017722:	d10b      	bne.n	801773c <_free_r+0x70>
 8017724:	6824      	ldr	r4, [r4, #0]
 8017726:	4421      	add	r1, r4
 8017728:	1854      	adds	r4, r2, r1
 801772a:	42a3      	cmp	r3, r4
 801772c:	6011      	str	r1, [r2, #0]
 801772e:	d1e0      	bne.n	80176f2 <_free_r+0x26>
 8017730:	681c      	ldr	r4, [r3, #0]
 8017732:	685b      	ldr	r3, [r3, #4]
 8017734:	6053      	str	r3, [r2, #4]
 8017736:	4421      	add	r1, r4
 8017738:	6011      	str	r1, [r2, #0]
 801773a:	e7da      	b.n	80176f2 <_free_r+0x26>
 801773c:	d902      	bls.n	8017744 <_free_r+0x78>
 801773e:	230c      	movs	r3, #12
 8017740:	6003      	str	r3, [r0, #0]
 8017742:	e7d6      	b.n	80176f2 <_free_r+0x26>
 8017744:	6825      	ldr	r5, [r4, #0]
 8017746:	1961      	adds	r1, r4, r5
 8017748:	428b      	cmp	r3, r1
 801774a:	bf04      	itt	eq
 801774c:	6819      	ldreq	r1, [r3, #0]
 801774e:	685b      	ldreq	r3, [r3, #4]
 8017750:	6063      	str	r3, [r4, #4]
 8017752:	bf04      	itt	eq
 8017754:	1949      	addeq	r1, r1, r5
 8017756:	6021      	streq	r1, [r4, #0]
 8017758:	6054      	str	r4, [r2, #4]
 801775a:	e7ca      	b.n	80176f2 <_free_r+0x26>
 801775c:	b003      	add	sp, #12
 801775e:	bd30      	pop	{r4, r5, pc}
 8017760:	20003218 	.word	0x20003218

08017764 <sbrk_aligned>:
 8017764:	b570      	push	{r4, r5, r6, lr}
 8017766:	4e0e      	ldr	r6, [pc, #56]	; (80177a0 <sbrk_aligned+0x3c>)
 8017768:	460c      	mov	r4, r1
 801776a:	6831      	ldr	r1, [r6, #0]
 801776c:	4605      	mov	r5, r0
 801776e:	b911      	cbnz	r1, 8017776 <sbrk_aligned+0x12>
 8017770:	f000 f8a4 	bl	80178bc <_sbrk_r>
 8017774:	6030      	str	r0, [r6, #0]
 8017776:	4621      	mov	r1, r4
 8017778:	4628      	mov	r0, r5
 801777a:	f000 f89f 	bl	80178bc <_sbrk_r>
 801777e:	1c43      	adds	r3, r0, #1
 8017780:	d00a      	beq.n	8017798 <sbrk_aligned+0x34>
 8017782:	1cc4      	adds	r4, r0, #3
 8017784:	f024 0403 	bic.w	r4, r4, #3
 8017788:	42a0      	cmp	r0, r4
 801778a:	d007      	beq.n	801779c <sbrk_aligned+0x38>
 801778c:	1a21      	subs	r1, r4, r0
 801778e:	4628      	mov	r0, r5
 8017790:	f000 f894 	bl	80178bc <_sbrk_r>
 8017794:	3001      	adds	r0, #1
 8017796:	d101      	bne.n	801779c <sbrk_aligned+0x38>
 8017798:	f04f 34ff 	mov.w	r4, #4294967295
 801779c:	4620      	mov	r0, r4
 801779e:	bd70      	pop	{r4, r5, r6, pc}
 80177a0:	2000321c 	.word	0x2000321c

080177a4 <_malloc_r>:
 80177a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80177a8:	1ccd      	adds	r5, r1, #3
 80177aa:	f025 0503 	bic.w	r5, r5, #3
 80177ae:	3508      	adds	r5, #8
 80177b0:	2d0c      	cmp	r5, #12
 80177b2:	bf38      	it	cc
 80177b4:	250c      	movcc	r5, #12
 80177b6:	2d00      	cmp	r5, #0
 80177b8:	4607      	mov	r7, r0
 80177ba:	db01      	blt.n	80177c0 <_malloc_r+0x1c>
 80177bc:	42a9      	cmp	r1, r5
 80177be:	d905      	bls.n	80177cc <_malloc_r+0x28>
 80177c0:	230c      	movs	r3, #12
 80177c2:	603b      	str	r3, [r7, #0]
 80177c4:	2600      	movs	r6, #0
 80177c6:	4630      	mov	r0, r6
 80177c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80177cc:	4e2e      	ldr	r6, [pc, #184]	; (8017888 <_malloc_r+0xe4>)
 80177ce:	f000 fbf5 	bl	8017fbc <__malloc_lock>
 80177d2:	6833      	ldr	r3, [r6, #0]
 80177d4:	461c      	mov	r4, r3
 80177d6:	bb34      	cbnz	r4, 8017826 <_malloc_r+0x82>
 80177d8:	4629      	mov	r1, r5
 80177da:	4638      	mov	r0, r7
 80177dc:	f7ff ffc2 	bl	8017764 <sbrk_aligned>
 80177e0:	1c43      	adds	r3, r0, #1
 80177e2:	4604      	mov	r4, r0
 80177e4:	d14d      	bne.n	8017882 <_malloc_r+0xde>
 80177e6:	6834      	ldr	r4, [r6, #0]
 80177e8:	4626      	mov	r6, r4
 80177ea:	2e00      	cmp	r6, #0
 80177ec:	d140      	bne.n	8017870 <_malloc_r+0xcc>
 80177ee:	6823      	ldr	r3, [r4, #0]
 80177f0:	4631      	mov	r1, r6
 80177f2:	4638      	mov	r0, r7
 80177f4:	eb04 0803 	add.w	r8, r4, r3
 80177f8:	f000 f860 	bl	80178bc <_sbrk_r>
 80177fc:	4580      	cmp	r8, r0
 80177fe:	d13a      	bne.n	8017876 <_malloc_r+0xd2>
 8017800:	6821      	ldr	r1, [r4, #0]
 8017802:	3503      	adds	r5, #3
 8017804:	1a6d      	subs	r5, r5, r1
 8017806:	f025 0503 	bic.w	r5, r5, #3
 801780a:	3508      	adds	r5, #8
 801780c:	2d0c      	cmp	r5, #12
 801780e:	bf38      	it	cc
 8017810:	250c      	movcc	r5, #12
 8017812:	4629      	mov	r1, r5
 8017814:	4638      	mov	r0, r7
 8017816:	f7ff ffa5 	bl	8017764 <sbrk_aligned>
 801781a:	3001      	adds	r0, #1
 801781c:	d02b      	beq.n	8017876 <_malloc_r+0xd2>
 801781e:	6823      	ldr	r3, [r4, #0]
 8017820:	442b      	add	r3, r5
 8017822:	6023      	str	r3, [r4, #0]
 8017824:	e00e      	b.n	8017844 <_malloc_r+0xa0>
 8017826:	6822      	ldr	r2, [r4, #0]
 8017828:	1b52      	subs	r2, r2, r5
 801782a:	d41e      	bmi.n	801786a <_malloc_r+0xc6>
 801782c:	2a0b      	cmp	r2, #11
 801782e:	d916      	bls.n	801785e <_malloc_r+0xba>
 8017830:	1961      	adds	r1, r4, r5
 8017832:	42a3      	cmp	r3, r4
 8017834:	6025      	str	r5, [r4, #0]
 8017836:	bf18      	it	ne
 8017838:	6059      	strne	r1, [r3, #4]
 801783a:	6863      	ldr	r3, [r4, #4]
 801783c:	bf08      	it	eq
 801783e:	6031      	streq	r1, [r6, #0]
 8017840:	5162      	str	r2, [r4, r5]
 8017842:	604b      	str	r3, [r1, #4]
 8017844:	4638      	mov	r0, r7
 8017846:	f104 060b 	add.w	r6, r4, #11
 801784a:	f000 fbbd 	bl	8017fc8 <__malloc_unlock>
 801784e:	f026 0607 	bic.w	r6, r6, #7
 8017852:	1d23      	adds	r3, r4, #4
 8017854:	1af2      	subs	r2, r6, r3
 8017856:	d0b6      	beq.n	80177c6 <_malloc_r+0x22>
 8017858:	1b9b      	subs	r3, r3, r6
 801785a:	50a3      	str	r3, [r4, r2]
 801785c:	e7b3      	b.n	80177c6 <_malloc_r+0x22>
 801785e:	6862      	ldr	r2, [r4, #4]
 8017860:	42a3      	cmp	r3, r4
 8017862:	bf0c      	ite	eq
 8017864:	6032      	streq	r2, [r6, #0]
 8017866:	605a      	strne	r2, [r3, #4]
 8017868:	e7ec      	b.n	8017844 <_malloc_r+0xa0>
 801786a:	4623      	mov	r3, r4
 801786c:	6864      	ldr	r4, [r4, #4]
 801786e:	e7b2      	b.n	80177d6 <_malloc_r+0x32>
 8017870:	4634      	mov	r4, r6
 8017872:	6876      	ldr	r6, [r6, #4]
 8017874:	e7b9      	b.n	80177ea <_malloc_r+0x46>
 8017876:	230c      	movs	r3, #12
 8017878:	603b      	str	r3, [r7, #0]
 801787a:	4638      	mov	r0, r7
 801787c:	f000 fba4 	bl	8017fc8 <__malloc_unlock>
 8017880:	e7a1      	b.n	80177c6 <_malloc_r+0x22>
 8017882:	6025      	str	r5, [r4, #0]
 8017884:	e7de      	b.n	8017844 <_malloc_r+0xa0>
 8017886:	bf00      	nop
 8017888:	20003218 	.word	0x20003218

0801788c <iprintf>:
 801788c:	b40f      	push	{r0, r1, r2, r3}
 801788e:	4b0a      	ldr	r3, [pc, #40]	; (80178b8 <iprintf+0x2c>)
 8017890:	b513      	push	{r0, r1, r4, lr}
 8017892:	681c      	ldr	r4, [r3, #0]
 8017894:	b124      	cbz	r4, 80178a0 <iprintf+0x14>
 8017896:	69a3      	ldr	r3, [r4, #24]
 8017898:	b913      	cbnz	r3, 80178a0 <iprintf+0x14>
 801789a:	4620      	mov	r0, r4
 801789c:	f000 fa88 	bl	8017db0 <__sinit>
 80178a0:	ab05      	add	r3, sp, #20
 80178a2:	9a04      	ldr	r2, [sp, #16]
 80178a4:	68a1      	ldr	r1, [r4, #8]
 80178a6:	9301      	str	r3, [sp, #4]
 80178a8:	4620      	mov	r0, r4
 80178aa:	f000 fd19 	bl	80182e0 <_vfiprintf_r>
 80178ae:	b002      	add	sp, #8
 80178b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80178b4:	b004      	add	sp, #16
 80178b6:	4770      	bx	lr
 80178b8:	200002f4 	.word	0x200002f4

080178bc <_sbrk_r>:
 80178bc:	b538      	push	{r3, r4, r5, lr}
 80178be:	4d06      	ldr	r5, [pc, #24]	; (80178d8 <_sbrk_r+0x1c>)
 80178c0:	2300      	movs	r3, #0
 80178c2:	4604      	mov	r4, r0
 80178c4:	4608      	mov	r0, r1
 80178c6:	602b      	str	r3, [r5, #0]
 80178c8:	f7f4 fa34 	bl	800bd34 <_sbrk>
 80178cc:	1c43      	adds	r3, r0, #1
 80178ce:	d102      	bne.n	80178d6 <_sbrk_r+0x1a>
 80178d0:	682b      	ldr	r3, [r5, #0]
 80178d2:	b103      	cbz	r3, 80178d6 <_sbrk_r+0x1a>
 80178d4:	6023      	str	r3, [r4, #0]
 80178d6:	bd38      	pop	{r3, r4, r5, pc}
 80178d8:	20003224 	.word	0x20003224

080178dc <siprintf>:
 80178dc:	b40e      	push	{r1, r2, r3}
 80178de:	b500      	push	{lr}
 80178e0:	b09c      	sub	sp, #112	; 0x70
 80178e2:	ab1d      	add	r3, sp, #116	; 0x74
 80178e4:	9002      	str	r0, [sp, #8]
 80178e6:	9006      	str	r0, [sp, #24]
 80178e8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80178ec:	4809      	ldr	r0, [pc, #36]	; (8017914 <siprintf+0x38>)
 80178ee:	9107      	str	r1, [sp, #28]
 80178f0:	9104      	str	r1, [sp, #16]
 80178f2:	4909      	ldr	r1, [pc, #36]	; (8017918 <siprintf+0x3c>)
 80178f4:	f853 2b04 	ldr.w	r2, [r3], #4
 80178f8:	9105      	str	r1, [sp, #20]
 80178fa:	6800      	ldr	r0, [r0, #0]
 80178fc:	9301      	str	r3, [sp, #4]
 80178fe:	a902      	add	r1, sp, #8
 8017900:	f000 fbc4 	bl	801808c <_svfiprintf_r>
 8017904:	9b02      	ldr	r3, [sp, #8]
 8017906:	2200      	movs	r2, #0
 8017908:	701a      	strb	r2, [r3, #0]
 801790a:	b01c      	add	sp, #112	; 0x70
 801790c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017910:	b003      	add	sp, #12
 8017912:	4770      	bx	lr
 8017914:	200002f4 	.word	0x200002f4
 8017918:	ffff0208 	.word	0xffff0208

0801791c <strcat>:
 801791c:	b510      	push	{r4, lr}
 801791e:	4602      	mov	r2, r0
 8017920:	7814      	ldrb	r4, [r2, #0]
 8017922:	4613      	mov	r3, r2
 8017924:	3201      	adds	r2, #1
 8017926:	2c00      	cmp	r4, #0
 8017928:	d1fa      	bne.n	8017920 <strcat+0x4>
 801792a:	3b01      	subs	r3, #1
 801792c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017930:	f803 2f01 	strb.w	r2, [r3, #1]!
 8017934:	2a00      	cmp	r2, #0
 8017936:	d1f9      	bne.n	801792c <strcat+0x10>
 8017938:	bd10      	pop	{r4, pc}

0801793a <strcpy>:
 801793a:	4603      	mov	r3, r0
 801793c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8017940:	f803 2b01 	strb.w	r2, [r3], #1
 8017944:	2a00      	cmp	r2, #0
 8017946:	d1f9      	bne.n	801793c <strcpy+0x2>
 8017948:	4770      	bx	lr

0801794a <strncmp>:
 801794a:	b510      	push	{r4, lr}
 801794c:	b17a      	cbz	r2, 801796e <strncmp+0x24>
 801794e:	4603      	mov	r3, r0
 8017950:	3901      	subs	r1, #1
 8017952:	1884      	adds	r4, r0, r2
 8017954:	f813 0b01 	ldrb.w	r0, [r3], #1
 8017958:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 801795c:	4290      	cmp	r0, r2
 801795e:	d101      	bne.n	8017964 <strncmp+0x1a>
 8017960:	42a3      	cmp	r3, r4
 8017962:	d101      	bne.n	8017968 <strncmp+0x1e>
 8017964:	1a80      	subs	r0, r0, r2
 8017966:	bd10      	pop	{r4, pc}
 8017968:	2800      	cmp	r0, #0
 801796a:	d1f3      	bne.n	8017954 <strncmp+0xa>
 801796c:	e7fa      	b.n	8017964 <strncmp+0x1a>
 801796e:	4610      	mov	r0, r2
 8017970:	e7f9      	b.n	8017966 <strncmp+0x1c>
	...

08017974 <__utoa>:
 8017974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017976:	4c1f      	ldr	r4, [pc, #124]	; (80179f4 <__utoa+0x80>)
 8017978:	b08b      	sub	sp, #44	; 0x2c
 801797a:	4605      	mov	r5, r0
 801797c:	460b      	mov	r3, r1
 801797e:	466e      	mov	r6, sp
 8017980:	f104 0c20 	add.w	ip, r4, #32
 8017984:	6820      	ldr	r0, [r4, #0]
 8017986:	6861      	ldr	r1, [r4, #4]
 8017988:	4637      	mov	r7, r6
 801798a:	c703      	stmia	r7!, {r0, r1}
 801798c:	3408      	adds	r4, #8
 801798e:	4564      	cmp	r4, ip
 8017990:	463e      	mov	r6, r7
 8017992:	d1f7      	bne.n	8017984 <__utoa+0x10>
 8017994:	7921      	ldrb	r1, [r4, #4]
 8017996:	7139      	strb	r1, [r7, #4]
 8017998:	1e91      	subs	r1, r2, #2
 801799a:	6820      	ldr	r0, [r4, #0]
 801799c:	6038      	str	r0, [r7, #0]
 801799e:	2922      	cmp	r1, #34	; 0x22
 80179a0:	f04f 0100 	mov.w	r1, #0
 80179a4:	d904      	bls.n	80179b0 <__utoa+0x3c>
 80179a6:	7019      	strb	r1, [r3, #0]
 80179a8:	460b      	mov	r3, r1
 80179aa:	4618      	mov	r0, r3
 80179ac:	b00b      	add	sp, #44	; 0x2c
 80179ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80179b0:	1e58      	subs	r0, r3, #1
 80179b2:	4684      	mov	ip, r0
 80179b4:	fbb5 f7f2 	udiv	r7, r5, r2
 80179b8:	fb02 5617 	mls	r6, r2, r7, r5
 80179bc:	3628      	adds	r6, #40	; 0x28
 80179be:	446e      	add	r6, sp
 80179c0:	460c      	mov	r4, r1
 80179c2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80179c6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80179ca:	462e      	mov	r6, r5
 80179cc:	42b2      	cmp	r2, r6
 80179ce:	f101 0101 	add.w	r1, r1, #1
 80179d2:	463d      	mov	r5, r7
 80179d4:	d9ee      	bls.n	80179b4 <__utoa+0x40>
 80179d6:	2200      	movs	r2, #0
 80179d8:	545a      	strb	r2, [r3, r1]
 80179da:	1919      	adds	r1, r3, r4
 80179dc:	1aa5      	subs	r5, r4, r2
 80179de:	42aa      	cmp	r2, r5
 80179e0:	dae3      	bge.n	80179aa <__utoa+0x36>
 80179e2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80179e6:	780e      	ldrb	r6, [r1, #0]
 80179e8:	7006      	strb	r6, [r0, #0]
 80179ea:	3201      	adds	r2, #1
 80179ec:	f801 5901 	strb.w	r5, [r1], #-1
 80179f0:	e7f4      	b.n	80179dc <__utoa+0x68>
 80179f2:	bf00      	nop
 80179f4:	0801a8ec 	.word	0x0801a8ec

080179f8 <utoa>:
 80179f8:	f7ff bfbc 	b.w	8017974 <__utoa>

080179fc <__swbuf_r>:
 80179fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80179fe:	460e      	mov	r6, r1
 8017a00:	4614      	mov	r4, r2
 8017a02:	4605      	mov	r5, r0
 8017a04:	b118      	cbz	r0, 8017a0e <__swbuf_r+0x12>
 8017a06:	6983      	ldr	r3, [r0, #24]
 8017a08:	b90b      	cbnz	r3, 8017a0e <__swbuf_r+0x12>
 8017a0a:	f000 f9d1 	bl	8017db0 <__sinit>
 8017a0e:	4b21      	ldr	r3, [pc, #132]	; (8017a94 <__swbuf_r+0x98>)
 8017a10:	429c      	cmp	r4, r3
 8017a12:	d12b      	bne.n	8017a6c <__swbuf_r+0x70>
 8017a14:	686c      	ldr	r4, [r5, #4]
 8017a16:	69a3      	ldr	r3, [r4, #24]
 8017a18:	60a3      	str	r3, [r4, #8]
 8017a1a:	89a3      	ldrh	r3, [r4, #12]
 8017a1c:	071a      	lsls	r2, r3, #28
 8017a1e:	d52f      	bpl.n	8017a80 <__swbuf_r+0x84>
 8017a20:	6923      	ldr	r3, [r4, #16]
 8017a22:	b36b      	cbz	r3, 8017a80 <__swbuf_r+0x84>
 8017a24:	6923      	ldr	r3, [r4, #16]
 8017a26:	6820      	ldr	r0, [r4, #0]
 8017a28:	1ac0      	subs	r0, r0, r3
 8017a2a:	6963      	ldr	r3, [r4, #20]
 8017a2c:	b2f6      	uxtb	r6, r6
 8017a2e:	4283      	cmp	r3, r0
 8017a30:	4637      	mov	r7, r6
 8017a32:	dc04      	bgt.n	8017a3e <__swbuf_r+0x42>
 8017a34:	4621      	mov	r1, r4
 8017a36:	4628      	mov	r0, r5
 8017a38:	f000 f926 	bl	8017c88 <_fflush_r>
 8017a3c:	bb30      	cbnz	r0, 8017a8c <__swbuf_r+0x90>
 8017a3e:	68a3      	ldr	r3, [r4, #8]
 8017a40:	3b01      	subs	r3, #1
 8017a42:	60a3      	str	r3, [r4, #8]
 8017a44:	6823      	ldr	r3, [r4, #0]
 8017a46:	1c5a      	adds	r2, r3, #1
 8017a48:	6022      	str	r2, [r4, #0]
 8017a4a:	701e      	strb	r6, [r3, #0]
 8017a4c:	6963      	ldr	r3, [r4, #20]
 8017a4e:	3001      	adds	r0, #1
 8017a50:	4283      	cmp	r3, r0
 8017a52:	d004      	beq.n	8017a5e <__swbuf_r+0x62>
 8017a54:	89a3      	ldrh	r3, [r4, #12]
 8017a56:	07db      	lsls	r3, r3, #31
 8017a58:	d506      	bpl.n	8017a68 <__swbuf_r+0x6c>
 8017a5a:	2e0a      	cmp	r6, #10
 8017a5c:	d104      	bne.n	8017a68 <__swbuf_r+0x6c>
 8017a5e:	4621      	mov	r1, r4
 8017a60:	4628      	mov	r0, r5
 8017a62:	f000 f911 	bl	8017c88 <_fflush_r>
 8017a66:	b988      	cbnz	r0, 8017a8c <__swbuf_r+0x90>
 8017a68:	4638      	mov	r0, r7
 8017a6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017a6c:	4b0a      	ldr	r3, [pc, #40]	; (8017a98 <__swbuf_r+0x9c>)
 8017a6e:	429c      	cmp	r4, r3
 8017a70:	d101      	bne.n	8017a76 <__swbuf_r+0x7a>
 8017a72:	68ac      	ldr	r4, [r5, #8]
 8017a74:	e7cf      	b.n	8017a16 <__swbuf_r+0x1a>
 8017a76:	4b09      	ldr	r3, [pc, #36]	; (8017a9c <__swbuf_r+0xa0>)
 8017a78:	429c      	cmp	r4, r3
 8017a7a:	bf08      	it	eq
 8017a7c:	68ec      	ldreq	r4, [r5, #12]
 8017a7e:	e7ca      	b.n	8017a16 <__swbuf_r+0x1a>
 8017a80:	4621      	mov	r1, r4
 8017a82:	4628      	mov	r0, r5
 8017a84:	f000 f80c 	bl	8017aa0 <__swsetup_r>
 8017a88:	2800      	cmp	r0, #0
 8017a8a:	d0cb      	beq.n	8017a24 <__swbuf_r+0x28>
 8017a8c:	f04f 37ff 	mov.w	r7, #4294967295
 8017a90:	e7ea      	b.n	8017a68 <__swbuf_r+0x6c>
 8017a92:	bf00      	nop
 8017a94:	0801a934 	.word	0x0801a934
 8017a98:	0801a954 	.word	0x0801a954
 8017a9c:	0801a914 	.word	0x0801a914

08017aa0 <__swsetup_r>:
 8017aa0:	4b32      	ldr	r3, [pc, #200]	; (8017b6c <__swsetup_r+0xcc>)
 8017aa2:	b570      	push	{r4, r5, r6, lr}
 8017aa4:	681d      	ldr	r5, [r3, #0]
 8017aa6:	4606      	mov	r6, r0
 8017aa8:	460c      	mov	r4, r1
 8017aaa:	b125      	cbz	r5, 8017ab6 <__swsetup_r+0x16>
 8017aac:	69ab      	ldr	r3, [r5, #24]
 8017aae:	b913      	cbnz	r3, 8017ab6 <__swsetup_r+0x16>
 8017ab0:	4628      	mov	r0, r5
 8017ab2:	f000 f97d 	bl	8017db0 <__sinit>
 8017ab6:	4b2e      	ldr	r3, [pc, #184]	; (8017b70 <__swsetup_r+0xd0>)
 8017ab8:	429c      	cmp	r4, r3
 8017aba:	d10f      	bne.n	8017adc <__swsetup_r+0x3c>
 8017abc:	686c      	ldr	r4, [r5, #4]
 8017abe:	89a3      	ldrh	r3, [r4, #12]
 8017ac0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017ac4:	0719      	lsls	r1, r3, #28
 8017ac6:	d42c      	bmi.n	8017b22 <__swsetup_r+0x82>
 8017ac8:	06dd      	lsls	r5, r3, #27
 8017aca:	d411      	bmi.n	8017af0 <__swsetup_r+0x50>
 8017acc:	2309      	movs	r3, #9
 8017ace:	6033      	str	r3, [r6, #0]
 8017ad0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017ad4:	81a3      	strh	r3, [r4, #12]
 8017ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8017ada:	e03e      	b.n	8017b5a <__swsetup_r+0xba>
 8017adc:	4b25      	ldr	r3, [pc, #148]	; (8017b74 <__swsetup_r+0xd4>)
 8017ade:	429c      	cmp	r4, r3
 8017ae0:	d101      	bne.n	8017ae6 <__swsetup_r+0x46>
 8017ae2:	68ac      	ldr	r4, [r5, #8]
 8017ae4:	e7eb      	b.n	8017abe <__swsetup_r+0x1e>
 8017ae6:	4b24      	ldr	r3, [pc, #144]	; (8017b78 <__swsetup_r+0xd8>)
 8017ae8:	429c      	cmp	r4, r3
 8017aea:	bf08      	it	eq
 8017aec:	68ec      	ldreq	r4, [r5, #12]
 8017aee:	e7e6      	b.n	8017abe <__swsetup_r+0x1e>
 8017af0:	0758      	lsls	r0, r3, #29
 8017af2:	d512      	bpl.n	8017b1a <__swsetup_r+0x7a>
 8017af4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017af6:	b141      	cbz	r1, 8017b0a <__swsetup_r+0x6a>
 8017af8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017afc:	4299      	cmp	r1, r3
 8017afe:	d002      	beq.n	8017b06 <__swsetup_r+0x66>
 8017b00:	4630      	mov	r0, r6
 8017b02:	f7ff fde3 	bl	80176cc <_free_r>
 8017b06:	2300      	movs	r3, #0
 8017b08:	6363      	str	r3, [r4, #52]	; 0x34
 8017b0a:	89a3      	ldrh	r3, [r4, #12]
 8017b0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017b10:	81a3      	strh	r3, [r4, #12]
 8017b12:	2300      	movs	r3, #0
 8017b14:	6063      	str	r3, [r4, #4]
 8017b16:	6923      	ldr	r3, [r4, #16]
 8017b18:	6023      	str	r3, [r4, #0]
 8017b1a:	89a3      	ldrh	r3, [r4, #12]
 8017b1c:	f043 0308 	orr.w	r3, r3, #8
 8017b20:	81a3      	strh	r3, [r4, #12]
 8017b22:	6923      	ldr	r3, [r4, #16]
 8017b24:	b94b      	cbnz	r3, 8017b3a <__swsetup_r+0x9a>
 8017b26:	89a3      	ldrh	r3, [r4, #12]
 8017b28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017b2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017b30:	d003      	beq.n	8017b3a <__swsetup_r+0x9a>
 8017b32:	4621      	mov	r1, r4
 8017b34:	4630      	mov	r0, r6
 8017b36:	f000 fa01 	bl	8017f3c <__smakebuf_r>
 8017b3a:	89a0      	ldrh	r0, [r4, #12]
 8017b3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017b40:	f010 0301 	ands.w	r3, r0, #1
 8017b44:	d00a      	beq.n	8017b5c <__swsetup_r+0xbc>
 8017b46:	2300      	movs	r3, #0
 8017b48:	60a3      	str	r3, [r4, #8]
 8017b4a:	6963      	ldr	r3, [r4, #20]
 8017b4c:	425b      	negs	r3, r3
 8017b4e:	61a3      	str	r3, [r4, #24]
 8017b50:	6923      	ldr	r3, [r4, #16]
 8017b52:	b943      	cbnz	r3, 8017b66 <__swsetup_r+0xc6>
 8017b54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017b58:	d1ba      	bne.n	8017ad0 <__swsetup_r+0x30>
 8017b5a:	bd70      	pop	{r4, r5, r6, pc}
 8017b5c:	0781      	lsls	r1, r0, #30
 8017b5e:	bf58      	it	pl
 8017b60:	6963      	ldrpl	r3, [r4, #20]
 8017b62:	60a3      	str	r3, [r4, #8]
 8017b64:	e7f4      	b.n	8017b50 <__swsetup_r+0xb0>
 8017b66:	2000      	movs	r0, #0
 8017b68:	e7f7      	b.n	8017b5a <__swsetup_r+0xba>
 8017b6a:	bf00      	nop
 8017b6c:	200002f4 	.word	0x200002f4
 8017b70:	0801a934 	.word	0x0801a934
 8017b74:	0801a954 	.word	0x0801a954
 8017b78:	0801a914 	.word	0x0801a914

08017b7c <__sflush_r>:
 8017b7c:	898a      	ldrh	r2, [r1, #12]
 8017b7e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b82:	4605      	mov	r5, r0
 8017b84:	0710      	lsls	r0, r2, #28
 8017b86:	460c      	mov	r4, r1
 8017b88:	d458      	bmi.n	8017c3c <__sflush_r+0xc0>
 8017b8a:	684b      	ldr	r3, [r1, #4]
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	dc05      	bgt.n	8017b9c <__sflush_r+0x20>
 8017b90:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017b92:	2b00      	cmp	r3, #0
 8017b94:	dc02      	bgt.n	8017b9c <__sflush_r+0x20>
 8017b96:	2000      	movs	r0, #0
 8017b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017b9c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017b9e:	2e00      	cmp	r6, #0
 8017ba0:	d0f9      	beq.n	8017b96 <__sflush_r+0x1a>
 8017ba2:	2300      	movs	r3, #0
 8017ba4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017ba8:	682f      	ldr	r7, [r5, #0]
 8017baa:	602b      	str	r3, [r5, #0]
 8017bac:	d032      	beq.n	8017c14 <__sflush_r+0x98>
 8017bae:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017bb0:	89a3      	ldrh	r3, [r4, #12]
 8017bb2:	075a      	lsls	r2, r3, #29
 8017bb4:	d505      	bpl.n	8017bc2 <__sflush_r+0x46>
 8017bb6:	6863      	ldr	r3, [r4, #4]
 8017bb8:	1ac0      	subs	r0, r0, r3
 8017bba:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017bbc:	b10b      	cbz	r3, 8017bc2 <__sflush_r+0x46>
 8017bbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017bc0:	1ac0      	subs	r0, r0, r3
 8017bc2:	2300      	movs	r3, #0
 8017bc4:	4602      	mov	r2, r0
 8017bc6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017bc8:	6a21      	ldr	r1, [r4, #32]
 8017bca:	4628      	mov	r0, r5
 8017bcc:	47b0      	blx	r6
 8017bce:	1c43      	adds	r3, r0, #1
 8017bd0:	89a3      	ldrh	r3, [r4, #12]
 8017bd2:	d106      	bne.n	8017be2 <__sflush_r+0x66>
 8017bd4:	6829      	ldr	r1, [r5, #0]
 8017bd6:	291d      	cmp	r1, #29
 8017bd8:	d82c      	bhi.n	8017c34 <__sflush_r+0xb8>
 8017bda:	4a2a      	ldr	r2, [pc, #168]	; (8017c84 <__sflush_r+0x108>)
 8017bdc:	40ca      	lsrs	r2, r1
 8017bde:	07d6      	lsls	r6, r2, #31
 8017be0:	d528      	bpl.n	8017c34 <__sflush_r+0xb8>
 8017be2:	2200      	movs	r2, #0
 8017be4:	6062      	str	r2, [r4, #4]
 8017be6:	04d9      	lsls	r1, r3, #19
 8017be8:	6922      	ldr	r2, [r4, #16]
 8017bea:	6022      	str	r2, [r4, #0]
 8017bec:	d504      	bpl.n	8017bf8 <__sflush_r+0x7c>
 8017bee:	1c42      	adds	r2, r0, #1
 8017bf0:	d101      	bne.n	8017bf6 <__sflush_r+0x7a>
 8017bf2:	682b      	ldr	r3, [r5, #0]
 8017bf4:	b903      	cbnz	r3, 8017bf8 <__sflush_r+0x7c>
 8017bf6:	6560      	str	r0, [r4, #84]	; 0x54
 8017bf8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017bfa:	602f      	str	r7, [r5, #0]
 8017bfc:	2900      	cmp	r1, #0
 8017bfe:	d0ca      	beq.n	8017b96 <__sflush_r+0x1a>
 8017c00:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017c04:	4299      	cmp	r1, r3
 8017c06:	d002      	beq.n	8017c0e <__sflush_r+0x92>
 8017c08:	4628      	mov	r0, r5
 8017c0a:	f7ff fd5f 	bl	80176cc <_free_r>
 8017c0e:	2000      	movs	r0, #0
 8017c10:	6360      	str	r0, [r4, #52]	; 0x34
 8017c12:	e7c1      	b.n	8017b98 <__sflush_r+0x1c>
 8017c14:	6a21      	ldr	r1, [r4, #32]
 8017c16:	2301      	movs	r3, #1
 8017c18:	4628      	mov	r0, r5
 8017c1a:	47b0      	blx	r6
 8017c1c:	1c41      	adds	r1, r0, #1
 8017c1e:	d1c7      	bne.n	8017bb0 <__sflush_r+0x34>
 8017c20:	682b      	ldr	r3, [r5, #0]
 8017c22:	2b00      	cmp	r3, #0
 8017c24:	d0c4      	beq.n	8017bb0 <__sflush_r+0x34>
 8017c26:	2b1d      	cmp	r3, #29
 8017c28:	d001      	beq.n	8017c2e <__sflush_r+0xb2>
 8017c2a:	2b16      	cmp	r3, #22
 8017c2c:	d101      	bne.n	8017c32 <__sflush_r+0xb6>
 8017c2e:	602f      	str	r7, [r5, #0]
 8017c30:	e7b1      	b.n	8017b96 <__sflush_r+0x1a>
 8017c32:	89a3      	ldrh	r3, [r4, #12]
 8017c34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c38:	81a3      	strh	r3, [r4, #12]
 8017c3a:	e7ad      	b.n	8017b98 <__sflush_r+0x1c>
 8017c3c:	690f      	ldr	r7, [r1, #16]
 8017c3e:	2f00      	cmp	r7, #0
 8017c40:	d0a9      	beq.n	8017b96 <__sflush_r+0x1a>
 8017c42:	0793      	lsls	r3, r2, #30
 8017c44:	680e      	ldr	r6, [r1, #0]
 8017c46:	bf08      	it	eq
 8017c48:	694b      	ldreq	r3, [r1, #20]
 8017c4a:	600f      	str	r7, [r1, #0]
 8017c4c:	bf18      	it	ne
 8017c4e:	2300      	movne	r3, #0
 8017c50:	eba6 0807 	sub.w	r8, r6, r7
 8017c54:	608b      	str	r3, [r1, #8]
 8017c56:	f1b8 0f00 	cmp.w	r8, #0
 8017c5a:	dd9c      	ble.n	8017b96 <__sflush_r+0x1a>
 8017c5c:	6a21      	ldr	r1, [r4, #32]
 8017c5e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017c60:	4643      	mov	r3, r8
 8017c62:	463a      	mov	r2, r7
 8017c64:	4628      	mov	r0, r5
 8017c66:	47b0      	blx	r6
 8017c68:	2800      	cmp	r0, #0
 8017c6a:	dc06      	bgt.n	8017c7a <__sflush_r+0xfe>
 8017c6c:	89a3      	ldrh	r3, [r4, #12]
 8017c6e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c72:	81a3      	strh	r3, [r4, #12]
 8017c74:	f04f 30ff 	mov.w	r0, #4294967295
 8017c78:	e78e      	b.n	8017b98 <__sflush_r+0x1c>
 8017c7a:	4407      	add	r7, r0
 8017c7c:	eba8 0800 	sub.w	r8, r8, r0
 8017c80:	e7e9      	b.n	8017c56 <__sflush_r+0xda>
 8017c82:	bf00      	nop
 8017c84:	20400001 	.word	0x20400001

08017c88 <_fflush_r>:
 8017c88:	b538      	push	{r3, r4, r5, lr}
 8017c8a:	690b      	ldr	r3, [r1, #16]
 8017c8c:	4605      	mov	r5, r0
 8017c8e:	460c      	mov	r4, r1
 8017c90:	b913      	cbnz	r3, 8017c98 <_fflush_r+0x10>
 8017c92:	2500      	movs	r5, #0
 8017c94:	4628      	mov	r0, r5
 8017c96:	bd38      	pop	{r3, r4, r5, pc}
 8017c98:	b118      	cbz	r0, 8017ca2 <_fflush_r+0x1a>
 8017c9a:	6983      	ldr	r3, [r0, #24]
 8017c9c:	b90b      	cbnz	r3, 8017ca2 <_fflush_r+0x1a>
 8017c9e:	f000 f887 	bl	8017db0 <__sinit>
 8017ca2:	4b14      	ldr	r3, [pc, #80]	; (8017cf4 <_fflush_r+0x6c>)
 8017ca4:	429c      	cmp	r4, r3
 8017ca6:	d11b      	bne.n	8017ce0 <_fflush_r+0x58>
 8017ca8:	686c      	ldr	r4, [r5, #4]
 8017caa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d0ef      	beq.n	8017c92 <_fflush_r+0xa>
 8017cb2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017cb4:	07d0      	lsls	r0, r2, #31
 8017cb6:	d404      	bmi.n	8017cc2 <_fflush_r+0x3a>
 8017cb8:	0599      	lsls	r1, r3, #22
 8017cba:	d402      	bmi.n	8017cc2 <_fflush_r+0x3a>
 8017cbc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017cbe:	f000 f915 	bl	8017eec <__retarget_lock_acquire_recursive>
 8017cc2:	4628      	mov	r0, r5
 8017cc4:	4621      	mov	r1, r4
 8017cc6:	f7ff ff59 	bl	8017b7c <__sflush_r>
 8017cca:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017ccc:	07da      	lsls	r2, r3, #31
 8017cce:	4605      	mov	r5, r0
 8017cd0:	d4e0      	bmi.n	8017c94 <_fflush_r+0xc>
 8017cd2:	89a3      	ldrh	r3, [r4, #12]
 8017cd4:	059b      	lsls	r3, r3, #22
 8017cd6:	d4dd      	bmi.n	8017c94 <_fflush_r+0xc>
 8017cd8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017cda:	f000 f908 	bl	8017eee <__retarget_lock_release_recursive>
 8017cde:	e7d9      	b.n	8017c94 <_fflush_r+0xc>
 8017ce0:	4b05      	ldr	r3, [pc, #20]	; (8017cf8 <_fflush_r+0x70>)
 8017ce2:	429c      	cmp	r4, r3
 8017ce4:	d101      	bne.n	8017cea <_fflush_r+0x62>
 8017ce6:	68ac      	ldr	r4, [r5, #8]
 8017ce8:	e7df      	b.n	8017caa <_fflush_r+0x22>
 8017cea:	4b04      	ldr	r3, [pc, #16]	; (8017cfc <_fflush_r+0x74>)
 8017cec:	429c      	cmp	r4, r3
 8017cee:	bf08      	it	eq
 8017cf0:	68ec      	ldreq	r4, [r5, #12]
 8017cf2:	e7da      	b.n	8017caa <_fflush_r+0x22>
 8017cf4:	0801a934 	.word	0x0801a934
 8017cf8:	0801a954 	.word	0x0801a954
 8017cfc:	0801a914 	.word	0x0801a914

08017d00 <std>:
 8017d00:	2300      	movs	r3, #0
 8017d02:	b510      	push	{r4, lr}
 8017d04:	4604      	mov	r4, r0
 8017d06:	e9c0 3300 	strd	r3, r3, [r0]
 8017d0a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8017d0e:	6083      	str	r3, [r0, #8]
 8017d10:	8181      	strh	r1, [r0, #12]
 8017d12:	6643      	str	r3, [r0, #100]	; 0x64
 8017d14:	81c2      	strh	r2, [r0, #14]
 8017d16:	6183      	str	r3, [r0, #24]
 8017d18:	4619      	mov	r1, r3
 8017d1a:	2208      	movs	r2, #8
 8017d1c:	305c      	adds	r0, #92	; 0x5c
 8017d1e:	f7ff fccd 	bl	80176bc <memset>
 8017d22:	4b05      	ldr	r3, [pc, #20]	; (8017d38 <std+0x38>)
 8017d24:	6263      	str	r3, [r4, #36]	; 0x24
 8017d26:	4b05      	ldr	r3, [pc, #20]	; (8017d3c <std+0x3c>)
 8017d28:	62a3      	str	r3, [r4, #40]	; 0x28
 8017d2a:	4b05      	ldr	r3, [pc, #20]	; (8017d40 <std+0x40>)
 8017d2c:	62e3      	str	r3, [r4, #44]	; 0x2c
 8017d2e:	4b05      	ldr	r3, [pc, #20]	; (8017d44 <std+0x44>)
 8017d30:	6224      	str	r4, [r4, #32]
 8017d32:	6323      	str	r3, [r4, #48]	; 0x30
 8017d34:	bd10      	pop	{r4, pc}
 8017d36:	bf00      	nop
 8017d38:	08018869 	.word	0x08018869
 8017d3c:	0801888b 	.word	0x0801888b
 8017d40:	080188c3 	.word	0x080188c3
 8017d44:	080188e7 	.word	0x080188e7

08017d48 <_cleanup_r>:
 8017d48:	4901      	ldr	r1, [pc, #4]	; (8017d50 <_cleanup_r+0x8>)
 8017d4a:	f000 b8af 	b.w	8017eac <_fwalk_reent>
 8017d4e:	bf00      	nop
 8017d50:	08017c89 	.word	0x08017c89

08017d54 <__sfmoreglue>:
 8017d54:	b570      	push	{r4, r5, r6, lr}
 8017d56:	2268      	movs	r2, #104	; 0x68
 8017d58:	1e4d      	subs	r5, r1, #1
 8017d5a:	4355      	muls	r5, r2
 8017d5c:	460e      	mov	r6, r1
 8017d5e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8017d62:	f7ff fd1f 	bl	80177a4 <_malloc_r>
 8017d66:	4604      	mov	r4, r0
 8017d68:	b140      	cbz	r0, 8017d7c <__sfmoreglue+0x28>
 8017d6a:	2100      	movs	r1, #0
 8017d6c:	e9c0 1600 	strd	r1, r6, [r0]
 8017d70:	300c      	adds	r0, #12
 8017d72:	60a0      	str	r0, [r4, #8]
 8017d74:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8017d78:	f7ff fca0 	bl	80176bc <memset>
 8017d7c:	4620      	mov	r0, r4
 8017d7e:	bd70      	pop	{r4, r5, r6, pc}

08017d80 <__sfp_lock_acquire>:
 8017d80:	4801      	ldr	r0, [pc, #4]	; (8017d88 <__sfp_lock_acquire+0x8>)
 8017d82:	f000 b8b3 	b.w	8017eec <__retarget_lock_acquire_recursive>
 8017d86:	bf00      	nop
 8017d88:	20003221 	.word	0x20003221

08017d8c <__sfp_lock_release>:
 8017d8c:	4801      	ldr	r0, [pc, #4]	; (8017d94 <__sfp_lock_release+0x8>)
 8017d8e:	f000 b8ae 	b.w	8017eee <__retarget_lock_release_recursive>
 8017d92:	bf00      	nop
 8017d94:	20003221 	.word	0x20003221

08017d98 <__sinit_lock_acquire>:
 8017d98:	4801      	ldr	r0, [pc, #4]	; (8017da0 <__sinit_lock_acquire+0x8>)
 8017d9a:	f000 b8a7 	b.w	8017eec <__retarget_lock_acquire_recursive>
 8017d9e:	bf00      	nop
 8017da0:	20003222 	.word	0x20003222

08017da4 <__sinit_lock_release>:
 8017da4:	4801      	ldr	r0, [pc, #4]	; (8017dac <__sinit_lock_release+0x8>)
 8017da6:	f000 b8a2 	b.w	8017eee <__retarget_lock_release_recursive>
 8017daa:	bf00      	nop
 8017dac:	20003222 	.word	0x20003222

08017db0 <__sinit>:
 8017db0:	b510      	push	{r4, lr}
 8017db2:	4604      	mov	r4, r0
 8017db4:	f7ff fff0 	bl	8017d98 <__sinit_lock_acquire>
 8017db8:	69a3      	ldr	r3, [r4, #24]
 8017dba:	b11b      	cbz	r3, 8017dc4 <__sinit+0x14>
 8017dbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8017dc0:	f7ff bff0 	b.w	8017da4 <__sinit_lock_release>
 8017dc4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8017dc8:	6523      	str	r3, [r4, #80]	; 0x50
 8017dca:	4b13      	ldr	r3, [pc, #76]	; (8017e18 <__sinit+0x68>)
 8017dcc:	4a13      	ldr	r2, [pc, #76]	; (8017e1c <__sinit+0x6c>)
 8017dce:	681b      	ldr	r3, [r3, #0]
 8017dd0:	62a2      	str	r2, [r4, #40]	; 0x28
 8017dd2:	42a3      	cmp	r3, r4
 8017dd4:	bf04      	itt	eq
 8017dd6:	2301      	moveq	r3, #1
 8017dd8:	61a3      	streq	r3, [r4, #24]
 8017dda:	4620      	mov	r0, r4
 8017ddc:	f000 f820 	bl	8017e20 <__sfp>
 8017de0:	6060      	str	r0, [r4, #4]
 8017de2:	4620      	mov	r0, r4
 8017de4:	f000 f81c 	bl	8017e20 <__sfp>
 8017de8:	60a0      	str	r0, [r4, #8]
 8017dea:	4620      	mov	r0, r4
 8017dec:	f000 f818 	bl	8017e20 <__sfp>
 8017df0:	2200      	movs	r2, #0
 8017df2:	60e0      	str	r0, [r4, #12]
 8017df4:	2104      	movs	r1, #4
 8017df6:	6860      	ldr	r0, [r4, #4]
 8017df8:	f7ff ff82 	bl	8017d00 <std>
 8017dfc:	68a0      	ldr	r0, [r4, #8]
 8017dfe:	2201      	movs	r2, #1
 8017e00:	2109      	movs	r1, #9
 8017e02:	f7ff ff7d 	bl	8017d00 <std>
 8017e06:	68e0      	ldr	r0, [r4, #12]
 8017e08:	2202      	movs	r2, #2
 8017e0a:	2112      	movs	r1, #18
 8017e0c:	f7ff ff78 	bl	8017d00 <std>
 8017e10:	2301      	movs	r3, #1
 8017e12:	61a3      	str	r3, [r4, #24]
 8017e14:	e7d2      	b.n	8017dbc <__sinit+0xc>
 8017e16:	bf00      	nop
 8017e18:	0801a8e8 	.word	0x0801a8e8
 8017e1c:	08017d49 	.word	0x08017d49

08017e20 <__sfp>:
 8017e20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017e22:	4607      	mov	r7, r0
 8017e24:	f7ff ffac 	bl	8017d80 <__sfp_lock_acquire>
 8017e28:	4b1e      	ldr	r3, [pc, #120]	; (8017ea4 <__sfp+0x84>)
 8017e2a:	681e      	ldr	r6, [r3, #0]
 8017e2c:	69b3      	ldr	r3, [r6, #24]
 8017e2e:	b913      	cbnz	r3, 8017e36 <__sfp+0x16>
 8017e30:	4630      	mov	r0, r6
 8017e32:	f7ff ffbd 	bl	8017db0 <__sinit>
 8017e36:	3648      	adds	r6, #72	; 0x48
 8017e38:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8017e3c:	3b01      	subs	r3, #1
 8017e3e:	d503      	bpl.n	8017e48 <__sfp+0x28>
 8017e40:	6833      	ldr	r3, [r6, #0]
 8017e42:	b30b      	cbz	r3, 8017e88 <__sfp+0x68>
 8017e44:	6836      	ldr	r6, [r6, #0]
 8017e46:	e7f7      	b.n	8017e38 <__sfp+0x18>
 8017e48:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8017e4c:	b9d5      	cbnz	r5, 8017e84 <__sfp+0x64>
 8017e4e:	4b16      	ldr	r3, [pc, #88]	; (8017ea8 <__sfp+0x88>)
 8017e50:	60e3      	str	r3, [r4, #12]
 8017e52:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8017e56:	6665      	str	r5, [r4, #100]	; 0x64
 8017e58:	f000 f847 	bl	8017eea <__retarget_lock_init_recursive>
 8017e5c:	f7ff ff96 	bl	8017d8c <__sfp_lock_release>
 8017e60:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8017e64:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8017e68:	6025      	str	r5, [r4, #0]
 8017e6a:	61a5      	str	r5, [r4, #24]
 8017e6c:	2208      	movs	r2, #8
 8017e6e:	4629      	mov	r1, r5
 8017e70:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8017e74:	f7ff fc22 	bl	80176bc <memset>
 8017e78:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8017e7c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8017e80:	4620      	mov	r0, r4
 8017e82:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017e84:	3468      	adds	r4, #104	; 0x68
 8017e86:	e7d9      	b.n	8017e3c <__sfp+0x1c>
 8017e88:	2104      	movs	r1, #4
 8017e8a:	4638      	mov	r0, r7
 8017e8c:	f7ff ff62 	bl	8017d54 <__sfmoreglue>
 8017e90:	4604      	mov	r4, r0
 8017e92:	6030      	str	r0, [r6, #0]
 8017e94:	2800      	cmp	r0, #0
 8017e96:	d1d5      	bne.n	8017e44 <__sfp+0x24>
 8017e98:	f7ff ff78 	bl	8017d8c <__sfp_lock_release>
 8017e9c:	230c      	movs	r3, #12
 8017e9e:	603b      	str	r3, [r7, #0]
 8017ea0:	e7ee      	b.n	8017e80 <__sfp+0x60>
 8017ea2:	bf00      	nop
 8017ea4:	0801a8e8 	.word	0x0801a8e8
 8017ea8:	ffff0001 	.word	0xffff0001

08017eac <_fwalk_reent>:
 8017eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8017eb0:	4606      	mov	r6, r0
 8017eb2:	4688      	mov	r8, r1
 8017eb4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8017eb8:	2700      	movs	r7, #0
 8017eba:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8017ebe:	f1b9 0901 	subs.w	r9, r9, #1
 8017ec2:	d505      	bpl.n	8017ed0 <_fwalk_reent+0x24>
 8017ec4:	6824      	ldr	r4, [r4, #0]
 8017ec6:	2c00      	cmp	r4, #0
 8017ec8:	d1f7      	bne.n	8017eba <_fwalk_reent+0xe>
 8017eca:	4638      	mov	r0, r7
 8017ecc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017ed0:	89ab      	ldrh	r3, [r5, #12]
 8017ed2:	2b01      	cmp	r3, #1
 8017ed4:	d907      	bls.n	8017ee6 <_fwalk_reent+0x3a>
 8017ed6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8017eda:	3301      	adds	r3, #1
 8017edc:	d003      	beq.n	8017ee6 <_fwalk_reent+0x3a>
 8017ede:	4629      	mov	r1, r5
 8017ee0:	4630      	mov	r0, r6
 8017ee2:	47c0      	blx	r8
 8017ee4:	4307      	orrs	r7, r0
 8017ee6:	3568      	adds	r5, #104	; 0x68
 8017ee8:	e7e9      	b.n	8017ebe <_fwalk_reent+0x12>

08017eea <__retarget_lock_init_recursive>:
 8017eea:	4770      	bx	lr

08017eec <__retarget_lock_acquire_recursive>:
 8017eec:	4770      	bx	lr

08017eee <__retarget_lock_release_recursive>:
 8017eee:	4770      	bx	lr

08017ef0 <__swhatbuf_r>:
 8017ef0:	b570      	push	{r4, r5, r6, lr}
 8017ef2:	460e      	mov	r6, r1
 8017ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ef8:	2900      	cmp	r1, #0
 8017efa:	b096      	sub	sp, #88	; 0x58
 8017efc:	4614      	mov	r4, r2
 8017efe:	461d      	mov	r5, r3
 8017f00:	da08      	bge.n	8017f14 <__swhatbuf_r+0x24>
 8017f02:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8017f06:	2200      	movs	r2, #0
 8017f08:	602a      	str	r2, [r5, #0]
 8017f0a:	061a      	lsls	r2, r3, #24
 8017f0c:	d410      	bmi.n	8017f30 <__swhatbuf_r+0x40>
 8017f0e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017f12:	e00e      	b.n	8017f32 <__swhatbuf_r+0x42>
 8017f14:	466a      	mov	r2, sp
 8017f16:	f000 fd0d 	bl	8018934 <_fstat_r>
 8017f1a:	2800      	cmp	r0, #0
 8017f1c:	dbf1      	blt.n	8017f02 <__swhatbuf_r+0x12>
 8017f1e:	9a01      	ldr	r2, [sp, #4]
 8017f20:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8017f24:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8017f28:	425a      	negs	r2, r3
 8017f2a:	415a      	adcs	r2, r3
 8017f2c:	602a      	str	r2, [r5, #0]
 8017f2e:	e7ee      	b.n	8017f0e <__swhatbuf_r+0x1e>
 8017f30:	2340      	movs	r3, #64	; 0x40
 8017f32:	2000      	movs	r0, #0
 8017f34:	6023      	str	r3, [r4, #0]
 8017f36:	b016      	add	sp, #88	; 0x58
 8017f38:	bd70      	pop	{r4, r5, r6, pc}
	...

08017f3c <__smakebuf_r>:
 8017f3c:	898b      	ldrh	r3, [r1, #12]
 8017f3e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017f40:	079d      	lsls	r5, r3, #30
 8017f42:	4606      	mov	r6, r0
 8017f44:	460c      	mov	r4, r1
 8017f46:	d507      	bpl.n	8017f58 <__smakebuf_r+0x1c>
 8017f48:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017f4c:	6023      	str	r3, [r4, #0]
 8017f4e:	6123      	str	r3, [r4, #16]
 8017f50:	2301      	movs	r3, #1
 8017f52:	6163      	str	r3, [r4, #20]
 8017f54:	b002      	add	sp, #8
 8017f56:	bd70      	pop	{r4, r5, r6, pc}
 8017f58:	ab01      	add	r3, sp, #4
 8017f5a:	466a      	mov	r2, sp
 8017f5c:	f7ff ffc8 	bl	8017ef0 <__swhatbuf_r>
 8017f60:	9900      	ldr	r1, [sp, #0]
 8017f62:	4605      	mov	r5, r0
 8017f64:	4630      	mov	r0, r6
 8017f66:	f7ff fc1d 	bl	80177a4 <_malloc_r>
 8017f6a:	b948      	cbnz	r0, 8017f80 <__smakebuf_r+0x44>
 8017f6c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f70:	059a      	lsls	r2, r3, #22
 8017f72:	d4ef      	bmi.n	8017f54 <__smakebuf_r+0x18>
 8017f74:	f023 0303 	bic.w	r3, r3, #3
 8017f78:	f043 0302 	orr.w	r3, r3, #2
 8017f7c:	81a3      	strh	r3, [r4, #12]
 8017f7e:	e7e3      	b.n	8017f48 <__smakebuf_r+0xc>
 8017f80:	4b0d      	ldr	r3, [pc, #52]	; (8017fb8 <__smakebuf_r+0x7c>)
 8017f82:	62b3      	str	r3, [r6, #40]	; 0x28
 8017f84:	89a3      	ldrh	r3, [r4, #12]
 8017f86:	6020      	str	r0, [r4, #0]
 8017f88:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017f8c:	81a3      	strh	r3, [r4, #12]
 8017f8e:	9b00      	ldr	r3, [sp, #0]
 8017f90:	6163      	str	r3, [r4, #20]
 8017f92:	9b01      	ldr	r3, [sp, #4]
 8017f94:	6120      	str	r0, [r4, #16]
 8017f96:	b15b      	cbz	r3, 8017fb0 <__smakebuf_r+0x74>
 8017f98:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017f9c:	4630      	mov	r0, r6
 8017f9e:	f000 fcdb 	bl	8018958 <_isatty_r>
 8017fa2:	b128      	cbz	r0, 8017fb0 <__smakebuf_r+0x74>
 8017fa4:	89a3      	ldrh	r3, [r4, #12]
 8017fa6:	f023 0303 	bic.w	r3, r3, #3
 8017faa:	f043 0301 	orr.w	r3, r3, #1
 8017fae:	81a3      	strh	r3, [r4, #12]
 8017fb0:	89a0      	ldrh	r0, [r4, #12]
 8017fb2:	4305      	orrs	r5, r0
 8017fb4:	81a5      	strh	r5, [r4, #12]
 8017fb6:	e7cd      	b.n	8017f54 <__smakebuf_r+0x18>
 8017fb8:	08017d49 	.word	0x08017d49

08017fbc <__malloc_lock>:
 8017fbc:	4801      	ldr	r0, [pc, #4]	; (8017fc4 <__malloc_lock+0x8>)
 8017fbe:	f7ff bf95 	b.w	8017eec <__retarget_lock_acquire_recursive>
 8017fc2:	bf00      	nop
 8017fc4:	20003220 	.word	0x20003220

08017fc8 <__malloc_unlock>:
 8017fc8:	4801      	ldr	r0, [pc, #4]	; (8017fd0 <__malloc_unlock+0x8>)
 8017fca:	f7ff bf90 	b.w	8017eee <__retarget_lock_release_recursive>
 8017fce:	bf00      	nop
 8017fd0:	20003220 	.word	0x20003220

08017fd4 <__ssputs_r>:
 8017fd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017fd8:	688e      	ldr	r6, [r1, #8]
 8017fda:	429e      	cmp	r6, r3
 8017fdc:	4682      	mov	sl, r0
 8017fde:	460c      	mov	r4, r1
 8017fe0:	4690      	mov	r8, r2
 8017fe2:	461f      	mov	r7, r3
 8017fe4:	d838      	bhi.n	8018058 <__ssputs_r+0x84>
 8017fe6:	898a      	ldrh	r2, [r1, #12]
 8017fe8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8017fec:	d032      	beq.n	8018054 <__ssputs_r+0x80>
 8017fee:	6825      	ldr	r5, [r4, #0]
 8017ff0:	6909      	ldr	r1, [r1, #16]
 8017ff2:	eba5 0901 	sub.w	r9, r5, r1
 8017ff6:	6965      	ldr	r5, [r4, #20]
 8017ff8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017ffc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8018000:	3301      	adds	r3, #1
 8018002:	444b      	add	r3, r9
 8018004:	106d      	asrs	r5, r5, #1
 8018006:	429d      	cmp	r5, r3
 8018008:	bf38      	it	cc
 801800a:	461d      	movcc	r5, r3
 801800c:	0553      	lsls	r3, r2, #21
 801800e:	d531      	bpl.n	8018074 <__ssputs_r+0xa0>
 8018010:	4629      	mov	r1, r5
 8018012:	f7ff fbc7 	bl	80177a4 <_malloc_r>
 8018016:	4606      	mov	r6, r0
 8018018:	b950      	cbnz	r0, 8018030 <__ssputs_r+0x5c>
 801801a:	230c      	movs	r3, #12
 801801c:	f8ca 3000 	str.w	r3, [sl]
 8018020:	89a3      	ldrh	r3, [r4, #12]
 8018022:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8018026:	81a3      	strh	r3, [r4, #12]
 8018028:	f04f 30ff 	mov.w	r0, #4294967295
 801802c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018030:	6921      	ldr	r1, [r4, #16]
 8018032:	464a      	mov	r2, r9
 8018034:	f7ff fb34 	bl	80176a0 <memcpy>
 8018038:	89a3      	ldrh	r3, [r4, #12]
 801803a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 801803e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018042:	81a3      	strh	r3, [r4, #12]
 8018044:	6126      	str	r6, [r4, #16]
 8018046:	6165      	str	r5, [r4, #20]
 8018048:	444e      	add	r6, r9
 801804a:	eba5 0509 	sub.w	r5, r5, r9
 801804e:	6026      	str	r6, [r4, #0]
 8018050:	60a5      	str	r5, [r4, #8]
 8018052:	463e      	mov	r6, r7
 8018054:	42be      	cmp	r6, r7
 8018056:	d900      	bls.n	801805a <__ssputs_r+0x86>
 8018058:	463e      	mov	r6, r7
 801805a:	6820      	ldr	r0, [r4, #0]
 801805c:	4632      	mov	r2, r6
 801805e:	4641      	mov	r1, r8
 8018060:	f000 fc9c 	bl	801899c <memmove>
 8018064:	68a3      	ldr	r3, [r4, #8]
 8018066:	1b9b      	subs	r3, r3, r6
 8018068:	60a3      	str	r3, [r4, #8]
 801806a:	6823      	ldr	r3, [r4, #0]
 801806c:	4433      	add	r3, r6
 801806e:	6023      	str	r3, [r4, #0]
 8018070:	2000      	movs	r0, #0
 8018072:	e7db      	b.n	801802c <__ssputs_r+0x58>
 8018074:	462a      	mov	r2, r5
 8018076:	f000 fcab 	bl	80189d0 <_realloc_r>
 801807a:	4606      	mov	r6, r0
 801807c:	2800      	cmp	r0, #0
 801807e:	d1e1      	bne.n	8018044 <__ssputs_r+0x70>
 8018080:	6921      	ldr	r1, [r4, #16]
 8018082:	4650      	mov	r0, sl
 8018084:	f7ff fb22 	bl	80176cc <_free_r>
 8018088:	e7c7      	b.n	801801a <__ssputs_r+0x46>
	...

0801808c <_svfiprintf_r>:
 801808c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018090:	4698      	mov	r8, r3
 8018092:	898b      	ldrh	r3, [r1, #12]
 8018094:	061b      	lsls	r3, r3, #24
 8018096:	b09d      	sub	sp, #116	; 0x74
 8018098:	4607      	mov	r7, r0
 801809a:	460d      	mov	r5, r1
 801809c:	4614      	mov	r4, r2
 801809e:	d50e      	bpl.n	80180be <_svfiprintf_r+0x32>
 80180a0:	690b      	ldr	r3, [r1, #16]
 80180a2:	b963      	cbnz	r3, 80180be <_svfiprintf_r+0x32>
 80180a4:	2140      	movs	r1, #64	; 0x40
 80180a6:	f7ff fb7d 	bl	80177a4 <_malloc_r>
 80180aa:	6028      	str	r0, [r5, #0]
 80180ac:	6128      	str	r0, [r5, #16]
 80180ae:	b920      	cbnz	r0, 80180ba <_svfiprintf_r+0x2e>
 80180b0:	230c      	movs	r3, #12
 80180b2:	603b      	str	r3, [r7, #0]
 80180b4:	f04f 30ff 	mov.w	r0, #4294967295
 80180b8:	e0d1      	b.n	801825e <_svfiprintf_r+0x1d2>
 80180ba:	2340      	movs	r3, #64	; 0x40
 80180bc:	616b      	str	r3, [r5, #20]
 80180be:	2300      	movs	r3, #0
 80180c0:	9309      	str	r3, [sp, #36]	; 0x24
 80180c2:	2320      	movs	r3, #32
 80180c4:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80180c8:	f8cd 800c 	str.w	r8, [sp, #12]
 80180cc:	2330      	movs	r3, #48	; 0x30
 80180ce:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8018278 <_svfiprintf_r+0x1ec>
 80180d2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80180d6:	f04f 0901 	mov.w	r9, #1
 80180da:	4623      	mov	r3, r4
 80180dc:	469a      	mov	sl, r3
 80180de:	f813 2b01 	ldrb.w	r2, [r3], #1
 80180e2:	b10a      	cbz	r2, 80180e8 <_svfiprintf_r+0x5c>
 80180e4:	2a25      	cmp	r2, #37	; 0x25
 80180e6:	d1f9      	bne.n	80180dc <_svfiprintf_r+0x50>
 80180e8:	ebba 0b04 	subs.w	fp, sl, r4
 80180ec:	d00b      	beq.n	8018106 <_svfiprintf_r+0x7a>
 80180ee:	465b      	mov	r3, fp
 80180f0:	4622      	mov	r2, r4
 80180f2:	4629      	mov	r1, r5
 80180f4:	4638      	mov	r0, r7
 80180f6:	f7ff ff6d 	bl	8017fd4 <__ssputs_r>
 80180fa:	3001      	adds	r0, #1
 80180fc:	f000 80aa 	beq.w	8018254 <_svfiprintf_r+0x1c8>
 8018100:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8018102:	445a      	add	r2, fp
 8018104:	9209      	str	r2, [sp, #36]	; 0x24
 8018106:	f89a 3000 	ldrb.w	r3, [sl]
 801810a:	2b00      	cmp	r3, #0
 801810c:	f000 80a2 	beq.w	8018254 <_svfiprintf_r+0x1c8>
 8018110:	2300      	movs	r3, #0
 8018112:	f04f 32ff 	mov.w	r2, #4294967295
 8018116:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801811a:	f10a 0a01 	add.w	sl, sl, #1
 801811e:	9304      	str	r3, [sp, #16]
 8018120:	9307      	str	r3, [sp, #28]
 8018122:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8018126:	931a      	str	r3, [sp, #104]	; 0x68
 8018128:	4654      	mov	r4, sl
 801812a:	2205      	movs	r2, #5
 801812c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8018130:	4851      	ldr	r0, [pc, #324]	; (8018278 <_svfiprintf_r+0x1ec>)
 8018132:	f7e8 f865 	bl	8000200 <memchr>
 8018136:	9a04      	ldr	r2, [sp, #16]
 8018138:	b9d8      	cbnz	r0, 8018172 <_svfiprintf_r+0xe6>
 801813a:	06d0      	lsls	r0, r2, #27
 801813c:	bf44      	itt	mi
 801813e:	2320      	movmi	r3, #32
 8018140:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8018144:	0711      	lsls	r1, r2, #28
 8018146:	bf44      	itt	mi
 8018148:	232b      	movmi	r3, #43	; 0x2b
 801814a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801814e:	f89a 3000 	ldrb.w	r3, [sl]
 8018152:	2b2a      	cmp	r3, #42	; 0x2a
 8018154:	d015      	beq.n	8018182 <_svfiprintf_r+0xf6>
 8018156:	9a07      	ldr	r2, [sp, #28]
 8018158:	4654      	mov	r4, sl
 801815a:	2000      	movs	r0, #0
 801815c:	f04f 0c0a 	mov.w	ip, #10
 8018160:	4621      	mov	r1, r4
 8018162:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018166:	3b30      	subs	r3, #48	; 0x30
 8018168:	2b09      	cmp	r3, #9
 801816a:	d94e      	bls.n	801820a <_svfiprintf_r+0x17e>
 801816c:	b1b0      	cbz	r0, 801819c <_svfiprintf_r+0x110>
 801816e:	9207      	str	r2, [sp, #28]
 8018170:	e014      	b.n	801819c <_svfiprintf_r+0x110>
 8018172:	eba0 0308 	sub.w	r3, r0, r8
 8018176:	fa09 f303 	lsl.w	r3, r9, r3
 801817a:	4313      	orrs	r3, r2
 801817c:	9304      	str	r3, [sp, #16]
 801817e:	46a2      	mov	sl, r4
 8018180:	e7d2      	b.n	8018128 <_svfiprintf_r+0x9c>
 8018182:	9b03      	ldr	r3, [sp, #12]
 8018184:	1d19      	adds	r1, r3, #4
 8018186:	681b      	ldr	r3, [r3, #0]
 8018188:	9103      	str	r1, [sp, #12]
 801818a:	2b00      	cmp	r3, #0
 801818c:	bfbb      	ittet	lt
 801818e:	425b      	neglt	r3, r3
 8018190:	f042 0202 	orrlt.w	r2, r2, #2
 8018194:	9307      	strge	r3, [sp, #28]
 8018196:	9307      	strlt	r3, [sp, #28]
 8018198:	bfb8      	it	lt
 801819a:	9204      	strlt	r2, [sp, #16]
 801819c:	7823      	ldrb	r3, [r4, #0]
 801819e:	2b2e      	cmp	r3, #46	; 0x2e
 80181a0:	d10c      	bne.n	80181bc <_svfiprintf_r+0x130>
 80181a2:	7863      	ldrb	r3, [r4, #1]
 80181a4:	2b2a      	cmp	r3, #42	; 0x2a
 80181a6:	d135      	bne.n	8018214 <_svfiprintf_r+0x188>
 80181a8:	9b03      	ldr	r3, [sp, #12]
 80181aa:	1d1a      	adds	r2, r3, #4
 80181ac:	681b      	ldr	r3, [r3, #0]
 80181ae:	9203      	str	r2, [sp, #12]
 80181b0:	2b00      	cmp	r3, #0
 80181b2:	bfb8      	it	lt
 80181b4:	f04f 33ff 	movlt.w	r3, #4294967295
 80181b8:	3402      	adds	r4, #2
 80181ba:	9305      	str	r3, [sp, #20]
 80181bc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8018288 <_svfiprintf_r+0x1fc>
 80181c0:	7821      	ldrb	r1, [r4, #0]
 80181c2:	2203      	movs	r2, #3
 80181c4:	4650      	mov	r0, sl
 80181c6:	f7e8 f81b 	bl	8000200 <memchr>
 80181ca:	b140      	cbz	r0, 80181de <_svfiprintf_r+0x152>
 80181cc:	2340      	movs	r3, #64	; 0x40
 80181ce:	eba0 000a 	sub.w	r0, r0, sl
 80181d2:	fa03 f000 	lsl.w	r0, r3, r0
 80181d6:	9b04      	ldr	r3, [sp, #16]
 80181d8:	4303      	orrs	r3, r0
 80181da:	3401      	adds	r4, #1
 80181dc:	9304      	str	r3, [sp, #16]
 80181de:	f814 1b01 	ldrb.w	r1, [r4], #1
 80181e2:	4826      	ldr	r0, [pc, #152]	; (801827c <_svfiprintf_r+0x1f0>)
 80181e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80181e8:	2206      	movs	r2, #6
 80181ea:	f7e8 f809 	bl	8000200 <memchr>
 80181ee:	2800      	cmp	r0, #0
 80181f0:	d038      	beq.n	8018264 <_svfiprintf_r+0x1d8>
 80181f2:	4b23      	ldr	r3, [pc, #140]	; (8018280 <_svfiprintf_r+0x1f4>)
 80181f4:	bb1b      	cbnz	r3, 801823e <_svfiprintf_r+0x1b2>
 80181f6:	9b03      	ldr	r3, [sp, #12]
 80181f8:	3307      	adds	r3, #7
 80181fa:	f023 0307 	bic.w	r3, r3, #7
 80181fe:	3308      	adds	r3, #8
 8018200:	9303      	str	r3, [sp, #12]
 8018202:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8018204:	4433      	add	r3, r6
 8018206:	9309      	str	r3, [sp, #36]	; 0x24
 8018208:	e767      	b.n	80180da <_svfiprintf_r+0x4e>
 801820a:	fb0c 3202 	mla	r2, ip, r2, r3
 801820e:	460c      	mov	r4, r1
 8018210:	2001      	movs	r0, #1
 8018212:	e7a5      	b.n	8018160 <_svfiprintf_r+0xd4>
 8018214:	2300      	movs	r3, #0
 8018216:	3401      	adds	r4, #1
 8018218:	9305      	str	r3, [sp, #20]
 801821a:	4619      	mov	r1, r3
 801821c:	f04f 0c0a 	mov.w	ip, #10
 8018220:	4620      	mov	r0, r4
 8018222:	f810 2b01 	ldrb.w	r2, [r0], #1
 8018226:	3a30      	subs	r2, #48	; 0x30
 8018228:	2a09      	cmp	r2, #9
 801822a:	d903      	bls.n	8018234 <_svfiprintf_r+0x1a8>
 801822c:	2b00      	cmp	r3, #0
 801822e:	d0c5      	beq.n	80181bc <_svfiprintf_r+0x130>
 8018230:	9105      	str	r1, [sp, #20]
 8018232:	e7c3      	b.n	80181bc <_svfiprintf_r+0x130>
 8018234:	fb0c 2101 	mla	r1, ip, r1, r2
 8018238:	4604      	mov	r4, r0
 801823a:	2301      	movs	r3, #1
 801823c:	e7f0      	b.n	8018220 <_svfiprintf_r+0x194>
 801823e:	ab03      	add	r3, sp, #12
 8018240:	9300      	str	r3, [sp, #0]
 8018242:	462a      	mov	r2, r5
 8018244:	4b0f      	ldr	r3, [pc, #60]	; (8018284 <_svfiprintf_r+0x1f8>)
 8018246:	a904      	add	r1, sp, #16
 8018248:	4638      	mov	r0, r7
 801824a:	f3af 8000 	nop.w
 801824e:	1c42      	adds	r2, r0, #1
 8018250:	4606      	mov	r6, r0
 8018252:	d1d6      	bne.n	8018202 <_svfiprintf_r+0x176>
 8018254:	89ab      	ldrh	r3, [r5, #12]
 8018256:	065b      	lsls	r3, r3, #25
 8018258:	f53f af2c 	bmi.w	80180b4 <_svfiprintf_r+0x28>
 801825c:	9809      	ldr	r0, [sp, #36]	; 0x24
 801825e:	b01d      	add	sp, #116	; 0x74
 8018260:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018264:	ab03      	add	r3, sp, #12
 8018266:	9300      	str	r3, [sp, #0]
 8018268:	462a      	mov	r2, r5
 801826a:	4b06      	ldr	r3, [pc, #24]	; (8018284 <_svfiprintf_r+0x1f8>)
 801826c:	a904      	add	r1, sp, #16
 801826e:	4638      	mov	r0, r7
 8018270:	f000 f9d4 	bl	801861c <_printf_i>
 8018274:	e7eb      	b.n	801824e <_svfiprintf_r+0x1c2>
 8018276:	bf00      	nop
 8018278:	0801a974 	.word	0x0801a974
 801827c:	0801a97e 	.word	0x0801a97e
 8018280:	00000000 	.word	0x00000000
 8018284:	08017fd5 	.word	0x08017fd5
 8018288:	0801a97a 	.word	0x0801a97a

0801828c <__sfputc_r>:
 801828c:	6893      	ldr	r3, [r2, #8]
 801828e:	3b01      	subs	r3, #1
 8018290:	2b00      	cmp	r3, #0
 8018292:	b410      	push	{r4}
 8018294:	6093      	str	r3, [r2, #8]
 8018296:	da08      	bge.n	80182aa <__sfputc_r+0x1e>
 8018298:	6994      	ldr	r4, [r2, #24]
 801829a:	42a3      	cmp	r3, r4
 801829c:	db01      	blt.n	80182a2 <__sfputc_r+0x16>
 801829e:	290a      	cmp	r1, #10
 80182a0:	d103      	bne.n	80182aa <__sfputc_r+0x1e>
 80182a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80182a6:	f7ff bba9 	b.w	80179fc <__swbuf_r>
 80182aa:	6813      	ldr	r3, [r2, #0]
 80182ac:	1c58      	adds	r0, r3, #1
 80182ae:	6010      	str	r0, [r2, #0]
 80182b0:	7019      	strb	r1, [r3, #0]
 80182b2:	4608      	mov	r0, r1
 80182b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80182b8:	4770      	bx	lr

080182ba <__sfputs_r>:
 80182ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80182bc:	4606      	mov	r6, r0
 80182be:	460f      	mov	r7, r1
 80182c0:	4614      	mov	r4, r2
 80182c2:	18d5      	adds	r5, r2, r3
 80182c4:	42ac      	cmp	r4, r5
 80182c6:	d101      	bne.n	80182cc <__sfputs_r+0x12>
 80182c8:	2000      	movs	r0, #0
 80182ca:	e007      	b.n	80182dc <__sfputs_r+0x22>
 80182cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80182d0:	463a      	mov	r2, r7
 80182d2:	4630      	mov	r0, r6
 80182d4:	f7ff ffda 	bl	801828c <__sfputc_r>
 80182d8:	1c43      	adds	r3, r0, #1
 80182da:	d1f3      	bne.n	80182c4 <__sfputs_r+0xa>
 80182dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080182e0 <_vfiprintf_r>:
 80182e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80182e4:	460d      	mov	r5, r1
 80182e6:	b09d      	sub	sp, #116	; 0x74
 80182e8:	4614      	mov	r4, r2
 80182ea:	4698      	mov	r8, r3
 80182ec:	4606      	mov	r6, r0
 80182ee:	b118      	cbz	r0, 80182f8 <_vfiprintf_r+0x18>
 80182f0:	6983      	ldr	r3, [r0, #24]
 80182f2:	b90b      	cbnz	r3, 80182f8 <_vfiprintf_r+0x18>
 80182f4:	f7ff fd5c 	bl	8017db0 <__sinit>
 80182f8:	4b89      	ldr	r3, [pc, #548]	; (8018520 <_vfiprintf_r+0x240>)
 80182fa:	429d      	cmp	r5, r3
 80182fc:	d11b      	bne.n	8018336 <_vfiprintf_r+0x56>
 80182fe:	6875      	ldr	r5, [r6, #4]
 8018300:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018302:	07d9      	lsls	r1, r3, #31
 8018304:	d405      	bmi.n	8018312 <_vfiprintf_r+0x32>
 8018306:	89ab      	ldrh	r3, [r5, #12]
 8018308:	059a      	lsls	r2, r3, #22
 801830a:	d402      	bmi.n	8018312 <_vfiprintf_r+0x32>
 801830c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801830e:	f7ff fded 	bl	8017eec <__retarget_lock_acquire_recursive>
 8018312:	89ab      	ldrh	r3, [r5, #12]
 8018314:	071b      	lsls	r3, r3, #28
 8018316:	d501      	bpl.n	801831c <_vfiprintf_r+0x3c>
 8018318:	692b      	ldr	r3, [r5, #16]
 801831a:	b9eb      	cbnz	r3, 8018358 <_vfiprintf_r+0x78>
 801831c:	4629      	mov	r1, r5
 801831e:	4630      	mov	r0, r6
 8018320:	f7ff fbbe 	bl	8017aa0 <__swsetup_r>
 8018324:	b1c0      	cbz	r0, 8018358 <_vfiprintf_r+0x78>
 8018326:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8018328:	07dc      	lsls	r4, r3, #31
 801832a:	d50e      	bpl.n	801834a <_vfiprintf_r+0x6a>
 801832c:	f04f 30ff 	mov.w	r0, #4294967295
 8018330:	b01d      	add	sp, #116	; 0x74
 8018332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018336:	4b7b      	ldr	r3, [pc, #492]	; (8018524 <_vfiprintf_r+0x244>)
 8018338:	429d      	cmp	r5, r3
 801833a:	d101      	bne.n	8018340 <_vfiprintf_r+0x60>
 801833c:	68b5      	ldr	r5, [r6, #8]
 801833e:	e7df      	b.n	8018300 <_vfiprintf_r+0x20>
 8018340:	4b79      	ldr	r3, [pc, #484]	; (8018528 <_vfiprintf_r+0x248>)
 8018342:	429d      	cmp	r5, r3
 8018344:	bf08      	it	eq
 8018346:	68f5      	ldreq	r5, [r6, #12]
 8018348:	e7da      	b.n	8018300 <_vfiprintf_r+0x20>
 801834a:	89ab      	ldrh	r3, [r5, #12]
 801834c:	0598      	lsls	r0, r3, #22
 801834e:	d4ed      	bmi.n	801832c <_vfiprintf_r+0x4c>
 8018350:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8018352:	f7ff fdcc 	bl	8017eee <__retarget_lock_release_recursive>
 8018356:	e7e9      	b.n	801832c <_vfiprintf_r+0x4c>
 8018358:	2300      	movs	r3, #0
 801835a:	9309      	str	r3, [sp, #36]	; 0x24
 801835c:	2320      	movs	r3, #32
 801835e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8018362:	f8cd 800c 	str.w	r8, [sp, #12]
 8018366:	2330      	movs	r3, #48	; 0x30
 8018368:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 801852c <_vfiprintf_r+0x24c>
 801836c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8018370:	f04f 0901 	mov.w	r9, #1
 8018374:	4623      	mov	r3, r4
 8018376:	469a      	mov	sl, r3
 8018378:	f813 2b01 	ldrb.w	r2, [r3], #1
 801837c:	b10a      	cbz	r2, 8018382 <_vfiprintf_r+0xa2>
 801837e:	2a25      	cmp	r2, #37	; 0x25
 8018380:	d1f9      	bne.n	8018376 <_vfiprintf_r+0x96>
 8018382:	ebba 0b04 	subs.w	fp, sl, r4
 8018386:	d00b      	beq.n	80183a0 <_vfiprintf_r+0xc0>
 8018388:	465b      	mov	r3, fp
 801838a:	4622      	mov	r2, r4
 801838c:	4629      	mov	r1, r5
 801838e:	4630      	mov	r0, r6
 8018390:	f7ff ff93 	bl	80182ba <__sfputs_r>
 8018394:	3001      	adds	r0, #1
 8018396:	f000 80aa 	beq.w	80184ee <_vfiprintf_r+0x20e>
 801839a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801839c:	445a      	add	r2, fp
 801839e:	9209      	str	r2, [sp, #36]	; 0x24
 80183a0:	f89a 3000 	ldrb.w	r3, [sl]
 80183a4:	2b00      	cmp	r3, #0
 80183a6:	f000 80a2 	beq.w	80184ee <_vfiprintf_r+0x20e>
 80183aa:	2300      	movs	r3, #0
 80183ac:	f04f 32ff 	mov.w	r2, #4294967295
 80183b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80183b4:	f10a 0a01 	add.w	sl, sl, #1
 80183b8:	9304      	str	r3, [sp, #16]
 80183ba:	9307      	str	r3, [sp, #28]
 80183bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80183c0:	931a      	str	r3, [sp, #104]	; 0x68
 80183c2:	4654      	mov	r4, sl
 80183c4:	2205      	movs	r2, #5
 80183c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80183ca:	4858      	ldr	r0, [pc, #352]	; (801852c <_vfiprintf_r+0x24c>)
 80183cc:	f7e7 ff18 	bl	8000200 <memchr>
 80183d0:	9a04      	ldr	r2, [sp, #16]
 80183d2:	b9d8      	cbnz	r0, 801840c <_vfiprintf_r+0x12c>
 80183d4:	06d1      	lsls	r1, r2, #27
 80183d6:	bf44      	itt	mi
 80183d8:	2320      	movmi	r3, #32
 80183da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80183de:	0713      	lsls	r3, r2, #28
 80183e0:	bf44      	itt	mi
 80183e2:	232b      	movmi	r3, #43	; 0x2b
 80183e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80183e8:	f89a 3000 	ldrb.w	r3, [sl]
 80183ec:	2b2a      	cmp	r3, #42	; 0x2a
 80183ee:	d015      	beq.n	801841c <_vfiprintf_r+0x13c>
 80183f0:	9a07      	ldr	r2, [sp, #28]
 80183f2:	4654      	mov	r4, sl
 80183f4:	2000      	movs	r0, #0
 80183f6:	f04f 0c0a 	mov.w	ip, #10
 80183fa:	4621      	mov	r1, r4
 80183fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8018400:	3b30      	subs	r3, #48	; 0x30
 8018402:	2b09      	cmp	r3, #9
 8018404:	d94e      	bls.n	80184a4 <_vfiprintf_r+0x1c4>
 8018406:	b1b0      	cbz	r0, 8018436 <_vfiprintf_r+0x156>
 8018408:	9207      	str	r2, [sp, #28]
 801840a:	e014      	b.n	8018436 <_vfiprintf_r+0x156>
 801840c:	eba0 0308 	sub.w	r3, r0, r8
 8018410:	fa09 f303 	lsl.w	r3, r9, r3
 8018414:	4313      	orrs	r3, r2
 8018416:	9304      	str	r3, [sp, #16]
 8018418:	46a2      	mov	sl, r4
 801841a:	e7d2      	b.n	80183c2 <_vfiprintf_r+0xe2>
 801841c:	9b03      	ldr	r3, [sp, #12]
 801841e:	1d19      	adds	r1, r3, #4
 8018420:	681b      	ldr	r3, [r3, #0]
 8018422:	9103      	str	r1, [sp, #12]
 8018424:	2b00      	cmp	r3, #0
 8018426:	bfbb      	ittet	lt
 8018428:	425b      	neglt	r3, r3
 801842a:	f042 0202 	orrlt.w	r2, r2, #2
 801842e:	9307      	strge	r3, [sp, #28]
 8018430:	9307      	strlt	r3, [sp, #28]
 8018432:	bfb8      	it	lt
 8018434:	9204      	strlt	r2, [sp, #16]
 8018436:	7823      	ldrb	r3, [r4, #0]
 8018438:	2b2e      	cmp	r3, #46	; 0x2e
 801843a:	d10c      	bne.n	8018456 <_vfiprintf_r+0x176>
 801843c:	7863      	ldrb	r3, [r4, #1]
 801843e:	2b2a      	cmp	r3, #42	; 0x2a
 8018440:	d135      	bne.n	80184ae <_vfiprintf_r+0x1ce>
 8018442:	9b03      	ldr	r3, [sp, #12]
 8018444:	1d1a      	adds	r2, r3, #4
 8018446:	681b      	ldr	r3, [r3, #0]
 8018448:	9203      	str	r2, [sp, #12]
 801844a:	2b00      	cmp	r3, #0
 801844c:	bfb8      	it	lt
 801844e:	f04f 33ff 	movlt.w	r3, #4294967295
 8018452:	3402      	adds	r4, #2
 8018454:	9305      	str	r3, [sp, #20]
 8018456:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 801853c <_vfiprintf_r+0x25c>
 801845a:	7821      	ldrb	r1, [r4, #0]
 801845c:	2203      	movs	r2, #3
 801845e:	4650      	mov	r0, sl
 8018460:	f7e7 fece 	bl	8000200 <memchr>
 8018464:	b140      	cbz	r0, 8018478 <_vfiprintf_r+0x198>
 8018466:	2340      	movs	r3, #64	; 0x40
 8018468:	eba0 000a 	sub.w	r0, r0, sl
 801846c:	fa03 f000 	lsl.w	r0, r3, r0
 8018470:	9b04      	ldr	r3, [sp, #16]
 8018472:	4303      	orrs	r3, r0
 8018474:	3401      	adds	r4, #1
 8018476:	9304      	str	r3, [sp, #16]
 8018478:	f814 1b01 	ldrb.w	r1, [r4], #1
 801847c:	482c      	ldr	r0, [pc, #176]	; (8018530 <_vfiprintf_r+0x250>)
 801847e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8018482:	2206      	movs	r2, #6
 8018484:	f7e7 febc 	bl	8000200 <memchr>
 8018488:	2800      	cmp	r0, #0
 801848a:	d03f      	beq.n	801850c <_vfiprintf_r+0x22c>
 801848c:	4b29      	ldr	r3, [pc, #164]	; (8018534 <_vfiprintf_r+0x254>)
 801848e:	bb1b      	cbnz	r3, 80184d8 <_vfiprintf_r+0x1f8>
 8018490:	9b03      	ldr	r3, [sp, #12]
 8018492:	3307      	adds	r3, #7
 8018494:	f023 0307 	bic.w	r3, r3, #7
 8018498:	3308      	adds	r3, #8
 801849a:	9303      	str	r3, [sp, #12]
 801849c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801849e:	443b      	add	r3, r7
 80184a0:	9309      	str	r3, [sp, #36]	; 0x24
 80184a2:	e767      	b.n	8018374 <_vfiprintf_r+0x94>
 80184a4:	fb0c 3202 	mla	r2, ip, r2, r3
 80184a8:	460c      	mov	r4, r1
 80184aa:	2001      	movs	r0, #1
 80184ac:	e7a5      	b.n	80183fa <_vfiprintf_r+0x11a>
 80184ae:	2300      	movs	r3, #0
 80184b0:	3401      	adds	r4, #1
 80184b2:	9305      	str	r3, [sp, #20]
 80184b4:	4619      	mov	r1, r3
 80184b6:	f04f 0c0a 	mov.w	ip, #10
 80184ba:	4620      	mov	r0, r4
 80184bc:	f810 2b01 	ldrb.w	r2, [r0], #1
 80184c0:	3a30      	subs	r2, #48	; 0x30
 80184c2:	2a09      	cmp	r2, #9
 80184c4:	d903      	bls.n	80184ce <_vfiprintf_r+0x1ee>
 80184c6:	2b00      	cmp	r3, #0
 80184c8:	d0c5      	beq.n	8018456 <_vfiprintf_r+0x176>
 80184ca:	9105      	str	r1, [sp, #20]
 80184cc:	e7c3      	b.n	8018456 <_vfiprintf_r+0x176>
 80184ce:	fb0c 2101 	mla	r1, ip, r1, r2
 80184d2:	4604      	mov	r4, r0
 80184d4:	2301      	movs	r3, #1
 80184d6:	e7f0      	b.n	80184ba <_vfiprintf_r+0x1da>
 80184d8:	ab03      	add	r3, sp, #12
 80184da:	9300      	str	r3, [sp, #0]
 80184dc:	462a      	mov	r2, r5
 80184de:	4b16      	ldr	r3, [pc, #88]	; (8018538 <_vfiprintf_r+0x258>)
 80184e0:	a904      	add	r1, sp, #16
 80184e2:	4630      	mov	r0, r6
 80184e4:	f3af 8000 	nop.w
 80184e8:	4607      	mov	r7, r0
 80184ea:	1c78      	adds	r0, r7, #1
 80184ec:	d1d6      	bne.n	801849c <_vfiprintf_r+0x1bc>
 80184ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80184f0:	07d9      	lsls	r1, r3, #31
 80184f2:	d405      	bmi.n	8018500 <_vfiprintf_r+0x220>
 80184f4:	89ab      	ldrh	r3, [r5, #12]
 80184f6:	059a      	lsls	r2, r3, #22
 80184f8:	d402      	bmi.n	8018500 <_vfiprintf_r+0x220>
 80184fa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80184fc:	f7ff fcf7 	bl	8017eee <__retarget_lock_release_recursive>
 8018500:	89ab      	ldrh	r3, [r5, #12]
 8018502:	065b      	lsls	r3, r3, #25
 8018504:	f53f af12 	bmi.w	801832c <_vfiprintf_r+0x4c>
 8018508:	9809      	ldr	r0, [sp, #36]	; 0x24
 801850a:	e711      	b.n	8018330 <_vfiprintf_r+0x50>
 801850c:	ab03      	add	r3, sp, #12
 801850e:	9300      	str	r3, [sp, #0]
 8018510:	462a      	mov	r2, r5
 8018512:	4b09      	ldr	r3, [pc, #36]	; (8018538 <_vfiprintf_r+0x258>)
 8018514:	a904      	add	r1, sp, #16
 8018516:	4630      	mov	r0, r6
 8018518:	f000 f880 	bl	801861c <_printf_i>
 801851c:	e7e4      	b.n	80184e8 <_vfiprintf_r+0x208>
 801851e:	bf00      	nop
 8018520:	0801a934 	.word	0x0801a934
 8018524:	0801a954 	.word	0x0801a954
 8018528:	0801a914 	.word	0x0801a914
 801852c:	0801a974 	.word	0x0801a974
 8018530:	0801a97e 	.word	0x0801a97e
 8018534:	00000000 	.word	0x00000000
 8018538:	080182bb 	.word	0x080182bb
 801853c:	0801a97a 	.word	0x0801a97a

08018540 <_printf_common>:
 8018540:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018544:	4616      	mov	r6, r2
 8018546:	4699      	mov	r9, r3
 8018548:	688a      	ldr	r2, [r1, #8]
 801854a:	690b      	ldr	r3, [r1, #16]
 801854c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8018550:	4293      	cmp	r3, r2
 8018552:	bfb8      	it	lt
 8018554:	4613      	movlt	r3, r2
 8018556:	6033      	str	r3, [r6, #0]
 8018558:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801855c:	4607      	mov	r7, r0
 801855e:	460c      	mov	r4, r1
 8018560:	b10a      	cbz	r2, 8018566 <_printf_common+0x26>
 8018562:	3301      	adds	r3, #1
 8018564:	6033      	str	r3, [r6, #0]
 8018566:	6823      	ldr	r3, [r4, #0]
 8018568:	0699      	lsls	r1, r3, #26
 801856a:	bf42      	ittt	mi
 801856c:	6833      	ldrmi	r3, [r6, #0]
 801856e:	3302      	addmi	r3, #2
 8018570:	6033      	strmi	r3, [r6, #0]
 8018572:	6825      	ldr	r5, [r4, #0]
 8018574:	f015 0506 	ands.w	r5, r5, #6
 8018578:	d106      	bne.n	8018588 <_printf_common+0x48>
 801857a:	f104 0a19 	add.w	sl, r4, #25
 801857e:	68e3      	ldr	r3, [r4, #12]
 8018580:	6832      	ldr	r2, [r6, #0]
 8018582:	1a9b      	subs	r3, r3, r2
 8018584:	42ab      	cmp	r3, r5
 8018586:	dc26      	bgt.n	80185d6 <_printf_common+0x96>
 8018588:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801858c:	1e13      	subs	r3, r2, #0
 801858e:	6822      	ldr	r2, [r4, #0]
 8018590:	bf18      	it	ne
 8018592:	2301      	movne	r3, #1
 8018594:	0692      	lsls	r2, r2, #26
 8018596:	d42b      	bmi.n	80185f0 <_printf_common+0xb0>
 8018598:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801859c:	4649      	mov	r1, r9
 801859e:	4638      	mov	r0, r7
 80185a0:	47c0      	blx	r8
 80185a2:	3001      	adds	r0, #1
 80185a4:	d01e      	beq.n	80185e4 <_printf_common+0xa4>
 80185a6:	6823      	ldr	r3, [r4, #0]
 80185a8:	68e5      	ldr	r5, [r4, #12]
 80185aa:	6832      	ldr	r2, [r6, #0]
 80185ac:	f003 0306 	and.w	r3, r3, #6
 80185b0:	2b04      	cmp	r3, #4
 80185b2:	bf08      	it	eq
 80185b4:	1aad      	subeq	r5, r5, r2
 80185b6:	68a3      	ldr	r3, [r4, #8]
 80185b8:	6922      	ldr	r2, [r4, #16]
 80185ba:	bf0c      	ite	eq
 80185bc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80185c0:	2500      	movne	r5, #0
 80185c2:	4293      	cmp	r3, r2
 80185c4:	bfc4      	itt	gt
 80185c6:	1a9b      	subgt	r3, r3, r2
 80185c8:	18ed      	addgt	r5, r5, r3
 80185ca:	2600      	movs	r6, #0
 80185cc:	341a      	adds	r4, #26
 80185ce:	42b5      	cmp	r5, r6
 80185d0:	d11a      	bne.n	8018608 <_printf_common+0xc8>
 80185d2:	2000      	movs	r0, #0
 80185d4:	e008      	b.n	80185e8 <_printf_common+0xa8>
 80185d6:	2301      	movs	r3, #1
 80185d8:	4652      	mov	r2, sl
 80185da:	4649      	mov	r1, r9
 80185dc:	4638      	mov	r0, r7
 80185de:	47c0      	blx	r8
 80185e0:	3001      	adds	r0, #1
 80185e2:	d103      	bne.n	80185ec <_printf_common+0xac>
 80185e4:	f04f 30ff 	mov.w	r0, #4294967295
 80185e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80185ec:	3501      	adds	r5, #1
 80185ee:	e7c6      	b.n	801857e <_printf_common+0x3e>
 80185f0:	18e1      	adds	r1, r4, r3
 80185f2:	1c5a      	adds	r2, r3, #1
 80185f4:	2030      	movs	r0, #48	; 0x30
 80185f6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80185fa:	4422      	add	r2, r4
 80185fc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8018600:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8018604:	3302      	adds	r3, #2
 8018606:	e7c7      	b.n	8018598 <_printf_common+0x58>
 8018608:	2301      	movs	r3, #1
 801860a:	4622      	mov	r2, r4
 801860c:	4649      	mov	r1, r9
 801860e:	4638      	mov	r0, r7
 8018610:	47c0      	blx	r8
 8018612:	3001      	adds	r0, #1
 8018614:	d0e6      	beq.n	80185e4 <_printf_common+0xa4>
 8018616:	3601      	adds	r6, #1
 8018618:	e7d9      	b.n	80185ce <_printf_common+0x8e>
	...

0801861c <_printf_i>:
 801861c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8018620:	7e0f      	ldrb	r7, [r1, #24]
 8018622:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8018624:	2f78      	cmp	r7, #120	; 0x78
 8018626:	4691      	mov	r9, r2
 8018628:	4680      	mov	r8, r0
 801862a:	460c      	mov	r4, r1
 801862c:	469a      	mov	sl, r3
 801862e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8018632:	d807      	bhi.n	8018644 <_printf_i+0x28>
 8018634:	2f62      	cmp	r7, #98	; 0x62
 8018636:	d80a      	bhi.n	801864e <_printf_i+0x32>
 8018638:	2f00      	cmp	r7, #0
 801863a:	f000 80d8 	beq.w	80187ee <_printf_i+0x1d2>
 801863e:	2f58      	cmp	r7, #88	; 0x58
 8018640:	f000 80a3 	beq.w	801878a <_printf_i+0x16e>
 8018644:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8018648:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801864c:	e03a      	b.n	80186c4 <_printf_i+0xa8>
 801864e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8018652:	2b15      	cmp	r3, #21
 8018654:	d8f6      	bhi.n	8018644 <_printf_i+0x28>
 8018656:	a101      	add	r1, pc, #4	; (adr r1, 801865c <_printf_i+0x40>)
 8018658:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801865c:	080186b5 	.word	0x080186b5
 8018660:	080186c9 	.word	0x080186c9
 8018664:	08018645 	.word	0x08018645
 8018668:	08018645 	.word	0x08018645
 801866c:	08018645 	.word	0x08018645
 8018670:	08018645 	.word	0x08018645
 8018674:	080186c9 	.word	0x080186c9
 8018678:	08018645 	.word	0x08018645
 801867c:	08018645 	.word	0x08018645
 8018680:	08018645 	.word	0x08018645
 8018684:	08018645 	.word	0x08018645
 8018688:	080187d5 	.word	0x080187d5
 801868c:	080186f9 	.word	0x080186f9
 8018690:	080187b7 	.word	0x080187b7
 8018694:	08018645 	.word	0x08018645
 8018698:	08018645 	.word	0x08018645
 801869c:	080187f7 	.word	0x080187f7
 80186a0:	08018645 	.word	0x08018645
 80186a4:	080186f9 	.word	0x080186f9
 80186a8:	08018645 	.word	0x08018645
 80186ac:	08018645 	.word	0x08018645
 80186b0:	080187bf 	.word	0x080187bf
 80186b4:	682b      	ldr	r3, [r5, #0]
 80186b6:	1d1a      	adds	r2, r3, #4
 80186b8:	681b      	ldr	r3, [r3, #0]
 80186ba:	602a      	str	r2, [r5, #0]
 80186bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80186c0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80186c4:	2301      	movs	r3, #1
 80186c6:	e0a3      	b.n	8018810 <_printf_i+0x1f4>
 80186c8:	6820      	ldr	r0, [r4, #0]
 80186ca:	6829      	ldr	r1, [r5, #0]
 80186cc:	0606      	lsls	r6, r0, #24
 80186ce:	f101 0304 	add.w	r3, r1, #4
 80186d2:	d50a      	bpl.n	80186ea <_printf_i+0xce>
 80186d4:	680e      	ldr	r6, [r1, #0]
 80186d6:	602b      	str	r3, [r5, #0]
 80186d8:	2e00      	cmp	r6, #0
 80186da:	da03      	bge.n	80186e4 <_printf_i+0xc8>
 80186dc:	232d      	movs	r3, #45	; 0x2d
 80186de:	4276      	negs	r6, r6
 80186e0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80186e4:	485e      	ldr	r0, [pc, #376]	; (8018860 <_printf_i+0x244>)
 80186e6:	230a      	movs	r3, #10
 80186e8:	e019      	b.n	801871e <_printf_i+0x102>
 80186ea:	680e      	ldr	r6, [r1, #0]
 80186ec:	602b      	str	r3, [r5, #0]
 80186ee:	f010 0f40 	tst.w	r0, #64	; 0x40
 80186f2:	bf18      	it	ne
 80186f4:	b236      	sxthne	r6, r6
 80186f6:	e7ef      	b.n	80186d8 <_printf_i+0xbc>
 80186f8:	682b      	ldr	r3, [r5, #0]
 80186fa:	6820      	ldr	r0, [r4, #0]
 80186fc:	1d19      	adds	r1, r3, #4
 80186fe:	6029      	str	r1, [r5, #0]
 8018700:	0601      	lsls	r1, r0, #24
 8018702:	d501      	bpl.n	8018708 <_printf_i+0xec>
 8018704:	681e      	ldr	r6, [r3, #0]
 8018706:	e002      	b.n	801870e <_printf_i+0xf2>
 8018708:	0646      	lsls	r6, r0, #25
 801870a:	d5fb      	bpl.n	8018704 <_printf_i+0xe8>
 801870c:	881e      	ldrh	r6, [r3, #0]
 801870e:	4854      	ldr	r0, [pc, #336]	; (8018860 <_printf_i+0x244>)
 8018710:	2f6f      	cmp	r7, #111	; 0x6f
 8018712:	bf0c      	ite	eq
 8018714:	2308      	moveq	r3, #8
 8018716:	230a      	movne	r3, #10
 8018718:	2100      	movs	r1, #0
 801871a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801871e:	6865      	ldr	r5, [r4, #4]
 8018720:	60a5      	str	r5, [r4, #8]
 8018722:	2d00      	cmp	r5, #0
 8018724:	bfa2      	ittt	ge
 8018726:	6821      	ldrge	r1, [r4, #0]
 8018728:	f021 0104 	bicge.w	r1, r1, #4
 801872c:	6021      	strge	r1, [r4, #0]
 801872e:	b90e      	cbnz	r6, 8018734 <_printf_i+0x118>
 8018730:	2d00      	cmp	r5, #0
 8018732:	d04d      	beq.n	80187d0 <_printf_i+0x1b4>
 8018734:	4615      	mov	r5, r2
 8018736:	fbb6 f1f3 	udiv	r1, r6, r3
 801873a:	fb03 6711 	mls	r7, r3, r1, r6
 801873e:	5dc7      	ldrb	r7, [r0, r7]
 8018740:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8018744:	4637      	mov	r7, r6
 8018746:	42bb      	cmp	r3, r7
 8018748:	460e      	mov	r6, r1
 801874a:	d9f4      	bls.n	8018736 <_printf_i+0x11a>
 801874c:	2b08      	cmp	r3, #8
 801874e:	d10b      	bne.n	8018768 <_printf_i+0x14c>
 8018750:	6823      	ldr	r3, [r4, #0]
 8018752:	07de      	lsls	r6, r3, #31
 8018754:	d508      	bpl.n	8018768 <_printf_i+0x14c>
 8018756:	6923      	ldr	r3, [r4, #16]
 8018758:	6861      	ldr	r1, [r4, #4]
 801875a:	4299      	cmp	r1, r3
 801875c:	bfde      	ittt	le
 801875e:	2330      	movle	r3, #48	; 0x30
 8018760:	f805 3c01 	strble.w	r3, [r5, #-1]
 8018764:	f105 35ff 	addle.w	r5, r5, #4294967295
 8018768:	1b52      	subs	r2, r2, r5
 801876a:	6122      	str	r2, [r4, #16]
 801876c:	f8cd a000 	str.w	sl, [sp]
 8018770:	464b      	mov	r3, r9
 8018772:	aa03      	add	r2, sp, #12
 8018774:	4621      	mov	r1, r4
 8018776:	4640      	mov	r0, r8
 8018778:	f7ff fee2 	bl	8018540 <_printf_common>
 801877c:	3001      	adds	r0, #1
 801877e:	d14c      	bne.n	801881a <_printf_i+0x1fe>
 8018780:	f04f 30ff 	mov.w	r0, #4294967295
 8018784:	b004      	add	sp, #16
 8018786:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801878a:	4835      	ldr	r0, [pc, #212]	; (8018860 <_printf_i+0x244>)
 801878c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8018790:	6829      	ldr	r1, [r5, #0]
 8018792:	6823      	ldr	r3, [r4, #0]
 8018794:	f851 6b04 	ldr.w	r6, [r1], #4
 8018798:	6029      	str	r1, [r5, #0]
 801879a:	061d      	lsls	r5, r3, #24
 801879c:	d514      	bpl.n	80187c8 <_printf_i+0x1ac>
 801879e:	07df      	lsls	r7, r3, #31
 80187a0:	bf44      	itt	mi
 80187a2:	f043 0320 	orrmi.w	r3, r3, #32
 80187a6:	6023      	strmi	r3, [r4, #0]
 80187a8:	b91e      	cbnz	r6, 80187b2 <_printf_i+0x196>
 80187aa:	6823      	ldr	r3, [r4, #0]
 80187ac:	f023 0320 	bic.w	r3, r3, #32
 80187b0:	6023      	str	r3, [r4, #0]
 80187b2:	2310      	movs	r3, #16
 80187b4:	e7b0      	b.n	8018718 <_printf_i+0xfc>
 80187b6:	6823      	ldr	r3, [r4, #0]
 80187b8:	f043 0320 	orr.w	r3, r3, #32
 80187bc:	6023      	str	r3, [r4, #0]
 80187be:	2378      	movs	r3, #120	; 0x78
 80187c0:	4828      	ldr	r0, [pc, #160]	; (8018864 <_printf_i+0x248>)
 80187c2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80187c6:	e7e3      	b.n	8018790 <_printf_i+0x174>
 80187c8:	0659      	lsls	r1, r3, #25
 80187ca:	bf48      	it	mi
 80187cc:	b2b6      	uxthmi	r6, r6
 80187ce:	e7e6      	b.n	801879e <_printf_i+0x182>
 80187d0:	4615      	mov	r5, r2
 80187d2:	e7bb      	b.n	801874c <_printf_i+0x130>
 80187d4:	682b      	ldr	r3, [r5, #0]
 80187d6:	6826      	ldr	r6, [r4, #0]
 80187d8:	6961      	ldr	r1, [r4, #20]
 80187da:	1d18      	adds	r0, r3, #4
 80187dc:	6028      	str	r0, [r5, #0]
 80187de:	0635      	lsls	r5, r6, #24
 80187e0:	681b      	ldr	r3, [r3, #0]
 80187e2:	d501      	bpl.n	80187e8 <_printf_i+0x1cc>
 80187e4:	6019      	str	r1, [r3, #0]
 80187e6:	e002      	b.n	80187ee <_printf_i+0x1d2>
 80187e8:	0670      	lsls	r0, r6, #25
 80187ea:	d5fb      	bpl.n	80187e4 <_printf_i+0x1c8>
 80187ec:	8019      	strh	r1, [r3, #0]
 80187ee:	2300      	movs	r3, #0
 80187f0:	6123      	str	r3, [r4, #16]
 80187f2:	4615      	mov	r5, r2
 80187f4:	e7ba      	b.n	801876c <_printf_i+0x150>
 80187f6:	682b      	ldr	r3, [r5, #0]
 80187f8:	1d1a      	adds	r2, r3, #4
 80187fa:	602a      	str	r2, [r5, #0]
 80187fc:	681d      	ldr	r5, [r3, #0]
 80187fe:	6862      	ldr	r2, [r4, #4]
 8018800:	2100      	movs	r1, #0
 8018802:	4628      	mov	r0, r5
 8018804:	f7e7 fcfc 	bl	8000200 <memchr>
 8018808:	b108      	cbz	r0, 801880e <_printf_i+0x1f2>
 801880a:	1b40      	subs	r0, r0, r5
 801880c:	6060      	str	r0, [r4, #4]
 801880e:	6863      	ldr	r3, [r4, #4]
 8018810:	6123      	str	r3, [r4, #16]
 8018812:	2300      	movs	r3, #0
 8018814:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8018818:	e7a8      	b.n	801876c <_printf_i+0x150>
 801881a:	6923      	ldr	r3, [r4, #16]
 801881c:	462a      	mov	r2, r5
 801881e:	4649      	mov	r1, r9
 8018820:	4640      	mov	r0, r8
 8018822:	47d0      	blx	sl
 8018824:	3001      	adds	r0, #1
 8018826:	d0ab      	beq.n	8018780 <_printf_i+0x164>
 8018828:	6823      	ldr	r3, [r4, #0]
 801882a:	079b      	lsls	r3, r3, #30
 801882c:	d413      	bmi.n	8018856 <_printf_i+0x23a>
 801882e:	68e0      	ldr	r0, [r4, #12]
 8018830:	9b03      	ldr	r3, [sp, #12]
 8018832:	4298      	cmp	r0, r3
 8018834:	bfb8      	it	lt
 8018836:	4618      	movlt	r0, r3
 8018838:	e7a4      	b.n	8018784 <_printf_i+0x168>
 801883a:	2301      	movs	r3, #1
 801883c:	4632      	mov	r2, r6
 801883e:	4649      	mov	r1, r9
 8018840:	4640      	mov	r0, r8
 8018842:	47d0      	blx	sl
 8018844:	3001      	adds	r0, #1
 8018846:	d09b      	beq.n	8018780 <_printf_i+0x164>
 8018848:	3501      	adds	r5, #1
 801884a:	68e3      	ldr	r3, [r4, #12]
 801884c:	9903      	ldr	r1, [sp, #12]
 801884e:	1a5b      	subs	r3, r3, r1
 8018850:	42ab      	cmp	r3, r5
 8018852:	dcf2      	bgt.n	801883a <_printf_i+0x21e>
 8018854:	e7eb      	b.n	801882e <_printf_i+0x212>
 8018856:	2500      	movs	r5, #0
 8018858:	f104 0619 	add.w	r6, r4, #25
 801885c:	e7f5      	b.n	801884a <_printf_i+0x22e>
 801885e:	bf00      	nop
 8018860:	0801a985 	.word	0x0801a985
 8018864:	0801a996 	.word	0x0801a996

08018868 <__sread>:
 8018868:	b510      	push	{r4, lr}
 801886a:	460c      	mov	r4, r1
 801886c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8018870:	f000 f8de 	bl	8018a30 <_read_r>
 8018874:	2800      	cmp	r0, #0
 8018876:	bfab      	itete	ge
 8018878:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801887a:	89a3      	ldrhlt	r3, [r4, #12]
 801887c:	181b      	addge	r3, r3, r0
 801887e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8018882:	bfac      	ite	ge
 8018884:	6563      	strge	r3, [r4, #84]	; 0x54
 8018886:	81a3      	strhlt	r3, [r4, #12]
 8018888:	bd10      	pop	{r4, pc}

0801888a <__swrite>:
 801888a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801888e:	461f      	mov	r7, r3
 8018890:	898b      	ldrh	r3, [r1, #12]
 8018892:	05db      	lsls	r3, r3, #23
 8018894:	4605      	mov	r5, r0
 8018896:	460c      	mov	r4, r1
 8018898:	4616      	mov	r6, r2
 801889a:	d505      	bpl.n	80188a8 <__swrite+0x1e>
 801889c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80188a0:	2302      	movs	r3, #2
 80188a2:	2200      	movs	r2, #0
 80188a4:	f000 f868 	bl	8018978 <_lseek_r>
 80188a8:	89a3      	ldrh	r3, [r4, #12]
 80188aa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80188ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80188b2:	81a3      	strh	r3, [r4, #12]
 80188b4:	4632      	mov	r2, r6
 80188b6:	463b      	mov	r3, r7
 80188b8:	4628      	mov	r0, r5
 80188ba:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80188be:	f000 b817 	b.w	80188f0 <_write_r>

080188c2 <__sseek>:
 80188c2:	b510      	push	{r4, lr}
 80188c4:	460c      	mov	r4, r1
 80188c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80188ca:	f000 f855 	bl	8018978 <_lseek_r>
 80188ce:	1c43      	adds	r3, r0, #1
 80188d0:	89a3      	ldrh	r3, [r4, #12]
 80188d2:	bf15      	itete	ne
 80188d4:	6560      	strne	r0, [r4, #84]	; 0x54
 80188d6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80188da:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80188de:	81a3      	strheq	r3, [r4, #12]
 80188e0:	bf18      	it	ne
 80188e2:	81a3      	strhne	r3, [r4, #12]
 80188e4:	bd10      	pop	{r4, pc}

080188e6 <__sclose>:
 80188e6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80188ea:	f000 b813 	b.w	8018914 <_close_r>
	...

080188f0 <_write_r>:
 80188f0:	b538      	push	{r3, r4, r5, lr}
 80188f2:	4d07      	ldr	r5, [pc, #28]	; (8018910 <_write_r+0x20>)
 80188f4:	4604      	mov	r4, r0
 80188f6:	4608      	mov	r0, r1
 80188f8:	4611      	mov	r1, r2
 80188fa:	2200      	movs	r2, #0
 80188fc:	602a      	str	r2, [r5, #0]
 80188fe:	461a      	mov	r2, r3
 8018900:	f7f3 f9c7 	bl	800bc92 <_write>
 8018904:	1c43      	adds	r3, r0, #1
 8018906:	d102      	bne.n	801890e <_write_r+0x1e>
 8018908:	682b      	ldr	r3, [r5, #0]
 801890a:	b103      	cbz	r3, 801890e <_write_r+0x1e>
 801890c:	6023      	str	r3, [r4, #0]
 801890e:	bd38      	pop	{r3, r4, r5, pc}
 8018910:	20003224 	.word	0x20003224

08018914 <_close_r>:
 8018914:	b538      	push	{r3, r4, r5, lr}
 8018916:	4d06      	ldr	r5, [pc, #24]	; (8018930 <_close_r+0x1c>)
 8018918:	2300      	movs	r3, #0
 801891a:	4604      	mov	r4, r0
 801891c:	4608      	mov	r0, r1
 801891e:	602b      	str	r3, [r5, #0]
 8018920:	f7f3 f9d3 	bl	800bcca <_close>
 8018924:	1c43      	adds	r3, r0, #1
 8018926:	d102      	bne.n	801892e <_close_r+0x1a>
 8018928:	682b      	ldr	r3, [r5, #0]
 801892a:	b103      	cbz	r3, 801892e <_close_r+0x1a>
 801892c:	6023      	str	r3, [r4, #0]
 801892e:	bd38      	pop	{r3, r4, r5, pc}
 8018930:	20003224 	.word	0x20003224

08018934 <_fstat_r>:
 8018934:	b538      	push	{r3, r4, r5, lr}
 8018936:	4d07      	ldr	r5, [pc, #28]	; (8018954 <_fstat_r+0x20>)
 8018938:	2300      	movs	r3, #0
 801893a:	4604      	mov	r4, r0
 801893c:	4608      	mov	r0, r1
 801893e:	4611      	mov	r1, r2
 8018940:	602b      	str	r3, [r5, #0]
 8018942:	f7f3 f9ce 	bl	800bce2 <_fstat>
 8018946:	1c43      	adds	r3, r0, #1
 8018948:	d102      	bne.n	8018950 <_fstat_r+0x1c>
 801894a:	682b      	ldr	r3, [r5, #0]
 801894c:	b103      	cbz	r3, 8018950 <_fstat_r+0x1c>
 801894e:	6023      	str	r3, [r4, #0]
 8018950:	bd38      	pop	{r3, r4, r5, pc}
 8018952:	bf00      	nop
 8018954:	20003224 	.word	0x20003224

08018958 <_isatty_r>:
 8018958:	b538      	push	{r3, r4, r5, lr}
 801895a:	4d06      	ldr	r5, [pc, #24]	; (8018974 <_isatty_r+0x1c>)
 801895c:	2300      	movs	r3, #0
 801895e:	4604      	mov	r4, r0
 8018960:	4608      	mov	r0, r1
 8018962:	602b      	str	r3, [r5, #0]
 8018964:	f7f3 f9cd 	bl	800bd02 <_isatty>
 8018968:	1c43      	adds	r3, r0, #1
 801896a:	d102      	bne.n	8018972 <_isatty_r+0x1a>
 801896c:	682b      	ldr	r3, [r5, #0]
 801896e:	b103      	cbz	r3, 8018972 <_isatty_r+0x1a>
 8018970:	6023      	str	r3, [r4, #0]
 8018972:	bd38      	pop	{r3, r4, r5, pc}
 8018974:	20003224 	.word	0x20003224

08018978 <_lseek_r>:
 8018978:	b538      	push	{r3, r4, r5, lr}
 801897a:	4d07      	ldr	r5, [pc, #28]	; (8018998 <_lseek_r+0x20>)
 801897c:	4604      	mov	r4, r0
 801897e:	4608      	mov	r0, r1
 8018980:	4611      	mov	r1, r2
 8018982:	2200      	movs	r2, #0
 8018984:	602a      	str	r2, [r5, #0]
 8018986:	461a      	mov	r2, r3
 8018988:	f7f3 f9c6 	bl	800bd18 <_lseek>
 801898c:	1c43      	adds	r3, r0, #1
 801898e:	d102      	bne.n	8018996 <_lseek_r+0x1e>
 8018990:	682b      	ldr	r3, [r5, #0]
 8018992:	b103      	cbz	r3, 8018996 <_lseek_r+0x1e>
 8018994:	6023      	str	r3, [r4, #0]
 8018996:	bd38      	pop	{r3, r4, r5, pc}
 8018998:	20003224 	.word	0x20003224

0801899c <memmove>:
 801899c:	4288      	cmp	r0, r1
 801899e:	b510      	push	{r4, lr}
 80189a0:	eb01 0402 	add.w	r4, r1, r2
 80189a4:	d902      	bls.n	80189ac <memmove+0x10>
 80189a6:	4284      	cmp	r4, r0
 80189a8:	4623      	mov	r3, r4
 80189aa:	d807      	bhi.n	80189bc <memmove+0x20>
 80189ac:	1e43      	subs	r3, r0, #1
 80189ae:	42a1      	cmp	r1, r4
 80189b0:	d008      	beq.n	80189c4 <memmove+0x28>
 80189b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80189b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80189ba:	e7f8      	b.n	80189ae <memmove+0x12>
 80189bc:	4402      	add	r2, r0
 80189be:	4601      	mov	r1, r0
 80189c0:	428a      	cmp	r2, r1
 80189c2:	d100      	bne.n	80189c6 <memmove+0x2a>
 80189c4:	bd10      	pop	{r4, pc}
 80189c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80189ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80189ce:	e7f7      	b.n	80189c0 <memmove+0x24>

080189d0 <_realloc_r>:
 80189d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80189d4:	4680      	mov	r8, r0
 80189d6:	4614      	mov	r4, r2
 80189d8:	460e      	mov	r6, r1
 80189da:	b921      	cbnz	r1, 80189e6 <_realloc_r+0x16>
 80189dc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80189e0:	4611      	mov	r1, r2
 80189e2:	f7fe bedf 	b.w	80177a4 <_malloc_r>
 80189e6:	b92a      	cbnz	r2, 80189f4 <_realloc_r+0x24>
 80189e8:	f7fe fe70 	bl	80176cc <_free_r>
 80189ec:	4625      	mov	r5, r4
 80189ee:	4628      	mov	r0, r5
 80189f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80189f4:	f000 f82e 	bl	8018a54 <_malloc_usable_size_r>
 80189f8:	4284      	cmp	r4, r0
 80189fa:	4607      	mov	r7, r0
 80189fc:	d802      	bhi.n	8018a04 <_realloc_r+0x34>
 80189fe:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8018a02:	d812      	bhi.n	8018a2a <_realloc_r+0x5a>
 8018a04:	4621      	mov	r1, r4
 8018a06:	4640      	mov	r0, r8
 8018a08:	f7fe fecc 	bl	80177a4 <_malloc_r>
 8018a0c:	4605      	mov	r5, r0
 8018a0e:	2800      	cmp	r0, #0
 8018a10:	d0ed      	beq.n	80189ee <_realloc_r+0x1e>
 8018a12:	42bc      	cmp	r4, r7
 8018a14:	4622      	mov	r2, r4
 8018a16:	4631      	mov	r1, r6
 8018a18:	bf28      	it	cs
 8018a1a:	463a      	movcs	r2, r7
 8018a1c:	f7fe fe40 	bl	80176a0 <memcpy>
 8018a20:	4631      	mov	r1, r6
 8018a22:	4640      	mov	r0, r8
 8018a24:	f7fe fe52 	bl	80176cc <_free_r>
 8018a28:	e7e1      	b.n	80189ee <_realloc_r+0x1e>
 8018a2a:	4635      	mov	r5, r6
 8018a2c:	e7df      	b.n	80189ee <_realloc_r+0x1e>
	...

08018a30 <_read_r>:
 8018a30:	b538      	push	{r3, r4, r5, lr}
 8018a32:	4d07      	ldr	r5, [pc, #28]	; (8018a50 <_read_r+0x20>)
 8018a34:	4604      	mov	r4, r0
 8018a36:	4608      	mov	r0, r1
 8018a38:	4611      	mov	r1, r2
 8018a3a:	2200      	movs	r2, #0
 8018a3c:	602a      	str	r2, [r5, #0]
 8018a3e:	461a      	mov	r2, r3
 8018a40:	f7f3 f90a 	bl	800bc58 <_read>
 8018a44:	1c43      	adds	r3, r0, #1
 8018a46:	d102      	bne.n	8018a4e <_read_r+0x1e>
 8018a48:	682b      	ldr	r3, [r5, #0]
 8018a4a:	b103      	cbz	r3, 8018a4e <_read_r+0x1e>
 8018a4c:	6023      	str	r3, [r4, #0]
 8018a4e:	bd38      	pop	{r3, r4, r5, pc}
 8018a50:	20003224 	.word	0x20003224

08018a54 <_malloc_usable_size_r>:
 8018a54:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018a58:	1f18      	subs	r0, r3, #4
 8018a5a:	2b00      	cmp	r3, #0
 8018a5c:	bfbc      	itt	lt
 8018a5e:	580b      	ldrlt	r3, [r1, r0]
 8018a60:	18c0      	addlt	r0, r0, r3
 8018a62:	4770      	bx	lr

08018a64 <_init>:
 8018a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a66:	bf00      	nop
 8018a68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018a6a:	bc08      	pop	{r3}
 8018a6c:	469e      	mov	lr, r3
 8018a6e:	4770      	bx	lr

08018a70 <_fini>:
 8018a70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018a72:	bf00      	nop
 8018a74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018a76:	bc08      	pop	{r3}
 8018a78:	469e      	mov	lr, r3
 8018a7a:	4770      	bx	lr
